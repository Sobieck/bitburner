{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hp\":{\"current\":10,\"max\":10},\"skills\":{\"hacking\":300,\"strength\":1,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":1,\"intelligence\":0},\"exp\":{\"hacking\":4967789.31837457,\"strength\":0,\"defense\":0,\"dexterity\":0,\"agility\":0,\"charisma\":0,\"intelligence\":0},\"mults\":{\"hacking_chance\":1.28,\"hacking_speed\":1.28,\"hacking_money\":1.28,\"hacking_grow\":1.5104,\"hacking\":1.28,\"strength\":1.28,\"defense\":1.28,\"dexterity\":1.28,\"agility\":1.28,\"charisma\":1.4336000000000002,\"hacking_exp\":1.28,\"strength_exp\":1.28,\"defense_exp\":1.28,\"dexterity_exp\":1.28,\"agility_exp\":1.28,\"charisma_exp\":1.28,\"company_rep\":1.28,\"faction_rep\":1.28,\"crime_money\":1.28,\"crime_success\":1.28,\"hacknet_node_money\":1.28,\"hacknet_node_purchase_cost\":0.78125,\"hacknet_node_ram_cost\":0.78125,\"hacknet_node_core_cost\":0.78125,\"hacknet_node_level_cost\":0.78125,\"work_money\":1.4336000000000002,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Chongqing\",\"bitNodeN\":3,\"corporation\":null,\"gang\":null,\"bladeburner\":null,\"currentServer\":\"home\",\"factions\":[\"NiteSec\",\"Sector-12\",\"Tian Di Hui\",\"CyberSec\"],\"factionInvitations\":[],\"hacknetNodes\":[],\"has4SData\":false,\"has4SDataTixApi\":true,\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0,\"Company Favor\":0}}},\"hasTixApiAccess\":true,\"hasWseAccount\":true,\"jobs\":{\"Bachman & Associates\":\"Junior Software Engineer\",\"OmniTek Incorporated\":\"Junior Software Engineer\",\"Blade Industries\":\"Software Engineering Intern\",\"NWO\":\"Software Engineering Intern\",\"ECorp\":\"Software Engineering Intern\"},\"karma\":0,\"numPeopleKilled\":0,\"location\":\"ECorp\",\"money\":8256259.97880156,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":1425000000,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":492770213.99972403,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":5333569316.08648,\"total\":8255180.97880156,\"work\":0,\"servers\":-2237684349.107438,\"other\":-5005400000,\"augmentations\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":1425000000,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":492770213.99972403,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":5333569316.08648,\"total\":8255180.97880156,\"work\":0,\"servers\":-2237684349.107438,\"other\":-5005400000,\"augmentations\":0}},\"playtimeSinceLastAug\":102922000,\"playtimeSinceLastBitnode\":102922000,\"lastAugReset\":1690534289110,\"lastNodeReset\":1690534289110,\"purchasedServers\":[\"CLOUD-000\"],\"scriptProdSinceLastAug\":37601828130.47548,\"sleeves\":[],\"sleevesFromCovenant\":0,\"sourceFiles\":{\"ctor\":\"JSONMap\",\"data\":[[1,3],[4,3],[8,2],[3,2]]},\"exploits\":[],\"achievements\":[{\"ID\":\"NS2\",\"unlockedOn\":1686525459069},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1686525759083},{\"ID\":\"WORKOUT\",\"unlockedOn\":1686528279088},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1686532892094},{\"ID\":\"TRAVEL\",\"unlockedOn\":1686563653859},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1686567073861},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1686654552271},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1686667992269},{\"ID\":\"NITESEC\",\"unlockedOn\":1686679931301},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1686687177835},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1686697617844},{\"ID\":\"FROZE\",\"unlockedOn\":1686704316676},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1686746667786},{\"ID\":\"TOR\",\"unlockedOn\":1686746787787},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1686746893212},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1686762613218},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1686764833216},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1686767653216},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1686860173219},{\"ID\":\"30_HACKNET_NODE\",\"unlockedOn\":1686862933218},{\"ID\":\"4S\",\"unlockedOn\":1686863833212},{\"ID\":\"DONATION\",\"unlockedOn\":1687005871880},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1687008391895},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1687017151898},{\"ID\":\"HOSPITALIZED\",\"unlockedOn\":1687131964898},{\"ID\":\"SF1.1\",\"unlockedOn\":1687262446639},{\"ID\":\"MAX_CORES\",\"unlockedOn\":1688063566853},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1688088406853},{\"ID\":\"THE_COVENANT\",\"unlockedOn\":1688429201871},{\"ID\":\"ILLUMINATI\",\"unlockedOn\":1688468232306},{\"ID\":\"SF4.1\",\"unlockedOn\":1688489952298},{\"ID\":\"SCRIPTS_30\",\"unlockedOn\":1688562948355},{\"ID\":\"DISCOUNT\",\"unlockedOn\":1688694948374},{\"ID\":\"RUNNING_SCRIPTS_1000\",\"unlockedOn\":1688720088407},{\"ID\":\"SF8.1\",\"unlockedOn\":1689334420195},{\"ID\":\"CORPORATION\",\"unlockedOn\":1689335320195},{\"ID\":\"CORPORATION_BRIBE\",\"unlockedOn\":1690127753231},{\"ID\":\"SF3.1\",\"unlockedOn\":1690131893170}],\"terminalCommandHistory\":[\"run scripts/coordinator.js \",\"nano data/ramToReserveOnHome.txt \",\"mem scripts/singularity/do-work.js \",\"nano data/ramToReserveOnHome.txt \",\"nano scripts/singularity/do-work\",\"nano scripts/singularity/do-work.js\",\"mem scripts/singularity/do-work\",\"mem scripts/singularity/do-work.js\",\"nano data/ramToReserveOnHome.txt \",\"mem scripts/singularity/do-job.js \",\"nano data/ramToReserveOnHome.txt \",\"mem scripts/stock/get-stock-quotes.js \",\"nano scripts/ramt\",\"nano data/ramToReserveOnHome.txt \",\"mem scripts/stock/invest-in-stocks.js \",\"nano data/latestQuotes.txt \",\"connect n00dles \",\"nano hack.js\",\"run hack.js \",\"rm hack.js \",\"home\",\"ls\",\"ls scripts/tools/ \",\"free\",\"nano data/stockMarketReserveMoney.txt \",\"nano data/latestQuotes.txt \",\"nano stopTrading.txt\",\"rm stopTrading.txt \",\"run scripts/coordinator.js \",\"nano data/corporat\",\"nano data/corporation.txt \",\"run scripts/tools/compare-material-prices.js \",\"nano junk.txt \",\"nano test.js \",\"nano data/corporation.txt \",\"nano test.js \",\"nano data/stockMarketReserveMoney.txt \",\"free\",\"nano data/corporat\",\"nano data/corporation.txt \",\"free\",\"nano data/enviroment.txt \",\"run scripts/hacking/memory-starved-dispatch.js \",\"home\",\"nano data/stock\",\"nano data/stockMarketReserveMoney.txt \",\"home\",\"nano data/stockMarketReserveMoney.txt \",\"run test.js \",\"run scripts/coordinator.js \"],\"lastUpdate\":1690637211203,\"lastSave\":1690637191808,\"totalPlaytime\":4116033000,\"currentWork\":{\"ctor\":\"FactionWork\",\"data\":{\"type\":\"FACTION\",\"singularity\":true,\"cyclesWorked\":315827,\"factionWorkType\":\"hacking\",\"factionName\":\"NiteSec\"}},\"focus\":false,\"entropy\":0,\"identifier\":\"40a77882039c0\"}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"43.3.1.6\",\"isConnectedTo\":true,\"maxRam\":128,\"messages\":[\"hackers-starting-handbook.lit\",\"corporation-management-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"b1t_flum3.exe\",\"fl1ght.exe\",\"BruteSSH.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"Formulas.exe\"],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/tools/delete-all-js.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    \\r\\n    const doNoDeleteFolders = [];\\r\\n\\r\\n    for (const textFile of ns.ls(\\\"home\\\", \\\".js\\\")) {\\r\\n        if(!doNoDeleteFolders.find(x => textFile.startsWith(x))){\\r\\n            ns.rm(textFile);\\r\\n        }\\r\\n    }\\r\\n\\r\\n}\",\"filename\":\"scripts/tools/delete-all-js.js\",\"server\":\"home\"}}],[\"scripts/contracts/do.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"\\r\\n\\r\\nexport async function main(ns) {\\r\\n    const solverRegistry = [\\r\\n        new LzDecompression2Handler(),\\r\\n        new AlgorithmicStockTrading4Handler(),\\r\\n        new AlgorithmicStockTrading3Handler(),\\r\\n        new AlgorithmicStockTrading1Handler(),\\r\\n        new AlgorithmicStockTrading2Handler(),\\r\\n        new SpiralizeMatrixHandler(),\\r\\n        new Encryption1Handler(),\\r\\n        new Encryption2Handler(),\\r\\n    ]\\r\\n\\r\\n    const contracts = JSON.parse(ns.read(thisRoundsContractsFileName));\\r\\n    contracts\\r\\n        .forEach(contract => {\\r\\n            if (contract.attemptsLeft === 10 || contract.attemptsLeft === 5) {\\r\\n                const solver = solverRegistry.find(x => x.type === contract.type);\\r\\n                if (solver) {\\r\\n                    const result = solver.solve(contract.input);\\r\\n                    const success = ns.codingcontract.attempt(result, contract.name, contract.server);\\r\\n                    if (success === \\\"\\\") {\\r\\n                        const failuresContractsFileName = `contracts/failure/${contract.server}-${contract.name}-${contract.type.replaceAll(\\\" \\\", \\\"\\\")}.txt`;\\r\\n\\r\\n                        const saveThis = { contract, wrongResult: result };\\r\\n\\r\\n                        ns.write(failuresContractsFileName, JSON.stringify(saveThis), \\\"W\\\");\\r\\n\\r\\n                        ns.alert(`${contract.name} on ${contract.server} had a problem solving. You need to figure this out. Type: ${contract.type}`);\\r\\n                    } else {\\r\\n                        ns.toast(`Contract completed: ${success} Type: ${contract.type}`, \\\"success\\\", null);\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        });\\r\\n}\\r\\n\\r\\nconst thisRoundsContractsFileName = \\\"data/contracts.txt\\\";\\r\\n\\r\\nclass LzDecompression2Handler {\\r\\n    type = 'Compression II: LZ Decompression';\\r\\n\\r\\n    solve(input) {\\r\\n        return this.lzDecompression(input);\\r\\n    }\\r\\n\\r\\n    /// all need to be worked on in tests. These are just copies.\\r\\n    lzDecompression(stringToDecode) {\\r\\n        let decompressedString = '';\\r\\n        let startOfNextChunk = 0\\r\\n        let nextSectionCompressed = false;\\r\\n\\r\\n\\r\\n        while (startOfNextChunk < stringToDecode.length) {\\r\\n            const chunkLength = Number(stringToDecode[startOfNextChunk]);\\r\\n\\r\\n\\r\\n            if (chunkLength === 0) {\\r\\n                startOfNextChunk++;\\r\\n                nextSectionCompressed = !nextSectionCompressed;\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            if (nextSectionCompressed) {\\r\\n                const nextCharacterInEncoded = parseInt(stringToDecode[startOfNextChunk + 1]);\\r\\n\\r\\n                const placesBack = nextCharacterInEncoded;\\r\\n                const startText = decompressedString.length - placesBack;\\r\\n                const endOfText = startText + chunkLength;\\r\\n\\r\\n                if (chunkLength <= nextCharacterInEncoded) {\\r\\n                    decompressedString += decompressedString.slice(startText, endOfText);\\r\\n                } else {\\r\\n                    let nextChunk = \\\"\\\";\\r\\n                    const partialChunk = decompressedString.slice(startText, endOfText);\\r\\n\\r\\n                    while (nextChunk.length < chunkLength) {\\r\\n                        if (nextChunk.length + partialChunk.length > chunkLength) {\\r\\n                            const howMuchLeftInChunk = chunkLength - nextChunk.length;\\r\\n                            nextChunk += partialChunk.slice(0, howMuchLeftInChunk)\\r\\n                        } else {\\r\\n                            nextChunk += partialChunk;\\r\\n                        }\\r\\n                    }\\r\\n\\r\\n                    decompressedString += nextChunk;\\r\\n                }\\r\\n\\r\\n                startOfNextChunk += 2;\\r\\n                nextSectionCompressed = false;\\r\\n            } else {\\r\\n                const startText = startOfNextChunk + 1;\\r\\n                const endOfText = startText + chunkLength;\\r\\n                decompressedString += stringToDecode.slice(startText, endOfText);\\r\\n                startOfNextChunk = endOfText;\\r\\n                nextSectionCompressed = true;\\r\\n            }\\r\\n        }\\r\\n\\r\\n\\r\\n        return decompressedString;\\r\\n    }\\r\\n}\\r\\n\\r\\nclass AlgorithmicStockTrading1Handler {\\r\\n    type = 'Algorithmic Stock Trader I';\\r\\n    solve(input) {\\r\\n        let maxNumberOfTrades = 1;\\r\\n        const stockPricesByDay = input;\\r\\n\\r\\n        if (stockPricesByDay.length < maxNumberOfTrades) {\\r\\n            maxNumberOfTrades = stockPricesByDay.length;\\r\\n        }\\r\\n\\r\\n        return new AlgorithmicStockTrading4Handler().tradeStock(maxNumberOfTrades, stockPricesByDay);;\\r\\n    }\\r\\n}\\r\\n\\r\\nclass AlgorithmicStockTrading2Handler {\\r\\n    type = 'Algorithmic Stock Trader II';\\r\\n    solve(input) {\\r\\n        let maxNumberOfTrades = input.length;\\r\\n        const stockPricesByDay = input;\\r\\n\\r\\n        if (stockPricesByDay.length < maxNumberOfTrades) {\\r\\n            maxNumberOfTrades = stockPricesByDay.length;\\r\\n        }\\r\\n\\r\\n        return new AlgorithmicStockTrading4Handler().tradeStock(maxNumberOfTrades, stockPricesByDay);;\\r\\n    }\\r\\n}\\r\\n\\r\\nclass AlgorithmicStockTrading3Handler {\\r\\n    type = 'Algorithmic Stock Trader III';\\r\\n    solve(input) {\\r\\n        let maxNumberOfTrades = 2;\\r\\n        const stockPricesByDay = input;\\r\\n\\r\\n        if (stockPricesByDay.length < maxNumberOfTrades) {\\r\\n            maxNumberOfTrades = stockPricesByDay.length;\\r\\n        }\\r\\n\\r\\n        return new AlgorithmicStockTrading4Handler().tradeStock(maxNumberOfTrades, stockPricesByDay);;\\r\\n    }\\r\\n}\\r\\n\\r\\nclass AlgorithmicStockTrading4Handler {\\r\\n    type = 'Algorithmic Stock Trader IV';\\r\\n\\r\\n    solve(input) {\\r\\n        let maxNumberOfTrades = input[0];\\r\\n        const stockPricesByDay = input[1];\\r\\n\\r\\n        if (stockPricesByDay.length < maxNumberOfTrades) {\\r\\n            maxNumberOfTrades = stockPricesByDay.length;\\r\\n        }\\r\\n\\r\\n        return this.tradeStock(maxNumberOfTrades, stockPricesByDay);;\\r\\n    }\\r\\n\\r\\n    tradeStock(maxNumberOfTrades, stockPricesByDay) {\\r\\n        if (maxNumberOfTrades === 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        let profitsPerTransaction = []\\r\\n\\r\\n        for (let i = stockPricesByDay.length - 1; i >= 1; i--) {\\r\\n            const priceToSeeIfHasNoVolitility = stockPricesByDay[i];\\r\\n\\r\\n            const yesterdaysPrice = stockPricesByDay[i - 1]\\r\\n            const tomorrowsPrice = stockPricesByDay[i + 1]\\r\\n\\r\\n            if (\\r\\n                (yesterdaysPrice <= priceToSeeIfHasNoVolitility && priceToSeeIfHasNoVolitility <= tomorrowsPrice) || // rising prices filter\\r\\n                (!tomorrowsPrice && yesterdaysPrice >= priceToSeeIfHasNoVolitility) || // end price\\r\\n                (yesterdaysPrice >= priceToSeeIfHasNoVolitility && priceToSeeIfHasNoVolitility >= tomorrowsPrice)) { // falling price filter\\r\\n                stockPricesByDay.splice(i, 1);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        for (let i = 0; i < stockPricesByDay.length; i++) {\\r\\n            const price = stockPricesByDay[i];\\r\\n            const potentialBuyPrice = stockPricesByDay[i - 1];\\r\\n            let potentialProfit = 0;\\r\\n\\r\\n            if (potentialBuyPrice) {\\r\\n                potentialProfit = price - potentialBuyPrice;\\r\\n            }\\r\\n\\r\\n            if (potentialProfit < 0) {\\r\\n                potentialProfit = 0;\\r\\n            }\\r\\n\\r\\n\\r\\n            profitsPerTransaction.push({ price, potentialProfit });\\r\\n        }\\r\\n\\r\\n        if (maxNumberOfTrades >= profitsPerTransaction.filter(x => x.potentialProfit > 0).length) {\\r\\n            return profitsPerTransaction\\r\\n                .reduce((acc, x) => acc + x.potentialProfit, 0);\\r\\n        }\\r\\n\\r\\n        const minProfit = Math.min(...profitsPerTransaction.filter(x => x.potentialProfit !== 0).map(x => x.potentialProfit));\\r\\n        const countOfMinProfits = profitsPerTransaction.filter(x => x.potentialProfit === minProfit).length;\\r\\n        const maxPrice = Math.max(...stockPricesByDay);\\r\\n        const arraysToWorkWith = [];\\r\\n\\r\\n        for (let i = 0; i < profitsPerTransaction.length; i++) {\\r\\n            const profitPerTranaction = profitsPerTransaction[i];\\r\\n\\r\\n            if (profitPerTranaction.potentialProfit === minProfit) {\\r\\n\\r\\n                const copyOfProfitsPerTransaction = profitsPerTransaction.map(x => x)\\r\\n                if (profitPerTranaction.price === maxPrice) {\\r\\n                    copyOfProfitsPerTransaction.splice(i - 1, 1);\\r\\n                } else {\\r\\n                    copyOfProfitsPerTransaction.splice(i, 1); // if there is a bigger price in the future, splice sell price. \\r\\n                }\\r\\n\\r\\n                arraysToWorkWith.push(copyOfProfitsPerTransaction.map(x => x.price));\\r\\n            }\\r\\n\\r\\n            if (arraysToWorkWith.length === countOfMinProfits) {\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        const potentialProfitsForAllTrades = []\\r\\n        for (const newArrayOfPrices of arraysToWorkWith) {\\r\\n            potentialProfitsForAllTrades.push(this.tradeStock(maxNumberOfTrades, newArrayOfPrices))\\r\\n        }\\r\\n\\r\\n        return Math.max(...potentialProfitsForAllTrades);\\r\\n\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\nclass SpiralizeMatrixHandler {\\r\\n    type = \\\"Spiralize Matrix\\\";\\r\\n\\r\\n    solve(matrix) {\\r\\n        return this.solveRecursively(JSON.parse(JSON.stringify(matrix)));\\r\\n    }\\r\\n\\r\\n    solveRecursively(matrix, spiralOrderResult = []) {\\r\\n\\r\\n        if (matrix.length === 0) {\\r\\n            return spiralOrderResult;\\r\\n        }\\r\\n\\r\\n        for (let i = 0; i < matrix.length; i++) {\\r\\n            if (i === 0 || i === matrix.length - 1) {\\r\\n                let rowToEmpty = matrix[i];\\r\\n\\r\\n                if (i === matrix.length - 1 && i !== 0) {\\r\\n                    rowToEmpty.reverse()\\r\\n                }\\r\\n\\r\\n                for (let x = 0; x < rowToEmpty.length; x++) {\\r\\n                    const number = rowToEmpty[x];\\r\\n                    \\r\\n                    spiralOrderResult.push(number);\\r\\n                }\\r\\n\\r\\n                rowToEmpty.length = 0\\r\\n            } else {\\r\\n                let rowBeingUsed = matrix[i];\\r\\n                const number = rowBeingUsed.pop()\\r\\n\\r\\n                if(number){\\r\\n                    spiralOrderResult.push(number);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n\\r\\n        for (let i = matrix.length - 1; i > -1; i--) {\\r\\n            if (matrix[i].length === 0) {\\r\\n                matrix.splice(i, 1);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        for (let i = matrix.length - 1; i > -1; i--) {\\r\\n            const row = matrix[i];\\r\\n            row.reverse();\\r\\n            spiralOrderResult.push(row.pop());\\r\\n            row.reverse();\\r\\n        }\\r\\n\\r\\n        return this.solveRecursively(matrix, spiralOrderResult)\\r\\n    }\\r\\n}\\r\\n\\r\\nclass Encryption1Handler {\\r\\n    type = 'Encryption I: Caesar Cipher';\\r\\n\\r\\n    solve([string, shift]) {\\r\\n\\r\\n        let returnString = \\\"\\\";\\r\\n\\r\\n        if (string) {\\r\\n            for (const character of string) {\\r\\n                if (character === \\\" \\\") {\\r\\n                    returnString += \\\" \\\";\\r\\n                }\\r\\n                else {\\r\\n                    const charCode = character.charCodeAt(0);\\r\\n\\r\\n                    if (charCode) {\\r\\n                        let newCharCode = charCode - shift;\\r\\n\\r\\n                        if (newCharCode < 65) {\\r\\n                            const amountLessThan65 = 65 - newCharCode;\\r\\n                            newCharCode = 91 - amountLessThan65;\\r\\n                        }\\r\\n\\r\\n                        returnString += String.fromCharCode(newCharCode);\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return returnString;\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\nclass Encryption2Handler {\\r\\n    type = 'Encryption II: Vigenère Cipher';\\r\\n\\r\\n    solve([plainText, key]) {\\r\\n\\r\\n        let encryptedText = \\\"\\\";\\r\\n\\r\\n        if(plainText){\\r\\n            let keyIndex = 0;\\r\\n\\r\\n            for (let i = 0; i < plainText.length; i++) {\\r\\n                const plainTextCharacter = plainText[i];\\r\\n\\r\\n                if(plainTextCharacter === \\\" \\\"){\\r\\n                    encryptedText += \\\" \\\";\\r\\n                } else {\\r\\n                    const keyCharCode = key[keyIndex].charCodeAt(0);\\r\\n                    const shift = keyCharCode - 65;\\r\\n\\r\\n                    const plainTextCode = plainTextCharacter.charCodeAt(0);\\r\\n                    let encryptedCharacterCode = plainTextCode + shift;\\r\\n\\r\\n                    if (encryptedCharacterCode > 90) {\\r\\n                        const amountMoreThan91 = encryptedCharacterCode - 91;\\r\\n                        encryptedCharacterCode = amountMoreThan91 + 65;\\r\\n                    }\\r\\n\\r\\n                    encryptedText += String.fromCharCode(encryptedCharacterCode);\\r\\n                }\\r\\n\\r\\n                \\r\\n                keyIndex++;\\r\\n                if(keyIndex >= key.length){\\r\\n                    keyIndex = 0;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return encryptedText;\\r\\n    }\\r\\n}\",\"filename\":\"scripts/contracts/do.js\",\"server\":\"home\"}}],[\"scripts/contracts/get.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// let savedContractsFileNameForHuman;\\r\\n\\r\\nconst thisRoundsContractsFileName = \\\"data/contracts.txt\\\"; \\r\\n\\r\\nexport async function main(ns) {\\r\\n    const allContracts = [];\\r\\n\\r\\n    JSON\\r\\n        .parse(ns.read('../../data/enviroment.txt'))\\r\\n        .map(server => {\\r\\n            const hostName = server.name;\\r\\n            ns\\r\\n                .ls(hostName)\\r\\n                .filter(file => file.endsWith('.cct'))\\r\\n                .map(contract => {\\r\\n                    const cont = new Contract(\\r\\n                        hostName,\\r\\n                        contract,\\r\\n                        ns.codingcontract.getContractType(contract, hostName),\\r\\n                        ns.codingcontract.getNumTriesRemaining(contract, hostName)\\r\\n                    );\\r\\n\\r\\n                    allContracts.push(cont);\\r\\n                });\\r\\n        });\\r\\n    \\r\\n\\r\\n    ns.rm(thisRoundsContractsFileName);\\r\\n    ns.write(thisRoundsContractsFileName, JSON.stringify(allContracts), \\\"W\\\");\\r\\n}\\r\\n\\r\\nclass Contract {\\r\\n    constructor(server, name, type, attemptsLeft, input, description) {\\r\\n        this.server = server;\\r\\n        this.name = name;\\r\\n        this.type = type;\\r\\n        this.attemptsLeft = attemptsLeft;\\r\\n        this.input = input;\\r\\n        this.description = description;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"scripts/contracts/get.js\",\"server\":\"home\"}}],[\"scripts/contracts/populate-description.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n\\r\\n    const contracts = JSON.parse(ns.read(thisRoundsContractsFileName))\\r\\n\\r\\n    for (const contract of contracts) {\\r\\n        const hostName = contract.server;\\r\\n        const contractName = contract.name;\\r\\n        contract.description = ns.codingcontract.getDescription(contractName, hostName);\\r\\n    }\\r\\n\\r\\n    ns.rm(thisRoundsContractsFileName);\\r\\n    ns.write(thisRoundsContractsFileName, JSON.stringify(contracts), \\\"W\\\");\\r\\n}\\r\\n\\r\\nconst thisRoundsContractsFileName = \\\"data/contracts.txt\\\"; \",\"filename\":\"scripts/contracts/populate-description.js\",\"server\":\"home\"}}],[\"scripts/contracts/populate-input.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n\\r\\n    const contracts = JSON.parse(ns.read(thisRoundsContractsFileName))\\r\\n\\r\\n    for (const contract of contracts) {\\r\\n        const hostName = contract.server;\\r\\n        const contractName = contract.name;\\r\\n        contract.input = ns.codingcontract.getData(contractName, hostName);\\r\\n    }\\r\\n\\r\\n    ns.rm(thisRoundsContractsFileName);\\r\\n    ns.write(thisRoundsContractsFileName, JSON.stringify(contracts), \\\"W\\\");\\r\\n}\\r\\n\\r\\nconst thisRoundsContractsFileName = \\\"data/contracts.txt\\\"; \",\"filename\":\"scripts/contracts/populate-input.js\",\"server\":\"home\"}}],[\"scripts/contracts/save-contracts-for-thomas.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const thisRoundsContractsFileName = \\\"data/contracts.txt\\\"; \\r\\nlet savedContractsFileNameForHuman;\\r\\n\\r\\nexport async function main(ns) {\\r\\n\\r\\n    let savedContracts;\\r\\n\\r\\n    const contractsFromThisRound = JSON.parse(ns.read(thisRoundsContractsFileName));\\r\\n\\r\\n    if(savedContractsFileNameForHuman){\\r\\n        savedContracts = JSON.parse(ns.read(savedContractsFileNameForHuman));\\r\\n    }\\r\\n\\r\\n    if (!savedContracts || contractsFromThisRound.length === 0 && savedContracts.length > 0){\\r\\n        const now = new Date();\\r\\n        savedContractsFileNameForHuman = `contracts/${now.toISOString()}.txt`\\r\\n    }\\r\\n\\r\\n    ns.rm(savedContractsFileNameForHuman);\\r\\n    ns.write(savedContractsFileNameForHuman, JSON.stringify(contractsFromThisRound), \\\"W\\\");\\r\\n}\",\"filename\":\"scripts/contracts/save-contracts-for-thomas.js\",\"server\":\"home\"}}],[\"scripts/corporations/start-company.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    if(ns.corporation.hasCorporation()){\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    const moneyOnHome = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n\\r\\n    if(moneyOnHome > 200_000_000_000){\\r\\n        ns.corporation.createCorporation(\\\"Gidget's Keiretsu\\\", true)\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n\",\"filename\":\"scripts/corporations/start-company.js\",\"server\":\"home\"}}],[\"scripts/hacking/advanced-dispatch.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n\\r\\n    const nameOfrecordOfWhoIsBeingHacked = 'data/recordOfWhoIsBeingHacked.txt';\\r\\n    const batchQueuesFileName = \\\"data/batchQueue.txt\\\";\\r\\n\\r\\n    const hackScript = 'scripts/hacking/hack-until-worked.js';\\r\\n    const growScript = 'scripts/hacking/grow.js';\\r\\n    const weakenScript = 'scripts/hacking/weaken.js';\\r\\n\\r\\n    let memoryLimited = false;\\r\\n    if(ns.fileExists('data/ramObservations.txt') || ns.fileExists('buyOrUpgradeServerFlag.txt')){\\r\\n        memoryLimited = true;\\r\\n    }\\r\\n\\r\\n    const homeMemoryLimitations = JSON.parse(ns.read(\\\"data/ramToReserveOnHome.txt\\\"));\\r\\n\\r\\n    let batchTargets = [];\\r\\n\\r\\n    if (ns.fileExists(batchQueuesFileName)) {\\r\\n        const batchQueue = JSON.parse(ns.read(batchQueuesFileName));\\r\\n        batchTargets = batchQueue.map(x => x[0]);\\r\\n    }\\r\\n\\r\\n    let recordOfWhoIsBeingHacked = new Map();\\r\\n\\r\\n    if (ns.fileExists(nameOfrecordOfWhoIsBeingHacked)) {\\r\\n        recordOfWhoIsBeingHacked = new Map(JSON.parse(ns.read(nameOfrecordOfWhoIsBeingHacked)));\\r\\n    }\\r\\n\\r\\n    for (const recordKey of recordOfWhoIsBeingHacked.keys()) {\\r\\n        const record = recordOfWhoIsBeingHacked.get(recordKey);\\r\\n        if (record.pid === 0) {\\r\\n            recordOfWhoIsBeingHacked.delete(recordKey);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    const enviroment = JSON.parse(ns.read(\\\"data/enviroment.txt\\\"));\\r\\n\\r\\n    const allHackedMachines = enviroment\\r\\n        .filter(x => x.server.hasAdminRights);\\r\\n\\r\\n    let allMachinesByOrderOfValue = allHackedMachines\\r\\n        .filter(x => !x.server.purchasedByPlayer && !batchTargets.includes(x.name) && x.server.moneyMax > 0)\\r\\n        .sort((a, b) => b.server.moneyMax - a.server.moneyMax)\\r\\n        .map(x => new HackedRecord(\\r\\n            x.name,\\r\\n            x.server.moneyMax,\\r\\n            x.server.minDifficulty,\\r\\n            x.server.hackDifficulty,\\r\\n            x.server.moneyAvailable,\\r\\n        ))\\r\\n\\r\\n    if(memoryLimited){\\r\\n        allMachinesByOrderOfValue = allMachinesByOrderOfValue.slice(0, 15);\\r\\n    }\\r\\n\\r\\n    cleanProcessesAttackingBatchTarget(ns, recordOfWhoIsBeingHacked, batchTargets);\\r\\n    \\r\\n    cleanRecordOfWhoIsBeingHacked(ns, recordOfWhoIsBeingHacked);\\r\\n\\r\\n    const machinesNextInQueueToHack = getMachinesToHack(allMachinesByOrderOfValue, recordOfWhoIsBeingHacked, ns);\\r\\n\\r\\n    const hackQueue = [];\\r\\n    const growAndWeakenQueue = [];\\r\\n\\r\\n    machinesNextInQueueToHack.forEach(machineInQuestion => {\\r\\n        if (machineInQuestion.needsWeakening() || machineInQuestion.needsGrowing()) {\\r\\n            growAndWeakenQueue.push(machineInQuestion);\\r\\n        } else {\\r\\n            hackQueue.push(machineInQuestion);\\r\\n        }\\r\\n    });\\r\\n\\r\\n    const ramNeededForOneHackThread = ns.getScriptRam(hackScript);\\r\\n\\r\\n    hackQueue.forEach(target => {\\r\\n\\r\\n        let numberOfThreads = Math.ceil(ns.hackAnalyzeThreads(target.name, target.moneyAvailable));\\r\\n        const ramNeeded = ramNeededForOneHackThread * numberOfThreads;\\r\\n        let machineToRunOn = getMachineWithEnoughRam(ns, ramNeeded, enviroment, homeMemoryLimitations);\\r\\n\\r\\n        if (machineToRunOn && numberOfThreads > 0) {\\r\\n            ns.scp(hackScript, machineToRunOn.hostname);\\r\\n            const pid = ns.exec(hackScript, machineToRunOn.hostname, numberOfThreads, target.name);\\r\\n            if (pid !== 0) {\\r\\n                target.hacking();\\r\\n                target.machineRunningOn = machineToRunOn.hostname;\\r\\n                target.pid = pid;\\r\\n                recordOfWhoIsBeingHacked.set(target.name, target);\\r\\n            }\\r\\n        }\\r\\n    });\\r\\n\\r\\n\\r\\n    const ramNeededForWeaken = ns.getScriptRam(weakenScript);\\r\\n    const ramNeededForGrow = ns.getScriptRam(growScript);\\r\\n    growAndWeakenQueue.map(target => {\\r\\n        let machineToRunOn;\\r\\n        let threadsNeeded;\\r\\n        let script;\\r\\n\\r\\n        if (target.needsGrowing()) {\\r\\n            target.growing();\\r\\n\\r\\n            script = growScript;\\r\\n            const serverToHack = getServer(ns, target.name, homeMemoryLimitations);\\r\\n            const player = ns.getPlayer();\\r\\n\\r\\n            if (ns.fileExists('Formulas.exe')) {\\r\\n                threadsNeeded = Math.ceil(ns.formulas.hacking.growThreads(serverToHack, player, serverToHack.moneyMax, 1));\\r\\n            } else {\\r\\n                threadsNeeded = Math.ceil(ns.hackAnalyzeThreads(target.name, target.moneyAvailable)) * 5;\\r\\n\\r\\n                if (threadsNeeded === 0) {\\r\\n                    threadsNeeded = 5000;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            machineToRunOn = getMachineWithEnoughRam(ns, threadsNeeded * ramNeededForGrow, enviroment, homeMemoryLimitations);\\r\\n\\r\\n            if (!machineToRunOn) {\\r\\n                [threadsNeeded, machineToRunOn] = getMachineWithNumberOfThreads(ns, enviroment, threadsNeeded, ramNeededForGrow, homeMemoryLimitations);\\r\\n            }\\r\\n\\r\\n            if (machineToRunOn && machineToRunOn.cpuCores > 1 && ns.fileExists('Formulas.exe')) {\\r\\n                threadsNeeded = Math.ceil(ns.formulas.hacking.growThreads(serverToHack, player, serverToHack.moneyMax, machineToRunOn.cpuCores));\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (target.needsWeakening()) {\\r\\n            target.weakening();\\r\\n\\r\\n            script = weakenScript;\\r\\n            const amountToWeaken = target.hackDifficulty - target.minDifficulty;\\r\\n\\r\\n            threadsNeeded = getNumberOfThreadsToWeaken(ns, 1, amountToWeaken);\\r\\n\\r\\n            machineToRunOn = getMachineWithEnoughRam(ns, threadsNeeded * ramNeededForWeaken, enviroment, homeMemoryLimitations);\\r\\n\\r\\n            if (!machineToRunOn) {\\r\\n                [threadsNeeded, machineToRunOn] = getMachineWithNumberOfThreads(ns, enviroment, threadsNeeded, ramNeededForWeaken, homeMemoryLimitations);\\r\\n            }\\r\\n\\r\\n            if (machineToRunOn && machineToRunOn.cpuCores > 1) {\\r\\n                threadsNeeded = getNumberOfThreadsToWeaken(ns, machineToRunOn.cpuCores, amountToWeaken);\\r\\n            }\\r\\n        }\\r\\n\\r\\n\\r\\n\\r\\n        if (machineToRunOn && threadsNeeded > 0) {\\r\\n            ns.scp(script, machineToRunOn.hostname);\\r\\n            const pid = ns.exec(script, machineToRunOn.hostname, threadsNeeded, target.name);\\r\\n\\r\\n            if (pid !== 0) {\\r\\n                target.machineRunningOn = machineToRunOn.hostname;\\r\\n                target.pid = pid;\\r\\n\\r\\n                recordOfWhoIsBeingHacked.set(target.name, target);\\r\\n            }\\r\\n        }\\r\\n    });\\r\\n\\r\\n    ns.rm(nameOfrecordOfWhoIsBeingHacked);\\r\\n    ns.write(nameOfrecordOfWhoIsBeingHacked, JSON.stringify(Array.from(recordOfWhoIsBeingHacked.entries()), \\\"W\\\"));\\r\\n\\r\\n    function cleanProcessesAttackingBatchTarget(ns, recordOfWhoIsBeingHacked, batchTargets) {\\r\\n        for (const machineHackin of recordOfWhoIsBeingHacked) {\\r\\n            const whoTheyHackin = machineHackin[0];\\r\\n\\r\\n            if (batchTargets.includes(whoTheyHackin)) {\\r\\n                ns.kill(recordOfWhoIsBeingHacked.get(whoTheyHackin).pid);\\r\\n                recordOfWhoIsBeingHacked.delete(whoTheyHackin);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction getMachineWithNumberOfThreads(ns, enviroment, threads, ramCostPerThread, homeMemoryLimitations) {\\r\\n    let machineToRunOn;\\r\\n    const buyOrUpgradeServerFlag = 'buyOrUpgradeServerFlag.txt';\\r\\n    let originalAmountNeeded = ramCostPerThread * threads;\\r\\n\\r\\n    let globalMaxAmountNeeded = 0;\\r\\n\\r\\n    if (ns.fileExists(buyOrUpgradeServerFlag)) {\\r\\n        globalMaxAmountNeeded = JSON.parse(ns.read(buyOrUpgradeServerFlag));\\r\\n    }\\r\\n\\r\\n    if (originalAmountNeeded > globalMaxAmountNeeded) {\\r\\n        globalMaxAmountNeeded = originalAmountNeeded;\\r\\n        ns.rm(buyOrUpgradeServerFlag);\\r\\n        ns.write(buyOrUpgradeServerFlag, globalMaxAmountNeeded, \\\"W\\\");\\r\\n    }\\r\\n\\r\\n    while (threads > 0 && !machineToRunOn) {\\r\\n        threads--;\\r\\n\\r\\n        machineToRunOn = getMachineWithEnoughRam(ns, threads * ramCostPerThread, enviroment, homeMemoryLimitations)\\r\\n    }\\r\\n\\r\\n    return [threads, machineToRunOn];\\r\\n}\\r\\n\\r\\nfunction getMachineWithEnoughRam(ns, ramNeeded, enviroment, homeMemoryLimitations) {\\r\\n    let machineToRunOn;\\r\\n\\r\\n    const allHackableMachines = enviroment\\r\\n        .filter(x => x.server.hasAdminRights);\\r\\n\\r\\n    const homeServer = getServer(ns, \\\"home\\\", homeMemoryLimitations);\\r\\n\\r\\n    allHackableMachines.push({ name: \\\"home\\\", server: homeServer })\\r\\n\\r\\n    const machinesWithRamAvailable = allHackableMachines\\r\\n        .filter(x => x.server.ramUsed < x.server.maxRam && x.server.maxRam !== 0);\\r\\n\\r\\n    const serversWithEnoughRam = machinesWithRamAvailable\\r\\n        .filter(x => (x.server.maxRam - x.server.ramUsed) > ramNeeded)\\r\\n        .sort((b, a) => b.server.maxRam - a.server.maxRam);\\r\\n\\r\\n    for (const potentialServerToRun of serversWithEnoughRam) {\\r\\n        const server = getServer(ns, potentialServerToRun.name, homeMemoryLimitations);\\r\\n        const freeRam = server.maxRam - server.ramUsed;\\r\\n        if (freeRam > ramNeeded) {\\r\\n            machineToRunOn = server;\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    return machineToRunOn;\\r\\n}\\r\\n\\r\\n\\r\\nfunction getServer(ns, serverName, homeMemoryLimitations) {\\r\\n    const server = ns.getServer(serverName);\\r\\n\\r\\n    if (serverName === \\\"home\\\") {\\r\\n\\r\\n        let ramToReserve = homeMemoryLimitations.ramToReserve;\\r\\n\\r\\n        if(server.maxRam < ramToReserve){\\r\\n            ramToReserve = homeMemoryLimitations.ramToReserveInLimitedEnvironment;\\r\\n        }\\r\\n\\r\\n        server.maxRam -= ramToReserve;\\r\\n        server.ramUsed -= ramToReserve;\\r\\n\\r\\n        if (server.ramUsed < 0) {\\r\\n            server.ramUsed = 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    return server;\\r\\n}\\r\\n\\r\\nfunction getMachinesToHack(hackableMachinesInTheEnvironment, recordOfWhoIsBeingHacked, ns) {\\r\\n    const machinesNextInQueueToHack = [];\\r\\n    const namesOfMachinesBeingHacked = Array.from(recordOfWhoIsBeingHacked.keys());\\r\\n\\r\\n    for (const hackableMachine of hackableMachinesInTheEnvironment) {\\r\\n        if (!namesOfMachinesBeingHacked.includes(hackableMachine.name)) {\\r\\n            machinesNextInQueueToHack.push(hackableMachine);\\r\\n        } else {\\r\\n            const recordOfHackin = recordOfWhoIsBeingHacked.get(hackableMachine.name);\\r\\n            const moneyChange = recordOfHackin.moneyAvailable - hackableMachine.moneyAvailable;\\r\\n            const difficultyChange = recordOfHackin.hackDifficulty - hackableMachine.hackDifficulty;\\r\\n\\r\\n            if (moneyChange !== 0 || difficultyChange !== 0) {\\r\\n                machinesNextInQueueToHack.push(hackableMachine);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    return machinesNextInQueueToHack;\\r\\n}\\r\\n\\r\\nexport class HackedRecord {\\r\\n    constructor(name, maxMoney, minDifficulty, hackDifficulty, moneyAvailable) {\\r\\n        this.name = name;\\r\\n        this.moneyThreshhold = maxMoney * 0.75;\\r\\n        this.securityThreshholdTarget = minDifficulty + 5;\\r\\n        this.hackDifficulty = hackDifficulty;\\r\\n        this.moneyAvailable = moneyAvailable;\\r\\n        this.minDifficulty = minDifficulty;\\r\\n        this.machineRunningOn;\\r\\n        this.pid;\\r\\n\\r\\n        this.isWeakening = false;\\r\\n        this.isGrowing = false;\\r\\n        this.isHacking = false;\\r\\n    }\\r\\n\\r\\n    needsWeakening() {\\r\\n        return this.hackDifficulty > this.securityThreshholdTarget;\\r\\n    }\\r\\n\\r\\n    needsGrowing() {\\r\\n        return this.moneyAvailable < this.moneyThreshhold;\\r\\n    }\\r\\n\\r\\n    weakening() {\\r\\n        this.isWeakening = true;\\r\\n        this.isGrowing = false;\\r\\n        this.isHacking = false;\\r\\n    }\\r\\n\\r\\n    growing() {\\r\\n        this.isWeakening = false;\\r\\n        this.isGrowing = true;\\r\\n        this.isHacking = false;\\r\\n    }\\r\\n\\r\\n    hacking() {\\r\\n        this.isWeakening = false;\\r\\n        this.isGrowing = false;\\r\\n        this.isHacking = true;\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction getNumberOfThreadsToWeaken(ns, cpuCores, amountToWeaken) {\\r\\n    let numberOfThreadsToWeaken = 0;\\r\\n    let foundNumberOfThreads = false;\\r\\n    while (!foundNumberOfThreads) {\\r\\n        numberOfThreadsToWeaken++;\\r\\n\\r\\n        const amountNumberOfThreadsWillWeaken = Math.ceil(ns.weakenAnalyze(numberOfThreadsToWeaken, cpuCores));\\r\\n        if (amountNumberOfThreadsWillWeaken > amountToWeaken) {\\r\\n            foundNumberOfThreads = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    //add a small margin\\r\\n    numberOfThreadsToWeaken += 20;\\r\\n    return numberOfThreadsToWeaken;\\r\\n}\\r\\n\\r\\nfunction cleanRecordOfWhoIsBeingHacked(ns, recordOfWhoIsBeingHacked) {\\r\\n    for (const key of recordOfWhoIsBeingHacked.keys()) {\\r\\n        const record = recordOfWhoIsBeingHacked.get(key);\\r\\n        \\r\\n        if(!ns.isRunning(record.pid)){\\r\\n            recordOfWhoIsBeingHacked.delete(key);\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"scripts/hacking/advanced-dispatch.js\",\"server\":\"home\"}}],[\"scripts/hacking/batch-dispatch.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"let failuresThisRun = 0;\\r\\nlet successesThisRun = 0;\\r\\n\\r\\nlet lastTimeVisited = new Date();\\r\\nlet secondsBetweenVisits = [];\\r\\nlet lastRecordedToConsole = new Date();\\r\\n\\r\\nlet visitsToFunction = 0;\\r\\n\\r\\nlet countOfSuccesses = [];\\r\\nlet countOfFailures = [];\\r\\nlet averageErrorRateOver10Minutes = 1;\\r\\nlet errorRateAtWhichWeAllowNewThings = 0.1;\\r\\n\\r\\nexport async function main(ns) {\\r\\n    visitsToFunction++;\\r\\n\\r\\n    const buyOrUpgradeServerFlagFile = 'buyOrUpgradeServerFlag.txt';\\r\\n    const memoryConstrained = ns.fileExists('data/ramObservations.txt') || ns.fileExists(buyOrUpgradeServerFlagFile);\\r\\n\\r\\n    const batchQueuesFileName = \\\"data/batchQueue.txt\\\"\\r\\n\\r\\n    let batchQueueForDifferentTargets = new Map();\\r\\n    if (ns.fileExists(batchQueuesFileName)) {\\r\\n        batchQueueForDifferentTargets = new Map(JSON.parse(ns.read(batchQueuesFileName)));\\r\\n    }\\r\\n\\r\\n    const homeMemoryLimitations = JSON.parse(ns.read(\\\"data/ramToReserveOnHome.txt\\\"));\\r\\n\\r\\n    const enviroment = JSON.parse(ns.read(\\\"data/enviroment.txt\\\"));\\r\\n\\r\\n    const playerServers = enviroment\\r\\n        .filter(x => x.server.purchasedByPlayer);\\r\\n\\r\\n    const homeServer = getServer(ns, \\\"home\\\", homeMemoryLimitations);\\r\\n\\r\\n    playerServers.push({ name: \\\"home\\\", server: homeServer })\\r\\n\\r\\n    const totalBoughtMemory = playerServers.reduce((acc, x) => acc + x.server.maxRam, 0);\\r\\n\\r\\n    const ramNeededForBatchesFile = \\\"data/ramNeededToStartBatches.txt\\\";\\r\\n    const memoryNeededForBatches = 105_000;\\r\\n\\r\\n    if (totalBoughtMemory < memoryNeededForBatches) {\\r\\n        const ramNeededToStartBatches = Math.round(memoryNeededForBatches - totalBoughtMemory);\\r\\n        ns.rm(ramNeededForBatchesFile);\\r\\n        ns.write(ramNeededForBatchesFile, ramNeededToStartBatches, \\\"W\\\");\\r\\n\\r\\n        if (visitsToFunction > 100) {\\r\\n            visitsToFunction = 0;\\r\\n            ns.toast(`Ram Needed to Start Batches: ${ramNeededToStartBatches}`, \\\"warning\\\", 180000)\\r\\n        }\\r\\n\\r\\n        ns.run('scripts/hacking/memory-starved-dispatch.js');\\r\\n        return;\\r\\n    } else {\\r\\n        ns.rm(ramNeededForBatchesFile);\\r\\n    }\\r\\n\\r\\n    const targetNames = Array.from(batchQueueForDifferentTargets.keys());\\r\\n    const player = ns.getPlayer();\\r\\n\\r\\n    giveBatchQueueStructure(targetNames, batchQueueForDifferentTargets);\\r\\n    cleanFinishedAndPoisonedJobsFromQueue(targetNames, batchQueueForDifferentTargets, ns);\\r\\n\\r\\n    const noMoreInvestingForEndGame = ns.fileExists(\\\"stopInvesting.txt\\\");\\r\\n\\r\\n    const anyBatchNotPrepping = targetNames\\r\\n        .map(x => batchQueueForDifferentTargets.get(x))\\r\\n        .filter(x => !x.prepStage)\\r\\n        .length > 0;\\r\\n\\r\\n\\r\\n    for (const nameOfTarget of targetNames) {\\r\\n        const targetServer = ns.getServer(nameOfTarget);\\r\\n        const batchForTarget = batchQueueForDifferentTargets.get(nameOfTarget);\\r\\n\\r\\n        if (!noMoreInvestingForEndGame) {\\r\\n            prepServerForBatching(targetServer, batchForTarget, ns, player, nameOfTarget, anyBatchNotPrepping);\\r\\n        }\\r\\n\\r\\n        createBatchesOfJobs(batchForTarget, ns, targetServer, player);\\r\\n    }\\r\\n\\r\\n    await executeJobs(ns, targetNames, batchQueueForDifferentTargets, player, enviroment, homeMemoryLimitations);\\r\\n    addNewTargetsToQueueIfNeeded(batchQueueForDifferentTargets, targetNames, ns, enviroment, player, noMoreInvestingForEndGame, homeMemoryLimitations);\\r\\n    adjustTimingsOrOutrightDeleteDependingOnReliability(ns, batchQueueForDifferentTargets, targetNames);\\r\\n\\r\\n    ns.rm(batchQueuesFileName);\\r\\n    ns.write(batchQueuesFileName, JSON.stringify(Array.from(batchQueueForDifferentTargets.entries()), \\\"W\\\"));\\r\\n\\r\\n    const total = failuresThisRun + successesThisRun;\\r\\n    const now = new Date();\\r\\n    const secondsSinceLastVisit = Math.abs(now.getTime() - lastTimeVisited.getTime()) / 1000;\\r\\n    lastTimeVisited = now;\\r\\n    if (secondsSinceLastVisit !== 0) {\\r\\n        secondsBetweenVisits.push(secondsSinceLastVisit);\\r\\n    }\\r\\n\\r\\n\\r\\n    const moneyWeHaveNow = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n\\r\\n    if (now.getMinutes() !== lastRecordedToConsole.getMinutes() && total > 0) {\\r\\n        const timeStamp = `[${String(now.getHours()).padStart(2, 0)}:${String(now.getMinutes()).padStart(2, 0)}]`\\r\\n\\r\\n        const errorRate = 1 - (successesThisRun / total);\\r\\n\\r\\n        if (errorRate > 0.03) {\\r\\n            ns.toast(`${timeStamp} Error Rate in batches ${errorRate.toLocaleString(undefined, { style: 'percent', minimumFractionDigits: 2 })}`, \\\"error\\\", 60000);\\r\\n        }\\r\\n\\r\\n        const averageTimeBetweenVisits = secondsBetweenVisits.reduce((acc, b) => acc + b, 0) / secondsBetweenVisits.length;\\r\\n\\r\\n        if (averageTimeBetweenVisits > 3) {\\r\\n            ns.toast(`${timeStamp} Average of ${averageTimeBetweenVisits.toFixed(2)} seconds between visits`, \\\"warning\\\", null)\\r\\n        }\\r\\n\\r\\n        const stockMarketReserveMoneyFile = \\\"data/stockMarketReserveMoney.txt\\\";\\r\\n        let stockMarketReserveMoney = new ReserveForTrading();\\r\\n        if (ns.fileExists(stockMarketReserveMoneyFile)) {\\r\\n            stockMarketReserveMoney = new ReserveForTrading(JSON.parse(ns.read(stockMarketReserveMoneyFile)));\\r\\n        }\\r\\n\\r\\n        const formatter = new Intl.NumberFormat('en-US', {\\r\\n            style: 'currency',\\r\\n            currency: 'USD',\\r\\n        });\\r\\n\\r\\n        const moneyFormatted = formatter.format(moneyWeHaveNow + stockMarketReserveMoney.moneyInvested);\\r\\n\\r\\n        let consoleUpdate = `${timeStamp} Money we have now: ${moneyFormatted} | Number of targeted server: ${String(targetNames.length).padStart(2, 0)}`;\\r\\n\\r\\n        if (memoryConstrained) {\\r\\n            consoleUpdate += \\\" | Memory Constrained\\\";\\r\\n        }\\r\\n\\r\\n        ns.tprint(consoleUpdate);\\r\\n\\r\\n        const reliabilityForBatchFile = 'data/reliabilityForEvery100Batches.txt';\\r\\n        let batchReliability = [];\\r\\n\\r\\n        if (ns.fileExists(reliabilityForBatchFile)) {\\r\\n            batchReliability = JSON.parse(ns.read(reliabilityForBatchFile));\\r\\n        }\\r\\n\\r\\n        batchReliability.push({ errorRate, averageTimeBetweenVisits, now, moneyWeHaveNow, numberOfTargetedServers: targetNames.length });\\r\\n\\r\\n\\r\\n        ns.rm(reliabilityForBatchFile);\\r\\n        ns.write(reliabilityForBatchFile, JSON.stringify(batchReliability), \\\"W\\\");\\r\\n\\r\\n\\r\\n        countOfFailures.push(failuresThisRun);\\r\\n        countOfSuccesses.push(successesThisRun);\\r\\n\\r\\n        if (countOfFailures.length > 10) {\\r\\n            countOfFailures.shift();\\r\\n        }\\r\\n\\r\\n        if (countOfSuccesses.length > 10) {\\r\\n            countOfSuccesses.shift();\\r\\n        }\\r\\n\\r\\n        const successesIn10Minutes = countOfSuccesses.reduce((acc, b) => acc + b, 0);\\r\\n        const failuresIn10Minutes = countOfFailures.reduce((acc, b) => acc + b, 0);\\r\\n        const totalIn10Minutes = successesIn10Minutes + failuresIn10Minutes;\\r\\n\\r\\n        averageErrorRateOver10Minutes = 1 - (successesIn10Minutes / totalIn10Minutes);\\r\\n\\r\\n        if (averageErrorRateOver10Minutes > errorRateAtWhichWeAllowNewThings) {\\r\\n            ns.toast(`${timeStamp} Error Rate over 10 minutes is: ${averageErrorRateOver10Minutes.toLocaleString(undefined, { style: 'percent', minimumFractionDigits: 2 })}`, \\\"error\\\", 15000);\\r\\n        }\\r\\n\\r\\n\\r\\n        failuresThisRun = 0;\\r\\n        successesThisRun = 0;\\r\\n        secondsBetweenVisits.length = 0;\\r\\n        lastRecordedToConsole = now;\\r\\n    }\\r\\n\\r\\n    if (moneyWeHaveNow > 1_000_000_000_000 ||\\r\\n        homeServer.maxRam - homeServer.ramUsed > 300000 ||\\r\\n        targetNames\\r\\n            .map(x => batchQueueForDifferentTargets.get(x))\\r\\n            .every(x => !x.targetMachineSaturatedWithAttacks)) {\\r\\n        if (!memoryConstrained) {\\r\\n            ns.run('scripts/hacking/advanced-dispatch.js');\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nclass BatchQueueForTarget {\\r\\n    constructor(obj) {\\r\\n        obj && Object.assign(this, obj);\\r\\n    }\\r\\n\\r\\n    targetMachineSaturatedWithAttacks = false;\\r\\n\\r\\n    prepStage = true;\\r\\n    weakeningDoneAfter;\\r\\n    successfulWeakening = false;\\r\\n    growDoneAfter;\\r\\n    successfulGrowing = false;\\r\\n    hackDoneAfter;\\r\\n    successfulHacking = false;\\r\\n\\r\\n    securityWeNeedToReduceAfterFullHack;\\r\\n    securityWeNeedToReduceAfterFullGrowth;\\r\\n    originalNumberOfThreadsForFullMoney;\\r\\n\\r\\n    successes = 0;\\r\\n    failures = 0;\\r\\n    successesInTheLastHour = 0;\\r\\n    failuresInTheLastHour = 0;\\r\\n    lastResetHour = 0\\r\\n\\r\\n    executionWindowSizeInSeconds = 4;\\r\\n\\r\\n    batchesQueue = [];\\r\\n\\r\\n    lastFailure;\\r\\n\\r\\n    getAllocatedMemory(machineRunningOn) {\\r\\n        return this.batchesQueue\\r\\n            .reduce((acc, x) => acc.concat(x.jobs), [])\\r\\n            .filter(x => x.machineRunningOn === machineRunningOn)\\r\\n            .reduce((acc, x) => acc + x, 0);\\r\\n    }\\r\\n\\r\\n    thereAreNoJobsRunningAfter() {\\r\\n        return Math.max(...this.batchesQueue.map(x => x.wholeBatchFinishsBefore()));\\r\\n    }\\r\\n}\\r\\n\\r\\nclass BatchOfJobs {\\r\\n    jobs = [];\\r\\n    //6 second window? 2 cycles seems like enough for each step.\\r\\n\\r\\n    startTime;\\r\\n    poisonedBatch = false;\\r\\n\\r\\n    wholeBatchFinishsBefore() {\\r\\n        return Math.max(...this.jobs.map(x => new Date(x.endBefore)))\\r\\n    }\\r\\n\\r\\n    constructor(obj) {\\r\\n        obj && Object.assign(this, obj);\\r\\n    }\\r\\n}\\r\\n\\r\\nclass JobHasTo {\\r\\n    executing = false;\\r\\n    ramCost = 0;\\r\\n    machineRunningOn;\\r\\n    pid;\\r\\n    executedAt;\\r\\n    expectedEndTime;\\r\\n\\r\\n    firstLookStartedNowEndAt;\\r\\n\\r\\n    lastMissForDoneBeforeWindow;\\r\\n    firstMissForAfterWindow;\\r\\n\\r\\n    constructor(endAfter, endBefore, type) {\\r\\n        this.endAfter = endAfter;\\r\\n        this.endBefore = endBefore;\\r\\n        this.type = type;\\r\\n        // this.types = [\\\"grow\\\", \\\"hack\\\", \\\"weaken-after-hack\\\", \\\"weaken-after-grow\\\",\\r\\n        //     \\\"weaken-dynamic\\\", \\\"grow-dynamic\\\", \\\"hack-dynamic\\\"]\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction adjustTimingsOrOutrightDeleteDependingOnReliability(ns, batchQueueForDifferentTargets, targetNames) {\\r\\n    const currentTime = new Date();\\r\\n    let countOfDeleted = 0;\\r\\n\\r\\n    for (const nameOfTarget of targetNames) {\\r\\n        const queueOfBatches = batchQueueForDifferentTargets.get(nameOfTarget);\\r\\n        const currentHour = currentTime.getHours()\\r\\n\\r\\n        if (currentHour !== queueOfBatches.lastResetHour) {\\r\\n            if (queueOfBatches.failuresInTheLastHour === 0 && queueOfBatches.successesInTheLastHour > 0 && queueOfBatches.executionWindowSizeInSeconds > 2) {\\r\\n                queueOfBatches.executionWindowSizeInSeconds--;\\r\\n            }\\r\\n\\r\\n            const totalRunsThisHour = queueOfBatches.successesInTheLastHour + queueOfBatches.failuresInTheLastHour;\\r\\n            const ratioOfFailuresThisHour = 1 - (queueOfBatches.successesInTheLastHour / totalRunsThisHour);\\r\\n\\r\\n            if (ratioOfFailuresThisHour > 0.1) {\\r\\n                queueOfBatches.executionWindowSizeInSeconds++;\\r\\n            }\\r\\n\\r\\n\\r\\n            queueOfBatches.lastResetHour = currentHour;\\r\\n            queueOfBatches.successesInTheLastHour = 0;\\r\\n            queueOfBatches.failuresInTheLastHour = 0;\\r\\n\\r\\n            if (ratioOfFailuresThisHour > 0.9 && totalRunsThisHour > 10 && countOfDeleted < 2 && targetNames.length > 2) {\\r\\n                for (const batch of queueOfBatches.batchesQueue) {\\r\\n                    batch.jobs.map(x => {\\r\\n                        if (x.pid) {\\r\\n                            ns.kill(x.pid);\\r\\n                        }\\r\\n                    });\\r\\n\\r\\n                }\\r\\n\\r\\n                batchQueueForDifferentTargets.delete(nameOfTarget);\\r\\n                ns.tprint(`Deleted ${nameOfTarget} from batchQueue for failing too often. Ratio of Failure: ${ratioOfFailuresThisHour}. Total Runs: ${totalRunsThisHour}`);\\r\\n                countOfDeleted++;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction createBatchesOfJobs(batchForTarget, ns, targetServer, player) {\\r\\n    if (batchForTarget.prepStage === false) {\\r\\n\\r\\n        if (batchForTarget.batchesQueue.length === 0 || batchForTarget.batchesQueue.every(x => new Date() > new Date(x.startTime))) {\\r\\n            const batch = new BatchOfJobs();\\r\\n\\r\\n            const secondsToPadEndTime = batchForTarget.executionWindowSizeInSeconds;\\r\\n            const msToPadStartTime = 1;\\r\\n\\r\\n            const noJobsRunningAfter = batchForTarget.thereAreNoJobsRunningAfter();\\r\\n\\r\\n            let noMoreJobsAfter = new Date(noJobsRunningAfter);\\r\\n\\r\\n            const defaultStartTime = getWeakenEndDate(ns, targetServer, player, batchForTarget.securityWeNeedToReduceAfterFullGrowth);\\r\\n\\r\\n            if (noJobsRunningAfter < 0 || defaultStartTime > noMoreJobsAfter) {\\r\\n\\r\\n                addSecondsToDate(defaultStartTime, secondsToPadEndTime);\\r\\n                const defaultEndTime = new Date(defaultStartTime);\\r\\n\\r\\n                noMoreJobsAfter = defaultEndTime;\\r\\n            }\\r\\n\\r\\n            const hackStart = createNewDataFromOldDateAndAddMilliseconds(noMoreJobsAfter, msToPadStartTime);\\r\\n            const hackEnd = createNewDataFromOldDateAndAddSeconds(hackStart, secondsToPadEndTime);\\r\\n\\r\\n            const weakenAfterhackStart = createNewDataFromOldDateAndAddMilliseconds(hackEnd, msToPadStartTime);\\r\\n            const weakenAfterHackEnd = createNewDataFromOldDateAndAddSeconds(weakenAfterhackStart, secondsToPadEndTime);\\r\\n\\r\\n            const growStart = createNewDataFromOldDateAndAddMilliseconds(weakenAfterHackEnd, msToPadStartTime);\\r\\n            const growEnd = createNewDataFromOldDateAndAddSeconds(growStart, secondsToPadEndTime);\\r\\n\\r\\n            const weakenAfterGrowStart = createNewDataFromOldDateAndAddMilliseconds(growEnd, msToPadStartTime);\\r\\n            const weakenAfterGrowEnd = createNewDataFromOldDateAndAddSeconds(weakenAfterGrowStart, secondsToPadEndTime);\\r\\n\\r\\n            // get them in the order they are executed. \\r\\n            batch.jobs.push(new JobHasTo(weakenAfterGrowStart, weakenAfterGrowEnd, \\\"weaken-after-grow\\\"));\\r\\n            batch.jobs.push(new JobHasTo(weakenAfterhackStart, weakenAfterHackEnd, \\\"weaken-after-hack\\\"));\\r\\n            batch.jobs.push(new JobHasTo(growStart, growEnd, \\\"grow\\\"));\\r\\n            batch.jobs.push(new JobHasTo(hackStart, hackEnd, \\\"hack\\\"));\\r\\n\\r\\n            batchForTarget.batchesQueue.push(batch);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nasync function executeJobs(ns, targetNames, batchQueueForDifferentTargets, player, environment, homeMemoryLimitations) {\\r\\n    const hackScript = 'scripts/hacking/hack.js';\\r\\n    const growScript = 'scripts/hacking/grow.js';\\r\\n    const weakenScript = 'scripts/hacking/weaken.js';\\r\\n\\r\\n    const ramNeededForWeaken = ns.getScriptRam(weakenScript);\\r\\n    const ramNeededForGrow = ns.getScriptRam(growScript);\\r\\n    const ramNeededForHack = ns.getScriptRam(hackScript);\\r\\n\\r\\n    for (const nameOfTarget of targetNames) {\\r\\n        const batchForTarget = batchQueueForDifferentTargets.get(nameOfTarget);\\r\\n\\r\\n        for (let i = 0; i < batchForTarget.batchesQueue.length; i++) {\\r\\n            const batchOfJobs = batchForTarget.batchesQueue[i];\\r\\n\\r\\n            for (let y = 0; y < batchOfJobs.jobs.length; y++) {\\r\\n                const job = batchOfJobs.jobs[y];\\r\\n\\r\\n                if (job.executing === false) {\\r\\n\\r\\n                    const targetServer = ns.getServer(nameOfTarget);\\r\\n\\r\\n                    let machineToRunOn;\\r\\n                    let script;\\r\\n                    let numberOfThreads;\\r\\n                    let ramCost;\\r\\n                    let shouldExecute = false;\\r\\n\\r\\n                    if (job.type.startsWith(\\\"weaken\\\")) {\\r\\n                        let amountToWeaken = targetServer.hackDifficulty - targetServer.minDifficulty;\\r\\n\\r\\n                        if (job.type === \\\"weaken-after-hack\\\") {\\r\\n                            amountToWeaken = batchForTarget.securityWeNeedToReduceAfterFullHack;\\r\\n                        }\\r\\n\\r\\n                        if (job.type === \\\"weaken-after-grow\\\") {\\r\\n                            amountToWeaken = batchForTarget.securityWeNeedToReduceAfterFullGrowth;\\r\\n                        }\\r\\n\\r\\n                        const ifStartedNowWeakenDoneAt = getWeakenEndDate(ns, targetServer, player, amountToWeaken);\\r\\n                        shouldExecute = shouldWeExecute(job, ifStartedNowWeakenDoneAt, batchOfJobs, ns);\\r\\n\\r\\n                        if (shouldExecute === false) {\\r\\n                            continue;\\r\\n                        }\\r\\n\\r\\n                        script = weakenScript;\\r\\n\\r\\n\\r\\n                        numberOfThreads = getNumberOfThreadsToWeaken(ns, 1, amountToWeaken);\\r\\n                        ramCost = ramNeededForWeaken * numberOfThreads;\\r\\n\\r\\n                        machineToRunOn = getMachineWithEnoughRam(ns, ramCost, environment, homeMemoryLimitations);\\r\\n\\r\\n                        if (machineToRunOn && machineToRunOn.cpuCores > 1) {\\r\\n                            numberOfThreads = getNumberOfThreadsToWeaken(ns, machineToRunOn.cpuCores, amountToWeaken);\\r\\n                        }\\r\\n                    }\\r\\n\\r\\n                    if (job.type.startsWith(\\\"grow\\\")) {\\r\\n                        const ifStartedNowGrowDoneAt = getGrowEndDate(ns, targetServer, player);\\r\\n                        shouldExecute = shouldWeExecute(job, ifStartedNowGrowDoneAt, batchOfJobs, ns);\\r\\n\\r\\n                        if (shouldExecute === false) {\\r\\n                            continue;\\r\\n                        }\\r\\n\\r\\n                        script = growScript;\\r\\n\\r\\n                        if (job.type !== \\\"grow-dynamic\\\") {\\r\\n                            targetServer.moneyAvailable = 0;\\r\\n                        }\\r\\n\\r\\n                        numberOfThreads = getGrowThreads(ns, targetServer, player, 1);\\r\\n                        ramCost = ramNeededForGrow * numberOfThreads;\\r\\n\\r\\n                        machineToRunOn = getMachineWithEnoughRam(ns, ramCost, environment, homeMemoryLimitations);\\r\\n\\r\\n                        if (machineToRunOn && machineToRunOn.cpuCores > 1) {\\r\\n                            numberOfThreads = getGrowThreads(ns, targetServer, player, machineToRunOn.cpuCores);\\r\\n                        }\\r\\n                    }\\r\\n\\r\\n                    if (job.type.startsWith(\\\"hack\\\")) {\\r\\n                        const ifStartedNowHackDoneAt = getHackEndDate(ns, targetServer, player);\\r\\n                        shouldExecute = shouldWeExecute(job, ifStartedNowHackDoneAt, batchOfJobs, ns);\\r\\n\\r\\n                        if (shouldExecute === false) {\\r\\n                            continue;\\r\\n                        }\\r\\n\\r\\n                        script = hackScript;\\r\\n\\r\\n                        if (job.type === \\\"hack\\\") {\\r\\n                            targetServer.moneyAvailable = targetServer.moneyMax;\\r\\n                        }\\r\\n\\r\\n\\r\\n                        numberOfThreads = getHackThreadsForTotalStealing(ns, nameOfTarget, targetServer);\\r\\n\\r\\n                        if (numberOfThreads === -1) {\\r\\n                            numberOfThreads = batchForTarget.originalNumberOfThreadsForFullMoney;\\r\\n                        }\\r\\n\\r\\n                        ramCost = ramNeededForHack * numberOfThreads;\\r\\n\\r\\n                        machineToRunOn = getMachineWithEnoughRam(ns, ramCost, environment, homeMemoryLimitations);\\r\\n                    }\\r\\n\\r\\n                    if (shouldExecute && machineToRunOn) {\\r\\n                        ns.scp(script, machineToRunOn.hostname);\\r\\n                        const pid = ns.exec(script, machineToRunOn.hostname, numberOfThreads, nameOfTarget);\\r\\n\\r\\n                        if (pid === 0) {\\r\\n                            ns.tprint(\\\"failed exec\\\")\\r\\n                        }\\r\\n\\r\\n                        job.ramCost = ramCost;\\r\\n                        job.executing = true;\\r\\n                        job.machineRunningOn = machineToRunOn.hostname;\\r\\n                        job.pid = pid;\\r\\n                        job.executedAt = new Date();\\r\\n\\r\\n                        if (!batchOfJobs.startTime) {\\r\\n                            batchOfJobs.startTime = new Date();\\r\\n                        }\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction shouldWeExecute(job, ifStartedNowWeWouldBeDoneAtString, batchOfJobs, ns) {\\r\\n\\r\\n    const endBeforeDate = new Date(job.endBefore);\\r\\n    const endAfterDate = new Date(job.endAfter);\\r\\n    const ifStartedNowWeWouldBeDoneAt = new Date(ifStartedNowWeWouldBeDoneAtString)\\r\\n\\r\\n    if (!job.firstLookStartedNowEndAt) {\\r\\n        job.firstLookStartedNowEndAt = ifStartedNowWeWouldBeDoneAt;\\r\\n    }\\r\\n\\r\\n    if (endAfterDate > ifStartedNowWeWouldBeDoneAt) {\\r\\n        job.lastMissForDoneBeforeWindow = ifStartedNowWeWouldBeDoneAt;\\r\\n    }\\r\\n\\r\\n    if (ifStartedNowWeWouldBeDoneAt > endBeforeDate) {\\r\\n        if (!job.firstMissForAfterWindow) {\\r\\n            job.firstMissForAfterWindow = ifStartedNowWeWouldBeDoneAt;\\r\\n            batchOfJobs.poisonedBatch = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    if (endAfterDate < ifStartedNowWeWouldBeDoneAt && ifStartedNowWeWouldBeDoneAt < endBeforeDate) {\\r\\n        job.expectedEndTime = ifStartedNowWeWouldBeDoneAt;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    return false;\\r\\n}\\r\\n\\r\\nfunction getMachineWithEnoughRam(ns, ramNeeded, enviroment, homeMemoryLimitations) {\\r\\n    let machineToRunOn;\\r\\n\\r\\n    const allHackedMachines = enviroment\\r\\n        .filter(x => x.server.hasAdminRights);\\r\\n\\r\\n    const homeServer = getServer(ns, \\\"home\\\", homeMemoryLimitations);\\r\\n\\r\\n    allHackedMachines.push({ name: \\\"home\\\", server: homeServer })\\r\\n\\r\\n    const machinesWithRamAvailable = allHackedMachines\\r\\n        .filter(x => x.server.ramUsed < x.server.maxRam && x.server.maxRam !== 0);\\r\\n\\r\\n    const serversWithEnoughRam = machinesWithRamAvailable\\r\\n        .filter(x => (x.server.maxRam - x.server.ramUsed) > ramNeeded)\\r\\n        .sort((b, a) => b.server.maxRam - a.server.maxRam);\\r\\n\\r\\n    for (const potentialServerToRun of serversWithEnoughRam) {\\r\\n        const server = getServer(ns, potentialServerToRun.name, homeMemoryLimitations);\\r\\n        const freeRam = server.maxRam - server.ramUsed;\\r\\n        if (freeRam > ramNeeded) {\\r\\n            machineToRunOn = server;\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    if (machineToRunOn === undefined) {\\r\\n        const buyOrUpgradeServerFlag = 'buyOrUpgradeServerFlag.txt';\\r\\n\\r\\n        let maxAmountNeeded = 0;\\r\\n        if (ns.fileExists(buyOrUpgradeServerFlag)) {\\r\\n            maxAmountNeeded = ns.read(buyOrUpgradeServerFlag);\\r\\n        }\\r\\n\\r\\n        if (maxAmountNeeded < ramNeeded) {\\r\\n            maxAmountNeeded = ramNeeded;\\r\\n            ns.rm(buyOrUpgradeServerFlag);\\r\\n            ns.write(buyOrUpgradeServerFlag, maxAmountNeeded, \\\"W\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    return machineToRunOn;\\r\\n}\\r\\n\\r\\nfunction getServer(ns, serverName, homeMemoryLimitations) {\\r\\n    const server = ns.getServer(serverName);\\r\\n\\r\\n    if (serverName === \\\"home\\\") {\\r\\n\\r\\n        let ramToReserve = homeMemoryLimitations.ramToReserve;\\r\\n\\r\\n        if (server.maxRam < ramToReserve) {\\r\\n            ramToReserve = homeMemoryLimitations.ramToReserveInLimitedEnvironment;\\r\\n        }\\r\\n\\r\\n        server.maxRam -= ramToReserve;\\r\\n\\r\\n        const freeRam = server.maxRam - server.ramUsed\\r\\n\\r\\n        if (freeRam < 0) {\\r\\n            server.ramUsed = server.maxRam;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    return server;\\r\\n}\\r\\n\\r\\nfunction prepServerForBatching(targetServer, batchForTarget, ns, player, nameOfTarget, anyBatchNotPrepping) {\\r\\n    const amountToWeaken = targetServer.hackDifficulty - targetServer.minDifficulty;\\r\\n    const serverHasMaxMoney = targetServer.moneyMax === targetServer.moneyAvailable;\\r\\n    const currentTime = new Date();\\r\\n\\r\\n    if (amountToWeaken === 0 && serverHasMaxMoney && batchForTarget.securityWeNeedToReduceAfterFullHack && batchForTarget.securityWeNeedToReduceAfterFullGrowth && batchForTarget.prepStage && batchForTarget.originalNumberOfThreadsForFullMoney) {\\r\\n\\r\\n        if (averageErrorRateOver10Minutes < errorRateAtWhichWeAllowNewThings || !anyBatchNotPrepping) {\\r\\n            batchForTarget.prepStage = false;\\r\\n            batchForTarget.targetMachineSaturatedWithAttacks = false;\\r\\n            ns.toast(`Added ${nameOfTarget} to in process batch attack.`, 'success')\\r\\n        }\\r\\n    }\\r\\n\\r\\n    if (batchForTarget.prepStage) {\\r\\n        batchForTarget.targetMachineSaturatedWithAttacks = false;\\r\\n\\r\\n        if (batchForTarget.successfulWeakening === false) {\\r\\n            if (currentTime > new Date(batchForTarget.weakeningDoneAfter) || !batchForTarget.weakeningDoneAfter) {\\r\\n                if (amountToWeaken !== 0) {\\r\\n                    let endDate = new Date();\\r\\n                    endDate = getWeakenEndDate(ns, targetServer, player, targetServer.hackDifficulty - targetServer.minDifficulty);\\r\\n                    addSecondsToDate(endDate, 10);\\r\\n\\r\\n                    const job = new JobHasTo(new Date(), endDate, \\\"weaken-dynamic\\\");\\r\\n                    const batchOfJobs = new BatchOfJobs();\\r\\n                    batchOfJobs.jobs.push(job);\\r\\n\\r\\n                    batchForTarget.batchesQueue.push(batchOfJobs);\\r\\n                    batchForTarget.weakeningDoneAfter = endDate;\\r\\n                } else if (amountToWeaken === 0) {\\r\\n                    batchForTarget.successfulWeakening = true;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (batchForTarget.successfulWeakening && batchForTarget.successfulGrowing === false) {\\r\\n            if (currentTime > new Date(batchForTarget.growDoneAfter) || !batchForTarget.growDoneAfter) {\\r\\n\\r\\n                if (serverHasMaxMoney === false) {\\r\\n\\r\\n                    if (targetServer.moneyAvailable === 0) {\\r\\n                        const growThreads = getGrowThreads(ns, targetServer, player, 1);\\r\\n                        batchForTarget.securityWeNeedToReduceAfterFullGrowth = ns.growthAnalyzeSecurity(growThreads, nameOfTarget, 1);\\r\\n                    }\\r\\n\\r\\n                    let endDate = getGrowEndDate(ns, targetServer, player);\\r\\n                    addSecondsToDate(endDate, 10);\\r\\n\\r\\n                    const job = new JobHasTo(new Date(), endDate, \\\"grow-dynamic\\\");\\r\\n                    const batchOfJobs = new BatchOfJobs();\\r\\n                    batchOfJobs.jobs.push(job);\\r\\n\\r\\n                    batchForTarget.batchesQueue.push(batchOfJobs);\\r\\n                    batchForTarget.growDoneAfter = endDate;\\r\\n                }\\r\\n\\r\\n\\r\\n                if (serverHasMaxMoney) {\\r\\n                    batchForTarget.successfulGrowing = true;\\r\\n                    batchForTarget.successfulWeakening = false;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (batchForTarget.successfulGrowing && batchForTarget.successfulHacking === false && batchForTarget.successfulWeakening) {\\r\\n\\r\\n            if (currentTime > new Date(batchForTarget.hackDoneAfter) || !batchForTarget.hackDoneAfter) {\\r\\n                if (serverHasMaxMoney) {\\r\\n                    if (currentTime > new Date(batchForTarget.hackDoneAfter)) {\\r\\n\\r\\n                        batchForTarget.successfulWeakening = false;\\r\\n                        batchForTarget.successfulGrowing = false;\\r\\n                        batchForTarget.successfulHacking = false;\\r\\n                        batchForTarget.hackDoneAfter = undefined;\\r\\n\\r\\n                    } else {\\r\\n                        const hackThreads = getHackThreadsForTotalStealing(ns, nameOfTarget, targetServer);\\r\\n                        batchForTarget.securityWeNeedToReduceAfterFullHack = ns.hackAnalyzeSecurity(hackThreads, nameOfTarget);\\r\\n                        batchForTarget.originalNumberOfThreadsForFullMoney = hackThreads;\\r\\n\\r\\n                        let endDate = getHackEndDate(ns, targetServer, player);\\r\\n                        addSecondsToDate(endDate, 100);\\r\\n\\r\\n                        const job = new JobHasTo(new Date(), endDate, \\\"hack-dynamic\\\");\\r\\n                        const batchOfJobs = new BatchOfJobs();\\r\\n                        batchOfJobs.jobs.push(job);\\r\\n\\r\\n                        batchForTarget.batchesQueue.push(batchOfJobs);\\r\\n                        batchForTarget.hackDoneAfter = endDate;\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                if (targetServer.moneyAvailable === 0) {\\r\\n                    batchForTarget.successfulGrowing = false;\\r\\n                    batchForTarget.successfulWeakening = false;\\r\\n                    batchForTarget.successfulHacking = true;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\nfunction giveBatchQueueStructure(targetNames, batchQueue) {\\r\\n    for (const target of targetNames) {\\r\\n        let targetObject = batchQueue.get(target);\\r\\n        targetObject = new BatchQueueForTarget(targetObject);\\r\\n\\r\\n        for (let i = 0; i < targetObject.batchesQueue.length; i++) {\\r\\n            targetObject.batchesQueue[i] = new BatchOfJobs(targetObject.batchesQueue[i]);\\r\\n        }\\r\\n\\r\\n        batchQueue.set(target, targetObject);\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction cleanFinishedAndPoisonedJobsFromQueue(targetNames, batchQueue, ns) {\\r\\n\\r\\n    for (const target of targetNames) {\\r\\n        const batches = batchQueue.get(target);\\r\\n        const currentTime = new Date();\\r\\n\\r\\n        for (let i = batches.batchesQueue.length - 1; i > -1; i--) {\\r\\n            const batch = batches.batchesQueue[i];\\r\\n            let remove = false;\\r\\n\\r\\n            if (batch.wholeBatchFinishsBefore() < currentTime) {\\r\\n\\r\\n                if (batch.jobs.every(x => x.executing) === false) {\\r\\n                    batches.failures++;\\r\\n                    batches.failuresInTheLastHour++;\\r\\n                    batches.lastFailure = batch;\\r\\n                    failuresThisRun++;\\r\\n                } else {\\r\\n                    batches.successes++;\\r\\n                    batches.successesInTheLastHour++;\\r\\n                    successesThisRun++;\\r\\n                }\\r\\n\\r\\n                remove = true;\\r\\n                batches.targetMachineSaturatedWithAttacks = true;\\r\\n            }\\r\\n\\r\\n            if (batch.poisonedBatch) {\\r\\n                batches.failures++;\\r\\n                batches.failuresInTheLastHour++;\\r\\n                batches.lastFailure = batch;\\r\\n                failuresThisRun++;\\r\\n\\r\\n                remove = true;\\r\\n\\r\\n                batch.jobs.map(x => {\\r\\n                    if (x.pid) {\\r\\n                        ns.kill(x.pid);\\r\\n                    }\\r\\n                });\\r\\n            }\\r\\n\\r\\n            if (remove) {\\r\\n                batches.batchesQueue.splice(i, 1);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction addNewTargetsToQueueIfNeeded(batchQueue, targetNames, ns, enviroment, player, noMoreInvestingForEndGame, homeMemoryLimitations) {\\r\\n    const batchesAreSaturated = targetNames.map(x => batchQueue.get(x)).every(x => x.targetMachineSaturatedWithAttacks);\\r\\n    const over2andAHalfTrillionDollars = ns.getServerMoneyAvailable(\\\"home\\\") > 2_500_000_000_000;\\r\\n    const massiveRamOnHome = getServer(ns, \\\"home\\\", homeMemoryLimitations).maxRam > 400_000;\\r\\n\\r\\n    let addNewServerToAttack = false;\\r\\n\\r\\n    if (batchQueue.size < 15 && batchesAreSaturated && averageErrorRateOver10Minutes < errorRateAtWhichWeAllowNewThings && !noMoreInvestingForEndGame) {\\r\\n        addNewServerToAttack = true;\\r\\n    }\\r\\n\\r\\n    if (over2andAHalfTrillionDollars && batchQueue.size < 20) {\\r\\n        addNewServerToAttack = true;\\r\\n    }\\r\\n\\r\\n    if (over2andAHalfTrillionDollars && batchesAreSaturated && batchQueue.size < 50) {\\r\\n        addNewServerToAttack = true;\\r\\n    }\\r\\n\\r\\n    if(massiveRamOnHome && batchQueue.size < 50){\\r\\n        addNewServerToAttack = true;\\r\\n    }\\r\\n\\r\\n    if (batchQueue.size < 2 || addNewServerToAttack) {\\r\\n\\r\\n        const allHackedMachines = enviroment\\r\\n            .filter(x => x.server.hasAdminRights);\\r\\n\\r\\n        const allMachinesByOrderOfValue = allHackedMachines\\r\\n            .filter(x => !x.server.purchasedByPlayer && x.server.moneyMax !== 0 && !targetNames.includes(x.name))\\r\\n            .sort((a, b) => b.server.moneyMax - a.server.moneyMax);\\r\\n\\r\\n        // only add machine if 90%+ chances of successfully hacking at minDifficulty. \\r\\n        let mostValuableMachine;\\r\\n        for (const hackPossibility of allMachinesByOrderOfValue) {\\r\\n            const server = ns.getServer(hackPossibility.name);\\r\\n            server.hackDifficulty = server.minDifficulty;\\r\\n            const chanceOfHackingAtMinDif = ns.formulas.hacking.hackChance(server, player);\\r\\n\\r\\n            if (chanceOfHackingAtMinDif > 0.8) {\\r\\n                mostValuableMachine = hackPossibility;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (mostValuableMachine) {\\r\\n            batchQueue.set(mostValuableMachine.name, new BatchQueueForTarget());\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction getHackThreadsForTotalStealing(ns, theTarget, targetServer) {\\r\\n    return Math.ceil(ns.hackAnalyzeThreads(theTarget, targetServer.moneyAvailable));\\r\\n}\\r\\n\\r\\nfunction getGrowThreads(ns, serverToHack, player, cpuCores) {\\r\\n    return Math.ceil(ns.formulas.hacking.growThreads(serverToHack, player, serverToHack.moneyMax, cpuCores));\\r\\n}\\r\\n\\r\\nfunction createNewDataFromOldDateAndAddSeconds(date, secondsToAdd) {\\r\\n    const newDate = new Date(date);\\r\\n    addSecondsToDate(newDate, secondsToAdd);\\r\\n    return newDate;\\r\\n}\\r\\n\\r\\nfunction createNewDataFromOldDateAndAddMilliseconds(date, secondsToAdd) {\\r\\n    const newDate = new Date(date);\\r\\n    addMillisecondsToDate(newDate, secondsToAdd);\\r\\n    return newDate;\\r\\n}\\r\\n\\r\\n\\r\\nfunction addSecondsToDate(date, secondsToAdd) {\\r\\n    date.setSeconds(date.getSeconds() + secondsToAdd);\\r\\n}\\r\\n\\r\\nfunction addMillisecondsToDate(date, msToAdd) {\\r\\n    date.setMilliseconds(date.getMilliseconds() + msToAdd);\\r\\n}\\r\\n\\r\\nfunction getWeakenEndDate(ns, targetServer, player, difficultyToWeaken) {\\r\\n    let endDate = new Date();\\r\\n    targetServer.hackDifficulty = targetServer.minDifficulty + difficultyToWeaken;\\r\\n\\r\\n    const howLongToWeaken = ns.formulas.hacking.weakenTime(targetServer, player);\\r\\n\\r\\n    endDate.setMilliseconds(endDate.getMilliseconds() + howLongToWeaken);\\r\\n    return endDate;\\r\\n}\\r\\n\\r\\nfunction getGrowEndDate(ns, targetServer, player) {\\r\\n    let endDate = new Date();\\r\\n    targetServer.moneyAvailable = 0;\\r\\n    targetServer.hackDifficulty = targetServer.minDifficulty;\\r\\n\\r\\n    const howLongToGrow = ns.formulas.hacking.growTime(targetServer, player);\\r\\n\\r\\n    endDate.setMilliseconds(endDate.getMilliseconds() + howLongToGrow);\\r\\n    return endDate;\\r\\n}\\r\\n\\r\\nfunction getHackEndDate(ns, targetServer, player) {\\r\\n    let endDate = new Date();\\r\\n    targetServer.moneyAvailable = targetServer.moneyMax;\\r\\n    targetServer.hackDifficulty = targetServer.minDifficulty;\\r\\n\\r\\n    const howLongToHack = ns.formulas.hacking.hackTime(targetServer, player);\\r\\n\\r\\n    endDate.setMilliseconds(endDate.getMilliseconds() + howLongToHack);\\r\\n    return endDate;\\r\\n}\\r\\n\\r\\nfunction getNumberOfThreadsToWeaken(ns, cpuCores, amountToWeaken) {\\r\\n    let numberOfThreadsToWeaken = 0;\\r\\n    let foundNumberOfThreads = false;\\r\\n    while (!foundNumberOfThreads) {\\r\\n        numberOfThreadsToWeaken++;\\r\\n\\r\\n        const amountNumberOfThreadsWillWeaken = Math.ceil(ns.weakenAnalyze(numberOfThreadsToWeaken, cpuCores));\\r\\n        if (amountNumberOfThreadsWillWeaken > amountToWeaken) {\\r\\n            foundNumberOfThreads = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    //add a small margin\\r\\n    numberOfThreadsToWeaken += 20;\\r\\n    return numberOfThreadsToWeaken;\\r\\n}\\r\\n\\r\\n\\r\\nclass ReserveForTrading {\\r\\n    stockMarketReserveMoneyLimit = 1_500_000_000_000;\\r\\n    capitalToReserveForTrading = 500_000_000;\\r\\n    moneyInvested = 0;\\r\\n    moneyRequested = new Map();\\r\\n    countOfVisitedWithoutFillingRequest = 0;\\r\\n\\r\\n\\r\\n    constructor(obj) {\\r\\n        obj && Object.assign(this, obj);\\r\\n    }\\r\\n\\r\\n    canSellAmountAndStillHaveReserve(amountToSell) {\\r\\n        return (this.moneyInvested - amountToSell) > this.capitalToReserveForTrading;\\r\\n    }\\r\\n\\r\\n    setMoneyInvested(moneyInvested, ns) {\\r\\n        this.moneyInvested = moneyInvested;\\r\\n\\r\\n        const potentialCapitalReserve = (moneyInvested + ns.getServerMoneyAvailable(\\\"home\\\")) * .75;\\r\\n\\r\\n        this.capitalToReserveForTrading = Math.max(...[potentialCapitalReserve, this.capitalToReserveForTrading]);\\r\\n\\r\\n        if (this.capitalToReserveForTrading > this.stockMarketReserveMoneyLimit) {\\r\\n            this.capitalToReserveForTrading = this.stockMarketReserveMoneyLimit;\\r\\n        }\\r\\n\\r\\n        this.countOfVisitedWithoutFillingRequest++;\\r\\n    }\\r\\n\\r\\n    canSpend(ns, moneyNeeded) {\\r\\n        const moneyOnHome = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n\\r\\n        let moneyToSaveForTrading = this.capitalToReserveForTrading - this.moneyInvested;\\r\\n\\r\\n        if (moneyToSaveForTrading < 0) {\\r\\n            moneyToSaveForTrading = 0;\\r\\n        }\\r\\n\\r\\n        if (moneyToSaveForTrading > this.stockMarketReserveMoneyLimit) {\\r\\n            moneyToSaveForTrading = this.stockMarketReserveMoneyLimit;\\r\\n        }\\r\\n\\r\\n        const canSpend = moneyNeeded < moneyOnHome - moneyToSaveForTrading\\r\\n\\r\\n        if (canSpend === false) {\\r\\n            this.requestMoney(ns, moneyNeeded);\\r\\n        } else {\\r\\n            this.moneyRequested = new Map(Array.from(this.moneyRequested));\\r\\n\\r\\n            const nameOfRequest = \\\"batch-dispatch\\\";\\r\\n            this.moneyRequested.delete(nameOfRequest);\\r\\n            const stockMarketReserveMoneyFile = \\\"data/stockMarketReserveMoney.txt\\\";\\r\\n            ns.rm(stockMarketReserveMoneyFile);\\r\\n            ns.write(stockMarketReserveMoneyFile, JSON.stringify(this), \\\"W\\\");\\r\\n        }\\r\\n\\r\\n        return canSpend;\\r\\n    }\\r\\n\\r\\n    requestMoney(ns, amount) {\\r\\n        const nameOfRequest = \\\"batch-dispatch\\\";\\r\\n        this.moneyRequested = new Map(Array.from(this.moneyRequested));\\r\\n\\r\\n        const moneyRequestedPreviously = this.moneyRequested.get(nameOfRequest);\\r\\n        if (moneyRequestedPreviously) {\\r\\n            if (moneyRequestedPreviously < amount) {\\r\\n                this.moneyRequested.set(nameOfRequest, amount);\\r\\n                this.moneyRequested = Array.from(this.moneyRequested);\\r\\n\\r\\n                const stockMarketReserveMoneyFile = \\\"data/stockMarketReserveMoney.txt\\\";\\r\\n                ns.rm(stockMarketReserveMoneyFile);\\r\\n                ns.write(stockMarketReserveMoneyFile, JSON.stringify(this), \\\"W\\\");\\r\\n            }\\r\\n        } else {\\r\\n            this.moneyRequested.set(nameOfRequest, amount);\\r\\n            this.moneyRequested = Array.from(this.moneyRequested);\\r\\n\\r\\n            const stockMarketReserveMoneyFile = \\\"data/stockMarketReserveMoney.txt\\\";\\r\\n            ns.rm(stockMarketReserveMoneyFile);\\r\\n            ns.write(stockMarketReserveMoneyFile, JSON.stringify(this), \\\"W\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"scripts/hacking/batch-dispatch.js\",\"server\":\"home\"}}],[\"scripts/hacking/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/weaken.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.weaken(target);\\r\\n}\",\"filename\":\"scripts/hacking/weaken.js\",\"server\":\"home\"}}],[\"scripts/hacking/memory-starved-dispatch.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const hackScript = 'scripts/hacking/hack.js';\\r\\nconst growScript = 'scripts/hacking/grow.js';\\r\\nconst weakenScript = 'scripts/hacking/weaken.js';\\r\\n\\r\\nexport async function main(ns) {\\r\\n    const memoryStarvedQueueFileName = 'data/memoryStarvedQueue.txt';\\r\\n    const batchQueuesFileName = \\\"data/batchQueue.txt\\\";\\r\\n\\r\\n    const homeMemoryLimitations = JSON.parse(ns.read(\\\"data/ramToReserveOnHome.txt\\\"));\\r\\n\\r\\n\\r\\n    let batchTargets = [];\\r\\n    if (ns.fileExists(batchQueuesFileName)) {\\r\\n        const batchQueue = JSON.parse(ns.read(batchQueuesFileName));\\r\\n        batchTargets = batchQueue.map(x => x[0]);\\r\\n    }\\r\\n\\r\\n\\r\\n    let memoryStarvedQueue = new Map();\\r\\n    if (ns.fileExists(memoryStarvedQueueFileName)) {\\r\\n        memoryStarvedQueue = new Map(JSON.parse(ns.read(memoryStarvedQueueFileName)));\\r\\n    }\\r\\n\\r\\n    cleanProcessesAttackingBatchTarget(ns, memoryStarvedQueue, batchTargets);\\r\\n\\r\\n    const enviroment = JSON.parse(ns.read(\\\"data/enviroment.txt\\\"));\\r\\n    const allHackedMachines = enviroment\\r\\n        .filter(x => x.server.hasAdminRights);\\r\\n\\r\\n    let allMachinesByOrderOfValue = allHackedMachines\\r\\n        .filter(x => !x.server.purchasedByPlayer && !batchTargets.includes(x.name) && x.server.moneyMax > 0)\\r\\n        .sort((a, b) => b.server.moneyMax - a.server.moneyMax)\\r\\n        .map(x => new HackedRecord(\\r\\n            x.name,\\r\\n            x.server.moneyMax,\\r\\n            x.server.minDifficulty,\\r\\n            x.server.hackDifficulty,\\r\\n            x.server.moneyAvailable,\\r\\n        ))\\r\\n\\r\\n    if (ns.getHackingLevel() < 250) {\\r\\n        allMachinesByOrderOfValue = allMachinesByOrderOfValue\\r\\n            .sort((a, b) => a.hackDifficulty - b.hackDifficulty)\\r\\n    }\\r\\n\\r\\n    seeIfWeNeedToDoNextStep(ns, memoryStarvedQueue);\\r\\n\\r\\n    const machinesNextInQueueToHack = getMachinesToHack(allMachinesByOrderOfValue, memoryStarvedQueue, ns);\\r\\n\\r\\n    const hackQueue = [];\\r\\n    const growAndWeakenQueue = [];\\r\\n\\r\\n    machinesNextInQueueToHack.forEach(machineInQuestion => {\\r\\n        if (machineInQuestion.needsWeakening() || machineInQuestion.needsGrowing()) {\\r\\n            growAndWeakenQueue.push(machineInQuestion);\\r\\n        } else {\\r\\n            hackQueue.push(machineInQuestion);\\r\\n        }\\r\\n    });\\r\\n\\r\\n    for (const target of hackQueue) {\\r\\n        let numberOfThreads = Math.ceil(ns.hackAnalyzeThreads(target.name, target.moneyAvailable));\\r\\n\\r\\n        await executeScriptAcrossFleet(ns, hackScript, enviroment, homeMemoryLimitations, numberOfThreads, target, memoryStarvedQueue);\\r\\n    }\\r\\n\\r\\n    for (const target of growAndWeakenQueue) {\\r\\n        let threadsNeeded;\\r\\n        let script;\\r\\n\\r\\n        if (target.needsGrowing()) {\\r\\n\\r\\n            script = growScript;\\r\\n            const serverToHack = getServer(ns, target.name, homeMemoryLimitations);\\r\\n            const player = ns.getPlayer();\\r\\n\\r\\n            if (ns.fileExists('Formulas.exe')) {\\r\\n                threadsNeeded = Math.ceil(ns.formulas.hacking.growThreads(serverToHack, player, serverToHack.moneyMax, 1));\\r\\n            } else {\\r\\n                threadsNeeded = Math.ceil(ns.hackAnalyzeThreads(target.name, target.moneyAvailable)) * 5;\\r\\n\\r\\n                if (threadsNeeded === 0) {\\r\\n                    threadsNeeded = 500;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (target.needsWeakening()) {\\r\\n            script = weakenScript;\\r\\n            const amountToWeaken = target.hackDifficulty - target.minDifficulty;\\r\\n\\r\\n            threadsNeeded = getNumberOfThreadsToWeaken(ns, 1, amountToWeaken);\\r\\n        }\\r\\n\\r\\n        await executeScriptAcrossFleet(ns, script, enviroment, homeMemoryLimitations, threadsNeeded, target, memoryStarvedQueue);\\r\\n    }\\r\\n\\r\\n    ns.rm(memoryStarvedQueueFileName);\\r\\n    ns.write(memoryStarvedQueueFileName, JSON.stringify(Array.from(memoryStarvedQueue.entries()), \\\"W\\\"));\\r\\n}\\r\\n\\r\\nasync function executeScriptAcrossFleet(ns, script, enviroment, homeMemoryLimitations, numberOfThreadsWanted, target, memoryStarvedQueue) {\\r\\n    const ramNeededForOneThread = ns.getScriptRam(script);\\r\\n\\r\\n    let numberOfThreadsLeft = numberOfThreadsWanted;\\r\\n    let serversExausted = false;\\r\\n\\r\\n    while (numberOfThreadsLeft > 0 && serversExausted === false) {\\r\\n        const result = getMachineWithNumberOfThreads(ns, enviroment, numberOfThreadsLeft, ramNeededForOneThread, homeMemoryLimitations);\\r\\n\\r\\n        if (!result.machineToRunOn || result.threads <= 0) {\\r\\n            serversExausted = true;\\r\\n        } else {\\r\\n            const machineToRunOn = result.machineToRunOn.hostname;\\r\\n            const threads = result.threads\\r\\n\\r\\n            ns.scp(script, machineToRunOn);\\r\\n            const pid = ns.exec(script, machineToRunOn, threads, target.name);\\r\\n\\r\\n            if (pid !== 0) {\\r\\n                target.pids.push(pid);\\r\\n                target.runningOn.push({ machineToRunOn, threads })\\r\\n            }\\r\\n\\r\\n            numberOfThreadsLeft -= threads;\\r\\n\\r\\n            memoryStarvedQueue.set(target.name, target);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction getMachineWithNumberOfThreads(ns, enviroment, threads, ramCostPerThread, homeMemoryLimitations) {\\r\\n    let machineToRunOn;\\r\\n    const buyOrUpgradeServerFlag = 'buyOrUpgradeServerFlag.txt';\\r\\n    let originalAmountNeeded = ramCostPerThread * threads;\\r\\n\\r\\n    let globalMaxAmountNeeded = 0;\\r\\n\\r\\n    if (ns.fileExists(buyOrUpgradeServerFlag)) {\\r\\n        globalMaxAmountNeeded = JSON.parse(ns.read(buyOrUpgradeServerFlag));\\r\\n    }\\r\\n\\r\\n    if (originalAmountNeeded > globalMaxAmountNeeded) {\\r\\n        globalMaxAmountNeeded = originalAmountNeeded;\\r\\n        ns.rm(buyOrUpgradeServerFlag);\\r\\n        ns.write(buyOrUpgradeServerFlag, globalMaxAmountNeeded, \\\"W\\\");\\r\\n    }\\r\\n\\r\\n    machineToRunOn = getMachineWithEnoughRam(ns, threads * ramCostPerThread, enviroment, homeMemoryLimitations);\\r\\n\\r\\n    while (threads > 0 && !machineToRunOn) {\\r\\n        threads--;\\r\\n\\r\\n        machineToRunOn = getMachineWithEnoughRam(ns, threads * ramCostPerThread, enviroment, homeMemoryLimitations);\\r\\n    }\\r\\n\\r\\n    return { threads, machineToRunOn };\\r\\n}\\r\\n\\r\\nfunction getMachineWithEnoughRam(ns, ramNeeded, enviroment, homeMemoryLimitations) {\\r\\n    let machineToRunOn;\\r\\n\\r\\n    const allHackableMachines = enviroment\\r\\n        .filter(x => x.server.hasAdminRights);\\r\\n\\r\\n    const homeServer = getServer(ns, \\\"home\\\", homeMemoryLimitations);\\r\\n\\r\\n    allHackableMachines.push({ name: \\\"home\\\", server: homeServer })\\r\\n\\r\\n    const machinesWithRamAvailable = allHackableMachines\\r\\n        .filter(x => x.server.ramUsed < x.server.maxRam && x.server.maxRam !== 0);\\r\\n\\r\\n    const serversWithEnoughRam = machinesWithRamAvailable\\r\\n        .filter(x => (x.server.maxRam - x.server.ramUsed) > ramNeeded)\\r\\n        .sort((b, a) => b.server.maxRam - a.server.maxRam);\\r\\n\\r\\n    for (const potentialServerToRun of serversWithEnoughRam) {\\r\\n        const server = getServer(ns, potentialServerToRun.name, homeMemoryLimitations);\\r\\n\\r\\n        const freeRam = server.maxRam - server.ramUsed;\\r\\n        if (freeRam > ramNeeded) {\\r\\n            machineToRunOn = server;\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    return machineToRunOn;\\r\\n}\\r\\n\\r\\n\\r\\nfunction getServer(ns, serverName, homeMemoryLimitations) {\\r\\n    const server = ns.getServer(serverName);\\r\\n\\r\\n    if (serverName === \\\"home\\\") {\\r\\n\\r\\n        let ramToReserve = homeMemoryLimitations.ramToReserve;\\r\\n\\r\\n        if (server.maxRam < ramToReserve) {\\r\\n            ramToReserve = homeMemoryLimitations.ramToReserveInLimitedEnvironment;\\r\\n        }\\r\\n\\r\\n        server.maxRam -= ramToReserve;\\r\\n\\r\\n        const freeRam = server.maxRam - server.ramUsed\\r\\n\\r\\n        if (freeRam < 0) {\\r\\n            server.ramUsed = server.maxRam;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    return server;\\r\\n}\\r\\n\\r\\nfunction cleanProcessesAttackingBatchTarget(ns, memoryStarvedQueue, batchTargets) {\\r\\n    for (const machineBeingHacked of memoryStarvedQueue) {\\r\\n        const whoTheyHackin = machineBeingHacked[0];\\r\\n\\r\\n        if (batchTargets.includes(whoTheyHackin)) {\\r\\n            const hackinRecord = memoryStarvedQueue.get(whoTheyHackin);\\r\\n            for (const pid of hackinRecord.pids) {\\r\\n                ns.kill(pid);\\r\\n            }\\r\\n\\r\\n            memoryStarvedQueue.delete(whoTheyHackin);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\nfunction getMachinesToHack(hackableMachinesInTheEnvironment, memoryStarvedQueue, ns) {\\r\\n    const machinesNextInQueueToHack = [];\\r\\n    const doNotAdd = [];\\r\\n\\r\\n    for (const hackableMachine of hackableMachinesInTheEnvironment) {\\r\\n        if (memoryStarvedQueue.has(hackableMachine.name)) {\\r\\n            const record = memoryStarvedQueue.get(hackableMachine.name);\\r\\n            if (record.readyForNextProcess) {\\r\\n                machinesNextInQueueToHack.push(hackableMachine);\\r\\n            }\\r\\n\\r\\n            doNotAdd.push(hackableMachine);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    for (const hackableMachine of hackableMachinesInTheEnvironment) {\\r\\n        if (!doNotAdd.find(x => x.name === hackableMachine.name)) {\\r\\n            machinesNextInQueueToHack.push(hackableMachine);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    return machinesNextInQueueToHack;\\r\\n}\\r\\n\\r\\nexport class HackedRecord {\\r\\n    constructor(name, maxMoney, minDifficulty, hackDifficulty, moneyAvailable) {\\r\\n        this.name = name;\\r\\n        this.moneyThreshhold = maxMoney * 0.75;\\r\\n        this.securityThreshholdTarget = minDifficulty + 5;\\r\\n        this.hackDifficulty = hackDifficulty;\\r\\n        this.moneyAvailable = moneyAvailable;\\r\\n        this.minDifficulty = minDifficulty;\\r\\n        this.pids = [];\\r\\n\\r\\n        this.runningOn = [];\\r\\n\\r\\n        this.isHacking = false;\\r\\n        this.readyForNextProcess = false;\\r\\n    }\\r\\n\\r\\n    needsWeakening() {\\r\\n        return this.hackDifficulty > this.securityThreshholdTarget;\\r\\n    }\\r\\n\\r\\n    needsGrowing() {\\r\\n        return this.moneyAvailable < this.moneyThreshhold;\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction getNumberOfThreadsToWeaken(ns, cpuCores, amountToWeaken) {\\r\\n    let numberOfThreadsToWeaken = 0;\\r\\n    let foundNumberOfThreads = false;\\r\\n    while (!foundNumberOfThreads) {\\r\\n        numberOfThreadsToWeaken++;\\r\\n\\r\\n        const amountNumberOfThreadsWillWeaken = Math.ceil(ns.weakenAnalyze(numberOfThreadsToWeaken, cpuCores));\\r\\n        if (amountNumberOfThreadsWillWeaken > amountToWeaken) {\\r\\n            foundNumberOfThreads = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    //add a small margin\\r\\n    numberOfThreadsToWeaken += 20;\\r\\n    return numberOfThreadsToWeaken;\\r\\n}\\r\\n\\r\\nfunction seeIfWeNeedToDoNextStep(ns, recordOfWhoIsBeingHacked) {\\r\\n    for (const companyBeingHacked of recordOfWhoIsBeingHacked.keys()) {\\r\\n        const record = recordOfWhoIsBeingHacked.get(companyBeingHacked);\\r\\n\\r\\n        if (record.pids.every(x => !ns.isRunning(x))) {\\r\\n            if (record.isHacking) {\\r\\n                recordOfWhoIsBeingHacked.delete(companyBeingHacked)\\r\\n            } else {\\r\\n                record.readyForNextProcess = true;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"scripts/hacking/memory-starved-dispatch.js\",\"server\":\"home\"}}],[\"scripts/hacking/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/hack.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.hack(target);\\r\\n}\",\"filename\":\"scripts/hacking/hack.js\",\"server\":\"home\"}}],[\"scripts/hacking/hack-until-worked.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/hack.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n    let moneyStolen = 0;\\r\\n\\r\\n    while (moneyStolen === 0) {\\r\\n        moneyStolen = await ns.hack(target);\\r\\n    }\\r\\n}\",\"filename\":\"scripts/hacking/hack-until-worked.js\",\"server\":\"home\"}}],[\"scripts/hacking/hack-all-machines.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n\\r\\n    const helpers = new Helpers(ns);\\r\\n\\r\\n    const enviroment = JSON.parse(ns.read(\\\"data/enviroment.txt\\\"));\\r\\n\\r\\n    const portsWeCanPop = helpers.numberOfPortsWeCanPop();\\r\\n    const currentHackingLevel = ns.getHackingLevel();\\r\\n\\r\\n    const allHackableMachines = enviroment\\r\\n        .filter(x => x.server.requiredHackingSkill < currentHackingLevel)\\r\\n        .filter(x => x.server.numOpenPortsRequired <= portsWeCanPop || x.server.purchasedByPlayer);\\r\\n\\r\\n    allHackableMachines\\r\\n        .filter(x => !x.server.hasAdminRights)\\r\\n        .map(x => helpers.hackMachine(x.name));\\r\\n}\\r\\n\\r\\nexport class Helpers {\\r\\n    constructor(ns) {\\r\\n        this.ns = ns;\\r\\n    }\\r\\n\\r\\n    hackMachine(hostname) {\\r\\n        if (this.fileExists(\\\"BruteSSH.exe\\\")) {\\r\\n            this.ns.brutessh(hostname);\\r\\n        }\\r\\n\\r\\n        if (this.fileExists(\\\"FTPCrack.exe\\\")) {\\r\\n            this.ns.ftpcrack(hostname);\\r\\n        }\\r\\n\\r\\n        if (this.fileExists(\\\"relaySMTP.exe\\\")) {\\r\\n            this.ns.relaysmtp(hostname)\\r\\n        }\\r\\n\\r\\n        if (this.fileExists(\\\"HTTPWorm.exe\\\")) {\\r\\n            this.ns.httpworm(hostname)\\r\\n        }\\r\\n\\r\\n        if (this.fileExists(\\\"SQLInject.exe\\\")) {\\r\\n            this.ns.sqlinject(hostname)\\r\\n        }\\r\\n\\r\\n        this.ns.nuke(hostname);\\r\\n        this.ns.killall(hostname);\\r\\n    }\\r\\n\\r\\n    numberOfPortsWeCanPop() {\\r\\n        let portsWeCanPop = 0;\\r\\n        if (this.fileExists(\\\"BruteSSH.exe\\\")) {\\r\\n            portsWeCanPop++;\\r\\n        }\\r\\n\\r\\n        if (this.fileExists(\\\"FTPCrack.exe\\\")) {\\r\\n            portsWeCanPop++;\\r\\n        }\\r\\n\\r\\n        if (this.fileExists(\\\"relaySMTP.exe\\\")) {\\r\\n            portsWeCanPop++;\\r\\n        }\\r\\n\\r\\n        if (this.fileExists(\\\"HTTPWorm.exe\\\")) {\\r\\n            portsWeCanPop++;\\r\\n        }\\r\\n\\r\\n        if (this.fileExists(\\\"SQLInject.exe\\\")) {\\r\\n            portsWeCanPop++;\\r\\n        }\\r\\n\\r\\n        return portsWeCanPop;\\r\\n    }\\r\\n\\r\\n    fileExists(fileName) {\\r\\n        return this.ns.fileExists(fileName, \\\"home\\\");\\r\\n    }\\r\\n}\",\"filename\":\"scripts/hacking/hack-all-machines.js\",\"server\":\"home\"}}],[\"scripts/hacking/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/grow.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.grow(target);\\r\\n}\",\"filename\":\"scripts/hacking/grow.js\",\"server\":\"home\"}}],[\"scripts/investments/invest-in-nodes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const moneyToInvest = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n\\r\\n    if (moneyToInvest < 1_000_000_000_000) {\\r\\n        return;\\r\\n    }\\r\\n    \\r\\n    let endDate = ns.args[0];\\r\\n\\r\\n    if (endDate === undefined){\\r\\n        endDate = new Date();\\r\\n        endDate.setHours(endDate.getHours() + 6);\\r\\n    } else {\\r\\n        const timeLeftInSeconds = (new Date(endDate) - new Date()) / 1000;\\r\\n        const conservativeTimeLeft = timeLeftInSeconds / 2;\\r\\n    \\r\\n        let numberPurchased = 0\\r\\n    \\r\\n        while(buyHacknetNodeIfAboveBreakeven(ns, conservativeTimeLeft)){\\r\\n            numberPurchased++;\\r\\n        }\\r\\n\\r\\n        if(numberPurchased != 0){\\r\\n            ns.tprint(\\\"Total nodes purchase: \\\", numberPurchased);\\r\\n        }        \\r\\n    }\\r\\n}\\r\\n\\r\\nfunction buyHacknetNodeIfAboveBreakeven(ns, secondsLeft) {\\r\\n    const productionMultiplier = 2.8991;\\r\\n    const upgradeCostMultiplier = 0.8700;\\r\\n\\r\\n    const fixedCostOfFullyUpgradedNode = 409_194_200 * upgradeCostMultiplier;\\r\\n    const variableCost = ns.hacknet.getPurchaseNodeCost();\\r\\n    const totalCost = variableCost + fixedCostOfFullyUpgradedNode;\\r\\n\\r\\n    const moneyToInvest = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n\\r\\n    if (totalCost > moneyToInvest) {\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    const revPerSecond = 9172 * productionMultiplier;\\r\\n    const expectedValue = secondsLeft * revPerSecond;\\r\\n\\r\\n    if (expectedValue < totalCost) {\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    const indexOfNode = ns.hacknet.purchaseNode();\\r\\n    ns.hacknet.upgradeLevel(indexOfNode, 199);\\r\\n    ns.hacknet.upgradeRam(indexOfNode, 6);\\r\\n    ns.hacknet.upgradeCore(indexOfNode, 15);\\r\\n\\r\\n    return true;\\r\\n}\\r\\n\\r\\n\",\"filename\":\"scripts/investments/invest-in-nodes.js\",\"server\":\"home\"}}],[\"scripts/investments/purchase-server.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"let countOfTriesToBuyServers = 0;\\r\\nlet countOfVisitsWithoutTryingToBuy = 0;\\r\\nconst beforeFormulasServerSpendFile = \\\"data/beforeFormulasServerSpend.txt\\\";\\r\\n\\r\\nexport async function main(ns) {\\r\\n    const buyOrUpgradeServerFlag = \\\"../../buyOrUpgradeServerFlag.txt\\\";\\r\\n    const ramObservationsTextFile = '../../data/ramObservations.txt';\\r\\n    const typeRecord = \\\"../../data/typeOfServerPurchase.txt\\\";\\r\\n    \\r\\n    const stopInvestingFileName = \\\"stopInvesting.txt\\\";\\r\\n    if (ns.fileExists(stopInvestingFileName)) {\\r\\n        if (ns.fileExists(ramObservationsTextFile)) {\\r\\n            ns.rm(ramObservationsTextFile);\\r\\n        }\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    let additionalRamNeeded = 0;\\r\\n    let ramObservations = [];\\r\\n    let type = new TypeOfPurchase();\\r\\n\\r\\n    if (ns.fileExists(ramObservationsTextFile)) {\\r\\n        countOfVisitsWithoutTryingToBuy++;\\r\\n    } else {\\r\\n        countOfVisitsWithoutTryingToBuy = 0;\\r\\n    }\\r\\n\\r\\n    if (ns.fileExists(buyOrUpgradeServerFlag)) {\\r\\n        countOfVisitsWithoutTryingToBuy = 0;\\r\\n    }\\r\\n\\r\\n    let tryToBuy = ns.fileExists(buyOrUpgradeServerFlag);\\r\\n\\r\\n    if (tryToBuy === false && countOfVisitsWithoutTryingToBuy < 300) {\\r\\n        tryToBuy = true;\\r\\n    }\\r\\n\\r\\n    if (tryToBuy === false) {\\r\\n        return;\\r\\n    } else {\\r\\n        countOfTriesToBuyServers++;\\r\\n\\r\\n        if (ns.fileExists(typeRecord)) {\\r\\n            const tempType = JSON.parse(ns.read(typeRecord));\\r\\n            type = new TypeOfPurchase(tempType);\\r\\n        }\\r\\n\\r\\n        if (!type.lastPurchaseDate) {\\r\\n            type.lastPurchaseDate = new Date();\\r\\n        }\\r\\n\\r\\n        if (ns.fileExists(ramObservationsTextFile)) {\\r\\n            ramObservations = JSON.parse(ns.read(ramObservationsTextFile));\\r\\n\\r\\n        }\\r\\n\\r\\n        if (ns.fileExists(buyOrUpgradeServerFlag)) {\\r\\n            const latestRamNeeded = JSON.parse(ns.read(buyOrUpgradeServerFlag));\\r\\n\\r\\n            ramObservations.push(latestRamNeeded);\\r\\n\\r\\n            ns.rm(buyOrUpgradeServerFlag);\\r\\n\\r\\n            ns.rm(ramObservationsTextFile);\\r\\n            ns.write(ramObservationsTextFile, JSON.stringify(ramObservations), \\\"W\\\");\\r\\n        }\\r\\n\\r\\n        if (ramObservations.length === 0) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        if (ramObservations.length > 10 || countOfTriesToBuyServers > 300) {\\r\\n\\r\\n            additionalRamNeeded = Math.min(...ramObservations);\\r\\n\\r\\n            if (type.average) {\\r\\n                additionalRamNeeded = ramObservations.reduce((a, b) => a + b) / ramObservations.length;\\r\\n            }\\r\\n\\r\\n            if (ns.fileExists('Formulas.exe')) {\\r\\n                if (type.max) {\\r\\n                    additionalRamNeeded = Math.max(...ramObservations);\\r\\n                }\\r\\n            }\\r\\n\\r\\n            const ramNeededForBatchesFile = \\\"data/ramNeededToStartBatches.txt\\\";\\r\\n            if (ns.fileExists(ramNeededForBatchesFile)) {\\r\\n                const ramNeededToStartBatches = Number(ns.read(ramNeededForBatchesFile));\\r\\n\\r\\n                if (ramNeededToStartBatches < additionalRamNeeded) {\\r\\n                    additionalRamNeeded = ramNeededToStartBatches;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (additionalRamNeeded === 0) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        let maxRam = 1048576;\\r\\n\\r\\n        const enviroment = JSON.parse(ns.read('../../data/enviroment.txt'));\\r\\n\\r\\n        const stockMarketReserveMoneyFile = \\\"data/stockMarketReserveMoney.txt\\\";\\r\\n        let stockMarketReserveMoney = new ReserveForTrading();\\r\\n        if (ns.fileExists(stockMarketReserveMoneyFile)) {\\r\\n            stockMarketReserveMoney = new ReserveForTrading(JSON.parse(ns.read(stockMarketReserveMoneyFile)));\\r\\n        }\\r\\n\\r\\n\\r\\n        const playerPurchasedServers = enviroment\\r\\n            .filter(x => x.server.purchasedByPlayer && x.server.maxRam < maxRam)\\r\\n            .sort((b, a) => a.server.maxRam - b.server.maxRam)\\r\\n\\r\\n        let upgradedOrPurchased = false;\\r\\n        if (playerPurchasedServers.length === 0) {\\r\\n            upgradedOrPurchased = purchaseServer(ns, maxRam, additionalRamNeeded, stockMarketReserveMoney);\\r\\n        } else {\\r\\n            const smallestPlayerPurchasedServer = playerPurchasedServers.pop();\\r\\n            upgradedOrPurchased = upgradeSmallMachine(ns, smallestPlayerPurchasedServer, maxRam, additionalRamNeeded, stockMarketReserveMoney);\\r\\n        }\\r\\n\\r\\n        if (upgradedOrPurchased) {\\r\\n            ns.rm(ramObservationsTextFile);\\r\\n            type.changeType();\\r\\n            const now = new Date();\\r\\n            const timeStamp = `[${String(now.getHours()).padStart(2, 0)}:${String(now.getMinutes()).padStart(2, 0)}]`\\r\\n            ns.toast(`${timeStamp} More than ${Math.round(additionalRamNeeded)} GB bought for server`, \\\"success\\\", 300000);\\r\\n        }\\r\\n\\r\\n        ns.rm(typeRecord);\\r\\n        ns.write(typeRecord, JSON.stringify(type), \\\"W\\\");\\r\\n        if (countOfTriesToBuyServers > 100) {\\r\\n            countOfTriesToBuyServers = 0;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction purchaseServer(ns, maxRam, additionalRamNeeded, stockMarketReserveMoney) {\\r\\n    let currentNumberOfPurchasedServers = ns.getPurchasedServers().length;\\r\\n    let ramToBuy = 64;\\r\\n\\r\\n    if (currentNumberOfPurchasedServers < ns.getPurchasedServerLimit()) {\\r\\n\\r\\n        let purchaseCost = ns.getPurchasedServerCost(ramToBuy);\\r\\n        let moneyAvailable = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n\\r\\n        if (moneyAvailable > purchaseCost) {\\r\\n\\r\\n            while (moneyAvailable > purchaseCost && ramToBuy < additionalRamNeeded) {\\r\\n\\r\\n                ramToBuy = ramToBuy * 2;\\r\\n\\r\\n                purchaseCost = ns.getPurchasedServerCost(ramToBuy);\\r\\n            }\\r\\n\\r\\n            if (ramToBuy > maxRam) {\\r\\n                ramToBuy = maxRam;\\r\\n            }\\r\\n            const canBuy = stockMarketReserveMoney.canSpend(ns, purchaseCost);\\r\\n\\r\\n            if (canBuy && ramToBuy > additionalRamNeeded) {\\r\\n                const hostname = \\\"CLOUD-\\\" + String(currentNumberOfPurchasedServers).padStart(3, '0')\\r\\n                ns.purchaseServer(hostname, ramToBuy);\\r\\n\\r\\n                return true;\\r\\n            }\\r\\n        }\\r\\n        else {\\r\\n            if (countOfTriesToBuyServers > 100) {\\r\\n                ns.toast(\\\"Not enough money to buy new server\\\", \\\"warning\\\", 3000)\\r\\n                countOfTriesToBuyServers = 0;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    return false;\\r\\n}\\r\\n\\r\\nfunction upgradeSmallMachine(ns, smallestPlayerPurchasedServer, maxRam, additionalRamNeeded, stockMarketReserveMoney) {\\r\\n\\r\\n    let ramToBuy = smallestPlayerPurchasedServer.server.maxRam * 2;\\r\\n\\r\\n    while (!(ramToBuy - smallestPlayerPurchasedServer.server.maxRam > additionalRamNeeded)) {\\r\\n        ramToBuy = ramToBuy * 2;\\r\\n    }\\r\\n\\r\\n    if (ramToBuy >= maxRam) {\\r\\n        ramToBuy = maxRam;\\r\\n    }\\r\\n\\r\\n    const costOfRamToBuy = ns.getPurchasedServerUpgradeCost(smallestPlayerPurchasedServer.name, ramToBuy);\\r\\n    const canSpendMoney = stockMarketReserveMoney.canSpend(ns, costOfRamToBuy);\\r\\n\\r\\n    if (canSpendMoney) {\\r\\n        ns.upgradePurchasedServer(smallestPlayerPurchasedServer.name, ramToBuy);\\r\\n\\r\\n        return true;\\r\\n    } else {\\r\\n        if (countOfTriesToBuyServers > 100) {\\r\\n            const now = new Date();\\r\\n            const timeStamp = `[${String(now.getHours()).padStart(2, 0)}:${String(now.getMinutes()).padStart(2, 0)}]`\\r\\n            ns.toast(`${timeStamp} Too expensive to buy ${ramToBuy} $${Number((costOfRamToBuy).toFixed(2)).toLocaleString()}`, \\\"warning\\\", 300000);\\r\\n            countOfTriesToBuyServers = 0;\\r\\n        }\\r\\n\\r\\n        return purchaseServer(ns, maxRam, additionalRamNeeded, stockMarketReserveMoney);\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\nclass TypeOfPurchase {\\r\\n\\r\\n    max = false;\\r\\n    min = true;\\r\\n    average = false;\\r\\n    lastPurchaseDate = new Date();\\r\\n\\r\\n    constructor(obj) {\\r\\n        obj && Object.assign(this, obj);\\r\\n    }\\r\\n\\r\\n\\r\\n    changeType() {\\r\\n\\r\\n        if (this.min) {\\r\\n            this.min = false;\\r\\n            this.average = true;\\r\\n            this.max = false;\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        if (this.average) {\\r\\n            this.min = false;\\r\\n            this.average = false;\\r\\n            this.max = true;\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        if (this.max) {\\r\\n            this.min = true;\\r\\n            this.average = false;\\r\\n            this.max = false;\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        this.lastPurchaseDate = new Date();\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\nclass ReserveForTrading {\\r\\n    stockMarketReserveMoneyLimit = 1_500_000_000_000;\\r\\n    capitalToReserveForTrading = 500_000_000;\\r\\n    moneyInvested = 0;\\r\\n    moneyRequested = new Map();\\r\\n    countOfVisitedWithoutFillingRequest = 0;\\r\\n\\r\\n    constructor(obj) {\\r\\n        obj && Object.assign(this, obj);\\r\\n    }\\r\\n\\r\\n    setMoneyInvested(moneyInvested, ns) {\\r\\n        this.moneyInvested = moneyInvested;\\r\\n\\r\\n        const potentialCapitalReserve = moneyInvested / 2;\\r\\n\\r\\n        this.capitalToReserveForTrading = Math.max(...[potentialCapitalReserve, this.capitalToReserveForTrading]);\\r\\n\\r\\n        if (this.capitalToReserveForTrading > this.stockMarketReserveMoneyLimit) {\\r\\n            this.capitalToReserveForTrading = this.stockMarketReserveMoneyLimit;\\r\\n        }\\r\\n\\r\\n        this.countOfVisitedWithoutFillingRequest++;\\r\\n    }\\r\\n\\r\\n    canSpend(ns, moneyNeeded) {\\r\\n        const moneyOnHome = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n\\r\\n        let moneyToSaveForTrading = this.capitalToReserveForTrading - this.moneyInvested;\\r\\n\\r\\n        if (moneyToSaveForTrading < 0) {\\r\\n            moneyToSaveForTrading = 0;\\r\\n        }\\r\\n\\r\\n        if (moneyToSaveForTrading > this.stockMarketReserveMoneyLimit) {\\r\\n            moneyToSaveForTrading = this.stockMarketReserveMoneyLimit;\\r\\n        }\\r\\n\\r\\n        const canSpend = moneyNeeded < moneyOnHome - moneyToSaveForTrading\\r\\n// ns.tprint(`${canSpend} = ${moneyNeeded} < ${moneyOnHome} - ${moneyToSaveForTrading}`)\\r\\n        if (canSpend === false) {\\r\\n            this.requestMoney(ns, moneyNeeded);\\r\\n        } else {\\r\\n            const debugInfor = {moneyOnHome, moneyNeeded, moneyToSaveForTrading, canSpend}\\r\\n            // ns.write(`data/canpuchase${new Date().toJSON().replaceAll(\\\".\\\", \\\"\\\")}.txt`, JSON.stringify(debugInfor), \\\"W\\\")\\r\\n            this.moneyRequested = new Map(Array.from(this.moneyRequested));\\r\\n\\r\\n            const nameOfRequest = \\\"purchase-server\\\";\\r\\n            this.moneyRequested.delete(nameOfRequest);\\r\\n            const stockMarketReserveMoneyFile = \\\"data/stockMarketReserveMoney.txt\\\";\\r\\n            ns.rm(stockMarketReserveMoneyFile);\\r\\n            ns.write(stockMarketReserveMoneyFile, JSON.stringify(this), \\\"W\\\");\\r\\n        }\\r\\n\\r\\n        return canSpend;\\r\\n    }\\r\\n\\r\\n    requestMoney(ns, amount) {\\r\\n        const nameOfRequest = \\\"purchase-server\\\";\\r\\n        this.moneyRequested = new Map(Array.from(this.moneyRequested));\\r\\n\\r\\n        const moneyRequestedPreviously = this.moneyRequested.get(nameOfRequest);\\r\\n        if (moneyRequestedPreviously) {\\r\\n            if (moneyRequestedPreviously < amount) {\\r\\n                this.moneyRequested.set(nameOfRequest, amount);\\r\\n                this.moneyRequested = Array.from(this.moneyRequested);\\r\\n\\r\\n                const stockMarketReserveMoneyFile = \\\"data/stockMarketReserveMoney.txt\\\";\\r\\n                ns.rm(stockMarketReserveMoneyFile);\\r\\n                ns.write(stockMarketReserveMoneyFile, JSON.stringify(this), \\\"W\\\");\\r\\n            }\\r\\n        } else {\\r\\n            this.moneyRequested.set(nameOfRequest, amount);\\r\\n            this.moneyRequested = Array.from(this.moneyRequested);\\r\\n\\r\\n            const stockMarketReserveMoneyFile = \\\"data/stockMarketReserveMoney.txt\\\";\\r\\n            ns.rm(stockMarketReserveMoneyFile);\\r\\n            ns.write(stockMarketReserveMoneyFile, JSON.stringify(this), \\\"W\\\");\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"scripts/investments/purchase-server.js\",\"server\":\"home\"}}],[\"scripts/investments/invest-in-programs.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const ramObservationsTextFile = '../../data/ramObservations.txt';\\r\\n    \\r\\n    const stopInvestingFileName = \\\"stopInvesting.txt\\\";\\r\\n    if (ns.fileExists(stopInvestingFileName)) {\\r\\n        if (ns.fileExists(ramObservationsTextFile)) {\\r\\n            ns.rm(ramObservationsTextFile);\\r\\n        }\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    const stockMarketReserveMoneyFile = \\\"data/stockMarketReserveMoney.txt\\\";\\r\\n    let stockMarketReserveMoney = new ReserveForTrading();\\r\\n    if (ns.fileExists(stockMarketReserveMoneyFile)) {\\r\\n        stockMarketReserveMoney = new ReserveForTrading(JSON.parse(ns.read(stockMarketReserveMoneyFile)));\\r\\n    }\\r\\n\\r\\n    checkTor(ns, stockMarketReserveMoney);\\r\\n\\r\\n    if (stockMarketReserveMoney.capitalToReserveForTrading > 4_000_000_000) {\\r\\n        if (!ns.fileExists(\\\"Formulas.exe\\\")) {\\r\\n            checkTor(ns);\\r\\n            const formulasCost = ns.singularity.getDarkwebProgramCost(\\\"Formulas.exe\\\")\\r\\n            if(stockMarketReserveMoney.canSpend(ns, formulasCost)){\\r\\n                ns.singularity.purchaseProgram(\\\"Formulas.exe\\\");\\r\\n                ns.rm(ramObservationsTextFile);\\r\\n                ns.rm('../../buyOrUpgradeServerFlag.txt');\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    purchaseProgram(ns, 50, \\\"BruteSSH.exe\\\", stockMarketReserveMoney);\\r\\n    purchaseProgram(ns, 100, \\\"FTPCrack.exe\\\", stockMarketReserveMoney);\\r\\n    purchaseProgram(ns, 250, \\\"relaySMTP.exe\\\", stockMarketReserveMoney);\\r\\n    purchaseProgram(ns, 500, \\\"HTTPWorm.exe\\\", stockMarketReserveMoney);\\r\\n    purchaseProgram(ns, 750, \\\"SQLInject.exe\\\", stockMarketReserveMoney);\\r\\n}\\r\\n\\r\\nfunction purchaseProgram(ns, atWhatHackingLevelToBuy, programToBuy, stockMarketReserveMoney) {\\r\\n    const playerHackingLevel = ns.getHackingLevel();\\r\\n    if (!ns.fileExists(programToBuy) && playerHackingLevel > atWhatHackingLevelToBuy && ns.hasTorRouter()) {\\r\\n\\r\\n        const cost = ns.singularity.getDarkwebProgramCost(programToBuy);\\r\\n\\r\\n        if(stockMarketReserveMoney.canSpend(ns, cost)){\\r\\n            ns.singularity.purchaseProgram(programToBuy);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction checkTor(ns, stockMarketReserveMoney) {\\r\\n    if (!ns.hasTorRouter() && stockMarketReserveMoney.canSpend(ns, 200_000)) {\\r\\n        ns.singularity.purchaseTor()\\r\\n    }\\r\\n}\\r\\n\\r\\nclass ReserveForTrading {\\r\\n    stockMarketReserveMoneyLimit = 1_500_000_000_000;\\r\\n    capitalToReserveForTrading = 500_000_000;\\r\\n    moneyInvested = 0;\\r\\n    moneyRequested = new Map();\\r\\n    countOfVisitedWithoutFillingRequest = 0;\\r\\n\\r\\n    constructor(obj) {\\r\\n        obj && Object.assign(this, obj);\\r\\n    }\\r\\n\\r\\n    setMoneyInvested(moneyInvested, ns){\\r\\n        this.moneyInvested = moneyInvested;\\r\\n\\r\\n        const potentialCapitalReserve = moneyInvested / 2;\\r\\n        \\r\\n        this.capitalToReserveForTrading = Math.max(...[potentialCapitalReserve, this.capitalToReserveForTrading]);\\r\\n\\r\\n        if(this.capitalToReserveForTrading > this.stockMarketReserveMoneyLimit){\\r\\n            this.capitalToReserveForTrading = this.stockMarketReserveMoneyLimit;\\r\\n        }\\r\\n\\r\\n        this.countOfVisitedWithoutFillingRequest++;\\r\\n    }\\r\\n\\r\\n    canSpend(ns, moneyNeeded){\\r\\n        const moneyOnHome = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n\\r\\n        let moneyToSaveForTrading = this.capitalToReserveForTrading - this.moneyInvested;\\r\\n\\r\\n        if(moneyToSaveForTrading < 0){\\r\\n            moneyToSaveForTrading = 0;\\r\\n        }\\r\\n\\r\\n        if(moneyToSaveForTrading > this.stockMarketReserveMoneyLimit){\\r\\n            moneyToSaveForTrading = this.stockMarketReserveMoneyLimit;\\r\\n        }\\r\\n\\r\\n        const canSpend = moneyNeeded < moneyOnHome - moneyToSaveForTrading\\r\\n\\r\\n        if(canSpend === false){\\r\\n            this.requestMoney(ns, moneyNeeded);\\r\\n        } else {\\r\\n            this.moneyRequested = new Map(Array.from(this.moneyRequested));\\r\\n\\r\\n            const nameOfRequest = \\\"invest-in-programs\\\";\\r\\n            this.moneyRequested.delete(nameOfRequest);\\r\\n            const stockMarketReserveMoneyFile = \\\"data/stockMarketReserveMoney.txt\\\";\\r\\n            ns.rm(stockMarketReserveMoneyFile);\\r\\n            ns.write(stockMarketReserveMoneyFile, JSON.stringify(this), \\\"W\\\");\\r\\n        }\\r\\n\\r\\n        return canSpend;\\r\\n    }\\r\\n\\r\\n    requestMoney(ns, amount){\\r\\n\\r\\n        const nameOfRequest = \\\"invest-in-programs\\\";\\r\\n        this.moneyRequested = new Map(Array.from(this.moneyRequested));\\r\\n\\r\\n        const moneyRequestedPreviously = this.moneyRequested.get(nameOfRequest);\\r\\n\\r\\n        if(moneyRequestedPreviously){\\r\\n            if(moneyRequestedPreviously < amount){\\r\\n                this.moneyRequested.set(nameOfRequest, amount);\\r\\n                this.moneyRequested = Array.from(this.moneyRequested);\\r\\n\\r\\n                const stockMarketReserveMoneyFile = \\\"data/stockMarketReserveMoney.txt\\\";\\r\\n                ns.rm(stockMarketReserveMoneyFile);\\r\\n                ns.write(stockMarketReserveMoneyFile, JSON.stringify(this), \\\"W\\\");\\r\\n            }\\r\\n        } else {\\r\\n            this.moneyRequested.set(nameOfRequest, amount);\\r\\n            this.moneyRequested = Array.from(this.moneyRequested);\\r\\n\\r\\n            const stockMarketReserveMoneyFile = \\\"data/stockMarketReserveMoney.txt\\\";\\r\\n            ns.rm(stockMarketReserveMoneyFile);\\r\\n            ns.write(stockMarketReserveMoneyFile, JSON.stringify(this), \\\"W\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"scripts/investments/invest-in-programs.js\",\"server\":\"home\"}}],[\"scripts/singularity/backdoor-all-machines.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"const backdooringFile = \\\"data/backdooring.txt\\\";\\r\\n// run on n00dles continuously? that way we can maybe avoid the annoyingness on home of it going to other machiens. \\r\\nexport async function main(ns) {\\r\\n    const enviroment = JSON.parse(ns.read(\\\"data/enviroment.txt\\\"));\\r\\n\\r\\n    if(ns.fileExists(backdooringFile)){\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    const machinesToBackdoorFirst = [\\\"CSEC\\\", \\\"avmnite-02h\\\", \\\"I.I.I.I.\\\", \\\"run4theh111z\\\"]\\r\\n\\r\\n    for(const machineName of machinesToBackdoorFirst){\\r\\n        if(await backdoorMachine(machineName, enviroment, ns)){\\r\\n            return;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    for (const machineName of enviroment.map(x => x.name)) {\\r\\n        if(await backdoorMachine(machineName, enviroment, ns)){\\r\\n            return;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nasync function backdoorMachine (machineName, enviroment, ns){\\r\\n    const serverWithLineage = enviroment.find(x => x.name === machineName)\\r\\n\\r\\n    if (serverWithLineage && !serverWithLineage.server.backdoorInstalled && serverWithLineage.server.hasAdminRights && !serverWithLineage.server.purchasedByPlayer) {\\r\\n        \\r\\n        ns.write(backdooringFile, JSON.stringify(new Date()), \\\"W\\\");\\r\\n        \\r\\n        for (const server of serverWithLineage.lineage) {\\r\\n            await ns.singularity.connect(server);\\r\\n        }\\r\\n\\r\\n        await ns.singularity.connect(serverWithLineage.name);\\r\\n        await ns.singularity.installBackdoor();\\r\\n        await ns.singularity.connect(\\\"home\\\");\\r\\n\\r\\n        ns.rm(backdooringFile);\\r\\n        return true;\\r\\n    } \\r\\n\\r\\n    return false;\\r\\n\\r\\n}\",\"filename\":\"scripts/singularity/backdoor-all-machines.js\",\"server\":\"home\"}}],[\"scripts/singularity/workout.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n\\r\\n    const ownedAugmentations = ns.singularity.getOwnedAugmentations(false);\\r\\n    const includesHVMind = ownedAugmentations.includes(\\\"ECorp HVMind Implant\\\");\\r\\n\\r\\n    if (!includesHVMind) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    // if(getBuffForFaction(ns, \\\"The Covenant\\\", 850)){\\r\\n    //     return;\\r\\n    // } \\r\\n\\r\\n    if(getBuffForFaction(ns, \\\"Illuminati\\\", 1200)){\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    const currentWork = ns.singularity.getCurrentWork();\\r\\n    if(currentWork && currentWork.type === \\\"CLASS\\\"){\\r\\n        ns.singularity.stopAction();\\r\\n    }\\r\\n\\r\\n}\\r\\n\\r\\nfunction getBuffForFaction(ns, faction, targetForAttributes){\\r\\n    const player = ns.getPlayer();\\r\\n    const currentWork = ns.singularity.getCurrentWork();\\r\\n\\r\\n    if (!player.factions.includes(faction) && (!currentWork || currentWork.type === \\\"CLASS\\\")) {\\r\\n        \\r\\n        if(doExersizeIfAppropriate(player.skills.agility, currentWork, ns, 'agi', targetForAttributes)){\\r\\n            return true;\\r\\n        }\\r\\n\\r\\n        if(doExersizeIfAppropriate(player.skills.defense, currentWork, ns, 'def', targetForAttributes)){\\r\\n            return true;\\r\\n        }\\r\\n\\r\\n        if(doExersizeIfAppropriate(player.skills.strength, currentWork, ns, 'str', targetForAttributes)){\\r\\n            return true;\\r\\n        }\\r\\n\\r\\n        if(doExersizeIfAppropriate(player.skills.dexterity, currentWork, ns, 'dex', targetForAttributes)){\\r\\n            return true;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction doExersizeIfAppropriate(skill, currentWork, ns, type, targetForAttributes) {\\r\\n    if (skill < targetForAttributes) {\\r\\n        if (!currentWork || currentWork.classType !== type) {\\r\\n            ns.singularity.travelToCity(\\\"Sector-12\\\");\\r\\n            ns.singularity.gymWorkout(\\\"powerhouse gym\\\", type, true);\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    return false;\\r\\n}\\r\\n\",\"filename\":\"scripts/singularity/workout.js\",\"server\":\"home\"}}],[\"scripts/singularity/upgade-home-machine.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"let visitedBefore = false;\\r\\n\\r\\nexport async function main(ns) {\\r\\n    const ramObservationsTextFile = '../../data/ramObservations.txt';\\r\\n    const stopInvestingFileName = \\\"stopInvesting.txt\\\";\\r\\n    if (ns.fileExists(stopInvestingFileName)) {\\r\\n        if (ns.fileExists(ramObservationsTextFile)) {\\r\\n            ns.rm(ramObservationsTextFile);\\r\\n        }\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    visitedBefore = false;\\r\\n\\r\\n    await upgradeHomeRamOrCpu(ns, 11_000_000);\\r\\n    await upgradeHomeRamOrCpu(ns, 100_000_000);\\r\\n    await upgradeHomeRamOrCpu(ns, 30_000_000_000);\\r\\n    await upgradeHomeRamOrCpu(ns, 100_000_000_000);\\r\\n    await upgradeHomeRamOrCpu(ns, 1_000_000_000_000);\\r\\n    await upgradeHomeRamOrCpu(ns, 10_000_000_000_000);\\r\\n    await upgradeHomeRamOrCpu(ns, 100_000_000_000_000);\\r\\n    await upgradeHomeRamOrCpu(ns, 1_000_000_000_000_000);\\r\\n}\\r\\n\\r\\nasync function upgradeHomeRamOrCpu(ns, moneyLimit) {\\r\\n    if (visitedBefore) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    const ramUpgradeCost = ns.singularity.getUpgradeHomeRamCost();\\r\\n    const coreUpgradeCost = ns.singularity.getUpgradeHomeCoresCost();\\r\\n\\r\\n    const moneyAvailable = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n\\r\\n    if (moneyLimit < coreUpgradeCost && moneyLimit < ramUpgradeCost) {\\r\\n        return;\\r\\n    } else {\\r\\n        visitedBefore = true;\\r\\n    }\\r\\n\\r\\n    const stockMarketReserveMoneyFile = \\\"data/stockMarketReserveMoney.txt\\\";\\r\\n    let stockMarketReserveMoney = new ReserveForTrading();\\r\\n    if (ns.fileExists(stockMarketReserveMoneyFile)) {\\r\\n        stockMarketReserveMoney = new ReserveForTrading(JSON.parse(ns.read(stockMarketReserveMoneyFile)));\\r\\n    }\\r\\n\\r\\n    if (ramUpgradeCost < coreUpgradeCost) {\\r\\n\\r\\n        const moneyLeftOverForRam = moneyAvailable - ramUpgradeCost;\\r\\n\\r\\n        if (moneyLeftOverForRam > moneyLimit) {\\r\\n            if (stockMarketReserveMoney.canSpend(ns, ramUpgradeCost)) {\\r\\n                ns.singularity.upgradeHomeRam();\\r\\n                ns.toast(`Upgraded home ram`, \\\"success\\\", null);\\r\\n                await ns.sleep(100);\\r\\n            }\\r\\n        }\\r\\n\\r\\n    } else {\\r\\n\\r\\n        const moneyLeftOverForCores = moneyAvailable - coreUpgradeCost;\\r\\n\\r\\n        if (moneyLeftOverForCores > moneyLimit) {\\r\\n            if (stockMarketReserveMoney.canSpend(ns, coreUpgradeCost)) {\\r\\n                ns.singularity.upgradeHomeCores()\\r\\n                ns.toast(`Upgraded home core`, \\\"success\\\", null);\\r\\n                await ns.sleep(100);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\nclass ReserveForTrading {\\r\\n    stockMarketReserveMoneyLimit = 1_500_000_000_000;\\r\\n    capitalToReserveForTrading = 500_000_000;\\r\\n    moneyInvested = 0;\\r\\n    moneyRequested = new Map();\\r\\n    countOfVisitedWithoutFillingRequest = 0;\\r\\n\\r\\n    constructor(obj) {\\r\\n        obj && Object.assign(this, obj);\\r\\n    }\\r\\n\\r\\n    setMoneyInvested(moneyInvested, ns) {\\r\\n        this.moneyInvested = moneyInvested;\\r\\n\\r\\n        const potentialCapitalReserve = moneyInvested / 2;\\r\\n\\r\\n        this.capitalToReserveForTrading = Math.max(...[potentialCapitalReserve, this.capitalToReserveForTrading]);\\r\\n\\r\\n        if (this.capitalToReserveForTrading > this.stockMarketReserveMoneyLimit) {\\r\\n            this.capitalToReserveForTrading = this.stockMarketReserveMoneyLimit;\\r\\n        }\\r\\n\\r\\n        this.countOfVisitedWithoutFillingRequest++;\\r\\n    }\\r\\n\\r\\n    canSpend(ns, moneyNeeded) {\\r\\n        const moneyOnHome = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n\\r\\n        let moneyToSaveForTrading = this.capitalToReserveForTrading - this.moneyInvested;\\r\\n\\r\\n        if (moneyToSaveForTrading < 0) {\\r\\n            moneyToSaveForTrading = 0;\\r\\n        }\\r\\n\\r\\n        if (moneyToSaveForTrading > this.stockMarketReserveMoneyLimit) {\\r\\n            moneyToSaveForTrading = this.stockMarketReserveMoneyLimit;\\r\\n        }\\r\\n\\r\\n        const canSpend = moneyNeeded < moneyOnHome - moneyToSaveForTrading\\r\\n\\r\\n        if (canSpend === false) {\\r\\n            this.requestMoney(ns, moneyNeeded);\\r\\n        } else {\\r\\n            this.moneyRequested = new Map(Array.from(this.moneyRequested));\\r\\n\\r\\n            const nameOfRequest = \\\"upgrade-home-machine\\\";\\r\\n            this.moneyRequested.delete(nameOfRequest);\\r\\n            const stockMarketReserveMoneyFile = \\\"data/stockMarketReserveMoney.txt\\\";\\r\\n            ns.rm(stockMarketReserveMoneyFile);\\r\\n            ns.write(stockMarketReserveMoneyFile, JSON.stringify(this), \\\"W\\\");\\r\\n        }\\r\\n\\r\\n        return canSpend;\\r\\n    }\\r\\n\\r\\n    requestMoney(ns, amount) {\\r\\n        const nameOfRequest = \\\"upgrade-home-machine\\\";\\r\\n        this.moneyRequested = new Map(Array.from(this.moneyRequested));\\r\\n\\r\\n        const moneyRequestedPreviously = this.moneyRequested.get(nameOfRequest);\\r\\n        if (moneyRequestedPreviously) {\\r\\n            if (moneyRequestedPreviously < amount) {\\r\\n                this.moneyRequested.set(nameOfRequest, amount);\\r\\n                this.moneyRequested = Array.from(this.moneyRequested);\\r\\n\\r\\n                const stockMarketReserveMoneyFile = \\\"data/stockMarketReserveMoney.txt\\\";\\r\\n                ns.rm(stockMarketReserveMoneyFile);\\r\\n                ns.write(stockMarketReserveMoneyFile, JSON.stringify(this), \\\"W\\\");\\r\\n            }\\r\\n        } else {\\r\\n            this.moneyRequested.set(nameOfRequest, amount);\\r\\n            this.moneyRequested = Array.from(this.moneyRequested);\\r\\n\\r\\n            const stockMarketReserveMoneyFile = \\\"data/stockMarketReserveMoney.txt\\\";\\r\\n            ns.rm(stockMarketReserveMoneyFile);\\r\\n            ns.write(stockMarketReserveMoneyFile, JSON.stringify(this), \\\"W\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"scripts/singularity/upgade-home-machine.js\",\"server\":\"home\"}}],[\"scripts/singularity/travel-to-get-augs.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const ownedAugmentations = JSON.parse(ns.read(\\\"data/ownedAugs.txt\\\"));\\r\\n    const moneyAvailable = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n\\r\\n    if (moneyAvailable > 10_000_000 && notInAnyCityFaction(ns)) {\\r\\n\\r\\n        if (travelToGetUniqueAugments(ns, \\\"Neuregen Gene Modification\\\", \\\"Chongqing\\\", ownedAugmentations)) { return; }\\r\\n        if (travelToGetUniqueAugments(ns, 'PCMatrix', \\\"Aevum\\\", ownedAugmentations)) { return; }\\r\\n        if (travelToGetUniqueAugments(ns, 'CashRoot Starter Kit', \\\"Sector-12\\\", ownedAugmentations)) { return; }\\r\\n        if (travelToGetUniqueAugments(ns, \\\"DermaForce Particle Barrier\\\", \\\"Volhaven\\\", ownedAugmentations)) { return; }\\r\\n        if (travelToGetUniqueAugments(ns, \\\"NutriGen Implant\\\", \\\"New Tokyo\\\", ownedAugmentations)) { return; }\\r\\n        if (travelToGetUniqueAugments(ns, \\\"INFRARET Enhancement\\\", \\\"Ishima\\\", ownedAugmentations)) { return; }\\r\\n    }\\r\\n\\r\\n    const playersLocation = ns.getPlayer().city\\r\\n    if (moneyAvailable > 250_000_000) {\\r\\n        if (ns.singularity.getFactionRep(\\\"Tian Di Hui\\\") === 0 && playersLocation !== \\\"Chongqing\\\") {\\r\\n            ns.singularity.travelToCity(\\\"Chongqing\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction notInAnyCityFaction(ns){\\r\\n    const cityFactions = [\\\"Chongqing\\\", \\\"Aevum\\\", \\\"Sector-12\\\", \\\"Volhaven\\\", \\\"New Tokyo\\\", \\\"Ishima\\\"];\\r\\n\\r\\n    for (const city of cityFactions) {\\r\\n        if(ns.singularity.getFactionRep(city)){\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    return true;\\r\\n}\\r\\n\\r\\nfunction travelToGetUniqueAugments(ns, augmentWanted, city, ownedAugmentations) {\\r\\n    if (!ownedAugmentations.includes(augmentWanted)) {\\r\\n\\r\\n        const playersLocation = ns.getPlayer().city\\r\\n        if (ns.singularity.getFactionRep(city) === 0 && playersLocation !== city) {\\r\\n            ns.singularity.travelToCity(city);\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n    return false;\\r\\n}\\r\\n\\r\\n\",\"filename\":\"scripts/singularity/travel-to-get-augs.js\",\"server\":\"home\"}}],[\"scripts/singularity/study-computer-science.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const player = ns.getPlayer();\\r\\n    const currentWork = ns.singularity.getCurrentWork();\\r\\n\\r\\n    if (!currentWork) {\\r\\n        ns.singularity.universityCourse(\\\"Rothman University\\\", \\\"Computer Science\\\", true);\\r\\n    }\\r\\n}\",\"filename\":\"scripts/singularity/study-computer-science.js\",\"server\":\"home\"}}],[\"scripts/singularity/join-organziations.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const toJoinInOrderInWhichIWantToComplete = [\\r\\n        \\\"CyberSec\\\",\\r\\n        \\\"NiteSec\\\",\\r\\n        \\\"Chongqing\\\",\\r\\n        \\\"The Black Hand\\\",\\r\\n        \\\"Bachman & Associates\\\",\\r\\n        \\\"BitRunners\\\",\\r\\n        \\\"Daedalus\\\",\\r\\n        \\\"NWO\\\",\\r\\n        \\\"OmniTek Incorporated\\\",\\r\\n        \\\"Blade Industries\\\",\\r\\n        \\\"ECorp\\\",\\r\\n    // \\\"The Covenant\\\",\\r\\n        \\\"Illuminati\\\",\\r\\n        \\\"Aevum\\\",\\r\\n        \\\"Volhaven\\\",\\r\\n        \\\"New Tokyo\\\",\\r\\n        \\\"Ishima\\\",\\r\\n        \\\"Tian Di Hui\\\",\\r\\n        \\\"Netburners\\\",\\r\\n    ];\\r\\n\\r\\n    const companiesWeWantToBecomePartOf = [\\r\\n        \\\"Bachman & Associates\\\", \\r\\n        \\\"NWO\\\", \\r\\n        \\\"OmniTek Incorporated\\\", \\r\\n        \\\"Blade Industries\\\", \\r\\n        \\\"ECorp\\\"\\r\\n    ]; \\r\\n\\r\\n    const doNoWorkFor = [\\r\\n        \\\"Aevum\\\",\\r\\n        \\\"Volhaven\\\",\\r\\n        \\\"New Tokyo\\\",\\r\\n        \\\"Ishima\\\",\\r\\n        \\\"Tian Di Hui\\\",\\r\\n        \\\"Netburners\\\"\\r\\n    ];\\r\\n\\r\\n    const stopAtAugments = [\\r\\n        { final: true, faction: \\\"Chongqing\\\", augmentToStopAt: \\\"Neuregen Gene Modification\\\" },\\r\\n        { final: true, faction: \\\"NiteSec\\\", augmentToStopAt: \\\"Cranial Signal Processors - Gen III\\\" },\\r\\n        { final: true, faction: \\\"The Black Hand\\\", augmentToStopAt: \\\"Cranial Signal Processors - Gen IV\\\" },\\r\\n    ]\\r\\n\\r\\n    const moneyAvailable = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n    if (moneyAvailable > 150_000_000) {\\r\\n        toJoinInOrderInWhichIWantToComplete.push(\\\"Sector-12\\\");\\r\\n        doNoWorkFor.push(\\\"Sector-12\\\");\\r\\n    }\\r\\n\\r\\n    const factionInvitations = ns.singularity.checkFactionInvitations();\\r\\n\\r\\n    const organzations = { toJoinInOrderInWhichIWantToComplete, companiesWeWantToBecomePartOf, doNoWorkFor, stopAtAugments };\\r\\n\\r\\n    const organizationTextFileName = \\\"data/organizations.txt\\\";\\r\\n    ns.rm(organizationTextFileName);\\r\\n    ns.write(organizationTextFileName, JSON.stringify(organzations), \\\"W\\\");\\r\\n\\r\\n    for (const name of toJoinInOrderInWhichIWantToComplete) {\\r\\n        if (factionInvitations.includes(name)) {\\r\\n            await ns.singularity.joinFaction(name);\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"scripts/singularity/join-organziations.js\",\"server\":\"home\"}}],[\"scripts/singularity/finish-round.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"let incomePerHourEstimate;\\r\\nlet updatedMoneyEstimate = false;\\r\\n\\r\\nexport async function main(ns) {\\r\\n\\r\\n    if (!ns.stock.has4SDataTIXAPI() || !ns.corporation.hasCorporation()) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    const factionToMaxFile = \\\"data/factionToMax.txt\\\";\\r\\n    const factionDonationFile = 'data/factionDonatation.txt'\\r\\n    const incomeEveryMinuteObservationsFile = 'data/incomeEveryMinuteForTheLast30Minutes.txt'\\r\\n\\r\\n    let factionToMax;\\r\\n\\r\\n    let incomeObservations = [];\\r\\n    const lastObservation = new Date();\\r\\n    let lastObservationRecordedMoney = new Date();\\r\\n\\r\\n    const formatter = new Intl.NumberFormat('en-US', {\\r\\n        style: 'currency',\\r\\n        currency: 'USD',\\r\\n    });\\r\\n\\r\\n    if (ns.fileExists(incomeEveryMinuteObservationsFile)) {\\r\\n        const incomePlusDateFromFile = JSON.parse(ns.read(incomeEveryMinuteObservationsFile));\\r\\n        incomeObservations = incomePlusDateFromFile.incomeObservations;\\r\\n        lastObservationRecordedMoney = new Date(incomePlusDateFromFile.lastObservation);\\r\\n    } else {\\r\\n        ns.write(incomeEveryMinuteObservationsFile, JSON.stringify({ incomeObservations, lastObservation }), \\\"W\\\");\\r\\n    }\\r\\n\\r\\n    if (lastObservationRecordedMoney.getMinutes() !== lastObservation.getMinutes()) {\\r\\n        let totalIncomeSinceAugInstall = 0\\r\\n\\r\\n        const moneySources = ns.getMoneySources();\\r\\n\\r\\n        for (let [key, value] of Object.entries(moneySources.sinceInstall)) {\\r\\n            if (key !== \\\"total\\\" && value > 0 && key !== \\\"stock\\\") {\\r\\n                totalIncomeSinceAugInstall += value;\\r\\n            }\\r\\n        }\\r\\n        incomeObservations.push(totalIncomeSinceAugInstall);\\r\\n\\r\\n        const totalIncome30MinutesAgo = incomeObservations[0];\\r\\n\\r\\n        const incomePerMinute = (totalIncomeSinceAugInstall - totalIncome30MinutesAgo) / incomeObservations.length;\\r\\n        incomePerHourEstimate = incomePerMinute * 60;\\r\\n        updatedMoneyEstimate = true;\\r\\n\\r\\n        if (incomeObservations.length > 30) {\\r\\n            incomeObservations.shift();\\r\\n        }\\r\\n\\r\\n        ns.rm(incomeEveryMinuteObservationsFile);\\r\\n        ns.write(incomeEveryMinuteObservationsFile, JSON.stringify({ incomeObservations, lastObservation }), \\\"W\\\");\\r\\n    } else {\\r\\n        updatedMoneyEstimate = false;\\r\\n    }\\r\\n\\r\\n    let analytics = new EndOfRoundAnalytics();\\r\\n    const endOfRoundAnalyticsFile = \\\"analytics/end-round.txt\\\";\\r\\n    if (ns.fileExists(endOfRoundAnalyticsFile)) {\\r\\n        analytics = JSON.parse(ns.read(endOfRoundAnalyticsFile));\\r\\n    }\\r\\n\\r\\n    if (ns.fileExists(factionToMaxFile) || ns.fileExists(factionDonationFile)) {\\r\\n        if (ns.fileExists(factionToMaxFile)) {\\r\\n            factionToMax = ns.read(factionToMaxFile);\\r\\n\\r\\n            if (!analytics.firstAssignFactionToMax) {\\r\\n                analytics.firstAssignFactionToMax = new Date();\\r\\n            }\\r\\n        } else {\\r\\n            factionToMax = ns.read(factionDonationFile);\\r\\n\\r\\n            if (!analytics.firstAssignFactionToMaxViaDonation) {\\r\\n                analytics.firstAssignFactionToMaxViaDonation = new Date();\\r\\n            }\\r\\n        }\\r\\n    } else {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    if (!analytics.factionsToMax.find(x => x.factionToMax === factionToMax)) {\\r\\n        const firstTime = new Date();\\r\\n        analytics.factionsToMax.push({ factionToMax, firstTime });\\r\\n    }\\r\\n\\r\\n    saveAnalytics(ns, analytics);\\r\\n\\r\\n    const player = ns.getPlayer();\\r\\n\\r\\n    const ownedAugmentations = ns.singularity.getOwnedAugmentations(true);\\r\\n\\r\\n    const mostRepExpensiveForEachFaction = [];\\r\\n    for (const faction of player.factions) {\\r\\n        const maximumAugRep = Math.max(...ns\\r\\n            .singularity\\r\\n            .getAugmentationsFromFaction(faction)\\r\\n            .filter(x => x !== \\\"NeuroFlux Governor\\\")\\r\\n            .filter(x => !ownedAugmentations.includes(x))\\r\\n            .map(x => ns.singularity.getAugmentationRepReq(x)));\\r\\n\\r\\n        if (maximumAugRep > 0) {\\r\\n            mostRepExpensiveForEachFaction.push({ faction, maximumAugRep });\\r\\n        }\\r\\n    }\\r\\n\\r\\n    const targetFaction = mostRepExpensiveForEachFaction\\r\\n        .filter(x => x.faction === factionToMax)\\r\\n        .pop();\\r\\n\\r\\n    setGoalAugment(ownedAugmentations, factionToMax, targetFaction, ns);\\r\\n\\r\\n    const currentFactionRep = ns.singularity.getFactionRep(targetFaction.faction);\\r\\n    const currentFactionFavor = ns.singularity.getFactionFavor(targetFaction.faction);\\r\\n\\r\\n    let targetRepForGettingToFavor = 700_000;\\r\\n    if (ns.fileExists(\\\"Formulas.exe\\\")) {\\r\\n        const favorGain = ns.singularity.getFactionFavorGain(targetFaction.faction);\\r\\n        if (favorGain + currentFactionFavor > 75) {\\r\\n            targetRepForGettingToFavor = currentFactionFavor;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    if (!analytics.firstEncounterOfRepTrigger) {\\r\\n        const repTrigger = populateRepTrigger(targetFaction, currentFactionRep, targetRepForGettingToFavor, ns, factionDonationFile, factionToMaxFile);\\r\\n        analytics.firstEncounterOfRepTrigger = repTrigger;\\r\\n        saveAnalytics(ns, analytics);\\r\\n    }\\r\\n\\r\\n    if (targetFaction.maximumAugRep < currentFactionRep || targetRepForGettingToFavor < currentFactionRep || (ns.fileExists(factionDonationFile) && !ns.fileExists(factionToMaxFile))) {\\r\\n\\r\\n        if (!analytics.repTrigger) {\\r\\n            const repTrigger = populateRepTrigger(targetFaction, currentFactionRep, targetRepForGettingToFavor, ns, factionDonationFile, factionToMaxFile);\\r\\n            analytics.repTrigger = repTrigger;\\r\\n            saveAnalytics(ns, analytics);\\r\\n        }\\r\\n\\r\\n        const factionsWithAugmentsToBuy =\\r\\n            mostRepExpensiveForEachFaction\\r\\n                .map(x => {\\r\\n                    {\\r\\n                        const faction = x.faction;\\r\\n                        const factionRep = ns.singularity.getFactionRep(faction);\\r\\n                        const factionAugmentsThatIDontOwnAndCanAfford = ns\\r\\n                            .singularity\\r\\n                            .getAugmentationsFromFaction(faction)\\r\\n                            .filter(y => y !== \\\"NeuroFlux Governor\\\")\\r\\n                            .filter(y => !ownedAugmentations.includes(y))\\r\\n                            .map(y => {\\r\\n                                return {\\r\\n                                    augmentName: y,\\r\\n                                    augmentationRepCost: ns.singularity.getAugmentationRepReq(y),\\r\\n                                    price: ns.singularity.getAugmentationPrice(y),\\r\\n                                    prereqs: ns.singularity.getAugmentationPrereq(y)\\r\\n                                }\\r\\n                            })\\r\\n                            .filter(y => y.augmentationRepCost < factionRep)\\r\\n                            .sort((a, b) => b.price - a.price);\\r\\n\\r\\n                        return {\\r\\n                            faction,\\r\\n                            factionRep,\\r\\n                            factionAugmentsThatIDontOwnAndCanAfford\\r\\n                        }\\r\\n                    }\\r\\n                });\\r\\n\\r\\n        const priceOfMostExpensiveAugment = Math.max(...factionsWithAugmentsToBuy.find(x => x.faction === targetFaction.faction).factionAugmentsThatIDontOwnAndCanAfford.map(x => x.price));\\r\\n\\r\\n\\r\\n        if (priceOfMostExpensiveAugment < 0) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        // --------\\r\\n        // My augment script ranks every augment that hasn't been purchased by price, and then calculates how many of them I can buy (taking into account the 1.9x price increase per augment, and the additional 1.14x increase per NeuroFlux Governor level). \\r\\n\\r\\n        const purchasableAugments = new Map();\\r\\n\\r\\n        for (const factionWithAugments of factionsWithAugmentsToBuy) {\\r\\n            for (const augment of factionWithAugments.factionAugmentsThatIDontOwnAndCanAfford) {\\r\\n                if (purchasableAugments.has(augment.augmentName) === false) {\\r\\n                    const item = {\\r\\n                        augmentationRepCost: augment.augmentationRepCost,\\r\\n                        price: augment.price,\\r\\n                        prereqs: augment.prereqs,\\r\\n                        faction: factionWithAugments.faction\\r\\n                    }\\r\\n                    purchasableAugments.set(augment.augmentName, item)\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        const augmentsLeft = Array.from(purchasableAugments.entries()).sort((a, b) => b[1].price - a[1].price);\\r\\n\\r\\n        const orderedAugments = []; // { factionName, augmentName, basePrice, multipledPrice}\\r\\n\\r\\n        function addPrereqs(prereqName) {\\r\\n            const augment = purchasableAugments.get(prereqName);\\r\\n\\r\\n            if (augment && !ownedAugmentations.find(x => x.augmentName === prereqName)) {\\r\\n\\r\\n                if (augment.prereqs.length > 0) {//it has prereqs, pass it into this. \\r\\n                    for (const prereq of augment.prereqs) {\\r\\n                        addPrereqs(prereq)\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                if (!orderedAugments.find(x => x.augmentName === prereqName)) {\\r\\n                    orderedAugments.push({ faction: augment.faction, augmentName: prereqName, basePrice: augment.price });\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        for (const augmentData of augmentsLeft) {\\r\\n            const augmentName = augmentData[0];\\r\\n            const augment = augmentData[1];\\r\\n\\r\\n            if (augment.prereqs.length > 0) {\\r\\n                for (const prereqName of augment.prereqs) {\\r\\n                    addPrereqs(prereqName);\\r\\n                }\\r\\n            }\\r\\n\\r\\n            if (!orderedAugments.find(x => x.augmentName === augmentName)) {\\r\\n                orderedAugments.push({ faction: augment.faction, augmentName: augmentName, basePrice: augment.price, multipledPrice: 0 })\\r\\n            }\\r\\n\\r\\n        }\\r\\n\\r\\n        let priceMultipler = 1;\\r\\n\\r\\n        for (const augment of orderedAugments) {\\r\\n            augment.multipledPrice = augment.basePrice * priceMultipler;\\r\\n            priceMultipler *= 1.9;\\r\\n        }\\r\\n\\r\\n        const moneyNeededForAugments = orderedAugments.reduce((acc, x) => acc + x.multipledPrice, 0);\\r\\n\\r\\n        // make a pass for multiplied price\\r\\n\\r\\n        // (faction, augmentName)\\r\\n        // arrange with prereqs in mind\\r\\n        // then 1.9X the cost every purchase\\r\\n        // then figure out how many NeuroFlux governors we can buy with the rep, and then figure out how much that would cost. \\r\\n\\r\\n        // new order ->\\r\\n        // augments\\r\\n        // neuroflux\\r\\n        // computer\\r\\n        // if we have extra money, then we buy more neuroflux with purchased rep\\r\\n\\r\\n\\r\\n\\r\\n        /// ------\\r\\n\\r\\n\\r\\n        let buyAugmentsWhenWeHaveMoreThanThisMuchMoney = moneyNeededForAugments;\\r\\n\\r\\n        const estimatedIncomeForTheNextFourHours = incomePerHourEstimate * 4;\\r\\n\\r\\n        const moneyAvailable = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n\\r\\n        const moneyFormatted = formatter.format(incomePerHourEstimate);\\r\\n\\r\\n        if (moneyFormatted !== \\\"$NaN\\\") {\\r\\n            const hoursTillInstall = Math.floor(buyAugmentsWhenWeHaveMoreThanThisMuchMoney / incomePerHourEstimate);\\r\\n            if (updatedMoneyEstimate) {\\r\\n                const now = new Date();\\r\\n                const timeStamp = `[${String(now.getHours()).padStart(2, 0)}:${String(now.getMinutes()).padStart(2, 0)}]`\\r\\n\\r\\n                ns.toast(`${timeStamp} Income Per Hour Estimate: ${moneyFormatted}. ~Hours to install: ${hoursTillInstall}`, \\\"success\\\", 60000)\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (!analytics.firstEncoundedMoneyTrigger) {\\r\\n            const moneyTrigger = createMoneyTrigger(estimatedIncomeForTheNextFourHours, buyAugmentsWhenWeHaveMoreThanThisMuchMoney, moneyAvailable, formatter);\\r\\n\\r\\n            analytics.firstEncoundedMoneyTrigger = moneyTrigger;\\r\\n            saveAnalytics(ns, analytics);\\r\\n        }\\r\\n\\r\\n        if (estimatedIncomeForTheNextFourHours > buyAugmentsWhenWeHaveMoreThanThisMuchMoney || moneyAvailable > buyAugmentsWhenWeHaveMoreThanThisMuchMoney) {\\r\\n\\r\\n            const stopInvestingFileName = \\\"stopInvesting.txt\\\";\\r\\n            if (!ns.fileExists(stopInvestingFileName)) {\\r\\n                ns.write(stopInvestingFileName, buyAugmentsWhenWeHaveMoreThanThisMuchMoney, \\\"W\\\")\\r\\n                return;\\r\\n            }\\r\\n\\r\\n            if (moneyAvailable > buyAugmentsWhenWeHaveMoreThanThisMuchMoney) {\\r\\n                const stopStockTradingFileName = \\\"stopTrading.txt\\\";\\r\\n                if (!ns.fileExists(stopStockTradingFileName)) {\\r\\n                    ns.write(stopStockTradingFileName, \\\"\\\", \\\"W\\\")\\r\\n                    return;\\r\\n                }\\r\\n\\r\\n                if (!analytics.moneyTrigger) {\\r\\n                    const moneyTrigger = createMoneyTrigger(estimatedIncomeForTheNextFourHours, buyAugmentsWhenWeHaveMoreThanThisMuchMoney, moneyAvailable, formatter);\\r\\n\\r\\n                    analytics.moneyTrigger = moneyTrigger;\\r\\n                    saveAnalytics(ns, analytics);\\r\\n                }\\r\\n\\r\\n                for (const augment of orderedAugments) {\\r\\n                    purchaseAug(ns, augment, analytics);\\r\\n                }\\r\\n\\r\\n                upgradeHomeMachine(ns, analytics);\\r\\n\\r\\n                const factionsByRating = factionsWithAugmentsToBuy.sort((a, b) => b.factionRep - a.factionRep);\\r\\n\\r\\n                purchaseNeuroFluxGovernors(ns, factionsByRating[0].faction, analytics);\\r\\n\\r\\n                const corporation = ns.corporation.getCorporation();\\r\\n                const moneyOnHome = ns.getServerMoneyAvailable(\\\"home\\\") * 0.9;\\r\\n\\r\\n                let sharesToBuy = Math.floor(moneyOnHome / corporation.sharePrice);\\r\\n                if (sharesToBuy > corporation.issuedShares) {\\r\\n                    sharesToBuy = corporation.issuedShares;\\r\\n                }\\r\\n        \\r\\n                if (sharesToBuy > 0) {\\r\\n                    ns.corporation.buyBackShares(sharesToBuy);\\r\\n                }\\r\\n\\r\\n                analytics.shareBoughtBack = sharesToBuy;\\r\\n\\r\\n                analytics.moneyLeft = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n\\r\\n                saveAnalytics(ns, analytics, true);\\r\\n\\r\\n                ns.singularity.installAugmentations('scripts/coordinator.js')\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    saveAnalytics(ns, analytics);\\r\\n}\\r\\n\\r\\nfunction createMoneyTrigger(estimatedIncomeForTheNextFourHours, buyAugmentsWhenWeHaveMoreThanThisMuchMoney, moneyAvailable, formatter) {\\r\\n    const moneyTrigger = new MoneyTrigger();\\r\\n    moneyTrigger.estimatedIncomeTriggered = estimatedIncomeForTheNextFourHours > buyAugmentsWhenWeHaveMoreThanThisMuchMoney;\\r\\n    moneyTrigger.moneyIsGreaterThanTriggered = moneyAvailable > buyAugmentsWhenWeHaveMoreThanThisMuchMoney;\\r\\n\\r\\n    moneyTrigger.estimatedIncomeForTheNextFourHours = formatter.format(estimatedIncomeForTheNextFourHours);\\r\\n    moneyTrigger.moneyRightNow = formatter.format(moneyAvailable);\\r\\n    moneyTrigger.buyArgumentsWhenWeHave = formatter.format(buyAugmentsWhenWeHaveMoreThanThisMuchMoney);\\r\\n    return moneyTrigger;\\r\\n}\\r\\n\\r\\nfunction populateRepTrigger(targetFaction, currentFactionRep, targetRepForGettingToFavor, ns, factionDonationFile, factionToMaxFile) {\\r\\n    const repTrigger = new RepTrigger();\\r\\n    repTrigger.factionRepGreaterThanMaximumAug = targetFaction.maximumAugRep < currentFactionRep;\\r\\n    repTrigger.factionRepGreaterThanTargetToGetToFavorNeeded = targetRepForGettingToFavor < currentFactionRep;\\r\\n    repTrigger.factionDonationTrigger = ns.fileExists(factionDonationFile) && !ns.fileExists(factionToMaxFile);\\r\\n\\r\\n    repTrigger.maximumAugRepNeeded = targetFaction.maximumAugRep;\\r\\n    repTrigger.currentFactionRep = currentFactionRep;\\r\\n    repTrigger.targetRepForGettingToFavor = targetRepForGettingToFavor;\\r\\n    return repTrigger;\\r\\n}\\r\\n\\r\\nfunction saveAnalytics(ns, analytics, final = false) {\\r\\n    let endOfRoundAnalyticsFile = \\\"analytics/end-round.txt\\\";\\r\\n    ns.rm(endOfRoundAnalyticsFile);\\r\\n\\r\\n    if (final) {\\r\\n        const now = new Date()\\r\\n        const factionToMax = analytics.factionsToMax[analytics.factionsToMax.length - 1].factionToMax.replaceAll(' ', '');\\r\\n        endOfRoundAnalyticsFile = `analytics/${now.toISOString().split('T')[0]}-${String(now.getHours()).padStart(2, 0)}-${String(now.getMinutes()).padStart(2, 0)}-${factionToMax}-end-round.txt`;\\r\\n    }\\r\\n\\r\\n    analytics.lastSaved = new Date();\\r\\n    ns.write(endOfRoundAnalyticsFile, JSON.stringify(analytics), \\\"W\\\");\\r\\n}\\r\\n\\r\\nfunction setGoalAugment(ownedAugmentations, factionToMax, targetFaction, ns) {\\r\\n    const organizations = JSON.parse(ns.read(\\\"data/organizations.txt\\\"));\\r\\n\\r\\n    for (const stopAtAugment of organizations.stopAtAugments) {\\r\\n        const goalAugment = stopAtAugment.augmentToStopAt;\\r\\n        const goalFaction = stopAtAugment.faction;\\r\\n\\r\\n        if (!ownedAugmentations.includes(goalAugment) && factionToMax === goalFaction) {\\r\\n            targetFaction.maximumAugRep = ns.singularity.getAugmentationRepReq(goalAugment);\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction purchaseNeuroFluxGovernors(ns, faction, analytics) {\\r\\n\\r\\n    const augmentName = \\\"NeuroFlux Governor\\\"\\r\\n\\r\\n    let price = ns.singularity.getAugmentationPrice(augmentName);\\r\\n    let moneyAvailable = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n    let augmentRepPrice = ns.singularity.getAugmentationRepReq(augmentName);\\r\\n    let factionRep = ns.singularity.getFactionRep(faction);\\r\\n\\r\\n    while (price < moneyAvailable) {\\r\\n        if (factionRep < augmentRepPrice) {\\r\\n            if (ns.singularity.getFactionFavor(faction) > 75 && ns.fileExists(\\\"Formulas.exe\\\")) {\\r\\n                const repNeeded = augmentRepPrice - factionRep;\\r\\n                let dollarsDonated = 0;\\r\\n                let purchasedRep = 0;\\r\\n                const player = ns.getPlayer();\\r\\n                while (repNeeded > purchasedRep) {\\r\\n                    dollarsDonated += 1_000_000;\\r\\n                    purchasedRep = ns.formulas.reputation.repFromDonation(dollarsDonated, player);\\r\\n                }\\r\\n\\r\\n                analytics.moneySpent.repPurchased += dollarsDonated;\\r\\n                ns.singularity.donateToFaction(faction, dollarsDonated);\\r\\n            } else {\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        factionRep = ns.singularity.getFactionRep(faction);\\r\\n\\r\\n        if (factionRep > augmentRepPrice) {\\r\\n            analytics.moneySpent.fluxGovernors += price;\\r\\n            ns.singularity.purchaseAugmentation(faction, augmentName);\\r\\n        }\\r\\n\\r\\n        price = ns.singularity.getAugmentationPrice(augmentName);\\r\\n        moneyAvailable = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n        augmentRepPrice = ns.singularity.getAugmentationRepReq(augmentName);\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction upgradeHomeMachine(ns, analytics) {\\r\\n    const home = \\\"home\\\";\\r\\n    const ramCost = ns.singularity.getUpgradeHomeRamCost();\\r\\n    const coreCost = ns.singularity.getUpgradeHomeCoresCost();\\r\\n    const moneyAvailable = ns.getServerMoneyAvailable(home);\\r\\n    const orginalSpecs = ns.getServer(home);\\r\\n\\r\\n    if (ramCost > moneyAvailable && coreCost > moneyAvailable) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    if (ramCost > coreCost) {\\r\\n        analytics.moneySpent.homeCores += coreCost;\\r\\n        ns.singularity.upgradeHomeCores();\\r\\n    } else {\\r\\n        analytics.moneySpent.homeRam += ramCost;\\r\\n        ns.singularity.upgradeHomeRam();\\r\\n    }\\r\\n\\r\\n    const upgradedServer = ns.getServer(home);\\r\\n\\r\\n    analytics.amountOfRamIncrease += upgradedServer.maxRam - orginalSpecs.maxRam;\\r\\n    analytics.amountOfCoresIncrease += upgradedServer.cpuCores - orginalSpecs.cpuCores;\\r\\n\\r\\n    return upgradeHomeMachine(ns, analytics);\\r\\n}\\r\\n\\r\\nfunction purchaseAug(ns, augment, analytics) {\\r\\n    const ownedAugments = ns.singularity.getOwnedAugmentations(true);\\r\\n    const augmentName = augment.augmentName;\\r\\n\\r\\n    if (ownedAugments.includes(augmentName) === false) {\\r\\n        const augmentPrice = ns.singularity.getAugmentationPrice(augmentName);\\r\\n        const amountOfMoneyWeHave = ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n\\r\\n        if (augmentPrice < amountOfMoneyWeHave) {\\r\\n            analytics.moneySpent.augments += augmentPrice;\\r\\n            if (!analytics.augsBought) {\\r\\n                analytics.augsBought = [];\\r\\n            }\\r\\n            analytics.augsBought.push(augmentName)\\r\\n\\r\\n            ns.singularity.purchaseAugmentation(augment.faction, augmentName);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\nclass EndOfRoundAnalytics {\\r\\n    firstStarted = new Date();\\r\\n\\r\\n\\r\\n    firstAssignFactionToMax;\\r\\n    firstAssignFactionToMaxViaDonation;\\r\\n\\r\\n    factionsToMax = [];\\r\\n\\r\\n    firstEncounterOfRepTrigger;\\r\\n    repTrigger;\\r\\n\\r\\n\\r\\n    firstEncoundedMoneyTrigger;\\r\\n    moneyTrigger;\\r\\n\\r\\n    augsBought = [];\\r\\n\\r\\n    amountOfRamIncrease\\r\\n    amountOfCoresIncrease\\r\\n\\r\\n    moneySpent = new MoneySpent();\\r\\n\\r\\n    moneyLeft = 0;\\r\\n    lastSaved;\\r\\n}\\r\\n\\r\\nclass MoneyTrigger {\\r\\n    estimatedIncomeTriggered;\\r\\n    moneyIsGreaterThanTriggered;\\r\\n\\r\\n    estimatedIncomeForTheNextFourHours;\\r\\n    moneyRightNow;\\r\\n    buyArgumentsWhenWeHave;\\r\\n\\r\\n    time = new Date();\\r\\n}\\r\\n\\r\\nclass MoneySpent {\\r\\n\\r\\n    augments = 0;\\r\\n    homeCores = 0;\\r\\n    homeRam = 0;\\r\\n    fluxGovernors = 0;\\r\\n    repPurchased = 0;\\r\\n}\\r\\n\\r\\nclass RepTrigger {\\r\\n\\r\\n    factionRepGreaterThanMaximumAug;\\r\\n    factionRepGreaterThanTargetToGetToFavorNeeded;\\r\\n    factionDonationTrigger;\\r\\n\\r\\n\\r\\n    maximumAugRepNeeded;\\r\\n    currentFactionRep;\\r\\n    targetRepForGettingToFavor;\\r\\n\\r\\n    time = new Date();\\r\\n}\",\"filename\":\"scripts/singularity/finish-round.js\",\"server\":\"home\"}}],[\"scripts/singularity/finish-bitnode.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n\\r\\n    const ownedAugmentations = ns.singularity.getOwnedAugmentations(false);\\r\\n    const includesRedPill = ownedAugmentations.includes(\\\"The Red Pill\\\");\\r\\n    const currentHackingLevel = ns.getHackingLevel();\\r\\n    const endgameServer = \\\"w0r1d_d43m0n\\\";\\r\\n\\r\\n    const enviroment = JSON.parse(ns.read(\\\"data/enviroment.txt\\\"));\\r\\n    const serverWithLineage = enviroment.find(x => x.name === endgameServer);\\r\\n\\r\\n    if (includesRedPill && currentHackingLevel > serverWithLineage.server.requiredHackingSkill) {\\r\\n        if (serverWithLineage && serverWithLineage.server.hasAdminRights) {\\r\\n            for (const server of serverWithLineage.lineage) {\\r\\n                await ns.singularity.connect(server);\\r\\n            }\\r\\n\\r\\n            await ns.singularity.connect(endgameServer);\\r\\n            await ns.singularity.installBackdoor();\\r\\n        }\\r\\n\\r\\n\\r\\n        ns.singularity.destroyW0r1dD43m0n(5, 'scripts/coordinator.js'); // 5.1 (formula.exe + int passive) - 10 (new mechanic) \\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"scripts/singularity/finish-bitnode.js\",\"server\":\"home\"}}],[\"scripts/singularity/do-work.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const player = ns.getPlayer();\\r\\n\\r\\n    const factionToMaxFile = \\\"data/factionToMax.txt\\\";\\r\\n\\r\\n    let factionToMax;\\r\\n\\r\\n    if (ns.fileExists(factionToMaxFile)) {\\r\\n        factionToMax = ns.read(factionToMaxFile);\\r\\n    }\\r\\n\\r\\n    const organizations = JSON.parse(ns.read(\\\"data/organizations.txt\\\"));\\r\\n    const organizationsToJoinInTheOrderWeWantToComplete = organizations.toJoinInOrderInWhichIWantToComplete;\\r\\n\\r\\n    const factionsWithAugsToBuyAndNotEnoughtFavor = JSON.parse(ns.read(\\\"data/factionsWithAugsToBuyAndNotEnoughtFavor.txt\\\"))\\r\\n\\r\\n    for (const faction of organizationsToJoinInTheOrderWeWantToComplete) {\\r\\n        const factionInAugsMix = factionsWithAugsToBuyAndNotEnoughtFavor.find(x => x.faction === faction);\\r\\n\\r\\n        if (factionInAugsMix) {\\r\\n\\r\\n            const newFactionToMax = factionInAugsMix.faction;\\r\\n\\r\\n            if (factionToMax !== newFactionToMax) {\\r\\n                factionToMax = newFactionToMax;\\r\\n                ns.rm(factionToMaxFile);\\r\\n                ns.write(factionToMaxFile, factionToMax, \\\"W\\\");\\r\\n            }\\r\\n\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    const currentWork = ns.singularity.getCurrentWork();\\r\\n\\r\\n    if (currentWork && currentWork.type === \\\"CREATE_PROGRAM\\\") {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    for (const faction of organizationsToJoinInTheOrderWeWantToComplete) {\\r\\n\\r\\n        if (currentWork &&\\r\\n            currentWork.type === \\\"COMPANY\\\" &&\\r\\n            currentWork.companyName === faction &&\\r\\n            !player.factions.includes(faction)) {\\r\\n\\r\\n            break;\\r\\n        }\\r\\n\\r\\n        if (currentWork &&\\r\\n            currentWork.type === \\\"CLASS\\\" &&\\r\\n            currentWork.classType === \\\"Leadership\\\" &&\\r\\n            factionToMax !== \\\"Chongqing\\\") {\\r\\n\\r\\n            break;\\r\\n        }\\r\\n\\r\\n        const factionsAugs = factionsWithAugsToBuyAndNotEnoughtFavor.find(x => x.faction === faction);\\r\\n\\r\\n        if (!factionsAugs) {\\r\\n            continue;\\r\\n        }\\r\\n\\r\\n        const maxRepNeeded = factionsAugs.maximumAugRep;\\r\\n        const factionRep = ns.singularity.getFactionRep(faction);\\r\\n\\r\\n        if (maxRepNeeded > factionRep) {\\r\\n\\r\\n            if (!currentWork || currentWork.factionName !== faction) {\\r\\n                await ns.singularity.workForFaction(faction, \\\"hacking\\\", true);\\r\\n            }\\r\\n\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"scripts/singularity/do-work.js\",\"server\":\"home\"}}],[\"scripts/singularity/do-job.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const organizations = JSON.parse(ns.read(\\\"data/organizations.txt\\\"));\\r\\n    const companiesWeWantToBecomePartOf = organizations.companiesWeWantToBecomePartOf;\\r\\n    const orderedFactions = organizations.toJoinInOrderInWhichIWantToComplete;\\r\\n\\r\\n    const currentWork = ns.singularity.getCurrentWork();\\r\\n\\r\\n    if (currentWork && currentWork.type === \\\"CREATE_PROGRAM\\\") {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    let factionWeAreWorkingAtNow;\\r\\n    if (currentWork && currentWork.type === \\\"FACTION\\\") {\\r\\n        factionWeAreWorkingAtNow = currentWork.factionName;\\r\\n    }\\r\\n\\r\\n    if (currentWork && currentWork.type === \\\"COMPANY\\\") {\\r\\n        factionWeAreWorkingAtNow = currentWork.companyName;\\r\\n    }\\r\\n\\r\\n    const player = ns.getPlayer();\\r\\n    let company;\\r\\n\\r\\n    for (const potentialCompany of companiesWeWantToBecomePartOf) {\\r\\n        if (!player.factions.includes(potentialCompany)) {\\r\\n\\r\\n            if (!factionWeAreWorkingAtNow) {\\r\\n                company = potentialCompany;\\r\\n                break;\\r\\n            }\\r\\n\\r\\n            for (const faction of orderedFactions) {\\r\\n                if (faction === potentialCompany) {\\r\\n                    company = potentialCompany;\\r\\n                    break;\\r\\n                }\\r\\n\\r\\n                if (faction === factionWeAreWorkingAtNow) {\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    if (!company) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n\\r\\n    const positionInCompany = player.jobs[company];\\r\\n\\r\\n    if(!positionInCompany){\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    const currentPositionInfo = ns.singularity.getCompanyPositionInfo(company, positionInCompany);\\r\\n    const nextPositionInfo = ns.singularity.getCompanyPositionInfo(company, currentPositionInfo.nextPosition);\\r\\n    const companyRep = ns.singularity.getCompanyRep(company);\\r\\n\\r\\n    if (nextPositionInfo.requiredReputation < companyRep && nextPositionInfo.requiredSkills.charisma > player.skills.charisma) {\\r\\n        if (!currentWork || currentWork.type !== \\\"CLASS\\\") {\\r\\n            ns.singularity.travelToCity(\\\"Sector-12\\\");\\r\\n            ns.singularity.universityCourse(\\\"Rothman University\\\", \\\"Leadership\\\", true);\\r\\n            return;\\r\\n        }\\r\\n    } else {\\r\\n        if (!currentWork || currentWork.type !== \\\"COMPANY\\\") {\\r\\n            ns.singularity.workForCompany(company, true);\\r\\n        }\\r\\n        return;\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"scripts/singularity/do-job.js\",\"server\":\"home\"}}],[\"scripts/singularity/create-early-programs.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const currentWork = ns.singularity.getCurrentWork();\\r\\n\\r\\n    if (!currentWork || currentWork.type !== \\\"CREATE_PROGRAM\\\") {\\r\\n        if (!ns.fileExists(\\\"FTPCrack.exe\\\")) {\\r\\n           ns.singularity.createProgram(\\\"FTPCrack.exe\\\", true);\\r\\n        }\\r\\n\\r\\n        if (!ns.fileExists(\\\"BruteSSH.exe\\\")) {\\r\\n            ns.singularity.createProgram(\\\"BruteSSH.exe\\\", true);\\r\\n        }\\r\\n\\r\\n        // if (!ns.fileExists(\\\"relaySMTP.exe\\\")) {\\r\\n        //     ns.singularity.createProgram(\\\"relaySMTP.exe\\\", true);\\r\\n \\r\\n        //  }\\r\\n \\r\\n        //  if (!ns.fileExists(\\\"SQLInject.exe\\\")) {\\r\\n        //     ns.singularity.createProgram(\\\"SQLInject.exe\\\", true);\\r\\n        //  }\\r\\n\\r\\n        //  if (!ns.fileExists(\\\"HTTPWorm.exe\\\")) {\\r\\n        //     ns.singularity.createProgram(\\\"HTTPWorm.exe\\\", true);\\r\\n \\r\\n        //  }\\r\\n \\r\\n        //  if (!ns.fileExists(\\\"Formulas.exe\\\")) {\\r\\n        //     ns.singularity.createProgram(\\\"Formulas.exe\\\", true);\\r\\n        //  }\\r\\n    }\\r\\n}\",\"filename\":\"scripts/singularity/create-early-programs.js\",\"server\":\"home\"}}],[\"scripts/singularity/buy-rep.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n\\r\\n    const moneyAvailable = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n\\r\\n    if (moneyAvailable > 10_000_000_000_000){\\r\\n        const ownedAugmentations = ns.singularity.getOwnedAugmentations(true);\\r\\n        const player = ns.getPlayer();\\r\\n\\r\\n        const mostRepExpensiveForEachFaction = [];\\r\\n\\r\\n        for (const faction of player.factions) {\\r\\n            const maximumAugRep = Math.max(...ns\\r\\n                .singularity\\r\\n                .getAugmentationsFromFaction(faction)\\r\\n                .filter(x => x !== \\\"NeuroFlux Governor\\\")\\r\\n                .filter(x => !ownedAugmentations.includes(x))\\r\\n                .filter(x => {\\r\\n                    const prereqs = ns.singularity.getAugmentationPrereq(x);\\r\\n                    return prereqs.every(y => ownedAugmentations.includes(y));\\r\\n                })\\r\\n                .map(x => ns.singularity.getAugmentationRepReq(x)));\\r\\n    \\r\\n            const favor = ns.singularity.getFactionFavor(faction);\\r\\n    \\r\\n            if (maximumAugRep > 0 && favor > 75) {\\r\\n                mostRepExpensiveForEachFaction.push({ faction, maximumAugRep });\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if(mostRepExpensiveForEachFaction.length > 0){\\r\\n            for (const factionWithRep of mostRepExpensiveForEachFaction) {\\r\\n                \\r\\n                const currentFactionRep = ns.singularity.getFactionRep(factionWithRep.faction);\\r\\n                const repNeeded = factionWithRep.maximumAugRep - currentFactionRep;\\r\\n\\r\\n                if(repNeeded < 0){\\r\\n                    continue;\\r\\n                }\\r\\n\\r\\n                let purchasedRep = 0;\\r\\n                let dollarsDonated = 0;\\r\\n\\r\\n                while(repNeeded > purchasedRep){\\r\\n                    dollarsDonated += 10_000_000;\\r\\n                    purchasedRep = ns.formulas.reputation.repFromDonation(dollarsDonated, player);\\r\\n                }\\r\\n\\r\\n                ns.singularity.donateToFaction(factionWithRep.faction, dollarsDonated);\\r\\n                \\r\\n                const fileToIndicateWeDonatedToFaction = \\\"data/factionDonatation.txt\\\";\\r\\n                ns.rm(fileToIndicateWeDonatedToFaction);\\r\\n                ns.write(fileToIndicateWeDonatedToFaction, factionWithRep.faction, \\\"W\\\");\\r\\n            }\\r\\n        }\\r\\n    }   \\r\\n}\",\"filename\":\"scripts/singularity/buy-rep.js\",\"server\":\"home\"}}],[\"scripts/stock/buy-4s.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let moneyAvailable = ns.getServerMoneyAvailable(\\\"home\\\") \\r\\n\\r\\n    if (moneyAvailable > 26_000_000_000 && !ns.stock.has4SDataTIXAPI()) {\\r\\n        ns.stock.purchase4SMarketDataTixApi();\\r\\n    }\\r\\n}\",\"filename\":\"scripts/stock/buy-4s.js\",\"server\":\"home\"}}],[\"scripts/stock/populate-forecast.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const latestStockQuotesFile = \\\"data/latestQuotes.txt\\\";\\r\\n    const stockRecords = JSON.parse(ns.read(latestStockQuotesFile));\\r\\n\\r\\n    const hasS4DataTIXAPI = ns.stock.has4SDataTIXAPI();\\r\\n\\r\\n    if (hasS4DataTIXAPI) {\\r\\n        for (const stockRecord of stockRecords) {\\r\\n            stockRecord.volatility = ns.stock.getVolatility(stockRecord.symbol);\\r\\n            stockRecord.forecast = ns.stock.getForecast(stockRecord.symbol);\\r\\n            stockRecord.bias = Math.abs(stockRecord.forecast - .5);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    ns.rm(latestStockQuotesFile);\\r\\n    ns.write(latestStockQuotesFile, JSON.stringify(stockRecords), \\\"W\\\")\\r\\n}\",\"filename\":\"scripts/stock/populate-forecast.js\",\"server\":\"home\"}}],[\"scripts/stock/invest-in-stocks.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"let lastRecordedToConsole = new Date();\\r\\n\\r\\nexport async function main(ns) {\\r\\n\\r\\n    let historicalData = new Map();\\r\\n\\r\\n    const nameOfStockHistoricalData = \\\"../../data/stockHistory.txt\\\";\\r\\n    if (ns.fileExists(nameOfStockHistoricalData)) {\\r\\n        historicalData = new Map(JSON.parse(ns.read(nameOfStockHistoricalData)));\\r\\n    }\\r\\n\\r\\n    const stockMarketReserveMoneyFile = \\\"data/stockMarketReserveMoney.txt\\\";\\r\\n    let stockMarketReserveMoney = new ReserveForTrading();\\r\\n    if (ns.fileExists(stockMarketReserveMoneyFile)) {\\r\\n        stockMarketReserveMoney = new ReserveForTrading(JSON.parse(ns.read(stockMarketReserveMoneyFile)));\\r\\n    }\\r\\n\\r\\n    const latestStockQuotesFile = \\\"data/latestQuotes.txt\\\";\\r\\n    const stockRecords = JSON.parse(ns.read(latestStockQuotesFile));\\r\\n\\r\\n    SaveHistoricData(stockRecords, historicalData, ns, nameOfStockHistoricalData);\\r\\n\\r\\n    let moneyInvested = 0;\\r\\n    moneyInvested += stockRecords.reduce((sum, record) => sum += record.price * record.investedShares, 0);\\r\\n    moneyInvested += stockRecords.reduce((sum, record) => sum += (record.averageShortPrice * record.sharesShort) + ((record.averageShortPrice - record.price) * record.sharesShort), 0);\\r\\n\\r\\n    stockMarketReserveMoney.setMoneyInvested(moneyInvested, ns);\\r\\n\\r\\n    const moneyWeHaveNow = ns.getServerMoneyAvailable(\\\"home\\\") + stockMarketReserveMoney.moneyInvested;\\r\\n\\r\\n    const now = new Date();\\r\\n    const timeStamp = `[${String(now.getHours()).padStart(2, 0)}:${String(now.getMinutes()).padStart(2, 0)}]`\\r\\n    const formatter = new Intl.NumberFormat('en-US', {\\r\\n        style: 'currency',\\r\\n        currency: 'USD',\\r\\n    });\\r\\n\\r\\n    if (now.getMinutes() !== lastRecordedToConsole.getMinutes() && !ns.fileExists(\\\"data/batchQueue.txt\\\")) { // && batches not running\\r\\n        const moneyFormatted = formatter.format(moneyWeHaveNow);\\r\\n\\r\\n        let consoleUpdate = `${timeStamp} Money we have now: ${moneyFormatted}`;\\r\\n\\r\\n        ns.tprint(consoleUpdate);\\r\\n\\r\\n        lastRecordedToConsole = now;\\r\\n    }\\r\\n\\r\\n    const nameOfLedger = \\\"../../data/salesLedger.txt\\\"\\r\\n    let ledger = [];\\r\\n\\r\\n    if (ns.fileExists(nameOfLedger)) {\\r\\n        ledger = JSON.parse(ns.read(nameOfLedger));\\r\\n    }\\r\\n\\r\\n    stockMarketReserveMoney.moneyRequested = new Map(Array.from(stockMarketReserveMoney.moneyRequested));\\r\\n    const reserveMoneyKeys = stockMarketReserveMoney.moneyRequested.keys();\\r\\n    let moneyRequested = 0;\\r\\n\\r\\n\\r\\n    for (const requestKey of reserveMoneyKeys) {\\r\\n        const moneyRequestedFromService = stockMarketReserveMoney.moneyRequested.get(requestKey);\\r\\n        stockMarketReserveMoney.moneyRequested.set(requestKey, moneyRequestedFromService);\\r\\n        moneyRequested += moneyRequestedFromService + 100_000;\\r\\n    }\\r\\n\\r\\n    stockMarketReserveMoney.moneyRequested = Array.from(stockMarketReserveMoney.moneyRequested);\\r\\n\\r\\n    if (moneyRequested === 0) {\\r\\n        stockMarketReserveMoney.countOfVisitedWithoutFillingRequest = 0;\\r\\n    }\\r\\n\\r\\n    let sellSharesToSatisfyMoneyDemands = false;\\r\\n    if (stockMarketReserveMoney.countOfVisitedWithoutFillingRequest > 90) {\\r\\n        sellSharesToSatisfyMoneyDemands = true;\\r\\n    }\\r\\n\\r\\n    const commission = 100_001;\\r\\n\\r\\n    const stopTradingExists = ns.fileExists(\\\"../../stopTrading.txt\\\");\\r\\n\\r\\n    for (const stock of stockRecords) {\\r\\n        let sharesToSell = 0;\\r\\n        let type = \\\"Short-Term Long Sale\\\";\\r\\n        let averagePrice = 0;\\r\\n        let coverShort = false;\\r\\n\\r\\n        if (stock.investedShares > 0) {\\r\\n            sharesToSell = stock.investedShares;\\r\\n            type = \\\"Short-Term Long Sale\\\";\\r\\n            averagePrice = stock.averagePrice;\\r\\n            coverShort = false;\\r\\n        }\\r\\n\\r\\n        if (stock.sharesShort > 0) {\\r\\n            sharesToSell = stock.sharesShort;\\r\\n            type = \\\"Short-Term Cover Short\\\";\\r\\n            averagePrice = stock.averageShortPrice;\\r\\n            coverShort = true;\\r\\n        }\\r\\n\\r\\n        if (sellSharesToSatisfyMoneyDemands && sharesToSell > 0) {\\r\\n            if (stockMarketReserveMoney.canSellAmountAndStillHaveReserve(moneyRequested)) {\\r\\n                sharesToSell = Math.ceil(moneyRequested / stock.bid) + 5\\r\\n\\r\\n                if (sharesToSell > stock.investedShares && stock.investedShares !== 0) {\\r\\n                    sharesToSell = stock.investedShares;\\r\\n                }\\r\\n\\r\\n                if (sharesToSell > stock.sharesShort && stock.sharesShort !== 0) {\\r\\n                    sharesToSell = stock.sharesShort;\\r\\n                }\\r\\n            } else {\\r\\n                sellSharesToSatisfyMoneyDemands = false;\\r\\n                stockMarketReserveMoney.countOfVisitedWithoutFillingRequest = 0;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (sharesToSell > 0) {\\r\\n            if ((stock.sellTrend && coverShort === false) || stopTradingExists || sellSharesToSatisfyMoneyDemands || (stock.coverShortTrend && coverShort)) {\\r\\n                let salePrice;\\r\\n                if (coverShort) {\\r\\n                    salePrice = ns.stock.sellShort(stock.symbol, sharesToSell);\\r\\n                } else {\\r\\n                    salePrice = ns.stock.sellStock(stock.symbol, sharesToSell);\\r\\n                }\\r\\n\\r\\n                stockMarketReserveMoney.moneyInvested -= salePrice * sharesToSell;\\r\\n\\r\\n                if(stockMarketReserveMoney.moneyInvested < 0){\\r\\n                    stockMarketReserveMoney.moneyInvested = 0;\\r\\n                }\\r\\n\\r\\n                ledger.push(new LedgerItem(\\r\\n                    stock.symbol,\\r\\n                    salePrice,\\r\\n                    averagePrice,\\r\\n                    sharesToSell,\\r\\n                    type,\\r\\n                    stock.forecast\\r\\n                ))\\r\\n\\r\\n                if (sellSharesToSatisfyMoneyDemands) {\\r\\n                    stockMarketReserveMoney.moneyRequested = [];\\r\\n                    sellSharesToSatisfyMoneyDemands = false;\\r\\n                    ns.toast(`${timeStamp} Sold ${formatter.format(moneyRequested)} for money request.`, \\\"success\\\", null)\\r\\n                }\\r\\n\\r\\n                if (stopTradingExists) {\\r\\n                    ns.toast(\\\"Stopped trading\\\", \\\"success\\\", null)\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    ns.rm(nameOfLedger);\\r\\n    ns.write(nameOfLedger, JSON.stringify(ledger), \\\"W\\\");\\r\\n\\r\\n    const liquidCash = ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n\\r\\n    let moneyAvailable = liquidCash - commission - moneyRequested;\\r\\n\\r\\n    if (stockMarketReserveMoney.capitalToReserveForTrading > stockMarketReserveMoney.moneyInvested) {\\r\\n        moneyAvailable = liquidCash - commission;\\r\\n    }\\r\\n\\r\\n    if (moneyAvailable > 5_000_000_000 && !ns.stock.has4SDataTIXAPI()) {\\r\\n        moneyAvailable = 5_000_000_000;\\r\\n    }\\r\\n\\r\\n    const onlyInvestIfWeHaveMoreThan = 12_000_000;\\r\\n\\r\\n    if (moneyAvailable > onlyInvestIfWeHaveMoreThan && !stopTradingExists) {\\r\\n        let stocksToTrade = stockRecords\\r\\n            .filter(stock =>\\r\\n                (stock.sellShortTrend && stock.maxShares !== stock.sharesShort) ||\\r\\n                (stock.buyTrend && stock.investedShares !== stock.maxShares))\\r\\n            .sort((a, b) => b.volatility - a.volatility);\\r\\n\\r\\n        if (!ns.stock.has4SDataTIXAPI()) {\\r\\n            stocksToTrade = stockRecords\\r\\n                .filter(stock =>\\r\\n                    (stock.sellShortTrend && stock.sharesShort === 0) ||\\r\\n                    (stock.buyTrend && stock.investedShares === 0))\\r\\n                .sort((a, b) => b.magnitudeOfSignal - a.magnitudeOfSignal);\\r\\n        }\\r\\n\\r\\n        if (stocksToTrade.length > 0) {\\r\\n            const stockToLookAt = stocksToTrade[0];\\r\\n\\r\\n            let sharesToBuy = 0;\\r\\n            const ticker = stockToLookAt.symbol;\\r\\n\\r\\n            if (stockToLookAt.buyTrend) {\\r\\n                sharesToBuy = Math.round(moneyAvailable / stockToLookAt.ask);\\r\\n\\r\\n                const totalSharesAfterBuy = sharesToBuy + stockToLookAt.investedShares;\\r\\n\\r\\n                if (stockToLookAt.maxShares < totalSharesAfterBuy) {\\r\\n                    sharesToBuy = stockToLookAt.maxShares - stockToLookAt.investedShares;\\r\\n                }\\r\\n\\r\\n                ns.stock.buyStock(ticker, sharesToBuy);\\r\\n            }\\r\\n\\r\\n            if (stockToLookAt.sellShortTrend) {\\r\\n                sharesToBuy = Math.round(moneyAvailable / stockToLookAt.bid);\\r\\n\\r\\n                const totalSharesAfterBuy = sharesToBuy + stockToLookAt.sharesShort;\\r\\n\\r\\n                if (stockToLookAt.maxShares < totalSharesAfterBuy) {\\r\\n                    sharesToBuy = stockToLookAt.maxShares - stockToLookAt.sharesShort;\\r\\n                }\\r\\n\\r\\n                ns.stock.buyShort(ticker, sharesToBuy);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    ns.rm(stockMarketReserveMoneyFile);\\r\\n    ns.write(stockMarketReserveMoneyFile, JSON.stringify(stockMarketReserveMoney), \\\"W\\\");\\r\\n}\\r\\n\\r\\n\\r\\nclass ReserveForTrading {\\r\\n    stockMarketReserveMoneyLimit = 1_500_000_000_000;\\r\\n    capitalToReserveForTrading = 500_000_000;\\r\\n    moneyInvested = 0;\\r\\n    moneyRequested = new Map();\\r\\n    countOfVisitedWithoutFillingRequest = 0;\\r\\n\\r\\n\\r\\n    constructor(obj) {\\r\\n        obj && Object.assign(this, obj);\\r\\n    }\\r\\n\\r\\n    canSellAmountAndStillHaveReserve(amountToSell) {\\r\\n        return (this.moneyInvested - amountToSell) > this.capitalToReserveForTrading;\\r\\n    }\\r\\n\\r\\n    setMoneyInvested(moneyInvested, ns) {\\r\\n        this.moneyInvested = moneyInvested;\\r\\n\\r\\n        const potentialCapitalReserve = (moneyInvested + ns.getServerMoneyAvailable(\\\"home\\\")) * .85;\\r\\n\\r\\n        this.capitalToReserveForTrading = Math.max(...[potentialCapitalReserve, this.capitalToReserveForTrading]);\\r\\n\\r\\n        if (this.capitalToReserveForTrading > this.stockMarketReserveMoneyLimit) {\\r\\n            this.capitalToReserveForTrading = this.stockMarketReserveMoneyLimit;\\r\\n        }\\r\\n\\r\\n        this.countOfVisitedWithoutFillingRequest++;\\r\\n    }\\r\\n\\r\\n    canSpend(ns, moneyNeeded) {\\r\\n        const moneyOnHome = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n\\r\\n        let moneyToSaveForTrading = this.capitalToReserveForTrading - this.moneyInvested;\\r\\n\\r\\n        if (moneyToSaveForTrading < 0) {\\r\\n            moneyToSaveForTrading = 0;\\r\\n        }\\r\\n\\r\\n        if (moneyToSaveForTrading > this.stockMarketReserveMoneyLimit) {\\r\\n            moneyToSaveForTrading = this.stockMarketReserveMoneyLimit;\\r\\n        }\\r\\n\\r\\n        const canSpend = moneyNeeded < moneyOnHome - moneyToSaveForTrading\\r\\n\\r\\n        if (canSpend === false) {\\r\\n            this.requestMoney(ns, moneyNeeded);\\r\\n        } else {\\r\\n            this.moneyRequested = new Map(Array.from(this.moneyRequested));\\r\\n\\r\\n            const nameOfRequest = \\\"invest-in-stocks\\\";\\r\\n            this.moneyRequested.delete(nameOfRequest);\\r\\n            const stockMarketReserveMoneyFile = \\\"data/stockMarketReserveMoney.txt\\\";\\r\\n            ns.rm(stockMarketReserveMoneyFile);\\r\\n            ns.write(stockMarketReserveMoneyFile, JSON.stringify(this), \\\"W\\\");\\r\\n        }\\r\\n\\r\\n        return canSpend;\\r\\n    }\\r\\n\\r\\n    requestMoney(ns, amount) {\\r\\n        const nameOfRequest = \\\"invest-in-stocks\\\";\\r\\n        this.moneyRequested = new Map(Array.from(this.moneyRequested));\\r\\n\\r\\n        const moneyRequestedPreviously = this.moneyRequested.get(nameOfRequest);\\r\\n        if (moneyRequestedPreviously) {\\r\\n            if (moneyRequestedPreviously < amount) {\\r\\n                this.moneyRequested.set(nameOfRequest, amount);\\r\\n                this.moneyRequested = Array.from(this.moneyRequested);\\r\\n\\r\\n                const stockMarketReserveMoneyFile = \\\"data/stockMarketReserveMoney.txt\\\";\\r\\n                ns.rm(stockMarketReserveMoneyFile);\\r\\n                ns.write(stockMarketReserveMoneyFile, JSON.stringify(this), \\\"W\\\");\\r\\n            }\\r\\n        } else {\\r\\n            this.moneyRequested.set(nameOfRequest, amount);\\r\\n            this.moneyRequested = Array.from(this.moneyRequested);\\r\\n\\r\\n            const stockMarketReserveMoneyFile = \\\"data/stockMarketReserveMoney.txt\\\";\\r\\n            ns.rm(stockMarketReserveMoneyFile);\\r\\n            ns.write(stockMarketReserveMoneyFile, JSON.stringify(this), \\\"W\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nclass LedgerItem {\\r\\n\\r\\n    constructor(symbol, price, averagePurchasePrice, shares, type, forecastAtSale) {\\r\\n        const formatter = new Intl.NumberFormat('en-US', {\\r\\n            style: 'currency',\\r\\n            currency: 'USD',\\r\\n        });\\r\\n\\r\\n        let numberProfit = (price - averagePurchasePrice) * shares;\\r\\n\\r\\n        if (type === \\\"Short-Term Cover Short\\\") {\\r\\n            numberProfit = (averagePurchasePrice - price) * shares;\\r\\n        }\\r\\n\\r\\n        this.date = new Date().toLocaleString();\\r\\n        this.symbol = symbol;\\r\\n        this.price = price;\\r\\n        this.averagePurchasePrice = averagePurchasePrice;\\r\\n        this.profit = formatter.format(numberProfit);\\r\\n        this.profitPercent = (numberProfit / (shares * averagePurchasePrice)).toLocaleString(undefined, { style: 'percent', minimumFractionDigits: 2 });\\r\\n        this.shares = shares;\\r\\n        this.type = type;\\r\\n        this.forecastAtSale = forecastAtSale;\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\nclass StockHistoricData {\\r\\n    shortTermRecords = [];\\r\\n    longTermRecords = [];\\r\\n    recentTicksOfPrices = [];\\r\\n\\r\\n\\r\\n    constructor(obj) {\\r\\n        obj && Object.assign(this, obj);\\r\\n    }\\r\\n\\r\\n    addRecord(record, ns) {\\r\\n        this.shortTermRecords.push(record);\\r\\n        this.recentTicksOfPrices.push(record.price);\\r\\n\\r\\n        if (this.recentTicksOfPrices.length === 21) {\\r\\n            record.countOfNegative = 0;\\r\\n            record.countOfPositive = 0;\\r\\n            record.magnitudeOfSignal = 0;\\r\\n\\r\\n            let lastPrice;\\r\\n            for (const price of this.recentTicksOfPrices) {\\r\\n                if (lastPrice) {\\r\\n                    if (lastPrice < price) {\\r\\n                        record.countOfPositive++;\\r\\n                    }\\r\\n\\r\\n                    if (lastPrice > price) {\\r\\n                        record.countOfNegative++;\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                lastPrice = price;\\r\\n            }\\r\\n\\r\\n            this.recentTicksOfPrices.shift();\\r\\n        }\\r\\n\\r\\n        const hasOracle = ns.stock.has4SDataTIXAPI();\\r\\n\\r\\n\\r\\n        if (!hasOracle) {\\r\\n            if (record.countOfPositive >= 16) {\\r\\n                record.buyTrend = true;\\r\\n                record.magnitudeOfSignal = record.countOfPositive;\\r\\n            }\\r\\n\\r\\n            if (record.countOfPositive <= 12 && record.investedShares > 0) {\\r\\n                record.sellTrend = true;\\r\\n            }\\r\\n\\r\\n            if (record.countOfNegative >= 16) {\\r\\n                record.sellShortTrend = true;\\r\\n                record.magnitudeOfSignal = record.countOfNegative;\\r\\n            }\\r\\n\\r\\n            if (record.countOfNegative <= 12 && record.sharesShort > 0) {\\r\\n                record.coverShortTrend = true;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (hasOracle) {\\r\\n            if (record.forecast > 0.6) {\\r\\n                record.buyTrend = true;\\r\\n            }\\r\\n\\r\\n            if (record.forecast < 0.5 && record.investedShares > 0) {\\r\\n                record.sellTrend = true;\\r\\n            }\\r\\n\\r\\n            if (0.4 > record.forecast) {\\r\\n                record.sellShortTrend = true;\\r\\n            }\\r\\n\\r\\n            if (0.5 < record.forecast && record.sharesShort > 0) {\\r\\n                record.coverShortTrend = true;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    storeLongTerm() {\\r\\n        const newLongTermStock = new Stock(\\r\\n            this.shortTermRecords[0].symbol,\\r\\n            this.shortTermRecords.map(x => x.bid).reduce((a, b) => a + b) / this.shortTermRecords.length,\\r\\n            this.shortTermRecords.map(x => x.ask).reduce((a, b) => a + b) / this.shortTermRecords.length,\\r\\n            this.shortTermRecords.map(x => x.price).reduce((a, b) => a + b) / this.shortTermRecords.length,\\r\\n            this.shortTermRecords[0].maxShares,\\r\\n            [\\r\\n                this.shortTermRecords.map(x => x.investedShares).reduce((a, b) => a + b) / this.shortTermRecords.length,\\r\\n                this.shortTermRecords.map(x => x.averagePrice).reduce((a, b) => a + b) / this.shortTermRecords.length,\\r\\n                this.shortTermRecords.map(x => x.sharesShort).reduce((a, b) => a + b) / this.shortTermRecords.length,\\r\\n                this.shortTermRecords.map(x => x.averageShortPrice).reduce((a, b) => a + b) / this.shortTermRecords.length,\\r\\n            ]\\r\\n        );\\r\\n\\r\\n        newLongTermStock.volatility = this.shortTermRecords[0].volatility;\\r\\n        newLongTermStock.forecast = this.shortTermRecords.map(x => x.forecast).reduce((a, b) => a + b) / this.shortTermRecords.length;\\r\\n\\r\\n        newLongTermStock.bias = Math.max(...this.shortTermRecords.map(x => x.bias));\\r\\n\\r\\n        this.longTermRecords.push(newLongTermStock);\\r\\n\\r\\n        this.shortTermRecords.length = 0;\\r\\n    }\\r\\n}\\r\\n\\r\\nclass Stock {\\r\\n    constructor(symbol, bid, ask, price, maxShares, position = {}, dateObserved = new Date()) {\\r\\n        this.symbol = symbol;\\r\\n        this.bid = bid;\\r\\n        this.ask = ask;\\r\\n        this.price = price;\\r\\n        this.maxShares = maxShares;\\r\\n        this.investedShares = position[0];\\r\\n        this.averagePrice = position[1];\\r\\n        this.sharesShort = position[2];\\r\\n        this.averageShortPrice = position[3];\\r\\n        this.dateObserved = dateObserved.toLocaleString();\\r\\n    }\\r\\n\\r\\n    volatility;\\r\\n    forecast;\\r\\n\\r\\n    buyTrend = false;\\r\\n    sellTrend = false;\\r\\n    sellShortTrend = false;\\r\\n    coverShortTrend = false;\\r\\n\\r\\n}\\r\\n\\r\\nfunction SaveHistoricData(stockRecords, historicalData, ns, nameOfStockHistoricalData) {\\r\\n    stockRecords.map(x => {\\r\\n        if (historicalData.has(x.symbol)) {\\r\\n            const data = historicalData.get(x.symbol);\\r\\n\\r\\n            if (data.shortTermRecords[data.shortTermRecords.length - 1]?.price !== x.price) {\\r\\n                const record = new StockHistoricData(data);\\r\\n                record.addRecord(x, ns);\\r\\n\\r\\n                if (record.shortTermRecords.length >= 100) {\\r\\n                    record.storeLongTerm();\\r\\n                }\\r\\n\\r\\n                historicalData.set(x.symbol, record);\\r\\n            }\\r\\n\\r\\n        } else {\\r\\n            const stockHistoryData = new StockHistoricData();\\r\\n            stockHistoryData.addRecord(x, ns);\\r\\n            historicalData.set(x.symbol, stockHistoryData);\\r\\n        }\\r\\n    });\\r\\n\\r\\n    ns.rm(nameOfStockHistoricalData);\\r\\n    ns.write(nameOfStockHistoricalData, JSON.stringify(Array.from(historicalData.entries()), \\\"W\\\"));\\r\\n}\\r\\n\",\"filename\":\"scripts/stock/invest-in-stocks.js\",\"server\":\"home\"}}],[\"scripts/stock/get-stock-quotes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n\\r\\n    const stockRecords = ns.stock\\r\\n        .getSymbols()\\r\\n        .map(x => new Stock(\\r\\n            x,\\r\\n            ns.stock.getBidPrice(x),\\r\\n            ns.stock.getAskPrice(x),\\r\\n        ));\\r\\n\\r\\n    const latestStockQuotesFile = \\\"data/latestQuotes.txt\\\";\\r\\n    ns.rm(latestStockQuotesFile);\\r\\n    ns.write(latestStockQuotesFile, JSON.stringify(stockRecords), \\\"W\\\")\\r\\n}\\r\\n\\r\\n\\r\\nclass Stock {\\r\\n    constructor(symbol, bid, ask, dateObserved = new Date()) {\\r\\n        this.symbol = symbol;\\r\\n        this.bid = bid;\\r\\n        this.ask = ask;\\r\\n        this.dateObserved = dateObserved.toLocaleString();\\r\\n    }\\r\\n\\r\\n    volatility;\\r\\n    forecast;\\r\\n\\r\\n    buyTrend = false;\\r\\n    sellTrend = false;\\r\\n    sellShortTrend = false;\\r\\n    coverShortTrend = false;\\r\\n\\r\\n}\",\"filename\":\"scripts/stock/get-stock-quotes.js\",\"server\":\"home\"}}],[\"scripts/tools/manually-end-round.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n\\r\\n    const player = ns.getPlayer();\\r\\n    const ownedAugmentations = ns.singularity.getOwnedAugmentations(true);\\r\\n\\r\\n    const formatter = new Intl.NumberFormat('en-US', {\\r\\n        style: 'currency',\\r\\n        currency: 'USD',\\r\\n    });\\r\\n\\r\\n    let totalToSpend = 0;\\r\\n\\r\\n    if (ns.fileExists(\\\"Formulas.exe\\\")) {\\r\\n        const factionsThatNeedDonating = [];\\r\\n\\r\\n        for (const faction of player.factions) {\\r\\n            const maximumAugRep = Math.max(...ns\\r\\n                .singularity\\r\\n                .getAugmentationsFromFaction(faction)\\r\\n                .filter(x => x !== \\\"NeuroFlux Governor\\\")\\r\\n                .filter(x => !ownedAugmentations.includes(x))\\r\\n                .filter(x => {\\r\\n                    const prereqs = ns.singularity.getAugmentationPrereq(x);\\r\\n                    return prereqs.every(y => ownedAugmentations.includes(y));\\r\\n                })\\r\\n                .map(x => ns.singularity.getAugmentationRepReq(x)));\\r\\n\\r\\n            const favor = ns.singularity.getFactionFavor(faction);\\r\\n\\r\\n            if (maximumAugRep > 0 && favor >= 0) {\\r\\n                factionsThatNeedDonating.push({ faction, maximumAugRep });\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (factionsThatNeedDonating.length > 0) {\\r\\n            for (const factionWithRep of factionsThatNeedDonating) {\\r\\n                let dollarsDonated = 0;\\r\\n\\r\\n                const currentFactionRep = ns.singularity.getFactionRep(factionWithRep.faction);\\r\\n                const repNeeded = factionWithRep.maximumAugRep - currentFactionRep;\\r\\n\\r\\n                if (repNeeded < 0) {\\r\\n                    continue;\\r\\n                }\\r\\n\\r\\n                let purchasedRep = 0;\\r\\n\\r\\n                while (repNeeded > purchasedRep) {\\r\\n                    dollarsDonated += 10_000_000;\\r\\n                    purchasedRep = ns.formulas.reputation.repFromDonation(dollarsDonated, player);\\r\\n                }\\r\\n\\r\\n                ns.toast(`${factionWithRep.faction}`, 'success', null)\\r\\n                ns.toast(`Money needed for donations: ${formatter.format(dollarsDonated)}`, \\\"success\\\", null)\\r\\n\\r\\n                totalToSpend += dollarsDonated;\\r\\n\\r\\n                if (ns.args[0] === \\\"donate\\\") {\\r\\n                    ns.singularity.donateToFaction(factionWithRep.faction, dollarsDonated);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n\\r\\n    }\\r\\n\\r\\n\\r\\n    const mostRepExpensiveForEachFaction = [];\\r\\n    for (const faction of player.factions) {\\r\\n        const maximumAugRep = Math.max(...ns\\r\\n            .singularity\\r\\n            .getAugmentationsFromFaction(faction)\\r\\n            .filter(x => x !== \\\"NeuroFlux Governor\\\")\\r\\n            .filter(x => !ownedAugmentations.includes(x))\\r\\n            .map(x => ns.singularity.getAugmentationRepReq(x)));\\r\\n\\r\\n        if (maximumAugRep > 0) {\\r\\n            mostRepExpensiveForEachFaction.push({ faction, maximumAugRep });\\r\\n        }\\r\\n    }\\r\\n\\r\\n    const factionsWithAugmentsToBuy =\\r\\n        mostRepExpensiveForEachFaction\\r\\n            .map(x => {\\r\\n                {\\r\\n                    const faction = x.faction;\\r\\n                    const factionRep = ns.singularity.getFactionRep(faction);\\r\\n                    const factionAugmentsThatIDontOwnAndCanAfford = ns\\r\\n                        .singularity\\r\\n                        .getAugmentationsFromFaction(faction)\\r\\n                        .filter(y => y !== \\\"NeuroFlux Governor\\\")\\r\\n                        .filter(y => !ownedAugmentations.includes(y))\\r\\n                        .map(y => {\\r\\n                            return {\\r\\n                                augmentName: y,\\r\\n                                augmentationRepCost: ns.singularity.getAugmentationRepReq(y),\\r\\n                                price: ns.singularity.getAugmentationPrice(y),\\r\\n                                prereqs: ns.singularity.getAugmentationPrereq(y)\\r\\n                            }\\r\\n                        })\\r\\n                        .filter(y => y.augmentationRepCost < factionRep)\\r\\n                        .sort((a, b) => b.price - a.price);\\r\\n\\r\\n                    return {\\r\\n                        faction,\\r\\n                        factionRep,\\r\\n                        factionAugmentsThatIDontOwnAndCanAfford\\r\\n                    }\\r\\n                }\\r\\n            });\\r\\n\\r\\n\\r\\n\\r\\n    const purchasableAugments = new Map();\\r\\n\\r\\n    for (const factionWithAugments of factionsWithAugmentsToBuy) {\\r\\n        for (const augment of factionWithAugments.factionAugmentsThatIDontOwnAndCanAfford) {\\r\\n            if (purchasableAugments.has(augment.augmentName) === false) {\\r\\n                const item = {\\r\\n                    augmentationRepCost: augment.augmentationRepCost,\\r\\n                    price: augment.price,\\r\\n                    prereqs: augment.prereqs,\\r\\n                    faction: factionWithAugments.faction\\r\\n                }\\r\\n                purchasableAugments.set(augment.augmentName, item)\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    const augmentsLeft = Array.from(purchasableAugments.entries()).sort((a, b) => b[1].price - a[1].price);\\r\\n\\r\\n    const orderedAugments = []; // { factionName, augmentName, basePrice, multipledPrice}\\r\\n\\r\\n    function addPrereqs(prereqName) {\\r\\n        const augment = purchasableAugments.get(prereqName);\\r\\n\\r\\n        if (augment && !ownedAugmentations.find(x => x.augmentName === prereqName)) {\\r\\n\\r\\n            if (augment.prereqs.length > 0) {//it has prereqs, pass it into this. \\r\\n                for (const prereq of augment.prereqs) {\\r\\n                    addPrereqs(prereq)\\r\\n                }\\r\\n            }\\r\\n\\r\\n            if (!orderedAugments.find(x => x.augmentName === prereqName)) {\\r\\n                orderedAugments.push({ faction: augment.faction, augmentName: prereqName, basePrice: augment.price });\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    for (const augmentData of augmentsLeft) {\\r\\n        const augmentName = augmentData[0];\\r\\n        const augment = augmentData[1];\\r\\n\\r\\n        if (augment.prereqs.length > 0) {\\r\\n            for (const prereqName of augment.prereqs) {\\r\\n                addPrereqs(prereqName);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (!orderedAugments.find(x => x.augmentName === augmentName)) {\\r\\n            orderedAugments.push({ faction: augment.faction, augmentName: augmentName, basePrice: augment.price, multipledPrice: 0 })\\r\\n        }\\r\\n\\r\\n    }\\r\\n\\r\\n    let priceMultipler = 1;\\r\\n\\r\\n    for (const augment of orderedAugments) {\\r\\n        augment.multipledPrice = augment.basePrice * priceMultipler;\\r\\n        priceMultipler *= 1.9;\\r\\n    }\\r\\n\\r\\n    const moneyNeededForAugments = orderedAugments.reduce((acc, x) => acc + x.multipledPrice, 0);\\r\\n\\r\\n    totalToSpend += moneyNeededForAugments;\\r\\n\\r\\n    const moneyFormatted = formatter.format(moneyNeededForAugments);\\r\\n\\r\\n    if (ns.args[0] === \\\"finish\\\") {\\r\\n        for (const augment of orderedAugments) {\\r\\n            purchaseAug(ns, augment);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    ns.toast(`Money needed for augs: ${moneyFormatted}`, 'success', null)\\r\\n\\r\\n    ns.toast(`Total Needed: ${formatter.format(totalToSpend)}`, 'success', null)\\r\\n\\r\\n    ns.rm('orderedAugments.txt')\\r\\n    ns.write(\\\"orderedAugments.txt\\\", JSON.stringify(orderedAugments), \\\"W\\\")\\r\\n\\r\\n}\\r\\n\\r\\nfunction purchaseAug(ns, augment) {\\r\\n    const ownedAugments = ns.singularity.getOwnedAugmentations(true);\\r\\n    const augmentName = augment.augmentName;\\r\\n\\r\\n    if (ownedAugments.includes(augmentName) === false) {\\r\\n        const augmentPrice = ns.singularity.getAugmentationPrice(augmentName);\\r\\n        const amountOfMoneyWeHave = ns.getServerMoneyAvailable(\\\"home\\\")\\r\\n\\r\\n        if (augmentPrice < amountOfMoneyWeHave) {\\r\\n            ns.singularity.purchaseAugmentation(augment.faction, augmentName);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"scripts/tools/manually-end-round.js\",\"server\":\"home\"}}],[\"scripts/tools/delete-job-from-batch-queue.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\r\\n    const targetName = ns.args[0];\\r\\n\\r\\n    const batchQueuesFileName = \\\"data/batchQueue.txt\\\"\\r\\n\\r\\n    let batchQueueForDifferentTargets = new Map();\\r\\n    if (ns.fileExists(batchQueuesFileName)) {\\r\\n        batchQueueForDifferentTargets = new Map(JSON.parse(ns.read(batchQueuesFileName)));\\r\\n    }\\r\\n\\r\\n    const target = batchQueueForDifferentTargets.get(targetName);\\r\\n\\r\\n    for (const batch of target.batchesQueue) {\\r\\n        batch.jobs.map(x => {\\r\\n            if (x.pid) {\\r\\n                ns.kill(x.pid);\\r\\n            }\\r\\n        });\\r\\n    };\\r\\n\\r\\n    batchQueueForDifferentTargets.delete(targetName);\\r\\n\\r\\n    ns.rm(batchQueuesFileName);\\r\\n    ns.write(batchQueuesFileName, JSON.stringify(Array.from(batchQueueForDifferentTargets.entries()), \\\"W\\\"));\\r\\n\\r\\n}\\r\\n\",\"filename\":\"scripts/tools/delete-job-from-batch-queue.js\",\"server\":\"home\"}}],[\"scripts/clean.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"//run scripts/clean.js \\r\\nexport async function main(ns) {\\r\\n    let newMachine = false;\\r\\n\\r\\n    if (ns.args[0] === \\\"new\\\") {\\r\\n        newMachine = true;\\r\\n    }\\r\\n\\r\\n    \\r\\n    if (!newMachine) {\\r\\n        ns.killall(\\\"home\\\", true);\\r\\n\\r\\n        const enviroment = JSON.parse(ns.read(\\\"data/enviroment.txt\\\"));\\r\\n        enviroment\\r\\n            .filter(x => x.server.hasAdminRights)\\r\\n            .map(target => {\\r\\n                ns.killall(target.name);\\r\\n            })\\r\\n    }\\r\\n\\r\\n    const doNoDeleteFolders = [\\\"analytics\\\", \\\"contracts\\\"]\\r\\n\\r\\n\\r\\n    for (const textFile of ns.ls(\\\"home\\\", \\\".txt\\\")) {\\r\\n        if(!doNoDeleteFolders.find(x => textFile.startsWith(x))){\\r\\n            ns.rm(textFile);\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"scripts/clean.js\",\"server\":\"home\"}}],[\"scripts/scan.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n/// run scripts/scan.js dispatchScript\\r\\nexport async function main(ns) {\\r\\n    const dispatchScript = ns.args[0];\\r\\n\\r\\n    if (dispatchScript === undefined){\\r\\n        ns.tprint(\\\"Must define dispatch script for scan.\\\")\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    const result = new dataMonger(ns).scanEnvironment();\\r\\n\\r\\n    ns.rm('data/enviroment.txt')\\r\\n    ns.write('data/enviroment.txt', JSON.stringify(result), \\\"W\\\")\\r\\n\\r\\n    ns.run(dispatchScript)\\r\\n}\\r\\n\\r\\nexport class dataMonger {\\r\\n    constructor(ns) {\\r\\n        this.ns = ns;\\r\\n    }\\r\\n\\r\\n    scanEnvironment(machineToScan = \\\"home\\\", serversToScan = [], scannedServers = [], result = []) {\\r\\n        if (serversToScan.length === 0 && machineToScan !== \\\"home\\\") {\\r\\n            return result;\\r\\n        }\\r\\n\\r\\n        let lineage = result\\r\\n            .find(x => x.name === machineToScan)\\r\\n            ?.lineage\\r\\n            .map(x => x); // so we aren't using a reference\\r\\n\\r\\n        const scan = this.ns\\r\\n            .scan(machineToScan)\\r\\n            .map(x => new ServerNode(\\r\\n                machineToScan,\\r\\n                this.ns.getServer(x),\\r\\n                lineage\\r\\n            ));\\r\\n\\r\\n        scan.forEach(x => {\\r\\n            if (!scannedServers.includes(x.name) && !serversToScan.includes(x.name)) {\\r\\n                serversToScan.push(x.name);\\r\\n                result.push(x);\\r\\n            }\\r\\n        });\\r\\n\\r\\n        scannedServers.push(machineToScan);\\r\\n        machineToScan = serversToScan.pop();\\r\\n        return this.scanEnvironment(machineToScan, serversToScan, scannedServers, result);\\r\\n    }\\r\\n}\\r\\n\\r\\nclass ServerNode {\\r\\n    constructor(parentsName, server, lineage = []) {\\r\\n        this.name = server.hostname;\\r\\n        this.lineage = lineage\\r\\n        if (parentsName !== \\\"home\\\" && this.lineage !== undefined) {\\r\\n            if (!this.lineage.includes(parentsName)) {\\r\\n                this.lineage.push(parentsName)\\r\\n            }\\r\\n        }\\r\\n\\r\\n        this.server = server;\\r\\n    }\\r\\n}\",\"filename\":\"scripts/scan.js\",\"server\":\"home\"}}],[\"scripts/precalculate-important-data.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\nexport async function main(ns) {\\r\\n\\r\\n  const notImportantScriptsForEarlyGame = [\\r\\n    \\\"scripts/singularity/finish-bitnode.js\\\", \\r\\n    \\\"scripts/singularity/finish-round.js\\\", \\r\\n    \\\"scripts/singularity/buy-rep.js\\\",\\r\\n    \\\"scripts/hacking/batch-dispatch.js\\\",\\r\\n    \\\"scripts/tools/manually-end-round.js\\\",\\r\\n  ];\\r\\n\\r\\n  const notImportantFolder = \\\"scripts/corporations/\\\"\\r\\n\\r\\n  const scriptsThatWeRun = JSON.parse(ns.read('data/scriptsToRun.txt'));\\r\\n\\r\\n  scriptsThatWeRun.push(\\\"scripts/coordinator.js\\\");\\r\\n\\r\\n  const orderedScriptsByRamUsage = scriptsThatWeRun\\r\\n    .map(x => new ScriptRam(ns.getScriptRam(x), x))\\r\\n    .sort((a, b) => b.ram - a.ram);\\r\\n\\r\\n  const mostExpensiveScript = orderedScriptsByRamUsage[0];\\r\\n  const coordinator = orderedScriptsByRamUsage.find(x => x.name === \\\"scripts/coordinator.js\\\");\\r\\n  const ramToReserve = coordinator.ram + mostExpensiveScript.ram + 1;\\r\\n\\r\\n  const earlyGameScriptsUsage = orderedScriptsByRamUsage\\r\\n    .filter(x => !notImportantScriptsForEarlyGame.includes(x.name))\\r\\n    .filter(x => !x.name.startsWith(notImportantFolder));\\r\\n\\r\\n  const mostExpensiveEarlyGame = earlyGameScriptsUsage[0];\\r\\n  const ramToReserveInLimitedEnvironment = coordinator.ram + mostExpensiveEarlyGame.ram + 1;\\r\\n  const earlyGameLimiter = mostExpensiveEarlyGame.name;\\r\\n\\r\\n  const ramReserveFile = 'data/ramToReserveOnHome.txt';\\r\\n\\r\\n\\r\\n  ns.rm(ramReserveFile);\\r\\n  ns.write(ramReserveFile, JSON.stringify({ramToReserve, ramToReserveInLimitedEnvironment, earlyGameLimiter}), \\\"W\\\");\\r\\n\\r\\n  const ownedAugmentations = ns.singularity.getOwnedAugmentations(true);\\r\\n\\r\\n  const ownedAugsTextFileName = \\\"data/ownedAugs.txt\\\";\\r\\n  ns.rm(ownedAugsTextFileName);\\r\\n  ns.write(ownedAugsTextFileName, JSON.stringify(ownedAugmentations), \\\"W\\\");\\r\\n  \\r\\n}\\r\\n\\r\\nclass ScriptRam {\\r\\n  constructor(ram, name) {\\r\\n    this.ram = ram;\\r\\n    this.name = name;\\r\\n  }\\r\\n}\",\"filename\":\"scripts/precalculate-important-data.js\",\"server\":\"home\"}}],[\"scripts/coordinator.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const loopEveryXSeconds = 2;\\r\\n    const sleepTotalOfXMS = loopEveryXSeconds * 1000;\\r\\n    let dispatchScript = 'scripts/hacking/memory-starved-dispatch.js';\\r\\n\\r\\n    let runClean = true;\\r\\n    if (ns.args[0] === 'old') {\\r\\n        runClean = false;\\r\\n    }\\r\\n\\r\\n    if (runClean) {\\r\\n        ns.run('scripts/clean.js', 1, \\\"new\\\");\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n\\r\\n    ns.run('scripts/script-registry.js')\\r\\n\\r\\n    await ns.sleep(200);\\r\\n\\r\\n    ns.run('scripts/precalculate-important-data.js')\\r\\n\\r\\n    await ns.sleep(200);\\r\\n\\r\\n    const scriptsFile = 'data/scriptsToRun.txt';\\r\\n\\r\\n    while (true) {\\r\\n\\r\\n        let scriptsToRun = JSON.parse(ns.read(scriptsFile));\\r\\n\\r\\n        let numberOfScripts = scriptsToRun.length + 1;\\r\\n\\r\\n        let individualSleepAmount = sleepTotalOfXMS / numberOfScripts;\\r\\n\\r\\n        if (ns.fileExists('Formulas.exe')) {\\r\\n            dispatchScript = 'scripts/hacking/batch-dispatch.js'\\r\\n        }\\r\\n\\r\\n        ns.run(\\\"scripts/scan.js\\\", 1, dispatchScript);\\r\\n        await ns.sleep(individualSleepAmount);\\r\\n\\r\\n        for (const script of scriptsToRun) {\\r\\n            ns.run(script);\\r\\n            await ns.sleep(individualSleepAmount);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n\",\"filename\":\"scripts/coordinator.js\",\"server\":\"home\"}}],[\"scripts/script-registry.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n\\r\\n    let scriptsToRun = [];\\r\\n\\r\\n    const basicScripts = [\\r\\n        'scripts/hacking/hack-all-machines.js',\\r\\n        'scripts/precalculate-important-data.js',\\r\\n        'scripts/script-registry.js',\\r\\n    ];\\r\\n\\r\\n    scriptsToRun = scriptsToRun.concat(basicScripts);\\r\\n\\r\\n    const stockScripts = [\\r\\n        'scripts/stock/get-stock-quotes.js',\\r\\n        'scripts/stock/second-part-of-quotes.js',\\r\\n        'scripts/stock/populate-forecast.js',\\r\\n        'scripts/stock/invest-in-stocks.js',\\r\\n        'scripts/stock/buy-4s.js',\\r\\n    ];\\r\\n\\r\\n    scriptsToRun = scriptsToRun.concat(stockScripts);\\r\\n\\r\\n    const contractScripts = [\\r\\n        'scripts/contracts/get.js',\\r\\n        'scripts/contracts/populate-input.js',\\r\\n        'scripts/contracts/populate-description.js',\\r\\n        'scripts/contracts/do.js',\\r\\n        'scripts/contracts/save-contracts-for-thomas.js',\\r\\n    ];\\r\\n\\r\\n    scriptsToRun = scriptsToRun.concat(contractScripts);\\r\\n\\r\\n    const singularityScripts = [\\r\\n        'scripts/singularity/join-organziations.js',\\r\\n        'scripts/singularity/apply-to-jobs.js',\\r\\n        'scripts/singularity/do-work-get-augments.js',\\r\\n        'scripts/singularity/backdoor-all-machines.js',\\r\\n        'scripts/singularity/do-work.js',\\r\\n        'scripts/singularity/finish-round.js',\\r\\n        'scripts/singularity/finish-bitnode.js',\\r\\n        'scripts/singularity/study-computer-science.js',\\r\\n        'scripts/singularity/create-early-programs.js',\\r\\n        'scripts/singularity/do-job.js',\\r\\n        'scripts/singularity/buy-rep.js',\\r\\n        'scripts/singularity/workout.js',\\r\\n        'scripts/singularity/upgade-home-machine.js',\\r\\n        'scripts/singularity/travel-to-get-augs.js',\\r\\n    ];\\r\\n    \\r\\n    scriptsToRun = scriptsToRun.concat(singularityScripts);\\r\\n\\r\\n    const investmentScripts = [\\r\\n        'scripts/investments/invest-in-nodes.js',\\r\\n        'scripts/investments/purchase-server.js',\\r\\n        'scripts/investments/invest-in-programs.js',\\r\\n    ];\\r\\n\\r\\n    scriptsToRun = scriptsToRun.concat(investmentScripts);\\r\\n\\r\\n    const corporateScripts = [\\r\\n        'scripts/corporations/invest.js',\\r\\n        'scripts/corporations/start-company.js',\\r\\n        'scripts/corporations/get-corporate-info.js',\\r\\n        'scripts/corporations/add-supporting-material.js',\\r\\n        'scripts/corporations/upgrade-offices.js',\\r\\n        'scripts/corporations/upgrade-warehouse.js',\\r\\n        'scripts/corporations/expand.js',\\r\\n        'scripts/corporations/product-management.js',\\r\\n        'scripts/corporations/research.js',\\r\\n        'scripts/corporations/tea-party.js',\\r\\n        'scripts/corporations/adjust-prices-export.js',\\r\\n        'scripts/corporations/get-investments.js',\\r\\n        'scripts/corporations/bribe-factions.js', \\r\\n    ];\\r\\n\\r\\n    scriptsToRun = scriptsToRun.concat(corporateScripts);\\r\\n    \\r\\n    const scriptsFile = 'data/scriptsToRun.txt';\\r\\n    ns.rm(scriptsFile);\\r\\n    ns.write(scriptsFile, JSON.stringify(scriptsToRun), \\\"W\\\");\\r\\n}\",\"filename\":\"scripts/script-registry.js\",\"server\":\"home\"}}],[\"test.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n  const moneyThing = 0;\\n        const gidgetsSmokes = \\\"Gidget's Smokes\\\";\\n    const city = \\\"Aevum\\\"\\n                const corporation = ns.corporation.getCorporation();\\n                const moneyOnHome = ns.getServerMoneyAvailable(\\\"home\\\") * .9;\\n           let sharesToBuy = Math.floor(moneyOnHome / corporation.sharePrice);\\n                if (sharesToBuy > corporation.issuedShares) {\\n                    sharesToBuy = corporation.issuedShares;\\n                }\\n\\n                ns.tprint(sharesToBuy + \\\" \\\" + moneyOnHome)\\n        \\n                if (sharesToBuy > 0) {\\n                    ns.corporation.buyBackShares(sharesToBuy);\\n                }\\n\\n// ns.tprint(thing);\\n\\n}\",\"filename\":\"test.js\",\"server\":\"home\"}}],[\"scripts/corporations/get-corporate-info.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"let lastRecorded = new Date();\\r\\n\\r\\nexport async function main(ns) {\\r\\n    if (!ns.corporation.hasCorporation()) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    const corporationFileName = 'data/corporation.txt';\\r\\n    const constants = ns.corporation.getConstants();\\r\\n    let corporation = ns.corporation.getCorporation();\\r\\n    const divisions = [];\\r\\n\\r\\n    const rawMaterialProducers = [\\r\\n        { producer: \\\"Gidget's Farm\\\", materials: [\\\"Food\\\", \\\"Plants\\\"] },\\r\\n        { producer: \\\"Chemist Gidget's Lab\\\", materials: [ \\\"Chemicals\\\" ] }\\r\\n    ];\\r\\n\\r\\n    for (const divisionName of corporation.divisions) {\\r\\n        let division = ns.corporation.getDivision(divisionName)\\r\\n        division.offices = [];\\r\\n        division.productObjects = [];\\r\\n\\r\\n        for (const city of division.cities) {\\r\\n            let office = ns.corporation.getOffice(division.name, city)\\r\\n\\r\\n            if (ns.corporation.hasWarehouse(division.name, city)) {\\r\\n                office.warehouse = ns.corporation.getWarehouse(division.name, city);\\r\\n            }\\r\\n\\r\\n            division.offices.push(office);\\r\\n        }\\r\\n\\r\\n        for (const productName of division.products) {\\r\\n            division.productObjects.push(ns.corporation.getProduct(divisionName, \\\"Aevum\\\", productName));\\r\\n        }\\r\\n\\r\\n        division.materials = [];\\r\\n        const rawMaterialsProducer = rawMaterialProducers.find(x => x.producer === divisionName);\\r\\n        if(rawMaterialsProducer){\\r\\n        \\r\\n            for (const material of rawMaterialsProducer.materials) {\\r\\n                division.materials.push(ns.corporation.getMaterial(divisionName, \\\"Sector-12\\\", material));\\r\\n            }            \\r\\n        }\\r\\n\\r\\n        divisions.push(division);\\r\\n    }\\r\\n\\r\\n    const corporationData = { constants, corporation, divisions };\\r\\n\\r\\n    ns.rm(corporationFileName);\\r\\n    ns.write(corporationFileName, JSON.stringify(corporationData), \\\"W\\\");\\r\\n\\r\\n\\r\\n    const now = new Date();\\r\\n    const formatter = new Intl.NumberFormat('en-US', {\\r\\n        style: 'currency',\\r\\n        currency: 'USD',\\r\\n    });\\r\\n\\r\\n    if (now.getHours() !== lastRecorded.getHours()) { // && batches not running\\r\\n        let snapshots = [];\\r\\n\\r\\n        const snapshotsFileName = \\\"data/corporateSnapshots.txt\\\";\\r\\n        if(ns.fileExists(snapshotsFileName)){\\r\\n            snapshots = JSON.parse(ns.read(snapshotsFileName));\\r\\n        }\\r\\n\\r\\n        corporation.profit = formatter.format(corporation.revenue - corporation.expenses);\\r\\n        corporation.funds = formatter.format(corporation.funds);\\r\\n        corporation.revenue = formatter.format(corporation.revenue);\\r\\n        corporation.expenses = formatter.format(corporation.expenses);\\r\\n        corporation.sharePrice = formatter.format(corporation.sharePrice);\\r\\n        corporation.snapshotTime = now;\\r\\n\\r\\n\\r\\n        snapshots.push({ corporation, divisions });\\r\\n        \\r\\n        ns.rm(snapshotsFileName);\\r\\n        ns.write(snapshotsFileName, JSON.stringify(snapshots), \\\"W\\\");\\r\\n\\r\\n        lastRecorded = now;\\r\\n    }\\r\\n}\",\"filename\":\"scripts/corporations/get-corporate-info.js\",\"server\":\"home\"}}],[\"scripts/corporations/initial-expand.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    if (!ns.corporation.hasCorporation()) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    const corporation = ns.corporation.getCorporation();\\r\\n\\r\\n    const gidgetsFarm = \\\"Gidget's Farm\\\";\\r\\n    const industry = \\\"Agriculture\\\";\\r\\n\\r\\n    if (corporation.divisions.length === 0) {\\r\\n        ns.corporation.expandIndustry(industry, gidgetsFarm);\\r\\n    }\\r\\n\\r\\n    const smartSupplyName = \\\"Smart Supply\\\";\\r\\n    if (!ns.corporation.hasUnlock(smartSupplyName)) {\\r\\n        ns.corporation.purchaseUnlock(smartSupplyName);\\r\\n    }\\r\\n\\r\\n    const division = ns.corporation.getDivision(gidgetsFarm);\\r\\n\\r\\n    for (let [key, city] of Object.entries(ns.enums.CityName)) {\\r\\n        if (!division.cities.includes(city)) {\\r\\n            ns.corporation.expandCity(gidgetsFarm, city);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    for (let city of division.cities) {\\r\\n        if (!ns.corporation.hasWarehouse(gidgetsFarm, city)) {\\r\\n            ns.corporation.purchaseWarehouse(gidgetsFarm, city);\\r\\n        }\\r\\n\\r\\n        const warehouse = ns.corporation.getWarehouse(division.name, city);\\r\\n\\r\\n        if (warehouse.smartSupplyEnabled === false) {\\r\\n            ns.corporation.setSmartSupply(gidgetsFarm, city, true);\\r\\n            ns.corporation.setSmartSupplyOption(gidgetsFarm, city, \\\"Water\\\", \\\"leftovers\\\");\\r\\n            ns.corporation.setSmartSupplyOption(gidgetsFarm, city, \\\"Chemicals\\\", \\\"leftovers\\\");\\r\\n        }\\r\\n\\r\\n        const percentUsedOfWarehouse = warehouse.sizeUsed / warehouse.size;\\r\\n\\r\\n        if (warehouse.size < 300 && percentUsedOfWarehouse > 0.5){\\r\\n            ns.corporation.upgradeWarehouse(gidgetsFarm, city);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    for (let city of division.cities) {\\r\\n        const office = ns.corporation.getOffice(gidgetsFarm, city);\\r\\n\\r\\n        if (office.numEmployees < 3) {\\r\\n            ns.corporation.hireEmployee(gidgetsFarm, city, \\\"Operations\\\");\\r\\n            ns.corporation.hireEmployee(gidgetsFarm, city, \\\"Engineer\\\");\\r\\n            ns.corporation.hireEmployee(gidgetsFarm, city, \\\"Business\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    if (division.numAdVerts === 0) {\\r\\n        ns.corporation.hireAdVert(gidgetsFarm);\\r\\n    }\\r\\n\\r\\n    const initialUpgrades = [\\r\\n        \\\"FocusWires\\\",\\r\\n        \\\"Neural Accelerators\\\",\\r\\n        \\\"Speech Processor Implants\\\",\\r\\n        \\\"Nuoptimal Nootropic Injector Implants\\\",\\r\\n        \\\"Smart Factories\\\",\\r\\n    ];\\r\\n\\r\\n    for (const upgrade of initialUpgrades) {\\r\\n        const upgradeLevel = ns.corporation.getUpgradeLevel(upgrade);\\r\\n        const upgradeCost = ns.corporation.getUpgradeLevelCost(upgrade);\\r\\n\\r\\n        const reserve = 10_000_000_000;\\r\\n        const fundsLessReserve = ns.corporation.getCorporation().funds - reserve;\\r\\n\\r\\n        if (upgradeLevel < 2 && upgradeCost < fundsLessReserve) {\\r\\n            ns.corporation.levelUpgrade(upgrade);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    const profit = corporation.revenue - corporation.expenses;\\r\\n\\r\\n    const thingsToUpgrade = [\\r\\n        \\\"Smart Factories\\\",\\r\\n        \\\"Smart Storage\\\",\\r\\n    ]\\r\\n\\r\\n    if (corporation.funds > 200_000_000_000 && profit > 1_000_000) {\\r\\n\\r\\n        for (const upgrade of thingsToUpgrade) {\\r\\n            const level = ns.corporation.getUpgradeLevel(upgrade);\\r\\n            if(level < 10){\\r\\n                ns.corporation.levelUpgrade(upgrade);\\r\\n            }\\r\\n        }      \\r\\n    }\\r\\n\\r\\n    if (corporation.funds > 200_000_000_000) {\\r\\n\\r\\n        const employeeGoals = [\\r\\n            { type: \\\"Operations\\\", number: 2 },\\r\\n            { type: \\\"Engineer\\\", number: 2 },\\r\\n            { type: \\\"Business\\\", number: 1 },\\r\\n            { type: \\\"Management\\\", number: 2 },\\r\\n            { type: \\\"Research & Development\\\", number: 2 }\\r\\n        ];\\r\\n\\r\\n        for (const city of division.cities) {\\r\\n            const office = ns.corporation.getOffice(gidgetsFarm, city);\\r\\n\\r\\n            if (office.size < 9) {\\r\\n                ns.corporation.upgradeOfficeSize(gidgetsFarm, city, 3);\\r\\n            }\\r\\n\\r\\n            for (let [type, numberOfEmployees] of Object.entries(office.employeeJobs)) {\\r\\n                const goal = employeeGoals.find(x => x.type === type);\\r\\n\\r\\n                if (goal) {\\r\\n                    if (numberOfEmployees < goal.number) {\\r\\n                        ns.corporation.hireEmployee(gidgetsFarm, city, type);\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    if (corporation.funds > 40_000_000_000 && profit > 1_000_000) {\\r\\n        for (const city of division.cities) {\\r\\n            const warehouse = ns.corporation.getWarehouse(gidgetsFarm, city);\\r\\n\\r\\n            if (warehouse.size < 4_200){\\r\\n                ns.corporation.upgradeWarehouse(gidgetsFarm, city);\\r\\n            }\\r\\n        }   \\r\\n    }\\r\\n}\",\"filename\":\"scripts/corporations/initial-expand.js\",\"server\":\"home\"}}],[\"scripts/corporations/upgrade.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    if (!ns.corporation.hasCorporation()) {\\r\\n        return;\\r\\n    }\\r\\n}\",\"filename\":\"scripts/corporations/upgrade.js\",\"server\":\"home\"}}],[\"scripts/corporations/add-supporting-material.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    if (!ns.corporation.hasCorporation()) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    const materialGoalsGoals = [];\\r\\n\\r\\n    const corporation = ns.corporation.getCorporation();\\r\\n\\r\\n    for (const divisionName of corporation.divisions){\\r\\n        const materialGoals = [];\\r\\n\\r\\n        const division = ns.corporation.getDivision(divisionName);\\r\\n        const allMaterials = [\\r\\n            { name: \\\"Water\\\", factorName: \\\"waterFactor\\\" },\\r\\n            { name: \\\"Hardware\\\", factorName: \\\"hardwareFactor\\\" },\\r\\n            { name: \\\"AI Cores\\\", factorName: \\\"aiCoreFactor\\\" },\\r\\n            { name: \\\"Robots\\\", factorName: \\\"robotFactor\\\" },\\r\\n            { name: \\\"Real Estate\\\", factorName: \\\"realEstateFactor\\\" },\\r\\n            // { name: \\\"Ore\\\", factorName: \\\"\\\" },\\r\\n            // { name: \\\"Minerals\\\", factorName: \\\"\\\" },\\r\\n            // { name: \\\"Food\\\", factorName: \\\"\\\" },\\r\\n            // { name: \\\"Plants\\\", factorName: \\\"\\\" },\\r\\n            // { name: \\\"Metal\\\", factorName: \\\"\\\" },\\r\\n            // { name: \\\"Chemicals\\\", factorName: \\\"\\\" },\\r\\n            // { name: \\\"Drugs\\\", factorName: \\\"\\\" },\\r\\n        ];\\r\\n\\r\\n        const materialsToBuy = [];\\r\\n\\r\\n        const industryInformation = ns.corporation.getIndustryData(division.type);\\r\\n        const itemsInIndustry = Object.entries(industryInformation);\\r\\n\\r\\n        let sumOfAllMaterialsFactors = 0;\\r\\n\\r\\n        for (const material of allMaterials) {\\r\\n            const materialImprovesProduction = itemsInIndustry.find(x => x[0] === material.factorName);\\r\\n\\r\\n            if (materialImprovesProduction) {\\r\\n                const materialData = ns.corporation.getMaterialData(material.name);\\r\\n\\r\\n                const factor = materialImprovesProduction[1];\\r\\n                sumOfAllMaterialsFactors += factor;\\r\\n\\r\\n                const size = materialData.size;\\r\\n                const name = material.name;\\r\\n                materialsToBuy.push({ name, factor, size });\\r\\n            }\\r\\n        }\\r\\n\\r\\n        let fillXPercentOfWarehouseWithMultiplerMaterial = 0.5; // 0.5 was 789k profit 0.4 500k .6 was 402k\\r\\n\\r\\n        if(division.type === \\\"Chemical\\\"){\\r\\n            fillXPercentOfWarehouseWithMultiplerMaterial = 0.8;\\r\\n        }\\r\\n\\r\\n        for (const city of division.cities) {\\r\\n            if(!ns.corporation.hasWarehouse(divisionName, city)){\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            const warehouse = ns.corporation.getWarehouse(divisionName, city);\\r\\n\\r\\n            const amountToFillWithMultipliers = warehouse.size * fillXPercentOfWarehouseWithMultiplerMaterial;\\r\\n\\r\\n            for (let material of materialsToBuy) {\\r\\n                const percentOf = material.factor / sumOfAllMaterialsFactors;\\r\\n                const spaceToFill = Math.floor(amountToFillWithMultipliers * percentOf);\\r\\n                const countToBuy = Math.floor(spaceToFill / material.size);\\r\\n\\r\\n                const materialInWarehouse = ns.corporation.getMaterial(divisionName, city, material.name);\\r\\n\\r\\n                let amountToBuy = 0;\\r\\n                if (materialInWarehouse.stored < (countToBuy * .95)) {\\r\\n                    if (countToBuy < 200) {\\r\\n                        ns.corporation.bulkPurchase(divisionName, city, material.name, countToBuy);\\r\\n                    } else {\\r\\n                        amountToBuy = Math.floor(countToBuy / 20);\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                ns.corporation.buyMaterial(divisionName, city, material.name, amountToBuy)\\r\\n\\r\\n                let amountToSell = 0;\\r\\n                const freeSpacePercent = (warehouse.size - warehouse.sizeUsed) / warehouse.size\\r\\n                if (freeSpacePercent < 0.1 && materialInWarehouse.stored > countToBuy) {\\r\\n                    amountToSell = materialInWarehouse.stored - countToBuy;\\r\\n                    if (amountToSell > 30) {\\r\\n                        amountToSell = 30;\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                ns.corporation.sellMaterial(divisionName, city, material.name, amountToSell, \\\"MP\\\");\\r\\n\\r\\n                material.countToBuy = countToBuy;\\r\\n                material.spaceToFill = spaceToFill;\\r\\n\\r\\n                const materialInGoals = materialGoals.find(x => x.name === material.name);\\r\\n\\r\\n                if (!materialInGoals) {\\r\\n                    materialGoals.push(material);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        materialGoalsGoals.push(materialGoals);\\r\\n    }\\r\\n}\",\"filename\":\"scripts/corporations/add-supporting-material.js\",\"server\":\"home\"}}],[\"scripts/corporations/upgrade-offices.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    if (!ns.corporation.hasCorporation()) {\\r\\n        return;\\r\\n    }\\r\\n    const corporation = ns.corporation.getCorporation();\\r\\n\\r\\n    const capitalReserve = 40_000_000_000;\\r\\n    const liquidFunds = corporation.funds;\\r\\n    const investableAmount = liquidFunds - capitalReserve;\\r\\n\\r\\n    const employeeRatio = [\\r\\n        { type: \\\"Operations\\\", number: 2 },\\r\\n        { type: \\\"Engineer\\\", number: 2 },\\r\\n        { type: \\\"Business\\\", number: 1 },\\r\\n        { type: \\\"Management\\\", number: 2 },\\r\\n        { type: \\\"Research & Development\\\", number: 2 }\\r\\n    ];\\r\\n\\r\\n    const aevumEmployeeRatio = [\\r\\n        { type: \\\"Operations\\\", number: 1 },\\r\\n        { type: \\\"Engineer\\\", number: 1 },\\r\\n        { type: \\\"Business\\\", number: 1 },\\r\\n        { type: \\\"Management\\\", number: 1 },\\r\\n        { type: \\\"Research & Development\\\", number: 1 }\\r\\n    ];\\r\\n\\r\\n    for (const divisionName of corporation.divisions){\\r\\n        const division = ns.corporation.getDivision(divisionName);\\r\\n\\r\\n        for (let [key, city] of Object.entries(ns.enums.CityName)) {\\r\\n            if (!division.cities.includes(city)) {\\r\\n                ns.corporation.expandCity(divisionName, city);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (division.makesProducts && division.cities.includes(\\\"Aevum\\\")) {\\r\\n            const aevum = \\\"Aevum\\\";\\r\\n            const aevumOffice = ns.corporation.getOffice(divisionName, aevum);\\r\\n            const aevumHeadCount = aevumOffice.numEmployees;\\r\\n\\r\\n            const volhaven = \\\"Volhaven\\\";\\r\\n            const volhavenHeadCount = ns.corporation.getOffice(divisionName, volhaven).numEmployees;\\r\\n\\r\\n            const expandOtherOffices = aevumHeadCount - volhavenHeadCount > 69;\\r\\n            const expandAevum = !expandOtherOffices;\\r\\n\\r\\n\\r\\n            if  (aevumHeadCount < 5){\\r\\n                const countNeeded = 5 - aevumOffice.size;\\r\\n                ns.corporation.upgradeOfficeSize(divisionName, aevum, countNeeded)\\r\\n            }\\r\\n\\r\\n            if (expandAevum) {\\r\\n                const costToExpand = ns.corporation.getOfficeSizeUpgradeCost(divisionName, aevum, 5);\\r\\n\\r\\n                let aevumHeadCountMax = ns.corporation.getUpgradeLevel(\\\"Wilson Analytics\\\") * 18;\\r\\n\\r\\n                if (aevumHeadCountMax < 90) {\\r\\n                    aevumHeadCountMax = 90;\\r\\n                }\\r\\n\\r\\n                if (costToExpand < investableAmount && aevumHeadCount < aevumHeadCountMax) {\\r\\n                    ns.corporation.upgradeOfficeSize(divisionName, aevum, 5);\\r\\n                }\\r\\n            }\\r\\n\\r\\n            hireEmployees(aevumOffice, aevumEmployeeRatio, ns, divisionName);\\r\\n\\r\\n\\r\\n            const citiesWithOfficesWhoArentAevum = division.cities.filter(city => city !== aevum);\\r\\n\\r\\n            if(volhavenHeadCount < 9 && division.products.length > 1){\\r\\n                for (const city of citiesWithOfficesWhoArentAevum) {\\r\\n                    const amountToAdd = 9 - volhavenHeadCount;\\r\\n                    ns.corporation.upgradeOfficeSize(divisionName, city, amountToAdd);\\r\\n                }\\r\\n            }\\r\\n\\r\\n            if (expandOtherOffices) {\\r\\n                const costToExpand = ns.corporation.getOfficeSizeUpgradeCost(divisionName, volhaven, 9) * 5;\\r\\n\\r\\n                if (costToExpand < investableAmount) {\\r\\n                    for (const city of citiesWithOfficesWhoArentAevum) {\\r\\n                        ns.corporation.upgradeOfficeSize(divisionName, city, 9);\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n\\r\\n            for (const city of citiesWithOfficesWhoArentAevum) {\\r\\n                const office = ns.corporation.getOffice(divisionName, city);\\r\\n                hireEmployees(office, employeeRatio, ns, divisionName);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (!division.makesProducts && division.cities.includes(\\\"Aevum\\\")) {\\r\\n            const profit = division.lastCycleRevenue - division.lastCycleExpenses;\\r\\n\\r\\n            const constants = [\\r\\n                { minProfit: 0, officeSizeGoal: 9, minLiquidFunds: 20_000_000_000 },\\r\\n                { minProfit: 10_000_000, officeSizeGoal: 18, minLiquidFunds: 400_000_000_000 },\\r\\n                { minLoss: -250_000, officeSizeGoal: 32, minLiquidFunds: 5_000_000_000_000 },\\r\\n                { minLoss: -700_000, officeSizeGoal: 189, minLiquidFunds: 10_000_000_000_000 },\\r\\n                { minProfit: 700_000, officeSizeGoal: 189, minLiquidFunds: 10_000_000_000_000 },\\r\\n            ]\\r\\n\\r\\n            for (const constant of constants) {\\r\\n                for (const city of division.cities) {\\r\\n                    const office = ns.corporation.getOffice(divisionName, city);\\r\\n\\r\\n                    let sizeNeeded = 0;\\r\\n\\r\\n                    if (profit > constant.minProfit && liquidFunds > constant.minLiquidFunds) {\\r\\n                        sizeNeeded = constant.officeSizeGoal - office.size;\\r\\n                    }\\r\\n\\r\\n                    if(profit < constant.minLoss && liquidFunds > constant.minLiquidFunds){\\r\\n                        sizeNeeded = constant.officeSizeGoal - office.size;\\r\\n                    }\\r\\n\\r\\n                    if (sizeNeeded > 0) {\\r\\n                        ns.corporation.upgradeOfficeSize(divisionName, city, sizeNeeded);\\r\\n                    }\\r\\n\\r\\n                    hireEmployees(office, employeeRatio, ns, divisionName)\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction hireEmployees(office, employeeJobsGoals, ns, divisionName) {\\r\\n    if (office.size === office.numEmployees) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    let employeesInRatio = 0;\\r\\n    for (const goal of employeeJobsGoals) {\\r\\n        employeesInRatio += goal.number;\\r\\n    }\\r\\n\\r\\n    for (let [type, numberOfEmployees] of Object.entries(office.employeeJobs)) {\\r\\n        const goal = employeeJobsGoals.find(x => x.type === type);\\r\\n\\r\\n        if (goal) {\\r\\n            const percent = goal.number / employeesInRatio;\\r\\n            const requiredEmployeeNumber = percent * office.size;\\r\\n\\r\\n            if (numberOfEmployees < requiredEmployeeNumber) {\\r\\n                ns.corporation.hireEmployee(divisionName, office.city, type);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"scripts/corporations/upgrade-offices.js\",\"server\":\"home\"}}],[\"scripts/corporations/level-upgrades.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    if (!ns.corporation.hasCorporation()) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    const corporation = ns.corporation.getCorporation();\\r\\n\\r\\n}\",\"filename\":\"scripts/corporations/level-upgrades.js\",\"server\":\"home\"}}],[\"scripts/corporations/upgrade-warehouse.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    if (!ns.corporation.hasCorporation()) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    const corporation = ns.corporation.getCorporation();\\r\\n    const capitalReserve = 40_000_000_000;\\r\\n\\r\\n\\r\\n    for (const divisionName of corporation.divisions.filter(x => x !== \\\"Gidget's Import/Export\\\")) {\\r\\n        const division = ns.corporation.getDivision(divisionName);\\r\\n\\r\\n        if(division.makesProducts && division.products.length < 2){\\r\\n            if(division.products.length === 0){\\r\\n                return;\\r\\n            }\\r\\n\\r\\n            const product = ns.corporation.getProduct(divisionName, \\\"Aevum\\\", division.products[0]);\\r\\n\\r\\n            if(product.developmentProgress !== 100){\\r\\n                return;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        const industryData = ns.corporation.getIndustryData(division.type); \\r\\n\\r\\n        for (let city of division.cities) {\\r\\n            if (!ns.corporation.hasWarehouse(divisionName, city)) {\\r\\n                ns.corporation.purchaseWarehouse(divisionName, city);\\r\\n            }\\r\\n\\r\\n            const warehouse = ns.corporation.getWarehouse(division.name, city);\\r\\n\\r\\n            ns.corporation.setSmartSupply(divisionName, city, true);\\r\\n\\r\\n            for (let [material, value] of Object.entries(industryData.requiredMaterials)) {\\r\\n                ns.corporation.setSmartSupplyOption(divisionName, city, material, \\\"leftovers\\\");\\r\\n            }\\r\\n\\r\\n            const percentUsedOfWarehouse = warehouse.sizeUsed / warehouse.size;\\r\\n            const warehouseUpgradeCost = ns.corporation.getUpgradeWarehouseCost(divisionName, city);\\r\\n\\r\\n            const moneyLeft = corporation.funds - warehouseUpgradeCost;\\r\\n            const profit = corporation.revenue - corporation.expenses;\\r\\n\\r\\n            if (warehouse.size < 400 && percentUsedOfWarehouse > 0.5){\\r\\n                ns.corporation.upgradeWarehouse(divisionName, city);\\r\\n            }\\r\\n\\r\\n            if (warehouse.size < 2000 && percentUsedOfWarehouse > 0.7 && moneyLeft > capitalReserve && profit > 100) { \\r\\n                ns.corporation.upgradeWarehouse(divisionName, city);\\r\\n            }\\r\\n\\r\\n            if (warehouse.size < 5000 && moneyLeft > capitalReserve && ((percentUsedOfWarehouse > 0.7 && profit > 1_000_000) || profit > 100_000_000_000)) { \\r\\n                ns.corporation.upgradeWarehouse(divisionName, city);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"scripts/corporations/upgrade-warehouse.js\",\"server\":\"home\"}}],[\"scripts/corporations/expand-to-tobacco.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    if (!ns.corporation.hasCorporation()) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    const gidgetsSmokes = \\\"Gidget's Smokes\\\";\\r\\n    const industry = \\\"Tobacco\\\";\\r\\n    const corporation = ns.corporation.getCorporation();\\r\\n\\r\\n    if (corporation.divisions.length > 0 && corporation.funds > 750_000_000_000 && !corporation.divisions.includes(gidgetsSmokes)) {\\r\\n        ns.corporation.expandIndustry(industry, gidgetsSmokes);\\r\\n        const division = ns.corporation.getDivision(gidgetsSmokes);\\r\\n\\r\\n        const otherEmployeeGoals = [\\r\\n            { type: \\\"Operations\\\", number: 2 },\\r\\n            { type: \\\"Engineer\\\", number: 2 },\\r\\n            { type: \\\"Business\\\", number: 1 },\\r\\n            { type: \\\"Management\\\", number: 2 },\\r\\n            { type: \\\"Research & Development\\\", number: 2 }\\r\\n        ];\\r\\n\\r\\n        for (let [key, city] of Object.entries(ns.enums.CityName)) {\\r\\n            if (!division.cities.includes(city)) {\\r\\n                ns.corporation.expandCity(gidgetsSmokes, city);\\r\\n            }\\r\\n\\r\\n            const office = ns.corporation.getOffice(gidgetsSmokes, city);\\r\\n\\r\\n            if (office.size < 9) {\\r\\n                ns.corporation.upgradeOfficeSize(gidgetsSmokes, city, 3);\\r\\n            }\\r\\n\\r\\n            for (let [type, numberOfEmployees] of Object.entries(office.employeeJobs)) {\\r\\n                const goal = otherEmployeeGoals.find(x => x.type === type);\\r\\n\\r\\n                if (goal) {\\r\\n                    if (numberOfEmployees < goal.number) {\\r\\n                        ns.corporation.hireEmployee(gidgetsSmokes, city, type);\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"scripts/corporations/expand-to-tobacco.js\",\"server\":\"home\"}}],[\"scripts/corporations/product-management.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    if (!ns.corporation.hasCorporation()) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    const corporation = ns.corporation.getCorporation();\\r\\n    const profitPerSecond = corporation.revenue - corporation.expenses;\\r\\n\\r\\n    const divisionsProductNames = new Map();\\r\\n\\r\\n    if (corporation.divisions.includes(\\\"Gidget's Smokes\\\")){\\r\\n        divisionsProductNames.set(\\\"Gidget's Smokes\\\", { division: \\\"Gidget's Smokes\\\", productNames: [\\\"These Smokes Probably Won't Kill U v.\\\", \\\"These Smokes WILL Kill You v.\\\", \\\"This Leaf is Highly Addictive v.\\\", \\\"Behold, the bringer of Death v.\\\", \\\"You will live so fast and DIE young if you smoke these v.\\\"] });\\r\\n    }\\r\\n\\r\\n    if (corporation.divisions.includes(\\\"Gidget's Computers & Hardware\\\")){\\r\\n        divisionsProductNames.set(\\\"Gidget's Computers & Hardware\\\", { division: \\\"Gidget's Computers & Hardware\\\", productNames: [\\\"Desktop Computer v.\\\", \\\"Router v.\\\", \\\"Laptop Computer v.\\\", \\\"Smart Phone v.\\\", \\\"Computer Monitor v.\\\"] });\\r\\n    }\\r\\n\\r\\n    const includedDivisions = Array.from(divisionsProductNames.keys());\\r\\n\\r\\n    for (const divisionName of includedDivisions) {\\r\\n        const division = ns.corporation.getDivision(divisionName);\\r\\n        const divisionConstants = divisionsProductNames.get(divisionName);\\r\\n\\r\\n        const products = [];\\r\\n        let oneDeveloping = false;\\r\\n\\r\\n        for (const productName of division.products) {\\r\\n            const product = ns.corporation.getProduct(divisionName, \\\"Aevum\\\", productName);\\r\\n\\r\\n            if (product.developmentProgress < 100) {\\r\\n                oneDeveloping = true;\\r\\n            }\\r\\n\\r\\n            products.push(product);\\r\\n        }\\r\\n\\r\\n        let mimimumSpend = 1_000_000_000;\\r\\n\\r\\n        if(profitPerSecond > mimimumSpend){\\r\\n            mimimumSpend = profitPerSecond;\\r\\n        }\\r\\n\\r\\n        if (division.products.length < division.maxProducts && !oneDeveloping) {\\r\\n            const productName = divisionConstants.productNames[division.products.length];\\r\\n            ns.corporation.makeProduct(divisionName, \\\"Aevum\\\", productName + 1, mimimumSpend, mimimumSpend);\\r\\n        }\\r\\n\\r\\n        if (division.products.length === division.maxProducts && !oneDeveloping) {\\r\\n\\r\\n            const lowestRatedProduct = products\\r\\n                .sort((a, b) => b.rating - a.rating)\\r\\n                .pop();\\r\\n\\r\\n            ns.corporation.discontinueProduct(divisionName, lowestRatedProduct.name);\\r\\n\\r\\n            const splitName = lowestRatedProduct.name.split(\\\"v.\\\");\\r\\n\\r\\n            ns.corporation.makeProduct(divisionName, \\\"Aevum\\\", `${splitName[0]}v.${Number(splitName[1]) + 1}`, mimimumSpend, mimimumSpend);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"scripts/corporations/product-management.js\",\"server\":\"home\"}}],[\"scripts/corporations/invest.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    if (!ns.corporation.hasCorporation()) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    const corporation = ns.corporation.getCorporation();\\r\\n\\r\\n    const capitalReserve = 40_000_000_000;\\r\\n    const liquidFunds = corporation.funds;\\r\\n    const investableAmount = liquidFunds - capitalReserve;\\r\\n\\r\\n    initialUpgrades(corporation, ns);\\r\\n\\r\\n    if (investableAmount < 0 || corporation.divisions.length === 0) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    const upgradeGoals = [\\r\\n        { name: \\\"FocusWires\\\", goalLvl: 20, priority: 1 },\\r\\n        { name: \\\"Neural Accelerators\\\", goalLvl: 20, priority: 1 },\\r\\n        { name: \\\"Speech Processor Implants\\\", goalLvl: 20, priority: 1 },\\r\\n        { name: \\\"Nuoptimal Nootropic Injector Implants\\\", goalLvl: 20, priority: 1 },\\r\\n        { name: \\\"Wilson Analytics\\\", goalLvl: 14, priority: 2 }, // if this was top it would take forever to get to the less important ones.\\r\\n        { name: \\\"DreamSense\\\", goalLvl: 14, priority: 2 },\\r\\n        { name: \\\"ABC SalesBots\\\", goalLvl: 20, priority: 2 },\\r\\n        { name: \\\"Project Insight\\\", goalLvl: 14, priority: 2 },\\r\\n        { name: \\\"Wilson Analytics\\\", goalLvl: 20000, priority: 3 }, \\r\\n        { name: \\\"Smart Storage\\\", goalLvl: 20, priority: 3 },\\r\\n        { name: \\\"Smart Factories\\\", goalLvl: 20, priority: 3 },\\r\\n    ]\\r\\n\\r\\n    let cheapestUpgrade;\\r\\n\\r\\n    if (investableAmount > 5_000_000_000_000_000) {\\r\\n        if (!ns.corporation.hasUnlock(\\\"Shady Accounting\\\")) {\\r\\n            ns.corporation.purchaseUnlock(\\\"Shady Accounting\\\");\\r\\n        }\\r\\n\\r\\n        if (!ns.corporation.hasUnlock(\\\"Government Partnership\\\")) {\\r\\n            ns.corporation.purchaseUnlock(\\\"Government Partnership\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    for (const upgrade of upgradeGoals) {\\r\\n        if (cheapestUpgrade && cheapestUpgrade.priority < upgrade.priority  ) {\\r\\n            continue;\\r\\n        }\\r\\n\\r\\n        upgrade.cost = ns.corporation.getUpgradeLevelCost(upgrade.name);\\r\\n        upgrade.currentLvl = ns.corporation.getUpgradeLevel(upgrade.name);\\r\\n        upgrade.atGoal = upgrade.currentLvl >= upgrade.goalLvl;\\r\\n        upgrade.upgradeType = true;\\r\\n\\r\\n        if (!cheapestUpgrade || cheapestUpgrade.cost > upgrade.cost) {\\r\\n            if (!upgrade.atGoal) {\\r\\n                cheapestUpgrade = upgrade;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    for (const divisionName of corporation.divisions){\\r\\n        const division = ns.corporation.getDivision(divisionName);\\r\\n\\r\\n        if (division.numAdVerts === 0) {\\r\\n            ns.corporation.hireAdVert(divisionName);\\r\\n        }\\r\\n\\r\\n        if (division.makesProducts) {\\r\\n            const cost = ns.corporation.getHireAdVertCost(divisionName);\\r\\n\\r\\n            if (!cheapestUpgrade || cheapestUpgrade.cost > cost) {\\r\\n                cheapestUpgrade = { adVertType: true, division: divisionName, cost };\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    if (!cheapestUpgrade) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    if (investableAmount > cheapestUpgrade.cost) {\\r\\n        if (cheapestUpgrade.adVertType) {\\r\\n            if (ns.corporation.getHireAdVertCost(cheapestUpgrade.division) === cheapestUpgrade.cost) {\\r\\n                ns.corporation.hireAdVert(cheapestUpgrade.division);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (cheapestUpgrade.upgradeType) {\\r\\n            if (ns.corporation.getUpgradeLevelCost(cheapestUpgrade.name) === cheapestUpgrade.cost) {\\r\\n                ns.corporation.levelUpgrade(cheapestUpgrade.name);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction initialUpgrades(corporation, ns) {\\r\\n    const initialUpgrades = [\\r\\n        \\\"DreamSense\\\",\\r\\n        \\\"FocusWires\\\",\\r\\n        \\\"Neural Accelerators\\\",\\r\\n        \\\"Speech Processor Implants\\\",\\r\\n        \\\"Nuoptimal Nootropic Injector Implants\\\",\\r\\n        \\\"Smart Factories\\\",\\r\\n    ];\\r\\n\\r\\n    const smartSupplyName = \\\"Smart Supply\\\";\\r\\n    if (!ns.corporation.hasUnlock(smartSupplyName)) {\\r\\n        ns.corporation.purchaseUnlock(smartSupplyName);\\r\\n    }\\r\\n\\r\\n    for (const divisionName of corporation.divisions) {\\r\\n        const division = ns.corporation.getDivision(divisionName);\\r\\n\\r\\n        if (division.numAdVerts === 0) {\\r\\n            ns.corporation.hireAdVert(divisionName);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    const profit = corporation.revenue - corporation.expenses;\\r\\n\\r\\n    if(profit > 100_000){\\r\\n        for (const upgrade of initialUpgrades) {\\r\\n            const upgradeLevel = ns.corporation.getUpgradeLevel(upgrade);\\r\\n            const upgradeCost = ns.corporation.getUpgradeLevelCost(upgrade);\\r\\n    \\r\\n            const reserve = 10_000_000_000;\\r\\n            const fundsLessReserve = ns.corporation.getCorporation().funds - reserve;\\r\\n    \\r\\n            if (upgradeLevel < 2 && upgradeCost < fundsLessReserve) {\\r\\n                ns.corporation.levelUpgrade(upgrade);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    const thingsToUpgrade = [\\r\\n        \\\"Smart Factories\\\",\\r\\n        \\\"Smart Storage\\\",\\r\\n    ]\\r\\n\\r\\n    if (corporation.funds > 200_000_000_000 && profit > 1_000_000) {\\r\\n        for (const upgrade of thingsToUpgrade) {\\r\\n            const level = ns.corporation.getUpgradeLevel(upgrade);\\r\\n            if (level < 10) {\\r\\n                ns.corporation.levelUpgrade(upgrade);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"scripts/corporations/invest.js\",\"server\":\"home\"}}],[\"scripts/corporations/research.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    if (!ns.corporation.hasCorporation()) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    const researchGoals = [\\r\\n        { name: \\\"Hi-Tech R&D Laboratory\\\", prereqs: [] },\\r\\n        { name: \\\"Market-TA.II\\\", prereqs: [\\\"Market-TA.I\\\"] },\\r\\n        { name: \\\"uPgrade: Capacity.I\\\", prereqs: [\\\"uPgrade: Fulcrum\\\"], productOnly: true},\\r\\n        { name: \\\"uPgrade: Capacity.II\\\", prereqs: [], productOnly: true},\\r\\n        { name: \\\"Drones - Assembly\\\", prereqs: [ \\\"Drones\\\"] },\\r\\n        { name: \\\"Self-Correcting Assemblers\\\", prereqs: []},\\r\\n        { name: \\\"AutoBrew\\\", prereqs: []},\\r\\n        { name: \\\"AutoPartyManager\\\", prereqs: []},\\r\\n        { name: \\\"Go-Juice\\\", prereqs: [\\\"Automatic Drug Administration\\\"]},\\r\\n        { name: \\\"CPH4 Injections\\\", prereqs: []},\\r\\n        { name: \\\"Overclock\\\", prereqs: []},\\r\\n        { name: \\\"Sti.mu\\\", prereqs: []},\\r\\n        { name: \\\"Drones - Transport\\\", prereqs: []},\\r\\n    ];\\r\\n\\r\\n    const corporation = ns.corporation.getCorporation();\\r\\n\\r\\n    for (const divisionName of corporation.divisions){\\r\\n        const division = ns.corporation.getDivision(divisionName);\\r\\n\\r\\n        let totalSpent = 0;\\r\\n        for (const research of researchGoals) {\\r\\n            if(research.productOnly && division.makesProducts === false){\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            let cost = ns.corporation.getResearchCost(divisionName, research.name);\\r\\n\\r\\n            for (const prereqName of research.prereqs) {\\r\\n                cost += ns.corporation.getResearchCost(divisionName, prereqName);\\r\\n            }\\r\\n\\r\\n            if (ns.corporation.hasResearched(divisionName, research.name)) {\\r\\n                totalSpent += cost;\\r\\n                continue;\\r\\n            }           \\r\\n\\r\\n            const researchPointsToSpend = division.researchPoints;\\r\\n\\r\\n            if ((cost * 2) + totalSpent < researchPointsToSpend) {\\r\\n                for (const prereqName of research.prereqs) {\\r\\n                    ns.corporation.research(divisionName, prereqName)\\r\\n                }\\r\\n\\r\\n                ns.corporation.research(divisionName, research.name);\\r\\n            }\\r\\n\\r\\n            break;\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"scripts/corporations/research.js\",\"server\":\"home\"}}],[\"scripts/corporations/coffee-party.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    if (!ns.corporation.hasCorporation()) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    const corporation = ns.corporation.getCorporation();\\r\\n    const divisionsToOperateOn = corporation.divisions.filter(divisionName => divisionName !== \\\"Gidget's Farm\\\");\\r\\n\\r\\n    for (const divisionName of divisionsToOperateOn) {\\r\\n        const division = ns.corporation.getDivision(divisionName);\\r\\n\\r\\n        for(const city of division.cities){\\r\\n            const office = ns.corporation.getOffice(divisionName);\\r\\n\\r\\n            if (office.avgEnergy < 20){\\r\\n                ns.corporation.buyTea(divisionName, city);\\r\\n            }\\r\\n\\r\\n            if(office.avgMoral < 20) {\\r\\n                ns.corporation.throwParty(divisionName, city, 50_000);\\r\\n            }            \\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"scripts/corporations/coffee-party.js\",\"server\":\"home\"}}],[\"scripts/corporations/tea-party.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    if (!ns.corporation.hasCorporation()) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    const corporation = ns.corporation.getCorporation();\\r\\n\\r\\n    const corporateProfits = corporation.revenue - corporation.expenses;\\r\\n\\r\\n    const divisionalCorporateProfitsFile = \\\"data/divisionalCorporateProfits.txt\\\";\\r\\n    let divisionalCorporateProfits = new Map();\\r\\n    if (ns.fileExists(divisionalCorporateProfitsFile)) {\\r\\n        divisionalCorporateProfits = new Map(JSON.parse(ns.read(divisionalCorporateProfitsFile)));\\r\\n    }\\r\\n\\r\\n    for (const divisionName of corporation.divisions){\\r\\n        if (ns.corporation.hasResearched(divisionName, \\\"AutoBrew\\\") && ns.corporation.hasResearched(divisionName, \\\"AutoPartyManager\\\")) {\\r\\n            continue;\\r\\n        }\\r\\n\\r\\n        const division = ns.corporation.getDivision(divisionName);\\r\\n\\r\\n        const divisionalProfitsLastCycle = division.lastCycleRevenue - division.lastCycleExpenses;\\r\\n\\r\\n        let divisionProfitsRecord;\\r\\n\\r\\n        if (divisionalCorporateProfits.has(divisionName)) {\\r\\n            divisionProfitsRecord = divisionalCorporateProfits.get(divisionName);\\r\\n        } else {\\r\\n            divisionProfitsRecord = { sumOfProfitsInThisAccountingPeriod: 0, count: 0, lastProfit: 0, teaPartyCost: 0, partyEffect: [] };\\r\\n        }\\r\\n\\r\\n        if (divisionProfitsRecord.lastProfit !== divisionalProfitsLastCycle) {\\r\\n            divisionProfitsRecord.count++;\\r\\n            divisionProfitsRecord.sumOfProfitsInThisAccountingPeriod += divisionalProfitsLastCycle;\\r\\n            divisionProfitsRecord.lastProfit = divisionalProfitsLastCycle;\\r\\n\\r\\n            let employeeCount = 0;\\r\\n            let morales = [];\\r\\n            let energies = [];\\r\\n\\r\\n            for (const city of division.cities) {\\r\\n                const office = ns.corporation.getOffice(divisionName, city);\\r\\n\\r\\n                morales.push(office.avgMorale);\\r\\n                energies.push(office.avgEnergy);\\r\\n\\r\\n                employeeCount += office.numEmployees;\\r\\n            }\\r\\n\\r\\n            const minMorale = Math.min(...morales);\\r\\n            const minEnergy = Math.min(...energies);\\r\\n\\r\\n\\r\\n            const teaCostPerHead = 500_000;\\r\\n            divisionProfitsRecord.teaPartyCost = employeeCount * teaCostPerHead;\\r\\n\\r\\n            let goal = 70;\\r\\n\\r\\n            const divisionIsStrugglingAndWeAreProfitableAndHaveMoney = (minMorale < goal || minEnergy < goal) && corporateProfits > 5_000_000 && corporation.funds > 20_000_000_000;\\r\\n            const divisionalProfitsCanSustain = divisionProfitsRecord.sumOfProfitsInThisAccountingPeriod > divisionProfitsRecord.teaPartyCost;\\r\\n\\r\\n            if (divisionalProfitsCanSustain || corporateProfits > 1_000_000_000_000) {\\r\\n                goal = 95;\\r\\n            }\\r\\n\\r\\n            const shouldTreatOurEmployees = divisionalProfitsCanSustain || divisionIsStrugglingAndWeAreProfitableAndHaveMoney\\r\\n\\r\\n            if (shouldTreatOurEmployees) {\\r\\n                let tea = false;\\r\\n                let party = false;\\r\\n\\r\\n                if (minEnergy <= minMorale) {\\r\\n                    if (minEnergy < goal) {\\r\\n                        tea = true;\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                if (minMorale < minEnergy) {\\r\\n                    if (minMorale < goal) {\\r\\n                        party = true;\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                let effects = [];\\r\\n\\r\\n                for (const city of division.cities) {\\r\\n                    const office = ns.corporation.getOffice(divisionName, city);\\r\\n\\r\\n                    if (party && office.avgMorale < goal) {\\r\\n                        const effect = ns.corporation.throwParty(divisionName, city, teaCostPerHead);\\r\\n                        effects.push(effect);\\r\\n                    }\\r\\n\\r\\n                    if (tea && office.avgEnergy < goal) {\\r\\n                        const effect = ns.corporation.buyTea(divisionName, city);\\r\\n                        effects.push(effect);\\r\\n                    }\\r\\n                }\\r\\n\\r\\n                if (party) {\\r\\n                    divisionProfitsRecord.partyEffect = recordEffectiveness(minMorale, effects, divisionProfitsRecord.partyEffect);\\r\\n                }\\r\\n\\r\\n                resetProfitRecord(divisionProfitsRecord);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        divisionalCorporateProfits.set(divisionName, divisionProfitsRecord);\\r\\n    }\\r\\n\\r\\n    ns.rm(divisionalCorporateProfitsFile);\\r\\n    ns.write(divisionalCorporateProfitsFile, JSON.stringify(Array.from(divisionalCorporateProfits.entries()), \\\"W\\\"));\\r\\n}\\r\\n\\r\\nfunction recordEffectiveness(average, effects, array) {\\r\\n    const mapToWorkOn = new Map(array);\\r\\n\\r\\n    const averageBracket = Math.floor(average / 10);\\r\\n    const averageEffect = averageArray(effects);\\r\\n    let newAverageOverTime;\\r\\n\\r\\n    if (mapToWorkOn.has(averageBracket)) {\\r\\n        let previousEffect = mapToWorkOn.get(averageBracket);\\r\\n        previousEffect += averageEffect;\\r\\n        newAverageOverTime = previousEffect / 2;\\r\\n    } else {\\r\\n        newAverageOverTime = averageEffect;\\r\\n    }\\r\\n\\r\\n    mapToWorkOn.set(averageBracket, newAverageOverTime);\\r\\n\\r\\n    return Array.from(mapToWorkOn);\\r\\n}\\r\\n\\r\\nfunction averageArray(array) {\\r\\n    return array.reduce((acc, x) => acc + x, 0) / array.length;\\r\\n}\\r\\n\\r\\nfunction resetProfitRecord(divisionProfitsRecord) {\\r\\n    divisionProfitsRecord.count = 0;\\r\\n    divisionProfitsRecord.sumOfProfitsInThisAccountingPeriod = 0;\\r\\n}\\r\\n\",\"filename\":\"scripts/corporations/tea-party.js\",\"server\":\"home\"}}],[\"scripts/corporations/import-export.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    if (!ns.corporation.hasCorporation()) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n\\r\\n    const corporation = ns.corporation.getCorporation();\\r\\n\\r\\n    const divisionName = \\\"Gidget's Import/Export\\\";\\r\\n    const unlocksNeeded = [\\r\\n        \\\"Export\\\",\\r\\n        \\\"Market Research - Demand\\\",\\r\\n    ]\\r\\n\\r\\n    const materialNames = [\\r\\n        \\\"Water\\\",\\r\\n        \\\"Ore\\\",\\r\\n        \\\"Minerals\\\",\\r\\n        \\\"Food\\\",\\r\\n        \\\"Plants\\\",\\r\\n        \\\"Metal\\\",\\r\\n        \\\"Hardware\\\",\\r\\n        \\\"Chemicals\\\",\\r\\n        \\\"Drugs\\\",\\r\\n        \\\"Robots\\\",\\r\\n        \\\"AI Cores\\\",\\r\\n        \\\"Real Estate\\\"\\r\\n    ]\\r\\n\\r\\n\\r\\n    for (const unlockName of unlocksNeeded) {\\r\\n        if (!ns.corporation.hasUnlock(\\\"Export\\\")) {\\r\\n            ns.corporation.purchaseUnlock(\\\"Export\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    if (corporation.divisions.includes(divisionName)) {\\r\\n        const division = ns.corporation.getDivision(divisionName);\\r\\n\\r\\n        for (let [key, city] of Object.entries(ns.enums.CityName)) {\\r\\n            if (!division.cities.includes(city)) {\\r\\n                ns.corporation.expandCity(divisionName, city);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        for (let city of division.cities) {\\r\\n            if (!ns.corporation.hasWarehouse(divisionName, city)) {\\r\\n                ns.corporation.purchaseWarehouse(divisionName, city);\\r\\n            }\\r\\n\\r\\n            const warehouse = ns.corporation.getWarehouse(divisionName, city);\\r\\n\\r\\n            if (warehouse.smartSupplyEnabled) {\\r\\n                ns.corporation.setSmartSupply(divisionName, city, false);\\r\\n            }\\r\\n\\r\\n        }\\r\\n\\r\\n        let allMaterials = [];\\r\\n\\r\\n        for (const materialName of materialNames) {\\r\\n            let materials = []\\r\\n\\r\\n            let lowestPrice;\\r\\n            let highestPrice;\\r\\n\\r\\n            for (let city of division.cities) {\\r\\n                let materialFromCity = ns.corporation.getMaterial(divisionName, city, materialName);\\r\\n                materialFromCity.city = city;\\r\\n                materials.push(materialFromCity);\\r\\n\\r\\n                if (!lowestPrice || lowestPrice > materialFromCity.marketPrice) {\\r\\n                    lowestPrice = materialFromCity.marketPrice;\\r\\n                }\\r\\n\\r\\n                if (!highestPrice || highestPrice < materialFromCity.marketPrice) {\\r\\n                    highestPrice = materialFromCity.marketPrice;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            for (const materialFromCity of materials) {\\r\\n                materialFromCity.delta = materialFromCity.marketPrice - lowestPrice;\\r\\n            }\\r\\n\\r\\n            const delta = highestPrice - lowestPrice;\\r\\n            materials = materials.sort((a, b) => b.marketPrice - a.marketPrice);\\r\\n\\r\\n            allMaterials.push({ materials, delta });\\r\\n        }\\r\\n\\r\\n        allMaterials = allMaterials.sort((a, b) => b.delta - a.delta);\\r\\n\\r\\n        const filename = \\\"junk.txt\\\";\\r\\n        ns.rm(filename);\\r\\n        ns.write(filename, JSON.stringify(allMaterials), \\\"W\\\");\\r\\n\\r\\n        const materialsToImportExport = allMaterials.filter(x => x.delta > 500);\\r\\n\\r\\n        // if all stored === 0, then do another round\\r\\n        for (const materialToImportExport of materialsToImportExport) {\\r\\n            const exportOrders = []\\r\\n            // ns.tprint(materialToImportExport);\\r\\n            const inventoryCount = materialToImportExport.materials.reduce((acc, b) => acc + b.stored, 0);\\r\\n\\r\\n            if (inventoryCount > 0) {\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            for (const materialFromCity of materialToImportExport.materials) {\\r\\n                const materialName = materialFromCity.name;\\r\\n\\r\\n                for (const exportMaterial of materialFromCity.exports) {\\r\\n                    ns.corporation.cancelExportMaterial(divisionName, materialFromCity.city, divisionName, exportMaterial.city, materialName);\\r\\n                }\\r\\n\\r\\n                if (materialFromCity.delta > 0) {\\r\\n                    ns.corporation.sellMaterial(divisionName, materialFromCity.city, materialName, \\\"MAX\\\", \\\"MP\\\");\\r\\n\\r\\n                    if (materialFromCity.delta > 500) {\\r\\n                        exportOrders.push({ city: materialFromCity.city, demand: materialFromCity.demand });\\r\\n                    }\\r\\n                } else {\\r\\n                    ns.corporation.sellMaterial(divisionName, materialFromCity.city, materialName, 0, 0);\\r\\n\\r\\n                    let purchaseAmount = 0;\\r\\n                    for (const exportOrder of exportOrders) {\\r\\n                        ns.corporation.exportMaterial(divisionName, materialFromCity.city, divisionName, exportOrder.city, materialName, exportOrder.demand);\\r\\n                        purchaseAmount += exportOrder.demand;\\r\\n                    }\\r\\n\\r\\n                    const materialData = ns.corporation.getMaterialData(materialName); // {\\\"name\\\":\\\"Real Estate\\\",\\\"size\\\":0.005,\\\"demandBase\\\":50,\\\"demandRange\\\":[5,99],\\\"competitionBase\\\":50,\\\"competitionRange\\\":[25,75],\\\"baseCost\\\":80000,\\\"maxVolatility\\\":1.5,\\\"baseMarkup\\\":1.5}\\r\\n\\r\\n                    const spaceNeeded = purchaseAmount * materialData.size;\\r\\n\\r\\n                    const warehouse = ns.corporation.getWarehouse(divisionName, materialFromCity.city);\\r\\n                    const freeSpace = warehouse.size - warehouse.sizeUsed;\\r\\n\\r\\n                    if (freeSpace > spaceNeeded) {\\r\\n                        ns.corporation.bulkPurchase(divisionName, materialFromCity.city, materialName, purchaseAmount);\\r\\n                    } else {\\r\\n                        ns.corporation.upgradeWarehouse(divisionName, materialFromCity.city);\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"scripts/corporations/import-export.js\",\"server\":\"home\"}}],[\"scripts/corporations/adjust-prices-export.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    if (!ns.corporation.hasCorporation()) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    const gidgetsFarm = \\\"Gidget's Farm\\\";\\r\\n    const gidgetsSmokes = \\\"Gidget's Smokes\\\";\\r\\n    const chemist = \\\"Chemist Gidget's Lab\\\";\\r\\n    const water = \\\"Gidget's Municipal Water\\\";\\r\\n    const hardware = \\\"Gidget's Computers & Hardware\\\";\\r\\n    const metal = \\\"Gidget's Metallurgy\\\";\\r\\n    const mining = \\\"Gidget's Land Destroyer\\\";\\r\\n\\r\\n    const divisionalTies = [\\r\\n        {\\r\\n            name: gidgetsFarm, materialsSold: [\\\"Food\\\", \\\"Plants\\\"], exports: [\\r\\n                { importer: gidgetsSmokes, material: \\\"Plants\\\" },\\r\\n                { importer: chemist, material: \\\"Plants\\\" }\\r\\n            ]\\r\\n        },\\r\\n        {\\r\\n            name: chemist, materialsSold: [\\\"Chemicals\\\"], exports: [\\r\\n                { importer: gidgetsFarm, material: \\\"Chemicals\\\" }\\r\\n            ]\\r\\n        },\\r\\n        {\\r\\n            name: water, materialsSold: [\\\"Water\\\"], exports: [\\r\\n                { importer: gidgetsFarm, material: \\\"Water\\\" },\\r\\n                { importer: chemist, material: \\\"Water\\\" },\\r\\n            ]\\r\\n        },\\r\\n        {\\r\\n            name: hardware, materialsSold: [\\\"Hardware\\\"], exports: [\\r\\n                { importer: water, material: \\\"Hardware\\\" },\\r\\n                { importer: mining, material: \\\"Hardware\\\" },\\r\\n            ]\\r\\n        },\\r\\n        {\\r\\n            name: metal, materialsSold: [\\\"Metal\\\"], exports: [\\r\\n                { importer: hardware, material: \\\"Metal\\\" },\\r\\n            ]\\r\\n        },\\r\\n        {\\r\\n            name: mining, materialsSold: [\\\"Ore\\\", \\\"Minerals\\\"], exports: [\\r\\n                { importer: metal, material: \\\"Ore\\\" },\\r\\n            ]\\r\\n        },\\r\\n    ]\\r\\n\\r\\n    const corporation = ns.corporation.getCorporation();\\r\\n\\r\\n    if (corporation.state !== \\\"PRODUCTION\\\") {\\r\\n        for (const divisionName of corporation.divisions) {\\r\\n            const division = ns.corporation.getDivision(divisionName);\\r\\n\\r\\n            if (division.makesProducts) {\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            const divisionalTie = divisionalTies.find(x => x.name === divisionName);\\r\\n\\r\\n            if (divisionalTie.materialsSold.length < 2) {\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            const citiesToShip = [];\\r\\n            let problemProduct;\\r\\n\\r\\n            for (const city of division.cities) {\\r\\n                if (ns.corporation.hasWarehouse(divisionName, city)) {\\r\\n                    for (const materialWeCareAbout of divisionalTie.materialsSold) {\\r\\n                        const material = ns.corporation.getMaterial(divisionName, city, materialWeCareAbout);\\r\\n\\r\\n                        for (const EXPORT of material.exports) {\\r\\n                            if (EXPORT.division === divisionName) {\\r\\n                                ns.corporation.cancelExportMaterial(divisionName, city, divisionName, EXPORT.city, material.name);\\r\\n                            }\\r\\n                        }\\r\\n\\r\\n                        if (material.stored > material.actualSellAmount * 3) {\\r\\n                            const warehouse = ns.corporation.getWarehouse(divisionName, city);\\r\\n                            const freeSpace = warehouse.size - warehouse.sizeUsed;\\r\\n\\r\\n                            if (freeSpace < 500) {\\r\\n                                if (!problemProduct || problemProduct.freeSpace > freeSpace) {\\r\\n                                    problemProduct = { material: material.name, city, freeSpace, amountToShip: material.stored / 20 };\\r\\n                                }\\r\\n                            }\\r\\n\\r\\n                            if (freeSpace > 1_000) {\\r\\n                                if (!citiesToShip.includes(city)) {\\r\\n                                    citiesToShip.push(city);\\r\\n                                }\\r\\n                            }\\r\\n                        }\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n\\r\\n            if (problemProduct) {\\r\\n                for (const city of citiesToShip) {\\r\\n                    ns.corporation.exportMaterial(divisionName, problemProduct.city, divisionName, city, problemProduct.material, problemProduct.amountToShip);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    if (corporation.state !== \\\"START\\\") {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    if (corporation.divisions.length > 1) {\\r\\n        if (!ns.corporation.hasUnlock(\\\"Export\\\")) {\\r\\n            ns.corporation.purchaseUnlock(\\\"Export\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n    const rawMaterialProducers = [];\\r\\n    const importExportRelationships = [];\\r\\n\\r\\n    for (const division of divisionalTies) {\\r\\n        if (corporation.divisions.includes(division.name)) {\\r\\n            rawMaterialProducers.push({ producer: division.name, materials: division.materialsSold });\\r\\n            for (const EXPORT of division.exports) {\\r\\n                if (corporation.divisions.includes(EXPORT.importer)) {\\r\\n                    importExportRelationships.push({ exporter: division.name, importer: EXPORT.importer, material: EXPORT.material });\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    for (const divisionName of corporation.divisions) {\\r\\n        const division = ns.corporation.getDivision(divisionName);\\r\\n        const exportRelationships = importExportRelationships.filter(x => x.exporter === divisionName);\\r\\n\\r\\n        for (const exportRelationship of exportRelationships) {\\r\\n            for (const city of division.cities) {\\r\\n                ns.corporation.cancelExportMaterial(exportRelationship.exporter, city, exportRelationship.importer, city, exportRelationship.material);\\r\\n                if (ns.corporation.hasWarehouse(exportRelationship.importer, city)) {\\r\\n                    ns.corporation.exportMaterial(exportRelationship.exporter, city, exportRelationship.importer, city, exportRelationship.material, \\\"-(IPROD)\\\");\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        for (const productName of division.products) {\\r\\n            if (ns.corporation.hasResearched(divisionName, \\\"Market-TA.II\\\")) {\\r\\n                ns.corporation.setProductMarketTA2(divisionName, productName, true);\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            for (const city of division.cities) {\\r\\n                const product = ns.corporation.getProduct(divisionName, city, productName);\\r\\n\\r\\n                if (product.developmentProgress !== 100) {\\r\\n                    continue;\\r\\n                }\\r\\n\\r\\n                if (product.desiredSellPrice === 0) {\\r\\n                    let mostExpensivePrice = 0;\\r\\n\\r\\n                    for (const productNameForPrice of division.products) {\\r\\n                        const product = ns.corporation.getProduct(divisionName, city, productNameForPrice);\\r\\n                        if (product.desiredSellPrice === 0) {\\r\\n                            continue;\\r\\n                        }\\r\\n\\r\\n                        let price = product.desiredSellPrice;\\r\\n\\r\\n                        if (isNaN(price)) {\\r\\n                            price = Number(price.split(')')[1]);\\r\\n                        }\\r\\n\\r\\n                        if (price > mostExpensivePrice) {\\r\\n                            mostExpensivePrice = price;\\r\\n                        }\\r\\n                    }\\r\\n\\r\\n                    if (mostExpensivePrice === 0) {\\r\\n                        mostExpensivePrice = product.productionCost * 2;\\r\\n                    }\\r\\n\\r\\n                    ns.corporation.sellProduct(divisionName, city, productName, \\\"MAX\\\", `${mostExpensivePrice}`, false)\\r\\n                } else {\\r\\n                    if (product.stored === 0) {\\r\\n                        const priceToSet = adjustPriceUp(product.desiredSellPrice, product.productionCost);\\r\\n\\r\\n                        ns.corporation.sellProduct(divisionName, city, productName, \\\"MAX\\\", priceToSet, false)\\r\\n                    }\\r\\n\\r\\n                    if (product.stored > 30) {\\r\\n                        const priceToSet = adjustPriceDown(product.desiredSellPrice, product.productionCost);\\r\\n\\r\\n                        ns.corporation.sellProduct(divisionName, city, productName, \\\"MAX\\\", priceToSet, false);\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        const rawMaterialProducer = rawMaterialProducers.find(x => x.producer === divisionName);\\r\\n\\r\\n        if (rawMaterialProducer) {\\r\\n            for (const city of division.cities) {\\r\\n                for (const materialName of rawMaterialProducer.materials) {\\r\\n\\r\\n                    const material = ns.corporation.getMaterial(divisionName, city, materialName);\\r\\n\\r\\n                    const warehouse = ns.corporation.getWarehouse(divisionName, city);\\r\\n\\r\\n                    const percentUsed = warehouse.sizeUsed / warehouse.size;\\r\\n\\r\\n                    if (ns.corporation.hasResearched(divisionName, \\\"Market-TA.II\\\") && material.stored === 0) {\\r\\n                        ns.corporation.setMaterialMarketTA2(divisionName, city, materialName, true);\\r\\n                        continue;\\r\\n                    } else if (ns.corporation.hasResearched(divisionName, \\\"Market-TA.II\\\") && percentUsed < 0.8) {\\r\\n                        ns.corporation.setMaterialMarketTA2(divisionName, city, materialName, true);\\r\\n                        continue;\\r\\n                    } else if (ns.corporation.hasResearched(divisionName, \\\"Market-TA.II\\\")) {\\r\\n                        ns.corporation.setMaterialMarketTA2(divisionName, city, materialName, false);\\r\\n                    }\\r\\n\\r\\n                    const marketPrice = material.marketPrice;\\r\\n\\r\\n                    if (material.desiredSellPrice === 0 || material.desiredSellPrice === \\\"MP\\\" || material.desiredSellPrice === \\\"MP+5\\\") {\\r\\n                        ns.corporation.sellMaterial(divisionName, city, material.name, \\\"MAX\\\", marketPrice);\\r\\n                    } else {\\r\\n\\r\\n                        const materialData = ns.corporation.getMaterialData(material.name);\\r\\n                        const costOfGoodsSold = material.marketPrice / materialData.baseMarkup;\\r\\n\\r\\n                        if (material.stored === 0) {\\r\\n                            let priceToSet = adjustPriceUp(material.desiredSellPrice, marketPrice);\\r\\n\\r\\n                            if (priceToSet < costOfGoodsSold) {\\r\\n                                priceToSet = costOfGoodsSold * 1.04;\\r\\n                            }\\r\\n\\r\\n                            ns.corporation.sellMaterial(divisionName, city, material.name, \\\"MAX\\\", priceToSet);\\r\\n                        }\\r\\n\\r\\n                        if (material.stored > 30) {\\r\\n                            let priceToSet = adjustPriceDown(material.desiredSellPrice, marketPrice);\\r\\n\\r\\n                            if (material.stored > material.productionAmount * 3) {\\r\\n                                priceToSet = adjustPriceDown(priceToSet, marketPrice, true);\\r\\n                            }\\r\\n\\r\\n                            if (priceToSet < costOfGoodsSold) {\\r\\n                                priceToSet = costOfGoodsSold * 1.04;\\r\\n                            }\\r\\n\\r\\n                            ns.corporation.sellMaterial(divisionName, city, material.name, \\\"MAX\\\", priceToSet);\\r\\n                        }\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction adjustPriceUp(oldPrice, marketPrice) {\\r\\n\\r\\n    if (isNaN(oldPrice)) {\\r\\n        const adjuster = Number(oldPrice.split(')')[1]);\\r\\n        oldPrice = adjuster + marketPrice;\\r\\n    }\\r\\n\\r\\n    let newPrice = 0;\\r\\n    if (oldPrice >= 0) {\\r\\n        if (oldPrice > 100) {\\r\\n            newPrice = oldPrice * 1.05;\\r\\n        } else {\\r\\n            newPrice = oldPrice + 10;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    if (oldPrice < 0) {\\r\\n        newPrice = 10;\\r\\n    }\\r\\n\\r\\n    if (newPrice <= 0) {\\r\\n        return oldPrice;\\r\\n    }\\r\\n\\r\\n    return newPrice;\\r\\n}\\r\\n\\r\\nfunction adjustPriceDown(oldPrice, marketPrice, fastDrop = false) {\\r\\n\\r\\n    if (isNaN(oldPrice)) {\\r\\n        const adjuster = Number(oldPrice.split(')')[1]);\\r\\n        oldPrice = adjuster + marketPrice;\\r\\n    }\\r\\n\\r\\n    let newPrice = 0;\\r\\n    if (oldPrice >= 0) {\\r\\n        if (oldPrice > 100) {\\r\\n            newPrice = oldPrice * 0.97;\\r\\n        } else {\\r\\n            newPrice = oldPrice - 5;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    if (fastDrop) {\\r\\n        newPrice = oldPrice * 0.9;\\r\\n    }\\r\\n\\r\\n    if (oldPrice < 0) {\\r\\n        newPrice = 10;\\r\\n    }\\r\\n\\r\\n    if (newPrice <= 0) {\\r\\n        return oldPrice;\\r\\n    }\\r\\n\\r\\n    return newPrice;\\r\\n}\\r\\n\",\"filename\":\"scripts/corporations/adjust-prices-export.js\",\"server\":\"home\"}}],[\"scripts/corporations/go-public.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    if (!ns.corporation.hasCorporation()) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    const corporation = ns.corporation.getCorporation();\\r\\n    const profit = corporation.revenue - corporation.expenses;\\r\\n\\r\\n    if (profit > 200_000_000 && corporation.public === false){\\r\\n        ns.corporation.goPublic(0);\\r\\n    }\\r\\n\\r\\n    if(corporation.public && corporation.dividendRate !== .01){\\r\\n        ns.corporation.issueDividends(.01);\\r\\n    }\\r\\n}\",\"filename\":\"scripts/corporations/go-public.js\",\"server\":\"home\"}}],[\"scripts/corporations/get-investments.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    if (!ns.corporation.hasCorporation()) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    const corporation = ns.corporation.getCorporation();\\r\\n    const profit = corporation.revenue - corporation.expenses;\\r\\n\\r\\n    // ns.tprint(ns.corporation.getInvestmentOffer())\\r\\n\\r\\n    ///{\\\"funds\\\":96283140000,\\\"shares\\\":100000000,\\\"round\\\":1}\\r\\n\\r\\n    // { round: 1, investment: 100_000_000 },\\r\\n    // { round: 2, investment: 300_000_000 }, // worked, but I bet we can do better\\r\\n    // { round: 3, investment: 3_000_000_000 },\\r\\n\\r\\n    const investmentWeWillTake = [\\r\\n        { round: 1, investment: 95_000_000_000, goPublic: false },\\r\\n        { round: 2, investment: 800_000_000_000, goPublic: true },\\r\\n    ]\\r\\n\\r\\n    const investmentOffer = ns.corporation.getInvestmentOffer();\\r\\n\\r\\n    for (const minimumInvestment of investmentWeWillTake) {\\r\\n        if (investmentOffer.round === minimumInvestment.round && investmentOffer.funds > minimumInvestment.investment) {\\r\\n            if (minimumInvestment.goPublic === false) {\\r\\n                ns.corporation.acceptInvestmentOffer();\\r\\n            } else {\\r\\n                const sharesToSell = corporation.totalShares * .50;\\r\\n                ns.corporation.goPublic(sharesToSell);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n    if (corporation.public) {\\r\\n        const newSharesConditions = [\\r\\n            { sharesOutstanding: 1_000_000_000, sharePriceMin: 8_000, multipleOfFunds: 40, sharesToIssue: 200_000_000 },\\r\\n            { sharesOutstanding: 1_200_000_000, sharePriceMin: 40_000, multipleOfFunds: 100, sharesToIssue: 240_000_000 },\\r\\n        ]\\r\\n\\r\\n        if (corporation.funds < 10_000_000_000_000 &&\\r\\n            corporation.numShares / corporation.totalShares > .7 &&\\r\\n            profit < 10_000_000_000 &&\\r\\n            corporation.shareSaleCooldown === 0)\\r\\n\\r\\n            for (const condition of newSharesConditions.filter(x => x.sharesOutstanding === corporation.totalShares)) {\\r\\n                if (corporation.sharePrice > condition.sharePriceMin) {\\r\\n                    const shareToIssue = condition.sharesToIssue;\\r\\n                    const fundsGenerated = shareToIssue * corporation.sharePrice * .9;\\r\\n                    const minimumNeeded = corporation.funds * condition.multipleOfFunds;\\r\\n\\r\\n                    if (fundsGenerated > minimumNeeded) {\\r\\n                        ns.corporation.issueNewShares(shareToIssue);\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n\\r\\n\\r\\n        const stockMarketReserveMoneyFile = \\\"data/stockMarketReserveMoney.txt\\\";\\r\\n        let stockMarketReserveMoney = new ReserveForTrading();\\r\\n        if (ns.fileExists(stockMarketReserveMoneyFile)) {\\r\\n            stockMarketReserveMoney = new ReserveForTrading(JSON.parse(ns.read(stockMarketReserveMoneyFile)));\\r\\n        }\\r\\n\\r\\n        if (corporation.state === 'START' & corporation.issuedShares > 0 && corporation.divisions.length > 1) {\\r\\n            let moneyOnHome = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n            const moneyReserved = stockMarketReserveMoney.capitalToReserveForTrading - stockMarketReserveMoney.moneyInvested;\\r\\n\\r\\n            if (moneyReserved > 0) {\\r\\n                moneyOnHome -= moneyReserved;\\r\\n            }\\r\\n\\r\\n            if (moneyOnHome > 0) {\\r\\n                const cashToUseForBuybacks = moneyOnHome * 0.001;\\r\\n                let sharesToBuy = Math.floor(cashToUseForBuybacks / corporation.sharePrice)\\r\\n                if (sharesToBuy > corporation.issuedShares) {\\r\\n                    sharesToBuy = corporation.issuedShares;\\r\\n                }\\r\\n\\r\\n                if (sharesToBuy > 0) {\\r\\n                    ns.corporation.buyBackShares(sharesToBuy);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        const dividendConditions = [\\r\\n            { dividendRate: .01, partnership: false, floodPlayerWithMoney: false, minProfit: 200_000_000 },\\r\\n            { dividendRate: .5, partnership: true, floodPlayerWithMoney: false, minProfit: 200_000_000 },\\r\\n            { dividendRate: .77, partnership: false, floodPlayerWithMoney: true, minProfit: 40_000_000 },\\r\\n            { dividendRate: .77, partnership: true, floodPlayerWithMoney: true, minProfit: 40_000_000 },\\r\\n        ]\\r\\n\\r\\n        const hasGovPartnership = ns.corporation.hasUnlock(\\\"Government Partnership\\\");\\r\\n        const floodPlayerWithMoneyBecauseTheyJustStarted = stockMarketReserveMoney.capitalToReserveForTrading <= 5_000_000_000;\\r\\n\\r\\n        const conditionToUse = dividendConditions.find(x => x.partnership === hasGovPartnership && x.floodPlayerWithMoney === floodPlayerWithMoneyBecauseTheyJustStarted);\\r\\n\\r\\n        if (conditionToUse.minProfit < profit) {\\r\\n            if (corporation.dividendRate !== conditionToUse.dividendRate) {\\r\\n                ns.corporation.issueDividends(conditionToUse.dividendRate);\\r\\n            } \\r\\n        } else {\\r\\n            if (corporation.dividendRate !== 0) {\\r\\n                ns.corporation.issueDividends(0);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nclass ReserveForTrading {\\r\\n    stockMarketReserveMoneyLimit = 1_500_000_000_000;\\r\\n    capitalToReserveForTrading = 500_000_000;\\r\\n    moneyInvested = 0;\\r\\n    moneyRequested = new Map();\\r\\n    countOfVisitedWithoutFillingRequest = 0;\\r\\n\\r\\n\\r\\n    constructor(obj) {\\r\\n        obj && Object.assign(this, obj);\\r\\n    }\\r\\n\\r\\n    canSellAmountAndStillHaveReserve(amountToSell) {\\r\\n        return (this.moneyInvested - amountToSell) > this.capitalToReserveForTrading;\\r\\n    }\\r\\n\\r\\n    setMoneyInvested(moneyInvested, ns) {\\r\\n        this.moneyInvested = moneyInvested;\\r\\n\\r\\n        const potentialCapitalReserve = (moneyInvested + ns.getServerMoneyAvailable(\\\"home\\\")) * .85;\\r\\n\\r\\n        this.capitalToReserveForTrading = Math.max(...[potentialCapitalReserve, this.capitalToReserveForTrading]);\\r\\n\\r\\n        if (this.capitalToReserveForTrading > this.stockMarketReserveMoneyLimit) {\\r\\n            this.capitalToReserveForTrading = this.stockMarketReserveMoneyLimit;\\r\\n        }\\r\\n\\r\\n        this.countOfVisitedWithoutFillingRequest++;\\r\\n    }\\r\\n\\r\\n    canSpend(ns, moneyNeeded) {\\r\\n        const moneyOnHome = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n\\r\\n        let moneyToSaveForTrading = this.capitalToReserveForTrading - this.moneyInvested;\\r\\n\\r\\n        if (moneyToSaveForTrading < 0) {\\r\\n            moneyToSaveForTrading = 0;\\r\\n        }\\r\\n\\r\\n        if (moneyToSaveForTrading > this.stockMarketReserveMoneyLimit) {\\r\\n            moneyToSaveForTrading = this.stockMarketReserveMoneyLimit;\\r\\n        }\\r\\n\\r\\n        const canSpend = moneyNeeded < moneyOnHome - moneyToSaveForTrading\\r\\n\\r\\n        if (canSpend === false) {\\r\\n            this.requestMoney(ns, moneyNeeded);\\r\\n        } else {\\r\\n            this.moneyRequested = new Map(Array.from(this.moneyRequested));\\r\\n\\r\\n            const nameOfRequest = \\\"invest-in-stocks\\\";\\r\\n            this.moneyRequested.delete(nameOfRequest);\\r\\n            const stockMarketReserveMoneyFile = \\\"data/stockMarketReserveMoney.txt\\\";\\r\\n            ns.rm(stockMarketReserveMoneyFile);\\r\\n            ns.write(stockMarketReserveMoneyFile, JSON.stringify(this), \\\"W\\\");\\r\\n        }\\r\\n\\r\\n        return canSpend;\\r\\n    }\\r\\n\\r\\n    requestMoney(ns, amount) {\\r\\n        const nameOfRequest = \\\"invest-in-stocks\\\";\\r\\n        this.moneyRequested = new Map(Array.from(this.moneyRequested));\\r\\n\\r\\n        const moneyRequestedPreviously = this.moneyRequested.get(nameOfRequest);\\r\\n        if (moneyRequestedPreviously) {\\r\\n            if (moneyRequestedPreviously < amount) {\\r\\n                this.moneyRequested.set(nameOfRequest, amount);\\r\\n                this.moneyRequested = Array.from(this.moneyRequested);\\r\\n\\r\\n                const stockMarketReserveMoneyFile = \\\"data/stockMarketReserveMoney.txt\\\";\\r\\n                ns.rm(stockMarketReserveMoneyFile);\\r\\n                ns.write(stockMarketReserveMoneyFile, JSON.stringify(this), \\\"W\\\");\\r\\n            }\\r\\n        } else {\\r\\n            this.moneyRequested.set(nameOfRequest, amount);\\r\\n            this.moneyRequested = Array.from(this.moneyRequested);\\r\\n\\r\\n            const stockMarketReserveMoneyFile = \\\"data/stockMarketReserveMoney.txt\\\";\\r\\n            ns.rm(stockMarketReserveMoneyFile);\\r\\n            ns.write(stockMarketReserveMoneyFile, JSON.stringify(this), \\\"W\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"filename\":\"scripts/corporations/get-investments.js\",\"server\":\"home\"}}],[\"scripts/corporations/expand.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    if (!ns.corporation.hasCorporation()) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    const corporation = ns.corporation.getCorporation();\\r\\n\\r\\n    const divisionsGoal = [\\r\\n        { order: 0, fundsNeeded: 0, name: \\\"Gidget's Farm\\\", industry: \\\"Agriculture\\\", profitNeeded: 0 },\\r\\n        { order: 1, fundsNeeded: 300_000_000_000, name: \\\"Gidget's Smokes\\\",  industry: \\\"Tobacco\\\", profitNeeded: 250_000 },\\r\\n        { order: 2, fundsNeeded: 2_000_000_000_000, name: \\\"Chemist Gidget's Lab\\\", industry: \\\"Chemical\\\", profitNeeded: 1_000_000_000 },\\r\\n        { order: 3, fundsNeeded: 3_000_000_000_000, name: \\\"Gidget's Municipal Water\\\", industry: \\\"Water Utilities\\\", profitNeeded: 10_000_000_000 },\\r\\n        { order: 4, fundsNeeded: 100_000_000_000_000, name: \\\"Gidget's Computers & Hardware\\\", industry: \\\"Computer Hardware\\\", profitNeeded: 1_000_000_000_000 },\\r\\n        { order: 5, fundsNeeded: 200_000_000_000_000, name: \\\"Gidget's Metallurgy\\\", industry: \\\"Refinery\\\", profitNeeded: 2_000_000_000_000 }, \\r\\n        { order: 6, fundsNeeded: 300_000_000_000_000, name: \\\"Gidget's Land Destroyer\\\", industry: \\\"Mining\\\", profitNeeded: 3_000_000_000_000 },\\r\\n    ]\\r\\n\\r\\n    const profit = corporation.revenue - corporation.expenses;\\r\\n    for (const divisionGoal of divisionsGoal) {\\r\\n        if (corporation.divisions.length === divisionGoal.order && corporation.funds > divisionGoal.fundsNeeded && !corporation.divisions.includes(divisionGoal.name) && profit >= divisionGoal.profitNeeded) {\\r\\n            ns.corporation.expandIndustry(divisionGoal.industry, divisionGoal.name);\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"scripts/corporations/expand.js\",\"server\":\"home\"}}],[\"scripts/corporations/bribe-factions.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    if (!ns.corporation.hasCorporation()) {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    let corporation = ns.corporation.getCorporation();\\r\\n    const profit = corporation.revenue - corporation.expenses;\\r\\n\\r\\n    if(profit > 1_000_000_000_000){\\r\\n        const ownedAugmentations = ns.singularity.getOwnedAugmentations(true);\\r\\n        const player = ns.getPlayer();\\r\\n\\r\\n        const mostRepExpensiveForEachFaction = [];\\r\\n\\r\\n        for (const faction of player.factions) {\\r\\n            const maximumAugRep = Math.max(...ns\\r\\n                .singularity\\r\\n                .getAugmentationsFromFaction(faction)\\r\\n                .filter(x => x !== \\\"NeuroFlux Governor\\\")\\r\\n                .filter(x => !ownedAugmentations.includes(x))\\r\\n                .filter(x => {\\r\\n                    const prereqs = ns.singularity.getAugmentationPrereq(x);\\r\\n                    return prereqs.every(y => ownedAugmentations.includes(y));\\r\\n                })\\r\\n                .map(x => ns.singularity.getAugmentationRepReq(x)));\\r\\n    \\r\\n            if (maximumAugRep > 0) {\\r\\n                mostRepExpensiveForEachFaction.push({ faction, maximumAugRep });\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if(mostRepExpensiveForEachFaction.length > 0){\\r\\n            for (const factionWithRep of mostRepExpensiveForEachFaction) {\\r\\n                \\r\\n                let currentFactionRep = ns.singularity.getFactionRep(factionWithRep.faction);\\r\\n                const repNeeded = factionWithRep.maximumAugRep - currentFactionRep;\\r\\n                \\r\\n                corporation = ns.corporation.getCorporation();\\r\\n                const capitalReserve = 400_000_000_000;\\r\\n                const liquidFunds = corporation.funds;\\r\\n                const investableAmount = liquidFunds - capitalReserve;\\r\\n\\r\\n                const amountToDonate = 1_000_000_000_000;\\r\\n                \\r\\n                let amountSpent = amountToDonate;\\r\\n                while(currentFactionRep < repNeeded && investableAmount > amountSpent){\\r\\n\\r\\n                    ns.corporation.bribe(factionWithRep.faction, amountToDonate)\\r\\n                    \\r\\n                    amountSpent += amountToDonate;\\r\\n                    currentFactionRep = ns.singularity.getFactionRep(factionWithRep.faction);           \\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n}\",\"filename\":\"scripts/corporations/bribe-factions.js\",\"server\":\"home\"}}],[\"scripts/singularity/do-work-get-augs.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n\\r\\n    const player = ns.getPlayer();\\r\\n    const organizations = JSON.parse(ns.read(\\\"data/organizations.txt\\\"));\\r\\n    const organizationsToJoinInTheOrderWeWantToComplete = organizations.toJoinInOrderInWhichIWantToComplete;\\r\\n    const ownedAugmentations = JSON.parse(ns.read(\\\"data/ownedAugs.txt\\\"));\\r\\n\\r\\n    const doNoWorkFor = organizations.doNoWorkFor;\\r\\n    const stopAtAugments = organizations.stopAtAugments;\\r\\n\\r\\n    const factionsWithAugsToBuyAndNotEnoughtFavor = [];\\r\\n\\r\\n    for (const faction of organizationsToJoinInTheOrderWeWantToComplete) {\\r\\n        if (player.factions.includes(faction) && !doNoWorkFor.includes(faction)) {\\r\\n\\r\\n            let augmentsForFaction = ns\\r\\n                .singularity\\r\\n                .getAugmentationsFromFaction(faction);\\r\\n\\r\\n            let stopAtAugmentForFaction = stopAtAugments\\r\\n                .find(x => x.faction === faction);\\r\\n\\r\\n            if (stopAtAugmentForFaction) {\\r\\n                if (ownedAugmentations.includes(stopAtAugmentForFaction.augmentToStopAt) && stopAtAugmentForFaction.final) {\\r\\n                    augmentsForFaction = [];\\r\\n                } else if (ownedAugmentations.includes(stopAtAugmentForFaction.augmentToStopAt) && !stopAtAugmentForFaction.final) {\\r\\n                    augmentsForFaction = augmentsForFaction;\\r\\n                } else {\\r\\n                    augmentsForFaction = augmentsForFaction.filter(x => x === stopAtAugmentForFaction.augmentToStopAt);\\r\\n                }\\r\\n            }\\r\\n\\r\\n            const maximumAugRep = Math.max(...augmentsForFaction\\r\\n                .filter(x => x !== \\\"NeuroFlux Governor\\\")\\r\\n                .filter(x => !ownedAugmentations.includes(x))\\r\\n                .map(x => ns.singularity.getAugmentationRepReq(x)));\\r\\n\\r\\n            const favor = ns.singularity.getFactionFavor(faction);\\r\\n\\r\\n            if (maximumAugRep > 0 && favor < 75) {\\r\\n                factionsWithAugsToBuyAndNotEnoughtFavor.push({ faction, maximumAugRep });\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    const factionsWithAugsToBuyAndNotEnoughtFavorFile = 'data/factionsWithAugsToBuyAndNotEnoughtFavor.txt';\\r\\n    ns.rm(factionsWithAugsToBuyAndNotEnoughtFavorFile);\\r\\n    ns.write(factionsWithAugsToBuyAndNotEnoughtFavorFile, JSON.stringify(factionsWithAugsToBuyAndNotEnoughtFavor), \\\"W\\\");\\r\\n}\",\"filename\":\"scripts/singularity/do-work-get-augs.js\",\"server\":\"home\"}}],[\"scripts/singularity/do-work-get-augments.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const player = ns.getPlayer();\\r\\n\\r\\n    const ownedAugmentations = JSON.parse(ns.read(\\\"data/ownedAugs.txt\\\"));\\r\\n    const organizations = JSON.parse(ns.read(\\\"data/organizations.txt\\\"));\\r\\n    const organizationsToJoinInTheOrderWeWantToComplete = organizations.toJoinInOrderInWhichIWantToComplete;\\r\\n    const doNoWorkFor = organizations.doNoWorkFor;\\r\\n    const stopAtAugments = organizations.stopAtAugments;\\r\\n\\r\\n    const factionsWithAugsToBuyAndNotEnoughtFavor = [];\\r\\n\\r\\n    for (const faction of organizationsToJoinInTheOrderWeWantToComplete) {\\r\\n        if (player.factions.includes(faction) && !doNoWorkFor.includes(faction)) {\\r\\n\\r\\n            let augmentsForFaction = ns\\r\\n                .singularity\\r\\n                .getAugmentationsFromFaction(faction);\\r\\n\\r\\n            let stopAtAugmentForFaction = stopAtAugments\\r\\n                .find(x => x.faction === faction);\\r\\n\\r\\n            if (stopAtAugmentForFaction) {\\r\\n                if (ownedAugmentations.includes(stopAtAugmentForFaction.augmentToStopAt) && stopAtAugmentForFaction.final) {\\r\\n                    augmentsForFaction = [];\\r\\n                } else if (ownedAugmentations.includes(stopAtAugmentForFaction.augmentToStopAt) && !stopAtAugmentForFaction.final) {\\r\\n                    augmentsForFaction = augmentsForFaction;\\r\\n                } else {\\r\\n                    augmentsForFaction = augmentsForFaction.filter(x => x === stopAtAugmentForFaction.augmentToStopAt);\\r\\n                }\\r\\n            }\\r\\n\\r\\n            const maximumAugRep = Math.max(...augmentsForFaction\\r\\n                .filter(x => x !== \\\"NeuroFlux Governor\\\")\\r\\n                .filter(x => !ownedAugmentations.includes(x))\\r\\n                .map(x => ns.singularity.getAugmentationRepReq(x)));\\r\\n\\r\\n            const favor = ns.singularity.getFactionFavor(faction);\\r\\n\\r\\n            if (maximumAugRep > 0 && favor < 75) {\\r\\n                factionsWithAugsToBuyAndNotEnoughtFavor.push({ faction, maximumAugRep });\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    const factionsWithAugsToBuyAndNotEnoughtFavorFile = \\\"data/factionsWithAugsToBuyAndNotEnoughtFavor.txt\\\";\\r\\n    ns.rm(factionsWithAugsToBuyAndNotEnoughtFavorFile);\\r\\n    ns.write(factionsWithAugsToBuyAndNotEnoughtFavorFile, JSON.stringify(factionsWithAugsToBuyAndNotEnoughtFavor), \\\"W\\\");\\r\\n\\r\\n}\\r\\n\",\"filename\":\"scripts/singularity/do-work-get-augments.js\",\"server\":\"home\"}}],[\"scripts/singularity/apply-to-jobs.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const organizations = JSON.parse(ns.read(\\\"data/organizations.txt\\\"));\\r\\n    const companiesWeWantToBecomePartOf = organizations.companiesWeWantToBecomePartOf;\\r\\n\\r\\n    for (const companyName of companiesWeWantToBecomePartOf) {\\r\\n        ns.singularity.applyToCompany(companyName, \\\"software\\\");\\r\\n    }\\r\\n}\",\"filename\":\"scripts/singularity/apply-to-jobs.js\",\"server\":\"home\"}}],[\"scripts/stock/second-part-of-quotes.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const latestStockQuotesFile = \\\"data/latestQuotes.txt\\\";\\r\\n    const stockRecords = JSON.parse(ns.read(latestStockQuotesFile));\\r\\n\\r\\n    for (const quote of stockRecords) {\\r\\n        quote.price = ns.stock.getPrice(quote.symbol);\\r\\n        quote.maxShares = ns.stock.getMaxShares(quote.symbol);\\r\\n\\r\\n        const position = ns.stock.getPosition(quote.symbol);\\r\\n        quote.investedShares = position[0];\\r\\n        quote.averagePrice = position[1];\\r\\n        quote.sharesShort = position[2];\\r\\n        quote.averageShortPrice = position[3];\\r\\n    }\\r\\n\\r\\n\\r\\n    ns.rm(latestStockQuotesFile);\\r\\n    ns.write(latestStockQuotesFile, JSON.stringify(stockRecords), \\\"W\\\")\\r\\n}\",\"filename\":\"scripts/stock/second-part-of-quotes.js\",\"server\":\"home\"}}],[\"scripts/tools/compare-material-prices.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n\\r\\n    const corporation = ns.corporation.getCorporation();\\r\\n\\r\\n    const materialWeAreConcernedAbout = \\\"Food\\\";\\r\\n\\r\\n    const foods = corporation\\r\\n        .divisions\\r\\n        .map(x => ns.corporation.getDivision(x))\\r\\n        .filter(x => x.makesProducts === false)\\r\\n        .map(x => x.cities.map(city => ns.corporation.getMaterial(x.name, city, materialWeAreConcernedAbout)))\\r\\n        .reduce((acc, x) => acc.concat(x), []);\\r\\n\\r\\n    ns.rm(\\\"junk.txt\\\");\\r\\n    ns.write(\\\"junk.txt\\\", JSON.stringify(foods), \\\"W\\\");\\r\\n\\r\\n}\",\"filename\":\"scripts/tools/compare-material-prices.js\",\"server\":\"home\"}}]]},\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\",\"CLOUD-000\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[[\"analytics/2023-07-07-11-15-Bachman&Associates-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-07-11-15-Bachman&Associates-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-07T15:01:39.037Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-07T15:01:39.037Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"Bachman & Associates\\\",\\\"firstTime\\\":\\\"2023-07-07T15:01:39.037Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":375000,\\\"currentFactionRep\\\":333650.9080521832,\\\"targetRepForGettingToFavor\\\":462490.0692,\\\"time\\\":\\\"2023-07-07T15:01:39.037Z\\\"},\\\"moneySpent\\\":{\\\"augments\\\":0,\\\"homeCores\\\":23730468750000,\\\"homeRam\\\":31587660778186.953,\\\"fluxGovernors\\\":0,\\\"augment\\\":null},\\\"lastSaved\\\":\\\"2023-07-07T16:15:57.700Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":true,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":375000,\\\"currentFactionRep\\\":375000.40990502154,\\\"targetRepForGettingToFavor\\\":462490.0692,\\\"time\\\":\\\"2023-07-07T16:10:26.619Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$108,452,850,558,874.11\\\",\\\"moneyRightNow\\\":\\\"$103,101,209,025,358.40\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$275,000,000,000.00\\\",\\\"time\\\":\\\"2023-07-07T16:10:26.620Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$108,452,850,558,874.11\\\",\\\"moneyRightNow\\\":\\\"$103,681,640,147,085.58\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$275,000,000,000.00\\\",\\\"time\\\":\\\"2023-07-07T16:10:30.684Z\\\"},\\\"augsBought\\\":[\\\"SmartJaw\\\",\\\"Enhanced Social Interaction Implant\\\",\\\"FocusWire\\\",\\\"ADR-V2 Pheromone Gene\\\",\\\"CashRoot Starter Kit\\\",\\\"Nanofiber Weave\\\",\\\"Augmented Targeting I\\\",\\\"Augmented Targeting II\\\"]}\"}}],[\"analytics/2023-07-07-14-03-BitRunners-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-07-14-03-BitRunners-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-07T16:19:40.262Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-07T16:19:40.262Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"BitRunners\\\",\\\"firstTime\\\":\\\"2023-07-07T16:19:40.262Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":275000,\\\"currentFactionRep\\\":0,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-07T16:19:40.262Z\\\"},\\\"augsBought\\\":[\\\"Neural Accelerator\\\"],\\\"moneySpent\\\":{\\\"augments\\\":0,\\\"homeCores\\\":0,\\\"homeRam\\\":0,\\\"fluxGovernors\\\":0,\\\"augment\\\":null},\\\"lastSaved\\\":\\\"2023-07-07T19:03:34.187Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":true,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":275000,\\\"currentFactionRep\\\":207528.18490936968,\\\"targetRepForGettingToFavor\\\":207510.3723,\\\"time\\\":\\\"2023-07-07T19:03:30.139Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$11,781,091,031,741.60\\\",\\\"moneyRightNow\\\":\\\"$1,303,091,345,518.27\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$175,000,000,000.00\\\",\\\"time\\\":\\\"2023-07-07T19:03:30.139Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$11,781,091,031,741.60\\\",\\\"moneyRightNow\\\":\\\"$2,544,403,997,543.49\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$175,000,000,000.00\\\",\\\"time\\\":\\\"2023-07-07T19:03:34.186Z\\\"}}\"}}],[\"analytics/2023-07-08-19-48-Daedalus-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-08-19-48-Daedalus-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-07T19:06:59.469Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-07T19:06:59.469Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"BitRunners\\\",\\\"firstTime\\\":\\\"2023-07-07T19:06:59.470Z\\\"},{\\\"factionToMax\\\":\\\"Daedalus\\\",\\\"firstTime\\\":\\\"2023-07-07T21:55:21.354Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":275000,\\\"currentFactionRep\\\":0,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-07T19:06:59.470Z\\\"},\\\"augsBought\\\":[\\\"PCMatrix\\\",\\\"Synfibril Muscle\\\"],\\\"moneySpent\\\":{\\\"augments\\\":4137500000,\\\"homeCores\\\":0,\\\"homeRam\\\":0,\\\"fluxGovernors\\\":0},\\\"lastSaved\\\":\\\"2023-07-08T00:48:28.885Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":true,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":275000,\\\"currentFactionRep\\\":32865.1277346334,\\\"targetRepForGettingToFavor\\\":21865.9969,\\\"time\\\":\\\"2023-07-07T19:21:42.026Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$20,200,143,877,934.50\\\",\\\"moneyRightNow\\\":\\\"$3,911,461,428,002.28\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$225,000,000,000.00\\\",\\\"time\\\":\\\"2023-07-07T20:39:02.138Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$20,200,143,877,934.50\\\",\\\"moneyRightNow\\\":\\\"$4,117,056,489,229.67\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$225,000,000,000.00\\\",\\\"time\\\":\\\"2023-07-07T20:39:06.169Z\\\"},\\\"moneyLeft\\\":7852910581520.66}\"}}],[\"analytics/2023-07-08-22-54-NWO-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-08-22-54-NWO-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-08T01:27:34.503Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-08T01:27:34.503Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"NWO\\\",\\\"firstTime\\\":\\\"2023-07-08T01:27:34.503Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":1750000,\\\"currentFactionRep\\\":0,\\\"targetRepForGettingToFavor\\\":462490.0692,\\\"time\\\":\\\"2023-07-08T01:27:34.503Z\\\"},\\\"augsBought\\\":[\\\"Embedded Netburner Module Core V2 Upgrade\\\",\\\"Embedded Netburner Module Core V3 Upgrade\\\",\\\"Embedded Netburner Module Direct Memory Access Upgrade\\\",\\\"Embedded Netburner Module Analyze Engine\\\",\\\"BitRunners Neurolink\\\",\\\"NEMEAN Subdermal Weave\\\",\\\"Synthetic Heart\\\",\\\"Power Recirculation Core\\\",\\\"Neurotrainer III\\\",\\\"Combat Rib I\\\",\\\"Combat Rib II\\\",\\\"DermaForce Particle Barrier\\\",\\\"The Red Pill\\\"],\\\"moneySpent\\\":{\\\"augments\\\":501848779077.36707,\\\"homeCores\\\":0,\\\"homeRam\\\":99817008059070.77,\\\"fluxGovernors\\\":0},\\\"moneyLeft\\\":75733371162620.36,\\\"lastSaved\\\":\\\"2023-07-08T03:54:59.353Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":true,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":1750000,\\\"currentFactionRep\\\":462501.05086586776,\\\"targetRepForGettingToFavor\\\":462490.0692,\\\"time\\\":\\\"2023-07-08T03:54:55.304Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$526,824,656,393,874.44\\\",\\\"moneyRightNow\\\":\\\"$251,999,971,224,510.60\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$18,000,000,000.00\\\",\\\"time\\\":\\\"2023-07-08T03:54:55.304Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$526,824,656,393,874.44\\\",\\\"moneyRightNow\\\":\\\"$253,602,470,575,079.72\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$18,000,000,000.00\\\",\\\"time\\\":\\\"2023-07-08T03:54:59.351Z\\\"}}\"}}],[\"analytics/2023-07-08-00-56-OmniTekIncorporated-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-08-00-56-OmniTekIncorporated-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-08T04:26:57.384Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-08T04:26:57.384Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"OmniTek Incorporated\\\",\\\"firstTime\\\":\\\"2023-07-08T04:26:57.384Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":625000,\\\"currentFactionRep\\\":15.124617264295333,\\\"targetRepForGettingToFavor\\\":462490.0692,\\\"time\\\":\\\"2023-07-08T04:26:57.384Z\\\"},\\\"augsBought\\\":[\\\"Hydroflame Left Arm\\\",\\\"Xanipher\\\",\\\"PC Direct-Neural Interface\\\",\\\"Bionic Legs\\\",\\\"Bionic Spine\\\",\\\"Combat Rib III\\\",\\\"Augmented Targeting III\\\",\\\"NutriGen Implant\\\"],\\\"moneySpent\\\":{\\\"augments\\\":2534418700549.75,\\\"homeCores\\\":177978515625000,\\\"homeRam\\\":0,\\\"fluxGovernors\\\":0},\\\"moneyLeft\\\":280042565488.5333,\\\"lastSaved\\\":\\\"2023-07-08T05:56:46.954Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":true,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":625000,\\\"currentFactionRep\\\":462548.0785199993,\\\"targetRepForGettingToFavor\\\":462490.0692,\\\"time\\\":\\\"2023-07-08T05:56:42.882Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$505,066,407,135,123.06\\\",\\\"moneyRightNow\\\":\\\"$180,386,298,617,236.44\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$375,000,000,000.00\\\",\\\"time\\\":\\\"2023-07-08T05:56:42.883Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$505,066,407,135,123.06\\\",\\\"moneyRightNow\\\":\\\"$181,269,916,019,448.78\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$375,000,000,000.00\\\",\\\"time\\\":\\\"2023-07-08T05:56:46.945Z\\\"}}\"}}],[\"analytics/2023-07-08-02-29-BladeIndustries-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-08-02-29-BladeIndustries-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-08T06:21:45.808Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-08T06:21:45.808Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"Blade Industries\\\",\\\"firstTime\\\":\\\"2023-07-08T06:21:45.808Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":562500,\\\"currentFactionRep\\\":0,\\\"targetRepForGettingToFavor\\\":462490.0692,\\\"time\\\":\\\"2023-07-08T06:21:45.809Z\\\"},\\\"augsBought\\\":[\\\"OmniTek InfoLoad\\\",\\\"HyperSight Corneal Implant\\\",\\\"INFRARET Enhancement\\\"],\\\"moneySpent\\\":{\\\"augments\\\":8208300000,\\\"homeCores\\\":0,\\\"homeRam\\\":0,\\\"fluxGovernors\\\":0},\\\"moneyLeft\\\":70843557655495.1,\\\"lastSaved\\\":\\\"2023-07-08T07:29:39.410Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":true,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":562500,\\\"currentFactionRep\\\":462652.03280345845,\\\"targetRepForGettingToFavor\\\":462490.0692,\\\"time\\\":\\\"2023-07-08T07:29:35.219Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$572,996,898,778,520.20\\\",\\\"moneyRightNow\\\":\\\"$140,624,600,817,489.31\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$275,000,000,000.00\\\",\\\"time\\\":\\\"2023-07-08T07:29:35.219Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$572,996,898,778,520.20\\\",\\\"moneyRightNow\\\":\\\"$143,621,626,658,752.25\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$275,000,000,000.00\\\",\\\"time\\\":\\\"2023-07-08T07:29:39.320Z\\\"}}\"}}],[\"contracts/2023-07-08T15:46:33.989Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-08T15:46:33.989Z.txt\",\"text\":\"[{\\\"server\\\":\\\"silver-helix\\\",\\\"name\\\":\\\"contract-301865-NiteSec.cct\\\",\\\"type\\\":\\\"Spiralize Matrix\\\",\\\"attemptsLeft\\\":9},{\\\"server\\\":\\\"titan-labs\\\",\\\"name\\\":\\\"contract-605082-ECorp.cct\\\",\\\"type\\\":\\\"Array Jumping Game II\\\",\\\"attemptsLeft\\\":3},{\\\"server\\\":\\\"vitalife\\\",\\\"name\\\":\\\"contract-715836-BladeIndustries.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10},{\\\"server\\\":\\\"kuai-gong\\\",\\\"name\\\":\\\"contract-574766-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10},{\\\"server\\\":\\\"blade\\\",\\\"name\\\":\\\"contract-546533.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10},{\\\"server\\\":\\\"defcomm\\\",\\\"name\\\":\\\"contract-207182.cct\\\",\\\"type\\\":\\\"Find All Valid Math Expressions\\\",\\\"attemptsLeft\\\":10},{\\\"server\\\":\\\"defcomm\\\",\\\"name\\\":\\\"contract-562846-Chongqing.cct\\\",\\\"type\\\":\\\"Find All Valid Math Expressions\\\",\\\"attemptsLeft\\\":10},{\\\"server\\\":\\\"run4theh111z\\\",\\\"name\\\":\\\"contract-147112-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Find All Valid Math Expressions\\\",\\\"attemptsLeft\\\":10}]\"}}],[\"analytics/2023-07-08-10-55-CyberSec-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-08-10-55-CyberSec-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-08T07:45:28.397Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-08T07:45:28.397Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"ECorp\\\",\\\"firstTime\\\":\\\"2023-07-08T07:45:28.397Z\\\"},{\\\"factionToMax\\\":\\\"CyberSec\\\",\\\"firstTime\\\":\\\"2023-07-08T15:55:34.597Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":1625000,\\\"currentFactionRep\\\":7.83489646900019,\\\"targetRepForGettingToFavor\\\":462490.0692,\\\"time\\\":\\\"2023-07-08T07:45:28.397Z\\\"},\\\"augsBought\\\":[\\\"Embedded Netburner Module\\\",\\\"Cranial Signal Processors - Gen I\\\",\\\"Cranial Signal Processors - Gen II\\\",\\\"Artificial Synaptic Potentiation\\\",\\\"Neurotrainer II\\\",\\\"BitWire\\\",\\\"Synaptic Enhancement Implant\\\",\\\"Neurotrainer I\\\"],\\\"moneySpent\\\":{\\\"augments\\\":2927417203.1,\\\"homeCores\\\":0,\\\"homeRam\\\":132545749.31540185,\\\"fluxGovernors\\\":0},\\\"moneyLeft\\\":76065861.37635517,\\\"lastSaved\\\":\\\"2023-07-08T15:55:38.636Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":true,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":18750,\\\"currentFactionRep\\\":19144.520172309567,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-08T15:55:34.597Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":false,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$NaN\\\",\\\"moneyRightNow\\\":\\\"$3,136,028,813.79\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$1,250,000,000.00\\\",\\\"time\\\":\\\"2023-07-08T15:55:34.597Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":false,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$NaN\\\",\\\"moneyRightNow\\\":\\\"$3,136,028,813.79\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$1,250,000,000.00\\\",\\\"time\\\":\\\"2023-07-08T15:55:38.627Z\\\"}}\"}}],[\"contracts/failure/unitalife-contract-457057-BachmanAssociates.cct-AlgorithmicStockTraderIV.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/failure/unitalife-contract-457057-BachmanAssociates.cct-AlgorithmicStockTraderIV.txt\",\"text\":\"{\\\"contract\\\":{\\\"server\\\":\\\"unitalife\\\",\\\"name\\\":\\\"contract-457057-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader IV\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[2,[104,1,164,22,87,58,184,182,187,31,33,15,132,75,200,78,154]],\\\"description\\\":\\\"You are given the following array with two elements:\\\\n\\\\n [2, [104,67,1,164,22,87,58,118,184,182,187,31,33,15,132,75,200,78,154,61]]\\\\n\\\\n The first element is an integer k. The second element is an array of stock prices (which are numbers) where the i-th element represents the stock price on day i.\\\\n\\\\n Determine the maximum possible profit you can earn using at most k transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you can buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0.\\\"},\\\"wrongResult\\\":348}\"}}],[\"contracts/2023-07-08T16:02:50.327Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-08T16:02:50.327Z.txt\",\"text\":\"[{\\\"server\\\":\\\"hong-fang-tea\\\",\\\"name\\\":\\\"contract-287914-ECorp.cct\\\",\\\"type\\\":\\\"Array Jumping Game II\\\",\\\"attemptsLeft\\\":3,\\\"input\\\":[3,3,2,4,0,0,3,2,4,3,2,1,4,3,3,1,2,1,5,6,2,4,2,5],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 3,3,2,4,0,0,3,2,4,3,2,1,4,3,3,1,2,1,5,6,2,4,2,5\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine the minimum number of jumps to reach the end of the array.\\\\n\\\\n If it's impossible to reach the end, then the answer should be 0.\\\"},{\\\"server\\\":\\\"max-hardware\\\",\\\"name\\\":\\\"contract-489132.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"5ddddddddM0C1ag3juL3juL3jQaVwdNEQdNGShqNEQdNGSrBfBf2rBfBr1OvIK6r1OvIa\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; 5ddddddddM0C1ag3juL3juL3jQaVwdNEQdNGShqNEQdNGSrBfBf2rBfBr1OvIK6r1OvIa\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"silver-helix\\\",\\\"name\\\":\\\"contract-522441-TianDiHui.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[8,7],\\\"description\\\":\\\"You are in a grid with 8 rows and 7 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [8, 7]\\\"},{\\\"server\\\":\\\"galactic-cyber\\\",\\\"name\\\":\\\"contract-895014-CyberSec.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[2,7,-9,5,4,-8,-10,-5,4,-6,-4,0,6,10,-3,6,2,-8,-1,6,-3,-10,-3,8,6,-2,-8,2,3,-4,0,0,9,-9,-8,5,4,4],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 2,7,-9,5,4,-8,-10,-5,4,-6,-4,0,6,10,-3,6,2,-8,-1,6,-3,-10,-3,8,6,-2,-8,2,3,-4,0,0,9,-9,-8,5,4,4\\\"},{\\\"server\\\":\\\"summit-uni\\\",\\\"name\\\":\\\"contract-875528.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[11,9],\\\"description\\\":\\\"You are in a grid with 11 rows and 9 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [11, 9]\\\"},{\\\"server\\\":\\\"millenium-fitness\\\",\\\"name\\\":\\\"contract-125441.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[147,[1,2,4,5,7,8,10,11,12]],\\\"description\\\":\\\"How many different distinct ways can the number 147 be written as a sum of integers contained in the set:\\\\n\\\\n [1,2,4,5,7,8,10,11,12]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"millenium-fitness\\\",\\\"name\\\":\\\"contract-338676.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[149,[2,3,4,6,9,11,12,13,14]],\\\"description\\\":\\\"How many different distinct ways can the number 149 be written as a sum of integers contained in the set:\\\\n\\\\n [2,3,4,6,9,11,12,13,14]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"alpha-ent\\\",\\\"name\\\":\\\"contract-265891-TheBlackHand.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0],[1,0,0,0],[0,0,0,0],[1,0,1,0],[0,0,1,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,0,\\\\n1,0,0,0,\\\\n0,0,0,0,\\\\n1,0,1,0,\\\\n0,0,1,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"unitalife\\\",\\\"name\\\":\\\"contract-457057-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader IV\\\",\\\"attemptsLeft\\\":9,\\\"input\\\":[2,[104,67,1,164,22,87,58,118,184,182,187,31,33,15,132,75,200,78,154,61]],\\\"description\\\":\\\"You are given the following array with two elements:\\\\n\\\\n [2, [104,67,1,164,22,87,58,118,184,182,187,31,33,15,132,75,200,78,154,61]]\\\\n\\\\n The first element is an integer k. The second element is an array of stock prices (which are numbers) where the i-th element represents the stock price on day i.\\\\n\\\\n Determine the maximum possible profit you can earn using at most k transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you can buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0.\\\"},{\\\"server\\\":\\\"applied-energetics\\\",\\\"name\\\":\\\"contract-98816-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Proper 2-Coloring of a Graph\\\",\\\"attemptsLeft\\\":5,\\\"input\\\":[8,[[1,3],[3,5],[6,7],[4,5],[1,7],[4,7],[2,7],[2,5]]],\\\"description\\\":\\\"You are given the following data, representing a graph:\\\\n [8,[[1,3],[3,5],[6,7],[4,5],[1,7],[4,7],[2,7],[2,5]]]\\\\n Note that \\\\\\\"graph\\\\\\\", as used here, refers to the field of graph theory, and has no relation to statistics or plotting. The first element of the data represents the number of vertices in the graph. Each vertex is a unique number between 0 and 7. The next element of the data represents the edges of the graph. Two vertices u,v in a graph are said to be adjacent if there exists an edge [u,v]. Note that an edge [u,v] is the same as an edge [v,u], as order does not matter. You must construct a 2-coloring of the graph, meaning that you have to assign each vertex in the graph a \\\\\\\"color\\\\\\\", either 0 or 1, such that no two adjacent vertices have the same color. Submit your answer in the form of an array, where element i represents the color of vertex i. If it is impossible to construct a 2-coloring of the given graph, instead submit an empty array.\\\\n\\\\n Examples:\\\\n\\\\n Input: [4, [[0, 2], [0, 3], [1, 2], [1, 3]]]\\\\n Output: [0, 0, 1, 1]\\\\n\\\\n Input: [3, [[0, 1], [0, 2], [1, 2]]]\\\\n Output: []\\\"},{\\\"server\\\":\\\"vitalife\\\",\\\"name\\\":\\\"contract-852569.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,0,0],[1,0,0,0,0,0],[0,1,0,0,0,0],[0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,0,0,0,\\\\n1,0,0,0,0,0,\\\\n0,1,0,0,0,0,\\\\n0,0,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"4sigma\\\",\\\"name\\\":\\\"contract-193066-Chongqing.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[3],[4,8],[1,6,7],[3,8,3,9],[1,3,6,1,2],[4,4,7,8,8,1],[1,4,3,6,1,4,6],[1,9,8,7,9,9,4,3],[3,2,1,2,1,8,4,2,8]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[3],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[4,8],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,6,7],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[3,8,3,9],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,3,6,1,2],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[4,4,7,8,8,1],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[1,4,3,6,1,4,6],\\\\n&nbsp;&nbsp;&nbsp;[1,9,8,7,9,9,4,3],\\\\n&nbsp;&nbsp;[3,2,1,2,1,8,4,2,8]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"omnitek\\\",\\\"name\\\":\\\"contract-774587-TianDiHui.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[8,0,1,5,5],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 8,0,1,5,5\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"clarkinc\\\",\\\"name\\\":\\\"contract-321076.cct\\\",\\\"type\\\":\\\"Proper 2-Coloring of a Graph\\\",\\\"attemptsLeft\\\":5,\\\"input\\\":[12,[[7,11],[1,8],[2,9],[2,8],[1,2],[0,4],[0,3],[2,3],[5,8],[3,5],[4,7],[1,6],[9,10],[4,10],[6,8],[3,10],[0,1],[7,8]]],\\\"description\\\":\\\"You are given the following data, representing a graph:\\\\n [12,[[7,11],[1,8],[2,9],[2,8],[1,2],[0,4],[0,3],[2,3],[5,8],[3,5],[4,7],[1,6],[9,10],[4,10],[6,8],[3,10],[0,1],[7,8]]]\\\\n Note that \\\\\\\"graph\\\\\\\", as used here, refers to the field of graph theory, and has no relation to statistics or plotting. The first element of the data represents the number of vertices in the graph. Each vertex is a unique number between 0 and 11. The next element of the data represents the edges of the graph. Two vertices u,v in a graph are said to be adjacent if there exists an edge [u,v]. Note that an edge [u,v] is the same as an edge [v,u], as order does not matter. You must construct a 2-coloring of the graph, meaning that you have to assign each vertex in the graph a \\\\\\\"color\\\\\\\", either 0 or 1, such that no two adjacent vertices have the same color. Submit your answer in the form of an array, where element i represents the color of vertex i. If it is impossible to construct a 2-coloring of the given graph, instead submit an empty array.\\\\n\\\\n Examples:\\\\n\\\\n Input: [4, [[0, 2], [0, 3], [1, 2], [1, 3]]]\\\\n Output: [0, 0, 1, 1]\\\\n\\\\n Input: [3, [[0, 1], [0, 2], [1, 2]]]\\\\n Output: []\\\"},{\\\"server\\\":\\\"The-Cave\\\",\\\"name\\\":\\\"contract-885023.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,1,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[1,0,1,0,0,0,0,0,0],[0,0,0,0,0,0,0,1,0],[0,1,0,1,0,1,1,1,0],[0,0,1,1,1,1,0,0,1],[0,1,0,0,0,0,0,1,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,0,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[1,0,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,1,0,1,1,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,1,1,1,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,0,0,0,1,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-450371-NWO.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"zzzzzzzzzzVVVVVVVVVff66666dddddd3Dxjjjjjjjjjjjll3nMIEooooooooooIrrQQ3333333333GGGGG220\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; zzzzzzzzzzVVVVVVVVVff66666dddddd3Dxjjjjjjjjjjjll3nMIEooooooooooIrrQQ3333333333GGGGG220\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"defcomm\\\",\\\"name\\\":\\\"contract-409303-CyberSec.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"koU6koU6koU8koU6ko66SU6ko66Sko66SkoSkoSkoSkXSkoSkoSkXSkoSXSkoSXSuKvMuK5CCCCCCZA\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; koU6koU6koU8koU6ko66SU6ko66Sko66SkoSkoSkoSkXSkoSkoSkXSkoSXSkoSXSuKvMuK5CCCCCCZA\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"defcomm\\\",\\\"name\\\":\\\"contract-741436-TianDiHui.cct\\\",\\\"type\\\":\\\"Spiralize Matrix\\\",\\\"attemptsLeft\\\":9,\\\"input\\\":[[41,7],[46,49],[18,23],[1,16],[46,1],[49,27]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a 2D matrix, return the elements of the matrix as an array in spiral order:\\\\n\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[41, 7]\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[46,49]\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[18,23]\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[ 1,16]\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[46, 1]\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[49,27]\\\\n&nbsp;&nbsp;&nbsp;&nbsp;]\\\\n\\\\nHere is an example of what spiral order should be:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1, 2, 3]\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[4, 5, 6]\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[7, 8, 9]\\\\n &nbsp;&nbsp;&nbsp;&nbsp;]\\\\n\\\\n Answer: [1, 2, 3, 6, 9, 8 ,7, 4, 5]\\\\n\\\\n Note that the matrix will not always be square:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,&nbsp;&nbsp;2,&nbsp;&nbsp;3,&nbsp;&nbsp;4]\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[5,&nbsp;&nbsp;6,&nbsp;&nbsp;7,&nbsp;&nbsp;8]\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[9,&nbsp;10,&nbsp;11,&nbsp;12]\\\\n &nbsp;&nbsp;&nbsp;&nbsp;]\\\\n\\\\n Answer: [1, 2, 3, 4, 8, 12, 11, 10, 9, 5, 6, 7]\\\"},{\\\"server\\\":\\\"snap-fitness\\\",\\\"name\\\":\\\"contract-481575.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[10,10,2,4,4],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 10,10,2,4,4\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"zer0\\\",\\\"name\\\":\\\"contract-926552.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"ppppppppD6ggxxxxxxxxWk88uVVqdddddddHHH811EEE00WWyy333NvvvvvvvWWWWWWWWWA88iii\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; ppppppppD6ggxxxxxxxxWk88uVVqdddddddHHH811EEE00WWyy333NvvvvvvvWWWWWWWWWA88iii\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"CSEC\\\",\\\"name\\\":\\\"contract-550315.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":59,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 59 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"CSEC\\\",\\\"name\\\":\\\"contract-895133.cct\\\",\\\"type\\\":\\\"Array Jumping Game II\\\",\\\"attemptsLeft\\\":3,\\\"input\\\":[2,2,3,1,0,3],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 2,2,3,1,0,3\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine the minimum number of jumps to reach the end of the array.\\\\n\\\\n If it's impossible to reach the end, then the answer should be 0.\\\"},{\\\"server\\\":\\\"phantasy\\\",\\\"name\\\":\\\"contract-858682.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[197,[1,2,4,5,6,10,12,13]],\\\"description\\\":\\\"How many different distinct ways can the number 197 be written as a sum of integers contained in the set:\\\\n\\\\n [1,2,4,5,6,10,12,13]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"phantasy\\\",\\\"name\\\":\\\"contract-938387.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":8,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 8 be written as a sum of at least two positive integers?\\\"}]\"}}],[\"analytics/2023-07-09-05-42-NiteSec-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-09-05-42-NiteSec-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-08T16:31:11.237Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-08T16:31:11.237Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"NiteSec\\\",\\\"firstTime\\\":\\\"2023-07-08T16:31:11.237Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":112500,\\\"currentFactionRep\\\":0,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-08T16:31:11.237Z\\\"},\\\"augsBought\\\":[\\\"Cranial Signal Processors - Gen III\\\",\\\"DataJack\\\",\\\"Neuregen Gene Modification\\\",\\\"Neural-Retention Enhancement\\\",\\\"CRTX42-AA Gene Modification\\\",\\\"Speech Processor Implant\\\",\\\"Social Negotiation Assistant (S.N.A)\\\",\\\"Nuoptimal Nootropic Injector Implant\\\",\\\"ADR-V1 Pheromone Gene\\\",\\\"Speech Enhancement\\\",\\\"Wired Reflexes\\\"],\\\"moneySpent\\\":{\\\"augments\\\":20381378226.862747,\\\"homeCores\\\":7500000000,\\\"homeRam\\\":14539978074.787807,\\\"fluxGovernors\\\":0},\\\"moneyLeft\\\":12810898749.805788,\\\"lastSaved\\\":\\\"2023-07-09T10:42:24.377Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":true,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":112500,\\\"currentFactionRep\\\":112505.95319020352,\\\"targetRepForGettingToFavor\\\":274320.6381,\\\"time\\\":\\\"2023-07-09T04:32:21.711Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":false,\\\"moneyIsGreaterThanTriggered\\\":false,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$25,622,206,359.90\\\",\\\"moneyRightNow\\\":\\\"$5,243,979,923.03\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$55,000,000,000.00\\\",\\\"time\\\":\\\"2023-07-09T04:32:21.712Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":false,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$37,197,430,004.03\\\",\\\"moneyRightNow\\\":\\\"$55,232,255,051.46\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$55,000,000,000.00\\\",\\\"time\\\":\\\"2023-07-09T10:42:24.369Z\\\"}}\"}}],[\"contracts/failure/blade-contract-989459-Sector12.cct-AlgorithmicStockTraderIII.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/failure/blade-contract-989459-Sector12.cct-AlgorithmicStockTraderIII.txt\",\"text\":\"{\\\"contract\\\":{\\\"server\\\":\\\"blade\\\",\\\"name\\\":\\\"contract-989459-Sector12.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader III\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[179,52,138,20,181,47,87,38,133,124,174,123,169,54,138],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 179,52,138,137,20,161,181,47,87,38,133,124,174,123,169,147,144,54,138,64\\\\n\\\\n Determine the maximum possible profit you can earn using at most two transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0\\\"},\\\"wrongResult\\\":256}\"}}],[\"contracts/2023-07-09T10:42:27.655Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-09T10:42:27.655Z.txt\",\"text\":\"[{\\\"server\\\":\\\"n00dles\\\",\\\"name\\\":\\\"contract-306430.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[0,3,0,2,0,0,4,0,5,0,7,9,4,8],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 0,3,0,2,0,0,4,0,5,0,7,9,4,8\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"n00dles\\\",\\\"name\\\":\\\"contract-93220.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":596871453,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 596871453?\\\"},{\\\"server\\\":\\\"foodnstuff\\\",\\\"name\\\":\\\"contract-688654.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"557744444444444444NNddzeennnnnnnnnnyyyyyyyyyyyyQH555555AAFU\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; 557744444444444444NNddzeennnnnnnnnnyyyyyyyyyyyyQH555555AAFU\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"joesguns\\\",\\\"name\\\":\\\"contract-610288.cct\\\",\\\"type\\\":\\\"Proper 2-Coloring of a Graph\\\",\\\"attemptsLeft\\\":5,\\\"input\\\":[13,[[4,5],[0,6],[7,11],[2,5],[3,7],[1,6],[2,10],[4,10],[5,11],[3,5],[3,10],[0,10],[5,9],[10,11],[7,9],[3,12],[3,8],[1,5],[4,8],[1,8],[0,7],[9,11],[2,12]]],\\\"description\\\":\\\"You are given the following data, representing a graph:\\\\n [13,[[4,5],[0,6],[7,11],[2,5],[3,7],[1,6],[2,10],[4,10],[5,11],[3,5],[3,10],[0,10],[5,9],[10,11],[7,9],[3,12],[3,8],[1,5],[4,8],[1,8],[0,7],[9,11],[2,12]]]\\\\n Note that \\\\\\\"graph\\\\\\\", as used here, refers to the field of graph theory, and has no relation to statistics or plotting. The first element of the data represents the number of vertices in the graph. Each vertex is a unique number between 0 and 12. The next element of the data represents the edges of the graph. Two vertices u,v in a graph are said to be adjacent if there exists an edge [u,v]. Note that an edge [u,v] is the same as an edge [v,u], as order does not matter. You must construct a 2-coloring of the graph, meaning that you have to assign each vertex in the graph a \\\\\\\"color\\\\\\\", either 0 or 1, such that no two adjacent vertices have the same color. Submit your answer in the form of an array, where element i represents the color of vertex i. If it is impossible to construct a 2-coloring of the given graph, instead submit an empty array.\\\\n\\\\n Examples:\\\\n\\\\n Input: [4, [[0, 2], [0, 3], [1, 2], [1, 3]]]\\\\n Output: [0, 0, 1, 1]\\\\n\\\\n Input: [3, [[0, 1], [0, 2], [1, 2]]]\\\\n Output: []\\\"},{\\\"server\\\":\\\"joesguns\\\",\\\"name\\\":\\\"contract-908915-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,0],[0,1,0,0,0],[0,0,0,0,0],[0,0,1,0,0],[1,0,0,0,1],[0,0,0,1,1],[0,0,1,0,0],[0,1,0,1,0],[0,0,0,1,0],[1,0,0,0,0],[0,1,0,0,0],[0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,0,0,\\\\n0,1,0,0,0,\\\\n0,0,0,0,0,\\\\n0,0,1,0,0,\\\\n1,0,0,0,1,\\\\n0,0,0,1,1,\\\\n0,0,1,0,0,\\\\n0,1,0,1,0,\\\\n0,0,0,1,0,\\\\n1,0,0,0,0,\\\\n0,1,0,0,0,\\\\n0,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"CSEC\\\",\\\"name\\\":\\\"contract-225615.cct\\\",\\\"type\\\":\\\"Array Jumping Game II\\\",\\\"attemptsLeft\\\":3,\\\"input\\\":[3,4,8,4,1,3,1,6,2,7,2,4,2,1,7,2,4,2,5,2,1,2,4,2,0],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 3,4,8,4,1,3,1,6,2,7,2,4,2,1,7,2,4,2,5,2,1,2,4,2,0\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine the minimum number of jumps to reach the end of the array.\\\\n\\\\n If it's impossible to reach the end, then the answer should be 0.\\\"},{\\\"server\\\":\\\"phantasy\\\",\\\"name\\\":\\\"contract-876968-BitRunners.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"251150140129\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 251150140129\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"},{\\\"server\\\":\\\"avmnite-02h\\\",\\\"name\\\":\\\"contract-793514-NWO.cct\\\",\\\"type\\\":\\\"Proper 2-Coloring of a Graph\\\",\\\"attemptsLeft\\\":5,\\\"input\\\":[9,[[1,7],[2,5],[6,8],[1,2],[0,3],[0,6],[0,5]]],\\\"description\\\":\\\"You are given the following data, representing a graph:\\\\n [9,[[1,7],[2,5],[6,8],[1,2],[0,3],[0,6],[0,5]]]\\\\n Note that \\\\\\\"graph\\\\\\\", as used here, refers to the field of graph theory, and has no relation to statistics or plotting. The first element of the data represents the number of vertices in the graph. Each vertex is a unique number between 0 and 8. The next element of the data represents the edges of the graph. Two vertices u,v in a graph are said to be adjacent if there exists an edge [u,v]. Note that an edge [u,v] is the same as an edge [v,u], as order does not matter. You must construct a 2-coloring of the graph, meaning that you have to assign each vertex in the graph a \\\\\\\"color\\\\\\\", either 0 or 1, such that no two adjacent vertices have the same color. Submit your answer in the form of an array, where element i represents the color of vertex i. If it is impossible to construct a 2-coloring of the given graph, instead submit an empty array.\\\\n\\\\n Examples:\\\\n\\\\n Input: [4, [[0, 2], [0, 3], [1, 2], [1, 3]]]\\\\n Output: [0, 0, 1, 1]\\\\n\\\\n Input: [3, [[0, 1], [0, 2], [1, 2]]]\\\\n Output: []\\\"},{\\\"server\\\":\\\"alpha-ent\\\",\\\"name\\\":\\\"contract-308718.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[5,8],[20,29],[20,27],[19,26],[13,23],[5,12],[6,9],[9,15],[5,9],[4,10],[23,29],[16,24],[1,11]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[5,8],[20,29],[20,27],[19,26],[13,23],[5,12],[6,9],[9,15],[5,9],[4,10],[23,29],[16,24],[1,11]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"aerocorp\\\",\\\"name\\\":\\\"contract-726515.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"KK0aAKKKl2FczHAO1GRoAO1GRoAYvgOCph7xuhN1nQayOiaXZFQayOiTDZDZ0aZ\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; KK0aAKKKl2FczHAO1GRoAO1GRoAYvgOCph7xuhN1nQayOiaXZFQayOiTDZDZ0aZ\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"snap-fitness\\\",\\\"name\\\":\\\"contract-206621.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"(((())(aa\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n (((())(aa\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"run4theh111z\\\",\\\"name\\\":\\\"contract-517629.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,1,1,0,1],[0,0,0,0,1,1,1,1],[1,0,0,0,0,1,1,0],[0,0,0,0,0,0,0,0],[0,1,0,1,1,1,0,0],[0,1,1,0,1,0,0,0],[0,1,0,0,1,0,0,0],[1,0,0,1,0,0,1,0],[1,1,0,0,0,0,1,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,0,0,0,1,1,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,1,1,1],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,0,0,1,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,1,1,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,0,1,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,1,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,1,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[1,1,0,0,0,0,1,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"blade\\\",\\\"name\\\":\\\"contract-989459-Sector12.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader III\\\",\\\"attemptsLeft\\\":9,\\\"input\\\":[179,52,138,137,20,161,181,47,87,38,133,124,174,123,169,147,144,54,138,64],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 179,52,138,137,20,161,181,47,87,38,133,124,174,123,169,147,144,54,138,64\\\\n\\\\n Determine the maximum possible profit you can earn using at most two transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0\\\"},{\\\"server\\\":\\\"powerhouse-fitness\\\",\\\"name\\\":\\\"contract-248819.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[7],[3,4],[1,2,9],[1,8,8,1],[4,7,4,6,4],[9,3,4,6,9,3]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[7],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,2,9],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[1,8,8,1],\\\\n&nbsp;&nbsp;&nbsp;[4,7,4,6,4],\\\\n&nbsp;&nbsp;[9,3,4,6,9,3]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"powerhouse-fitness\\\",\\\"name\\\":\\\"contract-759274-BladeIndustries.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[197,[1,3,4,6,7,8,9,10,13,15,16]],\\\"description\\\":\\\"How many different distinct ways can the number 197 be written as a sum of integers contained in the set:\\\\n\\\\n [1,3,4,6,7,8,9,10,13,15,16]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"unitalife\\\",\\\"name\\\":\\\"contract-755946-Aevum.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"bGhFzdCQddCQdSTdTdTdTSysWjxUGJc2RiRsyfsyfyfyfyfyffyfyfyffyfftLaw0Z\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; bGhFzdCQddCQdSTdTdTdTSysWjxUGJc2RiRsyfsyfyfyfyfyffyfyfyffyfftLaw0Z\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"infocomm\\\",\\\"name\\\":\\\"contract-239892.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"1110100011010100\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '1110100011010100' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"taiyang-digital\\\",\\\"name\\\":\\\"contract-650735.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"111111111yyxmmmdddddddddddddNNBBkkJJJJJJJJJJJJ2222222222222h33333333333DDDDDDDF\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; 111111111yyxmmmdddddddddddddNNBBkkJJJJJJJJJJJJ2222222222222h33333333333DDDDDDDF\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"taiyang-digital\\\",\\\"name\\\":\\\"contract-923111.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,1,0,0,0,0],[0,0,0,0,0,1,0,1,0,0],[0,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,1,0,0],[0,0,1,1,1,0,0,0,1,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,0,0,0,0,1,0,0,\\\\n0,0,0,0,0,1,0,0,0,0,\\\\n0,0,0,0,0,1,0,1,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,\\\\n1,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,1,0,0,\\\\n0,0,1,1,1,0,0,0,1,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"computek\\\",\\\"name\\\":\\\"contract-140416.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[8,-5,4,-1,10,5,-8,6,-9,-4,6,6,10,5,3,-7,-5,-10,-5,-3,2,2,-4,2,7,-3,0,0,-6,8,-7,-5,8,8,2,3,10,-9,-5],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 8,-5,4,-1,10,5,-8,6,-9,-4,6,6,10,5,3,-7,-5,-10,-5,-3,2,2,-4,2,7,-3,0,0,-6,8,-7,-5,8,8,2,3,10,-9,-5\\\"},{\\\"server\\\":\\\"nectar-net\\\",\\\"name\\\":\\\"contract-149794.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[17,[4,5,6,7,8,10,11,12,13,14]],\\\"description\\\":\\\"How many different distinct ways can the number 17 be written as a sum of integers contained in the set:\\\\n\\\\n [4,5,6,7,8,10,11,12,13,14]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"rothman-uni\\\",\\\"name\\\":\\\"contract-95536.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":21,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 21 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"deltaone\\\",\\\"name\\\":\\\"contract-389211.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[9,-8,10,-6,-3,-3,10,-7,-5,-6,4,-3,-9,7,-1,-1,-10,4,9,-4,4,-4,-10,-7,9,0,-8,-5],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 9,-8,10,-6,-3,-3,10,-7,-5,-6,4,-3,-9,7,-1,-1,-10,4,9,-4,4,-4,-10,-7,9,0,-8,-5\\\"},{\\\"server\\\":\\\"univ-energy\\\",\\\"name\\\":\\\"contract-80334.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[14,16],[4,10],[21,27],[3,8],[3,13],[20,30]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[14,16],[4,10],[21,27],[3,8],[3,13],[20,30]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"nova-med\\\",\\\"name\\\":\\\"contract-204128.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[3,3,10,0,0,0,4,0,6,0,4,10],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 3,3,10,0,0,0,4,0,6,0,4,10\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"nova-med\\\",\\\"name\\\":\\\"contract-90930.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[7,11],\\\"description\\\":\\\"You are in a grid with 7 rows and 11 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [7, 11]\\\"},{\\\"server\\\":\\\"vitalife\\\",\\\"name\\\":\\\"contract-693793.cct\\\",\\\"type\\\":\\\"Proper 2-Coloring of a Graph\\\",\\\"attemptsLeft\\\":5,\\\"input\\\":[9,[[0,1],[4,6],[2,7],[0,3],[0,6],[1,4],[6,7],[3,7],[0,5],[5,7],[4,8],[3,4],[1,7],[2,4],[2,3],[4,5],[0,2]]],\\\"description\\\":\\\"You are given the following data, representing a graph:\\\\n [9,[[0,1],[4,6],[2,7],[0,3],[0,6],[1,4],[6,7],[3,7],[0,5],[5,7],[4,8],[3,4],[1,7],[2,4],[2,3],[4,5],[0,2]]]\\\\n Note that \\\\\\\"graph\\\\\\\", as used here, refers to the field of graph theory, and has no relation to statistics or plotting. The first element of the data represents the number of vertices in the graph. Each vertex is a unique number between 0 and 8. The next element of the data represents the edges of the graph. Two vertices u,v in a graph are said to be adjacent if there exists an edge [u,v]. Note that an edge [u,v] is the same as an edge [v,u], as order does not matter. You must construct a 2-coloring of the graph, meaning that you have to assign each vertex in the graph a \\\\\\\"color\\\\\\\", either 0 or 1, such that no two adjacent vertices have the same color. Submit your answer in the form of an array, where element i represents the color of vertex i. If it is impossible to construct a 2-coloring of the given graph, instead submit an empty array.\\\\n\\\\n Examples:\\\\n\\\\n Input: [4, [[0, 2], [0, 3], [1, 2], [1, 3]]]\\\\n Output: [0, 0, 1, 1]\\\\n\\\\n Input: [3, [[0, 1], [0, 2], [1, 2]]]\\\\n Output: []\\\"},{\\\"server\\\":\\\"omnitek\\\",\\\"name\\\":\\\"contract-188719-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[84,[2,5,6,7,8,9,10,12,15,16]],\\\"description\\\":\\\"How many different distinct ways can the number 84 be written as a sum of integers contained in the set:\\\\n\\\\n [2,5,6,7,8,9,10,12,15,16]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"ecorp\\\",\\\"name\\\":\\\"contract-889582.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":42771,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 42771 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"},{\\\"server\\\":\\\"fulcrumassets\\\",\\\"name\\\":\\\"contract-18930.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[5,14],\\\"description\\\":\\\"You are in a grid with 5 rows and 14 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [5, 14]\\\"},{\\\"server\\\":\\\"The-Cave\\\",\\\"name\\\":\\\"contract-53463.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"12010722233\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 12010722233\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"}]\"}}],[\"contracts/2023-07-10T11:30:35.720Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-10T11:30:35.720Z.txt\",\"text\":\"[{\\\"server\\\":\\\"n00dles\\\",\\\"name\\\":\\\"contract-306430.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[0,3,0,2,0,0,4,0,5,0,7,9,4,8],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 0,3,0,2,0,0,4,0,5,0,7,9,4,8\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"n00dles\\\",\\\"name\\\":\\\"contract-93220.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":596871453,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 596871453?\\\"},{\\\"server\\\":\\\"foodnstuff\\\",\\\"name\\\":\\\"contract-688654.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"557744444444444444NNddzeennnnnnnnnnyyyyyyyyyyyyQH555555AAFU\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; 557744444444444444NNddzeennnnnnnnnnyyyyyyyyyyyyQH555555AAFU\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"joesguns\\\",\\\"name\\\":\\\"contract-610288.cct\\\",\\\"type\\\":\\\"Proper 2-Coloring of a Graph\\\",\\\"attemptsLeft\\\":5,\\\"input\\\":[13,[[4,5],[0,6],[7,11],[2,5],[3,7],[1,6],[2,10],[4,10],[5,11],[3,5],[3,10],[0,10],[5,9],[10,11],[7,9],[3,12],[3,8],[1,5],[4,8],[1,8],[0,7],[9,11],[2,12]]],\\\"description\\\":\\\"You are given the following data, representing a graph:\\\\n [13,[[4,5],[0,6],[7,11],[2,5],[3,7],[1,6],[2,10],[4,10],[5,11],[3,5],[3,10],[0,10],[5,9],[10,11],[7,9],[3,12],[3,8],[1,5],[4,8],[1,8],[0,7],[9,11],[2,12]]]\\\\n Note that \\\\\\\"graph\\\\\\\", as used here, refers to the field of graph theory, and has no relation to statistics or plotting. The first element of the data represents the number of vertices in the graph. Each vertex is a unique number between 0 and 12. The next element of the data represents the edges of the graph. Two vertices u,v in a graph are said to be adjacent if there exists an edge [u,v]. Note that an edge [u,v] is the same as an edge [v,u], as order does not matter. You must construct a 2-coloring of the graph, meaning that you have to assign each vertex in the graph a \\\\\\\"color\\\\\\\", either 0 or 1, such that no two adjacent vertices have the same color. Submit your answer in the form of an array, where element i represents the color of vertex i. If it is impossible to construct a 2-coloring of the given graph, instead submit an empty array.\\\\n\\\\n Examples:\\\\n\\\\n Input: [4, [[0, 2], [0, 3], [1, 2], [1, 3]]]\\\\n Output: [0, 0, 1, 1]\\\\n\\\\n Input: [3, [[0, 1], [0, 2], [1, 2]]]\\\\n Output: []\\\"},{\\\"server\\\":\\\"joesguns\\\",\\\"name\\\":\\\"contract-908915-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,0],[0,1,0,0,0],[0,0,0,0,0],[0,0,1,0,0],[1,0,0,0,1],[0,0,0,1,1],[0,0,1,0,0],[0,1,0,1,0],[0,0,0,1,0],[1,0,0,0,0],[0,1,0,0,0],[0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,0,0,\\\\n0,1,0,0,0,\\\\n0,0,0,0,0,\\\\n0,0,1,0,0,\\\\n1,0,0,0,1,\\\\n0,0,0,1,1,\\\\n0,0,1,0,0,\\\\n0,1,0,1,0,\\\\n0,0,0,1,0,\\\\n1,0,0,0,0,\\\\n0,1,0,0,0,\\\\n0,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"CSEC\\\",\\\"name\\\":\\\"contract-225615.cct\\\",\\\"type\\\":\\\"Array Jumping Game II\\\",\\\"attemptsLeft\\\":3,\\\"input\\\":[3,4,8,4,1,3,1,6,2,7,2,4,2,1,7,2,4,2,5,2,1,2,4,2,0],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 3,4,8,4,1,3,1,6,2,7,2,4,2,1,7,2,4,2,5,2,1,2,4,2,0\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine the minimum number of jumps to reach the end of the array.\\\\n\\\\n If it's impossible to reach the end, then the answer should be 0.\\\"},{\\\"server\\\":\\\"phantasy\\\",\\\"name\\\":\\\"contract-876968-BitRunners.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"251150140129\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 251150140129\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"},{\\\"server\\\":\\\"avmnite-02h\\\",\\\"name\\\":\\\"contract-793514-NWO.cct\\\",\\\"type\\\":\\\"Proper 2-Coloring of a Graph\\\",\\\"attemptsLeft\\\":5,\\\"input\\\":[9,[[1,7],[2,5],[6,8],[1,2],[0,3],[0,6],[0,5]]],\\\"description\\\":\\\"You are given the following data, representing a graph:\\\\n [9,[[1,7],[2,5],[6,8],[1,2],[0,3],[0,6],[0,5]]]\\\\n Note that \\\\\\\"graph\\\\\\\", as used here, refers to the field of graph theory, and has no relation to statistics or plotting. The first element of the data represents the number of vertices in the graph. Each vertex is a unique number between 0 and 8. The next element of the data represents the edges of the graph. Two vertices u,v in a graph are said to be adjacent if there exists an edge [u,v]. Note that an edge [u,v] is the same as an edge [v,u], as order does not matter. You must construct a 2-coloring of the graph, meaning that you have to assign each vertex in the graph a \\\\\\\"color\\\\\\\", either 0 or 1, such that no two adjacent vertices have the same color. Submit your answer in the form of an array, where element i represents the color of vertex i. If it is impossible to construct a 2-coloring of the given graph, instead submit an empty array.\\\\n\\\\n Examples:\\\\n\\\\n Input: [4, [[0, 2], [0, 3], [1, 2], [1, 3]]]\\\\n Output: [0, 0, 1, 1]\\\\n\\\\n Input: [3, [[0, 1], [0, 2], [1, 2]]]\\\\n Output: []\\\"},{\\\"server\\\":\\\"alpha-ent\\\",\\\"name\\\":\\\"contract-308718.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[5,8],[20,29],[20,27],[19,26],[13,23],[5,12],[6,9],[9,15],[5,9],[4,10],[23,29],[16,24],[1,11]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[5,8],[20,29],[20,27],[19,26],[13,23],[5,12],[6,9],[9,15],[5,9],[4,10],[23,29],[16,24],[1,11]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"aerocorp\\\",\\\"name\\\":\\\"contract-726515.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"KK0aAKKKl2FczHAO1GRoAO1GRoAYvgOCph7xuhN1nQayOiaXZFQayOiTDZDZ0aZ\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; KK0aAKKKl2FczHAO1GRoAO1GRoAYvgOCph7xuhN1nQayOiaXZFQayOiTDZDZ0aZ\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"snap-fitness\\\",\\\"name\\\":\\\"contract-206621.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"(((())(aa\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n (((())(aa\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"run4theh111z\\\",\\\"name\\\":\\\"contract-517629.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,1,1,0,1],[0,0,0,0,1,1,1,1],[1,0,0,0,0,1,1,0],[0,0,0,0,0,0,0,0],[0,1,0,1,1,1,0,0],[0,1,1,0,1,0,0,0],[0,1,0,0,1,0,0,0],[1,0,0,1,0,0,1,0],[1,1,0,0,0,0,1,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,0,0,0,1,1,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,1,1,1],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,0,0,1,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,1,1,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,0,1,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,1,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,1,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[1,1,0,0,0,0,1,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"blade\\\",\\\"name\\\":\\\"contract-989459-Sector12.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader III\\\",\\\"attemptsLeft\\\":9,\\\"input\\\":[179,52,138,137,20,161,181,47,87,38,133,124,174,123,169,147,144,54,138,64],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 179,52,138,137,20,161,181,47,87,38,133,124,174,123,169,147,144,54,138,64\\\\n\\\\n Determine the maximum possible profit you can earn using at most two transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0\\\"},{\\\"server\\\":\\\"powerhouse-fitness\\\",\\\"name\\\":\\\"contract-248819.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[7],[3,4],[1,2,9],[1,8,8,1],[4,7,4,6,4],[9,3,4,6,9,3]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[7],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,2,9],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[1,8,8,1],\\\\n&nbsp;&nbsp;&nbsp;[4,7,4,6,4],\\\\n&nbsp;&nbsp;[9,3,4,6,9,3]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"powerhouse-fitness\\\",\\\"name\\\":\\\"contract-759274-BladeIndustries.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[197,[1,3,4,6,7,8,9,10,13,15,16]],\\\"description\\\":\\\"How many different distinct ways can the number 197 be written as a sum of integers contained in the set:\\\\n\\\\n [1,3,4,6,7,8,9,10,13,15,16]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"unitalife\\\",\\\"name\\\":\\\"contract-755946-Aevum.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"bGhFzdCQddCQdSTdTdTdTSysWjxUGJc2RiRsyfsyfyfyfyfyffyfyfyffyfftLaw0Z\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; bGhFzdCQddCQdSTdTdTdTSysWjxUGJc2RiRsyfsyfyfyfyfyffyfyfyffyfftLaw0Z\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"infocomm\\\",\\\"name\\\":\\\"contract-239892.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"1110100011010100\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '1110100011010100' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"taiyang-digital\\\",\\\"name\\\":\\\"contract-650735.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"111111111yyxmmmdddddddddddddNNBBkkJJJJJJJJJJJJ2222222222222h33333333333DDDDDDDF\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; 111111111yyxmmmdddddddddddddNNBBkkJJJJJJJJJJJJ2222222222222h33333333333DDDDDDDF\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"taiyang-digital\\\",\\\"name\\\":\\\"contract-923111.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,1,0,0,0,0],[0,0,0,0,0,1,0,1,0,0],[0,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,1,0,0],[0,0,1,1,1,0,0,0,1,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,0,0,0,0,1,0,0,\\\\n0,0,0,0,0,1,0,0,0,0,\\\\n0,0,0,0,0,1,0,1,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,\\\\n1,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,1,0,0,\\\\n0,0,1,1,1,0,0,0,1,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"computek\\\",\\\"name\\\":\\\"contract-140416.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[8,-5,4,-1,10,5,-8,6,-9,-4,6,6,10,5,3,-7,-5,-10,-5,-3,2,2,-4,2,7,-3,0,0,-6,8,-7,-5,8,8,2,3,10,-9,-5],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 8,-5,4,-1,10,5,-8,6,-9,-4,6,6,10,5,3,-7,-5,-10,-5,-3,2,2,-4,2,7,-3,0,0,-6,8,-7,-5,8,8,2,3,10,-9,-5\\\"},{\\\"server\\\":\\\"nectar-net\\\",\\\"name\\\":\\\"contract-149794.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[17,[4,5,6,7,8,10,11,12,13,14]],\\\"description\\\":\\\"How many different distinct ways can the number 17 be written as a sum of integers contained in the set:\\\\n\\\\n [4,5,6,7,8,10,11,12,13,14]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"rothman-uni\\\",\\\"name\\\":\\\"contract-95536.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":21,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 21 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"deltaone\\\",\\\"name\\\":\\\"contract-389211.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[9,-8,10,-6,-3,-3,10,-7,-5,-6,4,-3,-9,7,-1,-1,-10,4,9,-4,4,-4,-10,-7,9,0,-8,-5],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 9,-8,10,-6,-3,-3,10,-7,-5,-6,4,-3,-9,7,-1,-1,-10,4,9,-4,4,-4,-10,-7,9,0,-8,-5\\\"},{\\\"server\\\":\\\"univ-energy\\\",\\\"name\\\":\\\"contract-80334.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[14,16],[4,10],[21,27],[3,8],[3,13],[20,30]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[14,16],[4,10],[21,27],[3,8],[3,13],[20,30]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"nova-med\\\",\\\"name\\\":\\\"contract-204128.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[3,3,10,0,0,0,4,0,6,0,4,10],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 3,3,10,0,0,0,4,0,6,0,4,10\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"nova-med\\\",\\\"name\\\":\\\"contract-90930.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[7,11],\\\"description\\\":\\\"You are in a grid with 7 rows and 11 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [7, 11]\\\"},{\\\"server\\\":\\\"vitalife\\\",\\\"name\\\":\\\"contract-693793.cct\\\",\\\"type\\\":\\\"Proper 2-Coloring of a Graph\\\",\\\"attemptsLeft\\\":5,\\\"input\\\":[9,[[0,1],[4,6],[2,7],[0,3],[0,6],[1,4],[6,7],[3,7],[0,5],[5,7],[4,8],[3,4],[1,7],[2,4],[2,3],[4,5],[0,2]]],\\\"description\\\":\\\"You are given the following data, representing a graph:\\\\n [9,[[0,1],[4,6],[2,7],[0,3],[0,6],[1,4],[6,7],[3,7],[0,5],[5,7],[4,8],[3,4],[1,7],[2,4],[2,3],[4,5],[0,2]]]\\\\n Note that \\\\\\\"graph\\\\\\\", as used here, refers to the field of graph theory, and has no relation to statistics or plotting. The first element of the data represents the number of vertices in the graph. Each vertex is a unique number between 0 and 8. The next element of the data represents the edges of the graph. Two vertices u,v in a graph are said to be adjacent if there exists an edge [u,v]. Note that an edge [u,v] is the same as an edge [v,u], as order does not matter. You must construct a 2-coloring of the graph, meaning that you have to assign each vertex in the graph a \\\\\\\"color\\\\\\\", either 0 or 1, such that no two adjacent vertices have the same color. Submit your answer in the form of an array, where element i represents the color of vertex i. If it is impossible to construct a 2-coloring of the given graph, instead submit an empty array.\\\\n\\\\n Examples:\\\\n\\\\n Input: [4, [[0, 2], [0, 3], [1, 2], [1, 3]]]\\\\n Output: [0, 0, 1, 1]\\\\n\\\\n Input: [3, [[0, 1], [0, 2], [1, 2]]]\\\\n Output: []\\\"},{\\\"server\\\":\\\"omnitek\\\",\\\"name\\\":\\\"contract-188719-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[84,[2,5,6,7,8,9,10,12,15,16]],\\\"description\\\":\\\"How many different distinct ways can the number 84 be written as a sum of integers contained in the set:\\\\n\\\\n [2,5,6,7,8,9,10,12,15,16]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"ecorp\\\",\\\"name\\\":\\\"contract-889582.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":42771,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 42771 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"},{\\\"server\\\":\\\"fulcrumassets\\\",\\\"name\\\":\\\"contract-18930.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[5,14],\\\"description\\\":\\\"You are in a grid with 5 rows and 14 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [5, 14]\\\"},{\\\"server\\\":\\\"The-Cave\\\",\\\"name\\\":\\\"contract-53463.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"12010722233\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 12010722233\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"}]\"}}],[\"contracts/2023-07-10T11:32:16.363Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-10T11:32:16.363Z.txt\",\"text\":\"[{\\\"server\\\":\\\"icarus\\\",\\\"name\\\":\\\"contract-977017-BitRunners.cct\\\",\\\"type\\\":\\\"Encryption II: Vigenère Cipher\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[\\\"FLASHMEDIAMOUSELOGINDEBUG\\\",\\\"MACINTOSH\\\"],\\\"description\\\":\\\"Vigenère cipher is a type of polyalphabetic substitution. It uses  the Vigenère square to encrypt and decrypt plaintext with a keyword.\\\\n\\\\n &nbsp;&nbsp;Vigenère square:\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A B C D E F G H I J K L M N O P Q R S T U V W X Y Z \\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; +----------------------------------------------------\\\\n &nbsp;&nbsp;&nbsp;&nbsp; A | A B C D E F G H I J K L M N O P Q R S T U V W X Y Z \\\\n &nbsp;&nbsp;&nbsp;&nbsp; B | B C D E F G H I J K L M N O P Q R S T U V W X Y Z A \\\\n &nbsp;&nbsp;&nbsp;&nbsp; C | C D E F G H I J K L M N O P Q R S T U V W X Y Z A B\\\\n &nbsp;&nbsp;&nbsp;&nbsp; D | D E F G H I J K L M N O P Q R S T U V W X Y Z A B C\\\\n &nbsp;&nbsp;&nbsp;&nbsp; E | E F G H I J K L M N O P Q R S T U V W X Y Z A B C D\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...\\\\n &nbsp;&nbsp;&nbsp;&nbsp; Y | Y Z A B C D E F G H I J K L M N O P Q R S T U V W X\\\\n &nbsp;&nbsp;&nbsp;&nbsp; Z | Z A B C D E F G H I J K L M N O P Q R S T U V W X Y\\\\n\\\\n For encryption each letter of the plaintext is paired with the corresponding letter of a repeating keyword. For example, the plaintext DASHBOARD is encrypted with the keyword LINUX:\\\\n &nbsp;&nbsp; Plaintext: DASHBOARD\\\\n &nbsp;&nbsp; Keyword:&nbsp;&nbsp;&nbsp;LINUXLINU\\\\n So, the first letter D is paired with the first letter of the key L. Therefore, row D and column L of the  Vigenère square are used to get the first cipher letter O. This must be repeated for the whole ciphertext.\\\\n\\\\n You are given an array with two elements:\\\\n &nbsp;&nbsp;[\\\\\\\"FLASHMEDIAMOUSELOGINDEBUG\\\\\\\", \\\\\\\"MACINTOSH\\\\\\\"]\\\\n The first element is the plaintext, the second element is the keyword.\\\\n\\\\n Return the ciphertext as uppercase string.\\\"}]\"}}],[\"contracts/2023-07-10T12:00:27.917Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-10T12:00:27.917Z.txt\",\"text\":\"[{\\\"server\\\":\\\"foodnstuff\\\",\\\"name\\\":\\\"contract-872924-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"11000000100000010111100101110010\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '11000000100000010111100101110010' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"silver-helix\\\",\\\"name\\\":\\\"contract-358562-ECorp.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[124,[2,5,6,9,10,11,13,14,15]],\\\"description\\\":\\\"How many different distinct ways can the number 124 be written as a sum of integers contained in the set:\\\\n\\\\n [2,5,6,9,10,11,13,14,15]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"alpha-ent\\\",\\\"name\\\":\\\"contract-373303.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[1],[3,1],[6,1,7],[2,7,1,4]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[3,1],\\\\n&nbsp;&nbsp;&nbsp;[6,1,7],\\\\n&nbsp;&nbsp;[2,7,1,4]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"nova-med\\\",\\\"name\\\":\\\"contract-959133.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,1,0,0,0,0,0,0],[0,0,1,0,0,1,0,0],[0,0,0,0,1,1,1,0],[0,0,1,0,1,0,1,0],[1,0,0,1,0,0,0,0],[0,0,0,1,0,0,1,0],[0,0,0,0,0,0,0,0],[0,0,0,0,1,1,0,0],[0,0,0,0,0,0,0,1],[1,0,1,0,0,0,0,0],[1,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,1,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,1,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,1,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,1,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[1,0,1,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[1,0,1,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"omnitek\\\",\\\"name\\\":\\\"contract-769367.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[9,8],\\\"description\\\":\\\"You are in a grid with 9 rows and 8 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [9, 8]\\\"},{\\\"server\\\":\\\"ecorp\\\",\\\"name\\\":\\\"contract-633776.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":915078480,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 915078480?\\\"},{\\\"server\\\":\\\"fulcrumassets\\\",\\\"name\\\":\\\"contract-310837.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[4,-5,6,-8,3,5,-2,7,3,-2,-9,4,5,0,-7,2,-3,-9,-8,-8,3,8,3,7,10,1,9,-3,7,-8],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 4,-5,6,-8,3,5,-2,7,3,-2,-9,4,5,0,-7,2,-3,-9,-8,-8,3,8,3,7,10,1,9,-3,7,-8\\\"},{\\\"server\\\":\\\"syscore\\\",\\\"name\\\":\\\"contract-806259.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"0010100000000000100000100000111101001011001001110100101110000010\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '0010100000000000100000100000111101001011001001110100101110000010' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"rho-construction\\\",\\\"name\\\":\\\"contract-545916-BitRunners.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,1,0,0,1,1,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,1,0,0,1,1,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"rho-construction\\\",\\\"name\\\":\\\"contract-691109-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"Zuijij3IBhPN3IBhPNIBhPSBhPtStlIhPtStlIhRhFG6wwAg5idz8lHb8W28gMMA8W28gMM\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; Zuijij3IBhPN3IBhPNIBhPSBhPtStlIhPtStlIhRhFG6wwAg5idz8lHb8W28gMMA8W28gMM\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"}]\"}}],[\"contracts/failure/fulcrumtech-contract-772507-NiteSec.cct-AlgorithmicStockTraderIII.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/failure/fulcrumtech-contract-772507-NiteSec.cct-AlgorithmicStockTraderIII.txt\",\"text\":\"{\\\"contract\\\":{\\\"server\\\":\\\"fulcrumtech\\\",\\\"name\\\":\\\"contract-772507-NiteSec.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader III\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[129,63,116,46,105,9,146,49,190,102,143,96,122,89,173,62,178],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 129,121,121,63,116,108,46,105,9,146,49,190,102,115,143,116,96,122,95,89,173,62,178\\\\n\\\\n Determine the maximum possible profit you can earn using at most two transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0\\\"},\\\"wrongResult\\\":278}\"}}],[\"contracts/2023-07-10T22:53:06.799Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-10T22:53:06.799Z.txt\",\"text\":\"[{\\\"server\\\":\\\"foodnstuff\\\",\\\"name\\\":\\\"contract-872924-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"11000000100000010111100101110010\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '11000000100000010111100101110010' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"iron-gym\\\",\\\"name\\\":\\\"contract-310546-NiteSec.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"0110000000010000\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '0110000000010000' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"silver-helix\\\",\\\"name\\\":\\\"contract-358562-ECorp.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[124,[2,5,6,9,10,11,13,14,15]],\\\"description\\\":\\\"How many different distinct ways can the number 124 be written as a sum of integers contained in the set:\\\\n\\\\n [2,5,6,9,10,11,13,14,15]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"alpha-ent\\\",\\\"name\\\":\\\"contract-373303.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[1],[3,1],[6,1,7],[2,7,1,4]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[3,1],\\\\n&nbsp;&nbsp;&nbsp;[6,1,7],\\\\n&nbsp;&nbsp;[2,7,1,4]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"nova-med\\\",\\\"name\\\":\\\"contract-959133.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,1,0,0,0,0,0,0],[0,0,1,0,0,1,0,0],[0,0,0,0,1,1,1,0],[0,0,1,0,1,0,1,0],[1,0,0,1,0,0,0,0],[0,0,0,1,0,0,1,0],[0,0,0,0,0,0,0,0],[0,0,0,0,1,1,0,0],[0,0,0,0,0,0,0,1],[1,0,1,0,0,0,0,0],[1,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,1,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,1,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,1,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,1,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[1,0,1,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[1,0,1,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"fulcrumtech\\\",\\\"name\\\":\\\"contract-373990-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"0100000000000000100000000000000000111011110101110011000111010001\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '0100000000000000100000000000000000111011110101110011000111010001' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"fulcrumtech\\\",\\\"name\\\":\\\"contract-772507-NiteSec.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader III\\\",\\\"attemptsLeft\\\":9,\\\"input\\\":[129,121,121,63,116,108,46,105,9,146,49,190,102,115,143,116,96,122,95,89,173,62,178],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 129,121,121,63,116,108,46,105,9,146,49,190,102,115,143,116,96,122,95,89,173,62,178\\\\n\\\\n Determine the maximum possible profit you can earn using at most two transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0\\\"},{\\\"server\\\":\\\"omnitek\\\",\\\"name\\\":\\\"contract-769367.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[9,8],\\\"description\\\":\\\"You are in a grid with 9 rows and 8 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [9, 8]\\\"},{\\\"server\\\":\\\"ecorp\\\",\\\"name\\\":\\\"contract-633776.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":915078480,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 915078480?\\\"},{\\\"server\\\":\\\"fulcrumassets\\\",\\\"name\\\":\\\"contract-310837.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[4,-5,6,-8,3,5,-2,7,3,-2,-9,4,5,0,-7,2,-3,-9,-8,-8,3,8,3,7,10,1,9,-3,7,-8],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 4,-5,6,-8,3,5,-2,7,3,-2,-9,4,5,0,-7,2,-3,-9,-8,-8,3,8,3,7,10,1,9,-3,7,-8\\\"},{\\\"server\\\":\\\"galactic-cyber\\\",\\\"name\\\":\\\"contract-719753-Sector12.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"2515122107\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 2515122107\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"},{\\\"server\\\":\\\"syscore\\\",\\\"name\\\":\\\"contract-806259.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"0010100000000000100000100000111101001011001001110100101110000010\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '0010100000000000100000100000111101001011001001110100101110000010' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"summit-uni\\\",\\\"name\\\":\\\"contract-387600-BladeIndustries.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[51,[1,3,4,5,6,7,8,9]],\\\"description\\\":\\\"How many different distinct ways can the number 51 be written as a sum of integers contained in the set:\\\\n\\\\n [1,3,4,5,6,7,8,9]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"rho-construction\\\",\\\"name\\\":\\\"contract-545916-BitRunners.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,1,0,0,1,1,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,1,0,0,1,1,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"rho-construction\\\",\\\"name\\\":\\\"contract-691109-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"Zuijij3IBhPN3IBhPNIBhPSBhPtStlIhPtStlIhRhFG6wwAg5idz8lHb8W28gMMA8W28gMM\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; Zuijij3IBhPN3IBhPNIBhPSBhPtStlIhPtStlIhRhFG6wwAg5idz8lHb8W28gMMA8W28gMM\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"}]\"}}],[\"analytics/2023-07-11-02-27-Bachman&Associates-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-11-02-27-Bachman&Associates-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-09T10:51:29.538Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-09T10:51:29.538Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"The Black Hand\\\",\\\"firstTime\\\":\\\"2023-07-09T10:51:29.539Z\\\"},{\\\"factionToMax\\\":\\\"BitRunners\\\",\\\"firstTime\\\":\\\"2023-07-10T11:30:36.002Z\\\"},{\\\"factionToMax\\\":\\\"Bachman & Associates\\\",\\\"firstTime\\\":\\\"2023-07-10T20:03:02.082Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":175000,\\\"currentFactionRep\\\":0,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-09T10:51:29.539Z\\\"},\\\"augsBought\\\":[\\\"SmartJaw\\\",\\\"Enhanced Social Interaction Implant\\\",\\\"FocusWire\\\",\\\"ADR-V2 Pheromone Gene\\\",\\\"Neuroreceptor Management Implant\\\",\\\"Nanofiber Weave\\\"],\\\"moneySpent\\\":{\\\"augments\\\":22646728750,\\\"homeCores\\\":23730468750000,\\\"homeRam\\\":31587660778186.953,\\\"fluxGovernors\\\":57032927790864.44},\\\"moneyLeft\\\":12203039917625.707,\\\"lastSaved\\\":\\\"2023-07-11T07:27:30.663Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":true,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":175000,\\\"currentFactionRep\\\":162129.75593228705,\\\"targetRepForGettingToFavor\\\":162120.6286,\\\"time\\\":\\\"2023-07-09T18:56:46.726Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":false,\\\"moneyIsGreaterThanTriggered\\\":false,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$56,926,395,005.04\\\",\\\"moneyRightNow\\\":\\\"$6,976,811,949.53\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$300,000,000,000.00\\\",\\\"time\\\":\\\"2023-07-09T18:56:46.726Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":false,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$286,650,154,139.07\\\",\\\"moneyRightNow\\\":\\\"$300,169,387,386.01\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$300,000,000,000.00\\\",\\\"time\\\":\\\"2023-07-10T08:59:23.830Z\\\"},\\\"amountOfRamIncrease\\\":null,\\\"amountOfCoresIncrease\\\":null}\"}}],[\"contracts/2023-07-11T07:27:33.925Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-11T07:27:33.925Z.txt\",\"text\":\"[{\\\"server\\\":\\\"crush-fitness\\\",\\\"name\\\":\\\"contract-703070-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"(a))()aa)))())))a))\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n (a))()aa)))())))a))\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"zb-institute\\\",\\\"name\\\":\\\"contract-760582-NWO.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[19,26],[5,11],[23,33],[18,24],[16,24],[4,6],[19,23],[19,20],[15,22],[17,24],[23,26],[18,28],[11,14],[3,5],[14,17],[23,24]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[19,26],[5,11],[23,33],[18,24],[16,24],[4,6],[19,23],[19,20],[15,22],[17,24],[23,26],[18,28],[11,14],[3,5],[14,17],[23,24]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"zeus-med\\\",\\\"name\\\":\\\"contract-660870-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[0,-5,1,9,9,0,5,-3],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 0,-5,1,9,9,0,5,-3\\\"},{\\\"server\\\":\\\"run4theh111z\\\",\\\"name\\\":\\\"contract-657153-CyberSec.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\")())()()(\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n )())()()(\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"}]\"}}],[\"analytics/2023-07-11-07-24-BitRunners-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-11-07-24-BitRunners-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-11T10:42:16.637Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-11T10:42:16.638Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"NWO\\\",\\\"firstTime\\\":\\\"2023-07-11T10:42:16.638Z\\\"},{\\\"factionToMax\\\":\\\"BitRunners\\\",\\\"firstTime\\\":\\\"2023-07-11T10:46:46.120Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":1750000,\\\"currentFactionRep\\\":0,\\\"targetRepForGettingToFavor\\\":462490.0692,\\\"time\\\":\\\"2023-07-11T10:42:16.638Z\\\"},\\\"augsBought\\\":[\\\"Neural Accelerator\\\"],\\\"moneySpent\\\":{\\\"augments\\\":1750000000,\\\"homeCores\\\":0,\\\"homeRam\\\":0,\\\"fluxGovernors\\\":4554283656849.052,\\\"repPurchased\\\":0},\\\"moneyLeft\\\":1755961103764.4956,\\\"lastSaved\\\":\\\"2023-07-11T12:24:47.532Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":true,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":1000000,\\\"currentFactionRep\\\":78668.58510156769,\\\"targetRepForGettingToFavor\\\":78604.3905,\\\"time\\\":\\\"2023-07-11T11:26:08.909Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$74,796,262,687,719.81\\\",\\\"moneyRightNow\\\":\\\"$5,775,539,522,926.99\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$175,000,000,000.00\\\",\\\"time\\\":\\\"2023-07-11T12:24:43.465Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$74,796,262,687,719.81\\\",\\\"moneyRightNow\\\":\\\"$6,311,994,760,613.55\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$175,000,000,000.00\\\",\\\"time\\\":\\\"2023-07-11T12:24:47.531Z\\\"}}\"}}],[\"contracts/2023-07-11T12:24:50.788Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-11T12:24:50.788Z.txt\",\"text\":\"[{\\\"server\\\":\\\"iron-gym\\\",\\\"name\\\":\\\"contract-294274.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"27278324\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 27278324\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"},{\\\"server\\\":\\\"infocomm\\\",\\\"name\\\":\\\"contract-34323.cct\\\",\\\"type\\\":\\\"Array Jumping Game II\\\",\\\"attemptsLeft\\\":3,\\\"input\\\":[2,1,0,6,4,3,2,1,2],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 2,1,0,6,4,3,2,1,2\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine the minimum number of jumps to reach the end of the array.\\\\n\\\\n If it's impossible to reach the end, then the answer should be 0.\\\"},{\\\"server\\\":\\\"taiyang-digital\\\",\\\"name\\\":\\\"contract-156862.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[3,3,8,10,9,5,2,0,9,0,5,10,10,8],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 3,3,8,10,9,5,2,0,9,0,5,10,10,8\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"rho-construction\\\",\\\"name\\\":\\\"contract-330757.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"0010100001111101\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '0010100001111101' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"}]\"}}],[\"analytics/2023-07-11-12-29-Daedalus-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-11-12-29-Daedalus-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-11T12:24:51.094Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-11T12:24:51.094Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"NWO\\\",\\\"firstTime\\\":\\\"2023-07-11T12:24:51.094Z\\\"},{\\\"factionToMax\\\":\\\"BitRunners\\\",\\\"firstTime\\\":\\\"2023-07-11T12:29:47.178Z\\\"},{\\\"factionToMax\\\":\\\"Daedalus\\\",\\\"firstTime\\\":\\\"2023-07-11T15:04:35.038Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":1750000,\\\"currentFactionRep\\\":0,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-11T12:24:51.094Z\\\"},\\\"augsBought\\\":[\\\"Embedded Netburner Module Core V2 Upgrade\\\",\\\"BitRunners Neurolink\\\",\\\"Synfibril Muscle\\\",\\\"Power Recirculation Core\\\",\\\"Neurotrainer III\\\",\\\"Combat Rib I\\\",\\\"Combat Rib II\\\",\\\"DermaForce Particle Barrier\\\"],\\\"moneySpent\\\":{\\\"augments\\\":27917957472.5,\\\"homeCores\\\":0,\\\"homeRam\\\":0,\\\"fluxGovernors\\\":91422048319347.48,\\\"repPurchased\\\":0},\\\"moneyLeft\\\":41005533440689.86,\\\"lastSaved\\\":\\\"2023-07-11T17:29:31.733Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":true,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":1000000,\\\"currentFactionRep\\\":45618.14880600499,\\\"targetRepForGettingToFavor\\\":13348.8089,\\\"time\\\":\\\"2023-07-11T12:48:04.959Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":false,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$NaN\\\",\\\"moneyRightNow\\\":\\\"$12,712,609,677,232.98\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$300,000,000,000.00\\\",\\\"time\\\":\\\"2023-07-11T14:27:37.793Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":false,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"triggedWithSuperLargeAmountOfMoney\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$NaN\\\",\\\"moneyRightNow\\\":\\\"$13,879,516,076,246.31\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$300,000,000,000.00\\\",\\\"time\\\":\\\"2023-07-11T14:27:41.820Z\\\"}}\"}}],[\"contracts/2023-07-11T17:29:34.923Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-11T17:29:34.923Z.txt\",\"text\":\"[{\\\"server\\\":\\\"nova-med\\\",\\\"name\\\":\\\"contract-978804-BladeIndustries.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":36677,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 36677 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"}]\"}}],[\"analytics/2023-07-11-13-33-NWO-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-11-13-33-NWO-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-11T17:29:35.209Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-11T17:29:35.209Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"NWO\\\",\\\"firstTime\\\":\\\"2023-07-11T17:29:35.209Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":1750000,\\\"currentFactionRep\\\":0,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-11T17:29:35.209Z\\\"},\\\"augsBought\\\":[\\\"Embedded Netburner Module Core V3 Upgrade\\\",\\\"Embedded Netburner Module Direct Memory Access Upgrade\\\",\\\"Embedded Netburner Module Analyze Engine\\\",\\\"NEMEAN Subdermal Weave\\\",\\\"Synthetic Heart\\\",\\\"NutriGen Implant\\\",\\\"The Red Pill\\\"],\\\"moneySpent\\\":{\\\"augments\\\":102280939975,\\\"homeCores\\\":0,\\\"homeRam\\\":0,\\\"fluxGovernors\\\":33234729138126.324,\\\"repPurchased\\\":0},\\\"moneyLeft\\\":27397945380899.656,\\\"lastSaved\\\":\\\"2023-07-11T18:33:24.220Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":true,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":1750000,\\\"currentFactionRep\\\":188501.26059445622,\\\"targetRepForGettingToFavor\\\":125.34820000000002,\\\"time\\\":\\\"2023-07-11T17:53:45.496Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$438,057,836,945,340.10\\\",\\\"moneyRightNow\\\":\\\"$58,736,735,518,839.44\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$102,280,939,975.00\\\",\\\"time\\\":\\\"2023-07-11T18:33:20.148Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$438,057,836,945,340.10\\\",\\\"moneyRightNow\\\":\\\"$60,734,955,459,000.98\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$102,280,939,975.00\\\",\\\"time\\\":\\\"2023-07-11T18:33:24.219Z\\\"}}\"}}],[\"analytics/2023-07-11-15-02-OmniTekIncorporated-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-11-15-02-OmniTekIncorporated-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-11T18:52:58.390Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-11T18:52:58.390Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"OmniTek Incorporated\\\",\\\"firstTime\\\":\\\"2023-07-11T18:52:58.390Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":625000,\\\"currentFactionRep\\\":0,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-11T18:52:58.391Z\\\"},\\\"augsBought\\\":[\\\"Hydroflame Left Arm\\\",\\\"Xanipher\\\",\\\"PC Direct-Neural Interface\\\",\\\"Bionic Legs\\\",\\\"Bionic Spine\\\",\\\"Combat Rib III\\\",\\\"Augmented Targeting III\\\",\\\"INFRARET Enhancement\\\"],\\\"moneySpent\\\":{\\\"augments\\\":2536876847832,\\\"homeCores\\\":0,\\\"homeRam\\\":0,\\\"fluxGovernors\\\":158008228467501.8,\\\"repPurchased\\\":1011071000000},\\\"moneyLeft\\\":3118364148690.9688,\\\"lastSaved\\\":\\\"2023-07-11T20:02:57.795Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":true,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":625000,\\\"currentFactionRep\\\":462635.4572515714,\\\"targetRepForGettingToFavor\\\":0,\\\"time\\\":\\\"2023-07-11T20:02:53.557Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$569,163,675,385,318.20\\\",\\\"moneyRightNow\\\":\\\"$163,160,637,846,968.20\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$2,536,876,847,832.00\\\",\\\"time\\\":\\\"2023-07-11T20:02:53.557Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$569,163,675,385,318.20\\\",\\\"moneyRightNow\\\":\\\"$164,674,540,464,024.78\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$2,536,876,847,832.00\\\",\\\"time\\\":\\\"2023-07-11T20:02:57.609Z\\\"}}\"}}],[\"contracts/2023-07-11T18:33:27.509Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-11T18:33:27.509Z.txt\",\"text\":\"[{\\\"server\\\":\\\"titan-labs\\\",\\\"name\\\":\\\"contract-315110.cct\\\",\\\"type\\\":\\\"Find All Valid Math Expressions\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[\\\"640193486\\\",65],\\\"description\\\":\\\"You are given the following string which contains only digits between 0 and 9:\\\\n\\\\n 640193486\\\\n\\\\n You are also given a target number of 65. Return all possible ways you can add the +(add), -(subtract), and *(multiply) operators to the string such that it evaluates to the target number. (Normal order of operations applies.)\\\\n\\\\n The provided answer should be an array of strings containing the valid expressions. The data provided by this problem is an array with two elements. The first element is the string of digits, while the second element is the target number:\\\\n\\\\n [\\\\\\\"640193486\\\\\\\", 65]\\\\n\\\\n NOTE: The order of evaluation expects script operator precedence NOTE: Numbers in the expression cannot have leading 0's. In other words, \\\\\\\"1+01\\\\\\\" is not a valid expression Examples:\\\\n\\\\n Input: digits = \\\\\\\"123\\\\\\\", target = 6\\\\n Output: [1+2+3, 1*2*3]\\\\n\\\\n Input: digits = \\\\\\\"105\\\\\\\", target = 5\\\\n Output: [1*0+5, 10-5]\\\"}]\"}}],[\"analytics/2023-07-11-16-04-BladeIndustries-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-11-16-04-BladeIndustries-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-11T20:16:37.898Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-11T20:16:37.898Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"Blade Industries\\\",\\\"firstTime\\\":\\\"2023-07-11T20:16:37.898Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":562500,\\\"currentFactionRep\\\":0,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-11T20:16:37.899Z\\\"},\\\"augsBought\\\":[\\\"OmniTek InfoLoad\\\",\\\"HyperSight Corneal Implant\\\"],\\\"moneySpent\\\":{\\\"augments\\\":8100000000,\\\"homeCores\\\":0,\\\"homeRam\\\":0,\\\"fluxGovernors\\\":85747668719937.4,\\\"repPurchased\\\":4751786000000},\\\"moneyLeft\\\":13842981133569.93,\\\"lastSaved\\\":\\\"2023-07-11T21:04:19.385Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":true,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":562500,\\\"currentFactionRep\\\":462578.8960435048,\\\"targetRepForGettingToFavor\\\":0,\\\"time\\\":\\\"2023-07-11T21:04:14.492Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$530,007,418,535,109.50\\\",\\\"moneyRightNow\\\":\\\"$102,174,957,837,653.20\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$8,100,000,000.00\\\",\\\"time\\\":\\\"2023-07-11T21:04:14.492Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$530,007,418,535,109.50\\\",\\\"moneyRightNow\\\":\\\"$104,350,535,853,507.34\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$8,100,000,000.00\\\",\\\"time\\\":\\\"2023-07-11T21:04:18.527Z\\\"}}\"}}],[\"contracts/2023-07-11T21:04:22.607Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-11T21:04:22.607Z.txt\",\"text\":\"[{\\\"server\\\":\\\"summit-uni\\\",\\\"name\\\":\\\"contract-461331.cct\\\",\\\"type\\\":\\\"Compression II: LZ Decompression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"5QFg8D941R640269V6p8o0r4N989p8ok5ZyGC04NHYU621B92079\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following LZ-encoded string:\\\\n &nbsp; &nbsp; 5QFg8D941R640269V6p8o0r4N989p8ok5ZyGC04NHYU621B92079\\\\n Decode it and output the original string.\\\\n\\\\n Example: decoding '5aaabb450723abb' chunk-by-chunk\\\\n &nbsp; &nbsp; 5aaabb &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;aaabb\\\\n &nbsp; &nbsp; 5aaabb45 &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;aaabbaaab\\\\n &nbsp; &nbsp; 5aaabb450 &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;aaabbaaab\\\\n &nbsp; &nbsp; 5aaabb45072 &nbsp; &nbsp; &nbsp;-> &nbsp;aaabbaaababababa\\\\n &nbsp; &nbsp; 5aaabb450723abb &nbsp;-> &nbsp;aaabbaaababababaabb\\\"}]\"}}],[\"contracts/2023-07-11T22:03:07.982Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-11T22:03:07.982Z.txt\",\"text\":\"[{\\\"server\\\":\\\"icarus\\\",\\\"name\\\":\\\"contract-708430-Sector12.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"YXYXYXYXYXUXYX2YXYXUXYX2XYX13XO23XO23gO3gOgOgOy1Zy1Zy1Zy11Zy1Zy11ZsB\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; YXYXYXYXYXUXYX2YXYXUXYX2XYX13XO23XO23gO3gOgOgOy1Zy1Zy1Zy11Zy1Zy11ZsB\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"catalyst\\\",\\\"name\\\":\\\"contract-444562.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,0,0,0,1,0,0,0,0],[0,0,0,0,0,0,0,0,1,0,1,0],[0,1,1,0,0,0,0,1,0,1,0,1],[0,0,1,1,0,0,0,1,0,1,0,0],[0,0,1,0,1,0,0,0,0,1,0,0],[0,0,0,0,0,1,1,1,0,0,1,1],[0,0,1,1,1,1,1,1,0,0,0,0],[0,1,0,0,1,0,0,1,0,0,0,0],[0,0,0,1,0,0,0,1,0,0,0,0],[0,0,1,0,0,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,0,0,0,0,0,0,1,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,0,0,1,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,0,0,0,0,1,0,1,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,1,0,0,0,1,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,1,0,0,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,1,1,1,0,0,1,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,1,1,1,1,1,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,1,0,0,1,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,1,0,0,0,1,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,0,0,0,0,0,0,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"}]\"}}],[\"contracts/2023-07-12T00:04:23.916Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-12T00:04:23.916Z.txt\",\"text\":\"[{\\\"server\\\":\\\"foodnstuff\\\",\\\"name\\\":\\\"contract-729164-TianDiHui.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[2],[7,6],[8,8,1],[2,7,3,5],[6,7,2,3,2],[1,5,3,1,3,1],[7,3,6,1,2,5,5],[2,4,9,7,5,9,9,9],[6,4,4,5,1,7,5,7,3],[6,4,8,1,7,8,7,6,7,5],[2,8,2,9,2,4,6,1,4,7,5]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[7,6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[8,8,1],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2,7,3,5],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6,7,2,3,2],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,5,3,1,3,1],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[7,3,6,1,2,5,5],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2,4,9,7,5,9,9,9],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[6,4,4,5,1,7,5,7,3],\\\\n&nbsp;&nbsp;&nbsp;[6,4,8,1,7,8,7,6,7,5],\\\\n&nbsp;&nbsp;[2,8,2,9,2,4,6,1,4,7,5]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"hong-fang-tea\\\",\\\"name\\\":\\\"contract-336770-NWO.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[3],[6,7],[8,1,4],[6,9,3,1],[8,4,5,6,3]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[3],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6,7],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[8,1,4],\\\\n&nbsp;&nbsp;&nbsp;[6,9,3,1],\\\\n&nbsp;&nbsp;[8,4,5,6,3]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"harakiri-sushi\\\",\\\"name\\\":\\\"contract-723216-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[4,5,1,4,7,8,3,0,9,0,3,9,1,10,0,1,5,0,0,0,8,6,10,3,0],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 4,5,1,4,7,8,3,0,9,0,3,9,1,10,0,1,5,0,0,0,8,6,10,3,0\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"iron-gym\\\",\\\"name\\\":\\\"contract-176172-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Find All Valid Math Expressions\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[\\\"88599944\\\",-84],\\\"description\\\":\\\"You are given the following string which contains only digits between 0 and 9:\\\\n\\\\n 88599944\\\\n\\\\n You are also given a target number of -84. Return all possible ways you can add the +(add), -(subtract), and *(multiply) operators to the string such that it evaluates to the target number. (Normal order of operations applies.)\\\\n\\\\n The provided answer should be an array of strings containing the valid expressions. The data provided by this problem is an array with two elements. The first element is the string of digits, while the second element is the target number:\\\\n\\\\n [\\\\\\\"88599944\\\\\\\", -84]\\\\n\\\\n NOTE: The order of evaluation expects script operator precedence NOTE: Numbers in the expression cannot have leading 0's. In other words, \\\\\\\"1+01\\\\\\\" is not a valid expression Examples:\\\\n\\\\n Input: digits = \\\\\\\"123\\\\\\\", target = 6\\\\n Output: [1+2+3, 1*2*3]\\\\n\\\\n Input: digits = \\\\\\\"105\\\\\\\", target = 5\\\\n Output: [1*0+5, 10-5]\\\"},{\\\"server\\\":\\\"the-hub\\\",\\\"name\\\":\\\"contract-271928.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"884220150\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 884220150\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"},{\\\"server\\\":\\\"the-hub\\\",\\\"name\\\":\\\"contract-512438-Sector12.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"1100101010011111\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '1100101010011111' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"summit-uni\\\",\\\"name\\\":\\\"contract-627073-TheBlackHand.cct\\\",\\\"type\\\":\\\"Find All Valid Math Expressions\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[\\\"280206263\\\",22],\\\"description\\\":\\\"You are given the following string which contains only digits between 0 and 9:\\\\n\\\\n 280206263\\\\n\\\\n You are also given a target number of 22. Return all possible ways you can add the +(add), -(subtract), and *(multiply) operators to the string such that it evaluates to the target number. (Normal order of operations applies.)\\\\n\\\\n The provided answer should be an array of strings containing the valid expressions. The data provided by this problem is an array with two elements. The first element is the string of digits, while the second element is the target number:\\\\n\\\\n [\\\\\\\"280206263\\\\\\\", 22]\\\\n\\\\n NOTE: The order of evaluation expects script operator precedence NOTE: Numbers in the expression cannot have leading 0's. In other words, \\\\\\\"1+01\\\\\\\" is not a valid expression Examples:\\\\n\\\\n Input: digits = \\\\\\\"123\\\\\\\", target = 6\\\\n Output: [1+2+3, 1*2*3]\\\\n\\\\n Input: digits = \\\\\\\"105\\\\\\\", target = 5\\\\n Output: [1*0+5, 10-5]\\\"},{\\\"server\\\":\\\"summit-uni\\\",\\\"name\\\":\\\"contract-804374.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[1,10,3,0,1,6,0,10,0,10,9,1,6,3,1,0,4],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 1,10,3,0,1,6,0,10,0,10,9,1,6,3,1,0,4\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"I.I.I.I\\\",\\\"name\\\":\\\"contract-713319-ECorp.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0],[0,1],[1,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,\\\\n0,1,\\\\n1,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"omnia\\\",\\\"name\\\":\\\"contract-939274.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":75,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 75 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"omnia\\\",\\\"name\\\":\\\"contract-95916.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[6,0,9,7,8,8,4,3,4,7,0,6,10,3,6,4],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 6,0,9,7,8,8,4,3,4,7,0,6,10,3,6,4\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"zeus-med\\\",\\\"name\\\":\\\"contract-512616.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"((a(a))()\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n ((a(a))()\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"infocomm\\\",\\\"name\\\":\\\"contract-142431-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[5,10],[11,16],[21,23],[24,29]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[5,10],[11,16],[21,23],[24,29]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"helios\\\",\\\"name\\\":\\\"contract-8446-NiteSec.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"0100000010000100111011101110101110011110111001110111000110011101\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '0100000010000100111011101110101110011110111001110111000110011101' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"global-pharm\\\",\\\"name\\\":\\\"contract-202045.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[2,5],[6,13],[15,22],[7,9],[15,16],[25,29]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[2,5],[6,13],[15,22],[7,9],[15,16],[25,29]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"deltaone\\\",\\\"name\\\":\\\"contract-778253.cct\\\",\\\"type\\\":\\\"Array Jumping Game II\\\",\\\"attemptsLeft\\\":3,\\\"input\\\":[3,3,0,3,3],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 3,3,0,3,3\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine the minimum number of jumps to reach the end of the array.\\\\n\\\\n If it's impossible to reach the end, then the answer should be 0.\\\"},{\\\"server\\\":\\\"icarus\\\",\\\"name\\\":\\\"contract-708430-Sector12.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"YXYXYXYXYXUXYX2YXYXUXYX2XYX13XO23XO23gO3gOgOgOy1Zy1Zy1Zy11Zy1Zy11ZsB\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; YXYXYXYXYXUXYX2YXYXUXYX2XYX13XO23XO23gO3gOgOgOy1Zy1Zy1Zy11Zy1Zy11ZsB\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"solaris\\\",\\\"name\\\":\\\"contract-868385-ECorp.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"4811648251\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 4811648251\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"},{\\\"server\\\":\\\"solaris\\\",\\\"name\\\":\\\"contract-941799-NiteSec.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[4,6,1,9,5,2,10,5,6,3,7,2,3,7,7,3,1,6,1,5,9,0,4,5],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 4,6,1,9,5,2,10,5,6,3,7,2,3,7,7,3,1,6,1,5,9,0,4,5\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"titan-labs\\\",\\\"name\\\":\\\"contract-670821.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[1],[9,8],[5,3,1],[6,3,2,3],[8,3,8,4,7],[6,8,6,3,5,9],[1,6,2,8,3,1,3],[1,5,8,2,6,5,8,4],[6,1,4,2,4,7,1,6,8]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[9,8],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[5,3,1],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6,3,2,3],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[8,3,8,4,7],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6,8,6,3,5,9],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[1,6,2,8,3,1,3],\\\\n&nbsp;&nbsp;&nbsp;[1,5,8,2,6,5,8,4],\\\\n&nbsp;&nbsp;[6,1,4,2,4,7,1,6,8]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"applied-energetics\\\",\\\"name\\\":\\\"contract-348053-NWO.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,1,0,0,0,1,0],[0,0,0,0,1,0,0],[0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,1,0,0,0,1,0,\\\\n0,0,0,0,1,0,0,\\\\n0,0,0,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"applied-energetics\\\",\\\"name\\\":\\\"contract-585222-TianDiHui.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"1100101000010101\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '1100101000010101' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"fulcrumtech\\\",\\\"name\\\":\\\"contract-101786-TianDiHui.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"1110000010001011011111101001000001101110001101010000110101011100\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '1110000010001011011111101001000001101110001101010000110101011100' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"omnitek\\\",\\\"name\\\":\\\"contract-111223.cct\\\",\\\"type\\\":\\\"Array Jumping Game II\\\",\\\"attemptsLeft\\\":3,\\\"input\\\":[0,2,2],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 0,2,2\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine the minimum number of jumps to reach the end of the array.\\\\n\\\\n If it's impossible to reach the end, then the answer should be 0.\\\"},{\\\"server\\\":\\\"omnitek\\\",\\\"name\\\":\\\"contract-288053-BladeIndustries.cct\\\",\\\"type\\\":\\\"Array Jumping Game II\\\",\\\"attemptsLeft\\\":3,\\\"input\\\":[3,2,1,2,3,0,5,4,1,1,2,3,1,0,0,1,4,3,3,5],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 3,2,1,2,3,0,5,4,1,1,2,3,1,0,0,1,4,3,3,5\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine the minimum number of jumps to reach the end of the array.\\\\n\\\\n If it's impossible to reach the end, then the answer should be 0.\\\"},{\\\"server\\\":\\\"powerhouse-fitness\\\",\\\"name\\\":\\\"contract-367042.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"()(a))(a)aaa)((a(((\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n ()(a))(a)aaa)((a(((\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"syscore\\\",\\\"name\\\":\\\"contract-867548-ECorp.cct\\\",\\\"type\\\":\\\"Proper 2-Coloring of a Graph\\\",\\\"attemptsLeft\\\":5,\\\"input\\\":[12,[[6,10],[0,6],[8,11],[6,8],[0,2],[4,11],[0,1],[1,5],[7,11],[0,9],[8,9],[2,7],[6,7],[4,9],[3,9]]],\\\"description\\\":\\\"You are given the following data, representing a graph:\\\\n [12,[[6,10],[0,6],[8,11],[6,8],[0,2],[4,11],[0,1],[1,5],[7,11],[0,9],[8,9],[2,7],[6,7],[4,9],[3,9]]]\\\\n Note that \\\\\\\"graph\\\\\\\", as used here, refers to the field of graph theory, and has no relation to statistics or plotting. The first element of the data represents the number of vertices in the graph. Each vertex is a unique number between 0 and 11. The next element of the data represents the edges of the graph. Two vertices u,v in a graph are said to be adjacent if there exists an edge [u,v]. Note that an edge [u,v] is the same as an edge [v,u], as order does not matter. You must construct a 2-coloring of the graph, meaning that you have to assign each vertex in the graph a \\\\\\\"color\\\\\\\", either 0 or 1, such that no two adjacent vertices have the same color. Submit your answer in the form of an array, where element i represents the color of vertex i. If it is impossible to construct a 2-coloring of the given graph, instead submit an empty array.\\\\n\\\\n Examples:\\\\n\\\\n Input: [4, [[0, 2], [0, 3], [1, 2], [1, 3]]]\\\\n Output: [0, 0, 1, 1]\\\\n\\\\n Input: [3, [[0, 1], [0, 2], [1, 2]]]\\\\n Output: []\\\"},{\\\"server\\\":\\\"rothman-uni\\\",\\\"name\\\":\\\"contract-275073.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":155085324086,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 155085324086 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"},{\\\"server\\\":\\\"catalyst\\\",\\\"name\\\":\\\"contract-444562.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,0,0,0,1,0,0,0,0],[0,0,0,0,0,0,0,0,1,0,1,0],[0,1,1,0,0,0,0,1,0,1,0,1],[0,0,1,1,0,0,0,1,0,1,0,0],[0,0,1,0,1,0,0,0,0,1,0,0],[0,0,0,0,0,1,1,1,0,0,1,1],[0,0,1,1,1,1,1,1,0,0,0,0],[0,1,0,0,1,0,0,1,0,0,0,0],[0,0,0,1,0,0,0,1,0,0,0,0],[0,0,1,0,0,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,0,0,0,0,0,0,1,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,0,0,1,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,0,0,0,0,1,0,1,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,1,0,0,0,1,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,1,0,0,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,1,1,1,0,0,1,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,1,1,1,1,1,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,1,0,0,1,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,1,0,0,0,1,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,0,0,0,0,0,0,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"}]\"}}],[\"contracts/2023-07-12T21:20:44.230Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-12T21:20:44.230Z.txt\",\"text\":\"[{\\\"server\\\":\\\"galactic-cyber\\\",\\\"name\\\":\\\"contract-750531.cct\\\",\\\"type\\\":\\\"Find All Valid Math Expressions\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[\\\"3358\\\",53],\\\"description\\\":\\\"You are given the following string which contains only digits between 0 and 9:\\\\n\\\\n 3358\\\\n\\\\n You are also given a target number of 53. Return all possible ways you can add the +(add), -(subtract), and *(multiply) operators to the string such that it evaluates to the target number. (Normal order of operations applies.)\\\\n\\\\n The provided answer should be an array of strings containing the valid expressions. The data provided by this problem is an array with two elements. The first element is the string of digits, while the second element is the target number:\\\\n\\\\n [\\\\\\\"3358\\\\\\\", 53]\\\\n\\\\n NOTE: The order of evaluation expects script operator precedence NOTE: Numbers in the expression cannot have leading 0's. In other words, \\\\\\\"1+01\\\\\\\" is not a valid expression Examples:\\\\n\\\\n Input: digits = \\\\\\\"123\\\\\\\", target = 6\\\\n Output: [1+2+3, 1*2*3]\\\\n\\\\n Input: digits = \\\\\\\"105\\\\\\\", target = 5\\\\n Output: [1*0+5, 10-5]\\\"},{\\\"server\\\":\\\"icarus\\\",\\\"name\\\":\\\"contract-461484.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,1,0,0],[0,0,0,0,1,0,0],[0,0,0,0,1,0,0],[0,0,0,0,0,0,0],[0,0,0,0,1,0,1],[0,1,1,0,0,0,0],[0,0,1,0,0,0,0],[1,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,0,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,0,0,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"omnitek\\\",\\\"name\\\":\\\"contract-523040.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[-2,-9,-2,-9,4,2,10,-5,-2,3,7,2,0,6,5,-7,8,-1,-8],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n -2,-9,-2,-9,4,2,10,-5,-2,3,7,2,0,6,5,-7,8,-1,-8\\\"},{\\\"server\\\":\\\"johnson-ortho\\\",\\\"name\\\":\\\"contract-741432.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[111,[1,2,3,4,6,7,8,11,12,15]],\\\"description\\\":\\\"How many different distinct ways can the number 111 be written as a sum of integers contained in the set:\\\\n\\\\n [1,2,3,4,6,7,8,11,12,15]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"omega-net\\\",\\\"name\\\":\\\"contract-149047-NiteSec.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"01101011010010011111101000011100\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '01101011010010011111101000011100' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"zb-institute\\\",\\\"name\\\":\\\"contract-55508.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":194455156,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 194455156?\\\"},{\\\"server\\\":\\\"rho-construction\\\",\\\"name\\\":\\\"contract-713464-BladeIndustries.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[9,-6,9,7,-4,8,0,-10,-10,-1,5,1,4,-1,9,1,6,-4,-4,6,8],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 9,-6,9,7,-4,8,0,-10,-10,-1,5,1,4,-1,9,1,6,-4,-4,6,8\\\"},{\\\"server\\\":\\\"alpha-ent\\\",\\\"name\\\":\\\"contract-9550.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[2],[4,4],[9,6,8],[6,1,4,4],[3,3,1,5,5],[9,5,1,2,3,2],[4,4,4,3,1,2,1],[2,6,2,2,1,4,3,9],[8,7,3,3,6,7,5,7,4],[5,1,4,5,2,1,5,4,3,4]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[4,4],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[9,6,8],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6,1,4,4],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[3,3,1,5,5],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[9,5,1,2,3,2],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[4,4,4,3,1,2,1],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[2,6,2,2,1,4,3,9],\\\\n&nbsp;&nbsp;&nbsp;[8,7,3,3,6,7,5,7,4],\\\\n&nbsp;&nbsp;[5,1,4,5,2,1,5,4,3,4]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"millenium-fitness\\\",\\\"name\\\":\\\"contract-367378.cct\\\",\\\"type\\\":\\\"Proper 2-Coloring of a Graph\\\",\\\"attemptsLeft\\\":5,\\\"input\\\":[7,[[1,3],[5,6],[2,4],[4,5],[2,3],[0,6]]],\\\"description\\\":\\\"You are given the following data, representing a graph:\\\\n [7,[[1,3],[5,6],[2,4],[4,5],[2,3],[0,6]]]\\\\n Note that \\\\\\\"graph\\\\\\\", as used here, refers to the field of graph theory, and has no relation to statistics or plotting. The first element of the data represents the number of vertices in the graph. Each vertex is a unique number between 0 and 6. The next element of the data represents the edges of the graph. Two vertices u,v in a graph are said to be adjacent if there exists an edge [u,v]. Note that an edge [u,v] is the same as an edge [v,u], as order does not matter. You must construct a 2-coloring of the graph, meaning that you have to assign each vertex in the graph a \\\\\\\"color\\\\\\\", either 0 or 1, such that no two adjacent vertices have the same color. Submit your answer in the form of an array, where element i represents the color of vertex i. If it is impossible to construct a 2-coloring of the given graph, instead submit an empty array.\\\\n\\\\n Examples:\\\\n\\\\n Input: [4, [[0, 2], [0, 3], [1, 2], [1, 3]]]\\\\n Output: [0, 0, 1, 1]\\\\n\\\\n Input: [3, [[0, 1], [0, 2], [1, 2]]]\\\\n Output: []\\\"}]\"}}],[\"contracts/2023-07-13T01:43:07.575Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-13T01:43:07.575Z.txt\",\"text\":\"[{\\\"server\\\":\\\"phantasy\\\",\\\"name\\\":\\\"contract-313731.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[13,15],[2,12],[5,9],[5,14],[3,12],[5,8],[10,15],[11,15],[23,27],[16,25],[10,18],[9,11],[19,21],[13,15],[11,20],[21,23],[15,20]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[13,15],[2,12],[5,9],[5,14],[3,12],[5,8],[10,15],[11,15],[23,27],[16,25],[10,18],[9,11],[19,21],[13,15],[11,20],[21,23],[15,20]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"omega-net\\\",\\\"name\\\":\\\"contract-579159-NWO.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"(a()a))\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n (a()a))\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"syscore\\\",\\\"name\\\":\\\"contract-922188.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"10170141214\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 10170141214\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"},{\\\"server\\\":\\\"alpha-ent\\\",\\\"name\\\":\\\"contract-202147-Aevum.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"91119053\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 91119053\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"},{\\\"server\\\":\\\"aevum-police\\\",\\\"name\\\":\\\"contract-33073.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":97,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 97 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"galactic-cyber\\\",\\\"name\\\":\\\"contract-158550.cct\\\",\\\"type\\\":\\\"Find All Valid Math Expressions\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[\\\"724124252400\\\",-100],\\\"description\\\":\\\"You are given the following string which contains only digits between 0 and 9:\\\\n\\\\n 724124252400\\\\n\\\\n You are also given a target number of -100. Return all possible ways you can add the +(add), -(subtract), and *(multiply) operators to the string such that it evaluates to the target number. (Normal order of operations applies.)\\\\n\\\\n The provided answer should be an array of strings containing the valid expressions. The data provided by this problem is an array with two elements. The first element is the string of digits, while the second element is the target number:\\\\n\\\\n [\\\\\\\"724124252400\\\\\\\", -100]\\\\n\\\\n NOTE: The order of evaluation expects script operator precedence NOTE: Numbers in the expression cannot have leading 0's. In other words, \\\\\\\"1+01\\\\\\\" is not a valid expression Examples:\\\\n\\\\n Input: digits = \\\\\\\"123\\\\\\\", target = 6\\\\n Output: [1+2+3, 1*2*3]\\\\n\\\\n Input: digits = \\\\\\\"105\\\\\\\", target = 5\\\\n Output: [1*0+5, 10-5]\\\"},{\\\"server\\\":\\\"taiyang-digital\\\",\\\"name\\\":\\\"contract-409368-ECorp.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"0000000010011001\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '0000000010011001' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"nova-med\\\",\\\"name\\\":\\\"contract-613982-Aevum.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,1,0,0],[0,1,0,0,0,0,0,0,0,0],[0,0,0,0,0,1,0,0,0,0],[0,0,0,0,0,1,0,0,1,1],[0,0,0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0,0,1],[0,0,0,0,0,0,1,0,0,0],[0,0,0,1,0,0,0,0,0,0],[1,1,0,0,0,0,1,0,1,0],[0,0,1,0,0,0,0,0,1,0],[0,1,0,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,1,0,0,\\\\n0,1,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,1,0,0,0,0,\\\\n0,0,0,0,0,1,0,0,1,1,\\\\n0,0,0,0,0,0,0,0,0,1,\\\\n0,0,0,0,0,0,0,0,0,1,\\\\n0,0,0,0,0,0,1,0,0,0,\\\\n0,0,0,1,0,0,0,0,0,0,\\\\n1,1,0,0,0,0,1,0,1,0,\\\\n0,0,1,0,0,0,0,0,1,0,\\\\n0,1,0,0,0,0,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"microdyne\\\",\\\"name\\\":\\\"contract-193179.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"yYDDDDDDDDDDDDDDGGrrrrQQQQQQQQQQQQQqqGGHHpHHppkWWoooooooooooooaaaggggggFF\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; yYDDDDDDDDDDDDDDGGrrrrQQQQQQQQQQQQQqqGGHHpHHppkWWoooooooooooooaaaggggggFF\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-454624.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":81239038,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 81239038?\\\"},{\\\"server\\\":\\\"clarkinc\\\",\\\"name\\\":\\\"contract-670555.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":486152158932188,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 486152158932188 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"},{\\\"server\\\":\\\"icarus\\\",\\\"name\\\":\\\"contract-915610-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[9],[3,7],[1,3,1],[1,2,5,6],[6,9,9,4,8],[7,4,1,8,6,5],[6,8,5,2,5,5,3],[6,6,2,6,3,9,4,9],[6,3,4,8,5,5,4,6,7],[6,3,5,1,4,9,1,4,6,4]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[9],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[3,7],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,3,1],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,2,5,6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6,9,9,4,8],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[7,4,1,8,6,5],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6,8,5,2,5,5,3],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[6,6,2,6,3,9,4,9],\\\\n&nbsp;&nbsp;&nbsp;[6,3,4,8,5,5,4,6,7],\\\\n&nbsp;&nbsp;[6,3,5,1,4,9,1,4,6,4]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"}]\"}}],[\"contracts/2023-07-13T11:39:25.939Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-13T11:39:25.939Z.txt\",\"text\":\"[]\"}}],[\"contracts/2023-07-13T12:06:58.738Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-13T12:06:58.738Z.txt\",\"text\":\"[{\\\"server\\\":\\\"lexo-corp\\\",\\\"name\\\":\\\"contract-782097.cct\\\",\\\"type\\\":\\\"Proper 2-Coloring of a Graph\\\",\\\"attemptsLeft\\\":5,\\\"input\\\":[7,[[0,5],[3,4],[2,4],[1,6],[3,5],[4,6],[1,4],[0,1]]],\\\"description\\\":\\\"You are given the following data, representing a graph:\\\\n [7,[[0,5],[3,4],[2,4],[1,6],[3,5],[4,6],[1,4],[0,1]]]\\\\n Note that \\\\\\\"graph\\\\\\\", as used here, refers to the field of graph theory, and has no relation to statistics or plotting. The first element of the data represents the number of vertices in the graph. Each vertex is a unique number between 0 and 6. The next element of the data represents the edges of the graph. Two vertices u,v in a graph are said to be adjacent if there exists an edge [u,v]. Note that an edge [u,v] is the same as an edge [v,u], as order does not matter. You must construct a 2-coloring of the graph, meaning that you have to assign each vertex in the graph a \\\\\\\"color\\\\\\\", either 0 or 1, such that no two adjacent vertices have the same color. Submit your answer in the form of an array, where element i represents the color of vertex i. If it is impossible to construct a 2-coloring of the given graph, instead submit an empty array.\\\\n\\\\n Examples:\\\\n\\\\n Input: [4, [[0, 2], [0, 3], [1, 2], [1, 3]]]\\\\n Output: [0, 0, 1, 1]\\\\n\\\\n Input: [3, [[0, 1], [0, 2], [1, 2]]]\\\\n Output: []\\\"},{\\\"server\\\":\\\"aerocorp\\\",\\\"name\\\":\\\"contract-773336.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,0,1,1,0],[0,0,0,0,1,0,1,1],[1,0,0,0,1,0,0,0],[0,0,0,1,0,0,1,0],[0,0,0,0,0,1,0,1],[0,0,0,0,0,1,1,0],[0,1,1,0,0,0,0,1],[0,0,0,0,0,1,0,0],[1,0,0,0,0,0,0,0],[1,0,1,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,0,0,0,0,1,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,1,1],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,0,1,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,1,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,1,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,1,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,0,0,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[1,0,1,0,0,0,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"deltaone\\\",\\\"name\\\":\\\"contract-432225-CyberSec.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":23,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 23 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"solaris\\\",\\\"name\\\":\\\"contract-410663.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[3],[1,9],[5,4,4],[9,7,8,5],[2,2,3,8,2],[9,8,4,6,5,8],[8,1,1,7,6,5,3],[1,5,1,2,7,7,8,4],[6,2,3,2,9,9,1,5,3],[9,6,3,3,4,2,7,9,7,6],[4,2,2,3,1,5,9,6,3,4,5],[6,3,8,1,9,7,7,9,1,6,8,5]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[3],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,9],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[5,4,4],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[9,7,8,5],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2,2,3,8,2],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[9,8,4,6,5,8],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[8,1,1,7,6,5,3],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,5,1,2,7,7,8,4],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6,2,3,2,9,9,1,5,3],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[9,6,3,3,4,2,7,9,7,6],\\\\n&nbsp;&nbsp;&nbsp;[4,2,2,3,1,5,9,6,3,4,5],\\\\n&nbsp;&nbsp;[6,3,8,1,9,7,7,9,1,6,8,5]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"netlink\\\",\\\"name\\\":\\\"contract-795996-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":73,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 73 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"zb-def\\\",\\\"name\\\":\\\"contract-391770-TheBlackHand.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,1,0,0,1,0],[0,0,1,0,1,0,1,0,0],[0,0,0,1,0,0,1,0,0],[0,0,0,1,1,1,0,1,1],[0,0,1,0,1,1,0,1,0],[0,1,1,0,1,0,0,0,0],[1,1,0,1,0,1,1,0,1],[0,1,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,0,0,0,1,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,1,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,1,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,1,1,1,0,1,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,1,1,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,0,1,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[1,1,0,1,0,1,1,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,0,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,0,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"megacorp\\\",\\\"name\\\":\\\"contract-440346.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[15,22],[5,12],[13,21]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[15,22],[5,12],[13,21]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"nwo\\\",\\\"name\\\":\\\"contract-593748-NiteSec.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"666RB6666R1lbVoooooooooFiqXWXi68O5iANQyv4BRCCD4vXClee3MRmMoe3MRmRmR\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; 666RB6666R1lbVoooooooooFiqXWXi68O5iANQyv4BRCCD4vXClee3MRmMoe3MRmRmR\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"clarkinc\\\",\\\"name\\\":\\\"contract-178512-ECorp.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,0],[0,0,1,0,0],[0,0,0,0,0],[0,0,0,1,0],[0,1,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,0,0,\\\\n0,0,1,0,0,\\\\n0,0,0,0,0,\\\\n0,0,0,1,0,\\\\n0,1,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"ecorp\\\",\\\"name\\\":\\\"contract-195663.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[1,0,0,4,2,7,6,3,5,5,10,10,3,0,9,7,10,2,0,2],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 1,0,0,4,2,7,6,3,5,5,10,10,3,0,9,7,10,2,0,2\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"b-and-a\\\",\\\"name\\\":\\\"contract-233152.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[13,3],\\\"description\\\":\\\"You are in a grid with 13 rows and 3 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [13, 3]\\\"},{\\\"server\\\":\\\"johnson-ortho\\\",\\\"name\\\":\\\"contract-510847-BladeIndustries.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"()((a((a(a)())(a()\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n ()((a((a(a)())(a()\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"alpha-ent\\\",\\\"name\\\":\\\"contract-632773.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[23,29],[14,20],[24,30],[4,11],[4,11]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[23,29],[14,20],[24,30],[4,11],[4,11]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"}]\"}}],[\"contracts/2023-07-13T23:55:09.875Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-13T23:55:09.875Z.txt\",\"text\":\"[{\\\"server\\\":\\\"hong-fang-tea\\\",\\\"name\\\":\\\"contract-968783-Chongqing.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[72,[2,7,9,10,11,12,13,14,16,17,18]],\\\"description\\\":\\\"How many different distinct ways can the number 72 be written as a sum of integers contained in the set:\\\\n\\\\n [2,7,9,10,11,12,13,14,16,17,18]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"nectar-net\\\",\\\"name\\\":\\\"contract-401139.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"MNFQerwPERzhONkIylMk83cIylMk83caaaauGSlk8QkMi6FmnFdgji6Fm73\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; MNFQerwPERzhONkIylMk83cIylMk83caaaauGSlk8QkMi6FmnFdgji6Fm73\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"deltaone\\\",\\\"name\\\":\\\"contract-151497-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"11000000000000001010100100001111\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '11000000000000001010100100001111' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"helios\\\",\\\"name\\\":\\\"contract-21990.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":41,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 41 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"megacorp\\\",\\\"name\\\":\\\"contract-377673.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[8,1,6,3,6,0,0,10,8,0,2,6,1,1,2,4,0,9],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 8,1,6,3,6,0,0,10,8,0,2,6,1,1,2,4,0,9\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"microdyne\\\",\\\"name\\\":\\\"contract-242228-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":33283024047570444,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 33283024047570444 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"}]\"}}],[\"contracts/2023-07-14T11:18:31.118Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-14T11:18:31.118Z.txt\",\"text\":\"[{\\\"server\\\":\\\"hong-fang-tea\\\",\\\"name\\\":\\\"contract-968783-Chongqing.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[72,[2,7,9,10,11,12,13,14,16,17,18]],\\\"description\\\":\\\"How many different distinct ways can the number 72 be written as a sum of integers contained in the set:\\\\n\\\\n [2,7,9,10,11,12,13,14,16,17,18]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"nectar-net\\\",\\\"name\\\":\\\"contract-401139.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"MNFQerwPERzhONkIylMk83cIylMk83caaaauGSlk8QkMi6FmnFdgji6Fm73\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; MNFQerwPERzhONkIylMk83cIylMk83caaaauGSlk8QkMi6FmnFdgji6Fm73\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"avmnite-02h\\\",\\\"name\\\":\\\"contract-307979.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[-6,-3,-2,0,-8,-6,-9,-8,2,2,-4,-2,-5,-9,-1,-1,1,1,9,-10,-10,-4,-5,-9,9,2,-10,-3],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n -6,-3,-2,0,-8,-6,-9,-8,2,2,-4,-2,-5,-9,-1,-1,1,1,9,-10,-10,-4,-5,-9,9,2,-10,-3\\\"},{\\\"server\\\":\\\"defcomm\\\",\\\"name\\\":\\\"contract-170537-ECorp.cct\\\",\\\"type\\\":\\\"Array Jumping Game II\\\",\\\"attemptsLeft\\\":3,\\\"input\\\":[0,4,8,0,1,4],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 0,4,8,0,1,4\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine the minimum number of jumps to reach the end of the array.\\\\n\\\\n If it's impossible to reach the end, then the answer should be 0.\\\"},{\\\"server\\\":\\\"defcomm\\\",\\\"name\\\":\\\"contract-395864.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"A55jrr6vvJJm00000055BBTTT66UDnnneeeeeeGGGGGGGGGimmVGGJJJJJJJJJJJJJhmYYYYYYYYYYll66FFeennk\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; A55jrr6vvJJm00000055BBTTT66UDnnneeeeeeGGGGGGGGGimmVGGJJJJJJJJJJJJJhmYYYYYYYYYYll66FFeennk\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"deltaone\\\",\\\"name\\\":\\\"contract-151497-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"11000000000000001010100100001111\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '11000000000000001010100100001111' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"icarus\\\",\\\"name\\\":\\\"contract-424542-NWO.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[16,[1,3,4,5,7,9,10,11]],\\\"description\\\":\\\"How many different distinct ways can the number 16 be written as a sum of integers contained in the set:\\\\n\\\\n [1,3,4,5,7,9,10,11]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"helios\\\",\\\"name\\\":\\\"contract-21990.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":41,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 41 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"helios\\\",\\\"name\\\":\\\"contract-855488.cct\\\",\\\"type\\\":\\\"Array Jumping Game II\\\",\\\"attemptsLeft\\\":3,\\\"input\\\":[3,6,2,0,2,1,2,3,3],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 3,6,2,0,2,1,2,3,3\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine the minimum number of jumps to reach the end of the array.\\\\n\\\\n If it's impossible to reach the end, then the answer should be 0.\\\"},{\\\"server\\\":\\\"megacorp\\\",\\\"name\\\":\\\"contract-377673.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[8,1,6,3,6,0,0,10,8,0,2,6,1,1,2,4,0,9],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 8,1,6,3,6,0,0,10,8,0,2,6,1,1,2,4,0,9\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"univ-energy\\\",\\\"name\\\":\\\"contract-216499.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[5,9],\\\"description\\\":\\\"You are in a grid with 5 rows and 9 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [5, 9]\\\"},{\\\"server\\\":\\\"microdyne\\\",\\\"name\\\":\\\"contract-242228-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":33283024047570444,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 33283024047570444 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"}]\"}}],[\"contracts/2023-07-14T11:23:56.906Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-14T11:23:56.906Z.txt\",\"text\":\"[{\\\"server\\\":\\\"harakiri-sushi\\\",\\\"name\\\":\\\"contract-243939.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[11,11],\\\"description\\\":\\\"You are in a grid with 11 rows and 11 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [11, 11]\\\"},{\\\"server\\\":\\\"4sigma\\\",\\\"name\\\":\\\"contract-912092.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[5,15],[14,15],[1,2],[7,15],[25,30],[7,14],[13,21],[18,22],[14,16],[23,27],[12,14],[21,24],[15,17],[4,13],[8,17],[16,17],[17,24],[2,10],[19,28]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[5,15],[14,15],[1,2],[7,15],[25,30],[7,14],[13,21],[18,22],[14,16],[23,27],[12,14],[21,24],[15,17],[4,13],[8,17],[16,17],[17,24],[2,10],[19,28]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"}]\"}}],[\"contracts/2023-07-14T12:44:38.173Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-14T12:44:38.173Z.txt\",\"text\":\"[{\\\"server\\\":\\\"johnson-ortho\\\",\\\"name\\\":\\\"contract-48939-Chongqing.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[26,[1,3,5,8,10,11,15,16,17]],\\\"description\\\":\\\"How many different distinct ways can the number 26 be written as a sum of integers contained in the set:\\\\n\\\\n [1,3,5,8,10,11,15,16,17]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"snap-fitness\\\",\\\"name\\\":\\\"contract-470979.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"2209419733\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 2209419733\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"},{\\\"server\\\":\\\"taiyang-digital\\\",\\\"name\\\":\\\"contract-234597.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[6],[5,8],[1,1,1],[2,8,3,4]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[5,8],\\\\n&nbsp;&nbsp;&nbsp;[1,1,1],\\\\n&nbsp;&nbsp;[2,8,3,4]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"univ-energy\\\",\\\"name\\\":\\\"contract-448836-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"66hhhhhhhhhhhhhh22YttttttttttttDD666666666666CCKTxxxxxx2\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; 66hhhhhhhhhhhhhh22YttttttttttttDD666666666666CCKTxxxxxx2\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"applied-energetics\\\",\\\"name\\\":\\\"contract-558999-NWO.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"1110100010011110000011110010100011001110000000011010011111100101\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '1110100010011110000011110010100011001110000000011010011111100101' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"4sigma\\\",\\\"name\\\":\\\"contract-190826.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"(())a)())a)((a)()()(\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n (())a)())a)((a)()()(\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"4sigma\\\",\\\"name\\\":\\\"contract-480856-CyberSec.cct\\\",\\\"type\\\":\\\"Array Jumping Game II\\\",\\\"attemptsLeft\\\":3,\\\"input\\\":[2,5,2],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 2,5,2\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine the minimum number of jumps to reach the end of the array.\\\\n\\\\n If it's impossible to reach the end, then the answer should be 0.\\\"}]\"}}],[\"analytics/2023-07-14-13-42-Chongqing-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-14-13-42-Chongqing-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-11T21:37:36.719Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-11T21:37:36.719Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"CyberSec\\\",\\\"firstTime\\\":\\\"2023-07-11T21:37:36.719Z\\\"},{\\\"factionToMax\\\":\\\"NWO\\\",\\\"firstTime\\\":\\\"2023-07-14T02:08:45.834Z\\\"},{\\\"factionToMax\\\":\\\"Chongqing\\\",\\\"firstTime\\\":\\\"2023-07-14T12:31:21.811Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":18750,\\\"currentFactionRep\\\":0,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-11T21:37:36.720Z\\\"},\\\"augsBought\\\":[\\\"Neurotrainer I\\\"],\\\"moneySpent\\\":{\\\"augments\\\":4000000,\\\"homeCores\\\":0,\\\"homeRam\\\":100683790.34535334,\\\"fluxGovernors\\\":124980102.68536004,\\\"repPurchased\\\":0},\\\"moneyLeft\\\":21525525.99539931,\\\"lastSaved\\\":\\\"2023-07-14T18:42:23.498Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":true,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":true,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":1250000,\\\"currentFactionRep\\\":1318070.89911256,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-14T11:18:31.206Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":false,\\\"moneyIsGreaterThanTriggered\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$NaN\\\",\\\"moneyRightNow\\\":\\\"$3,672.06\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$2,509,649,050,250.00\\\",\\\"time\\\":\\\"2023-07-14T11:18:31.207Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":false,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$0.00\\\",\\\"moneyRightNow\\\":\\\"$251,189,419.03\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$4,000,000.00\\\",\\\"time\\\":\\\"2023-07-14T18:42:23.494Z\\\"},\\\"amountOfRamIncrease\\\":null,\\\"amountOfCoresIncrease\\\":null}\"}}],[\"contracts/failure/defcomm-contract-100448.cct-AlgorithmicStockTraderIII.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/failure/defcomm-contract-100448.cct-AlgorithmicStockTraderIII.txt\",\"text\":\"{\\\"contract\\\":{\\\"server\\\":\\\"defcomm\\\",\\\"name\\\":\\\"contract-100448.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader III\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[152,38,124,58,150,20,97],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 152,38,124,112,58,135,150,20,97,44,5\\\\n\\\\n Determine the maximum possible profit you can earn using at most two transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0\\\"},\\\"wrongResult\\\":178}\"}}],[\"contracts/2023-07-14T17:49:59.207Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-14T17:49:59.207Z.txt\",\"text\":\"[{\\\"server\\\":\\\"foodnstuff\\\",\\\"name\\\":\\\"contract-950777-Chongqing.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[14,11],\\\"description\\\":\\\"You are in a grid with 14 rows and 11 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [14, 11]\\\"},{\\\"server\\\":\\\"harakiri-sushi\\\",\\\"name\\\":\\\"contract-92525-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"5149180136\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 5149180136\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"},{\\\"server\\\":\\\"omega-net\\\",\\\"name\\\":\\\"contract-536552-BladeIndustries.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"Xcxhhhhhhhhhh6uh6uhT6HV8V8V8V8V8tIV8V8tI8t5idt00l0H00lA0l0H00lARlARlARlA\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; Xcxhhhhhhhhhh6uh6uhT6HV8V8V8V8V8tIV8V8tI8t5idt00l0H00lA0l0H00lARlARlARlA\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"rothman-uni\\\",\\\"name\\\":\\\"contract-58197.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[14,20],[13,18],[19,21],[17,25],[21,26],[5,11],[21,27],[15,25],[13,14],[2,12],[16,20]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[14,20],[13,18],[19,21],[17,25],[21,26],[5,11],[21,27],[15,25],[13,14],[2,12],[16,20]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"aevum-police\\\",\\\"name\\\":\\\"contract-324718-Chongqing.cct\\\",\\\"type\\\":\\\"Array Jumping Game II\\\",\\\"attemptsLeft\\\":3,\\\"input\\\":[2,7,4,1,3,3,2,1,4,2,1,4,2,0,1],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 2,7,4,1,3,3,2,1,4,2,1,4,2,0,1\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine the minimum number of jumps to reach the end of the array.\\\\n\\\\n If it's impossible to reach the end, then the answer should be 0.\\\"},{\\\"server\\\":\\\"aevum-police\\\",\\\"name\\\":\\\"contract-512878-TheBlackHand.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[24,26],[18,21],[2,10],[7,11],[9,13],[16,23]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[24,26],[18,21],[2,10],[7,11],[9,13],[16,23]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"icarus\\\",\\\"name\\\":\\\"contract-349696-BladeIndustries.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[2,9,4,0,1,4,0,2,0,4],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 2,9,4,0,1,4,0,2,0,4\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"infocomm\\\",\\\"name\\\":\\\"contract-43533-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"()(a))((()(()))))))\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n ()(a))((()(()))))))\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"4sigma\\\",\\\"name\\\":\\\"contract-177119-Chongqing.cct\\\",\\\"type\\\":\\\"Array Jumping Game II\\\",\\\"attemptsLeft\\\":3,\\\"input\\\":[3,3,2,2],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 3,3,2,2\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine the minimum number of jumps to reach the end of the array.\\\\n\\\\n If it's impossible to reach the end, then the answer should be 0.\\\"},{\\\"server\\\":\\\"b-and-a\\\",\\\"name\\\":\\\"contract-72852.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":95,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 95 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"lexo-corp\\\",\\\"name\\\":\\\"contract-743761-TheBlackHand.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":9273759208585,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 9273759208585 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"},{\\\"server\\\":\\\"alpha-ent\\\",\\\"name\\\":\\\"contract-210549-TianDiHui.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"((()a((\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n ((()a((\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"zb-institute\\\",\\\"name\\\":\\\"contract-16187.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":61,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 61 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"zb-institute\\\",\\\"name\\\":\\\"contract-53046.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"oMMMhd3xnWCxnWCxnWWCxnWzc13m3m3m0Q7lb7m3Uh3Uh3eeeeeeeeemcKeeemcKL6KeeXMe7e6IEqemumum\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; oMMMhd3xnWCxnWCxnWWCxnWzc13m3m3m0Q7lb7m3Uh3Uh3eeeeeeeeemcKeeemcKL6KeeXMe7e6IEqemumum\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"millenium-fitness\\\",\\\"name\\\":\\\"contract-712707.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[11,3],\\\"description\\\":\\\"You are in a grid with 11 rows and 3 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [11, 3]\\\"},{\\\"server\\\":\\\"aerocorp\\\",\\\"name\\\":\\\"contract-684196-TianDiHui.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[8],[1,5],[5,6,3],[5,7,4,9],[4,8,7,6,9],[8,4,1,9,9,6],[2,7,2,8,1,1,1],[7,8,8,5,5,1,8,7],[4,2,4,2,1,2,9,2,3],[1,4,7,4,4,4,4,4,1,9]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[8],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,5],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[5,6,3],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[5,7,4,9],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[4,8,7,6,9],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[8,4,1,9,9,6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2,7,2,8,1,1,1],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[7,8,8,5,5,1,8,7],\\\\n&nbsp;&nbsp;&nbsp;[4,2,4,2,1,2,9,2,3],\\\\n&nbsp;&nbsp;[1,4,7,4,4,4,4,4,1,9]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"unitalife\\\",\\\"name\\\":\\\"contract-449584.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[0,9,8,9,0,6,2,1,10,0,6,6,5,9,9],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 0,9,8,9,0,6,2,1,10,0,6,6,5,9,9\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"defcomm\\\",\\\"name\\\":\\\"contract-100448.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader III\\\",\\\"attemptsLeft\\\":9,\\\"input\\\":[152,38,124,112,58,135,150,20,97,44,5],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 152,38,124,112,58,135,150,20,97,44,5\\\\n\\\\n Determine the maximum possible profit you can earn using at most two transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0\\\"},{\\\"server\\\":\\\"run4theh111z\\\",\\\"name\\\":\\\"contract-438064.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"11011101010011011011100011010111\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '11011101010011011011100011010111' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"fulcrumtech\\\",\\\"name\\\":\\\"contract-511574-TianDiHui.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"11101010000000000000100100011110\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '11101010000000000000100100011110' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"helios\\\",\\\"name\\\":\\\"contract-819392.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"BaJqIBE7eIBE7eIBE70170QgZ8QG0UH1VE1uX0UH1VE1uXFKHB67cR67cR67cR6cwwwwwR6\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; BaJqIBE7eIBE7eIBE70170QgZ8QG0UH1VE1uX0UH1VE1uXFKHB67cR67cR67cR6cwwwwwR6\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"zb-def\\\",\\\"name\\\":\\\"contract-204399.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":17,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 17 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"applied-energetics\\\",\\\"name\\\":\\\"contract-748358-BladeIndustries.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":359879067,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 359879067?\\\"},{\\\"server\\\":\\\"univ-energy\\\",\\\"name\\\":\\\"contract-482287.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[3,-7,-4,10,-8,6,-9,-2,0,6],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 3,-7,-4,10,-8,6,-9,-2,0,6\\\"},{\\\"server\\\":\\\"nova-med\\\",\\\"name\\\":\\\"contract-268040.cct\\\",\\\"type\\\":\\\"Array Jumping Game II\\\",\\\"attemptsLeft\\\":3,\\\"input\\\":[3,1,1,2,2,5,1,0,4,1,1,2,4,2,2,4,4,0,6,3],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 3,1,1,2,2,5,1,0,4,1,1,2,4,2,2,4,4,0,6,3\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine the minimum number of jumps to reach the end of the array.\\\\n\\\\n If it's impossible to reach the end, then the answer should be 0.\\\"},{\\\"server\\\":\\\"titan-labs\\\",\\\"name\\\":\\\"contract-386141-CyberSec.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":1726876013836,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 1726876013836 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"},{\\\"server\\\":\\\"neo-net\\\",\\\"name\\\":\\\"contract-558415-NiteSec.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"6RjtC6RjtC6RjtZC6OpbtZC6OpNbtZC6OpNeqBqpCpONeqBqpDVjpD2vwWh7FwWh7FwWh7h7FwWh7h\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; 6RjtC6RjtC6RjtZC6OpbtZC6OpNbtZC6OpNeqBqpCpONeqBqpDVjpD2vwWh7FwWh7FwWh7h7FwWh7h\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"}]\"}}],[\"contracts/2023-07-15T15:33:56.046Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-15T15:33:56.046Z.txt\",\"text\":\"[{\\\"server\\\":\\\"n00dles\\\",\\\"name\\\":\\\"contract-342582.cct\\\",\\\"type\\\":\\\"Encryption I: Caesar Cipher\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[\\\"CLOUD MEDIA MACRO LOGIN LINUX\\\",14],\\\"description\\\":\\\"Caesar cipher is one of the simplest encryption technique. It is a type of substitution cipher in which each letter in the plaintext  is replaced by a letter some fixed number of positions down the alphabet. For example, with a left shift of 3, D would be replaced by A,  E would become B, and A would become X (because of rotation).\\\\n\\\\n You are given an array with two elements:\\\\n &nbsp;&nbsp;[\\\\\\\"CLOUD MEDIA MACRO LOGIN LINUX\\\\\\\", 14]\\\\n The first element is the plaintext, the second element is the left shift value.\\\\n\\\\n Return the ciphertext as uppercase string. Spaces remains the same.\\\"}]\"}}],[\"contracts/2023-07-15T15:58:32.433Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-15T15:58:32.433Z.txt\",\"text\":\"[{\\\"server\\\":\\\"foodnstuff\\\",\\\"name\\\":\\\"contract-913737-TianDiHui.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"166255161155\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 166255161155\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"},{\\\"server\\\":\\\"neo-net\\\",\\\"name\\\":\\\"contract-350855-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[-4,1,-9,-10,-8,1,-10,7,-8,5,10,7,-3,5,1,-10,9,-9,-5,2,0,-1,5,5,0,-5,-6,10],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n -4,1,-9,-10,-8,1,-10,7,-8,5,10,7,-3,5,1,-10,9,-9,-5,2,0,-1,5,5,0,-5,-6,10\\\"},{\\\"server\\\":\\\"catalyst\\\",\\\"name\\\":\\\"contract-293360.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[1],[9,6],[7,5,3],[5,3,4,2],[8,4,8,9,1],[9,6,1,5,7,3],[4,2,4,1,4,1,3],[8,1,3,4,8,8,2,7],[4,7,2,2,8,8,7,4,4],[1,4,3,6,6,1,4,1,5,8],[3,9,7,6,9,1,5,3,8,5,7],[6,6,6,9,4,6,5,6,1,2,5,4]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[9,6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[7,5,3],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[5,3,4,2],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[8,4,8,9,1],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[9,6,1,5,7,3],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[4,2,4,1,4,1,3],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[8,1,3,4,8,8,2,7],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[4,7,2,2,8,8,7,4,4],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[1,4,3,6,6,1,4,1,5,8],\\\\n&nbsp;&nbsp;&nbsp;[3,9,7,6,9,1,5,3,8,5,7],\\\\n&nbsp;&nbsp;[6,6,6,9,4,6,5,6,1,2,5,4]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"univ-energy\\\",\\\"name\\\":\\\"contract-781131.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,1,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,0],[0,1,0,0,0,1,1,1,0,1],[0,0,0,0,0,0,1,1,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,1],[0,1,0,0,1,0,0,0,0,0],[0,0,0,1,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,1,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,1,0,0,0,0,0,\\\\n0,1,0,0,0,1,1,1,0,1,\\\\n0,0,0,0,0,0,1,1,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,1,1,\\\\n0,1,0,0,1,0,0,0,0,0,\\\\n0,0,0,1,0,0,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"univ-energy\\\",\\\"name\\\":\\\"contract-915824.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[10,16],[1,9],[7,13],[5,12],[7,10],[1,7],[11,14],[23,31],[16,24]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[10,16],[1,9],[7,13],[5,12],[7,10],[1,7],[11,14],[23,31],[16,24]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"univ-energy\\\",\\\"name\\\":\\\"contract-925739.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[3,10],[6,16],[21,26],[23,25],[12,17],[9,14],[3,8],[18,22],[13,22],[20,22],[12,19],[12,21]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[3,10],[6,16],[21,26],[23,25],[12,17],[9,14],[3,8],[18,22],[13,22],[20,22],[12,19],[12,21]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"}]\"}}],[\"contracts/failure/catalyst-contract-299807-TianDiHui.cct-AlgorithmicStockTraderIII.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/failure/catalyst-contract-299807-TianDiHui.cct-AlgorithmicStockTraderIII.txt\",\"text\":\"{\\\"contract\\\":{\\\"server\\\":\\\"catalyst\\\",\\\"name\\\":\\\"contract-299807-TianDiHui.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader III\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[27,101,17,115,9,135,64,195,189,196],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 27,70,101,47,17,115,9,135,64,195,189,196,174,11,8\\\\n\\\\n Determine the maximum possible profit you can earn using at most two transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0\\\"},\\\"wrongResult\\\":258}\"}}],[\"contracts/failure/syscore-contract-62815-OmniTekIncorporated.cct-AlgorithmicStockTraderIII.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/failure/syscore-contract-62815-OmniTekIncorporated.cct-AlgorithmicStockTraderIII.txt\",\"text\":\"{\\\"contract\\\":{\\\"server\\\":\\\"syscore\\\",\\\"name\\\":\\\"contract-62815-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader III\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[17,186,44,129,73,176,46,194,37,196,97,174,102,159,143,193,92,172,75,165,10,108],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 17,186,55,44,51,129,73,176,46,194,91,37,48,157,196,133,113,97,150,174,163,102,159,143,172,193,92,124,170,172,165,149,75,99,165,10,108,49\\\\n\\\\n Determine the maximum possible profit you can earn using at most two transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0\\\"},\\\"wrongResult\\\":328}\"}}],[\"contracts/2023-07-16T00:10:02.517Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-16T00:10:02.517Z.txt\",\"text\":\"[{\\\"server\\\":\\\"harakiri-sushi\\\",\\\"name\\\":\\\"contract-497299-Sector12.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"aA64ZN0A64az0A64az0A62w0A62w0eYC62wYCNMY3666666sX0d5tttttttKdputtYgaputtYgaoSuty\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; aA64ZN0A64az0A64az0A62w0A62w0eYC62wYCNMY3666666sX0d5tttttttKdputtYgaputtYgaoSuty\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"syscore\\\",\\\"name\\\":\\\"contract-62815-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader III\\\",\\\"attemptsLeft\\\":9,\\\"input\\\":[17,186,55,44,51,129,73,176,46,194,91,37,48,157,196,133,113,97,150,174,163,102,159,143,172,193,92,124,170,172,165,149,75,99,165,10,108,49],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 17,186,55,44,51,129,73,176,46,194,91,37,48,157,196,133,113,97,150,174,163,102,159,143,172,193,92,124,170,172,165,149,75,99,165,10,108,49\\\\n\\\\n Determine the maximum possible profit you can earn using at most two transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0\\\"},{\\\"server\\\":\\\"alpha-ent\\\",\\\"name\\\":\\\"contract-744706.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[168,[1,3,4,6,7,8,9,10,13,14,15,19]],\\\"description\\\":\\\"How many different distinct ways can the number 168 be written as a sum of integers contained in the set:\\\\n\\\\n [1,3,4,6,7,8,9,10,13,14,15,19]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"lexo-corp\\\",\\\"name\\\":\\\"contract-343293-Aevum.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[0,0,8,0],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 0,0,8,0\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"snap-fitness\\\",\\\"name\\\":\\\"contract-928249-BladeIndustries.cct\\\",\\\"type\\\":\\\"Find All Valid Math Expressions\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[\\\"21246484\\\",37],\\\"description\\\":\\\"You are given the following string which contains only digits between 0 and 9:\\\\n\\\\n 21246484\\\\n\\\\n You are also given a target number of 37. Return all possible ways you can add the +(add), -(subtract), and *(multiply) operators to the string such that it evaluates to the target number. (Normal order of operations applies.)\\\\n\\\\n The provided answer should be an array of strings containing the valid expressions. The data provided by this problem is an array with two elements. The first element is the string of digits, while the second element is the target number:\\\\n\\\\n [\\\\\\\"21246484\\\\\\\", 37]\\\\n\\\\n NOTE: The order of evaluation expects script operator precedence NOTE: Numbers in the expression cannot have leading 0's. In other words, \\\\\\\"1+01\\\\\\\" is not a valid expression Examples:\\\\n\\\\n Input: digits = \\\\\\\"123\\\\\\\", target = 6\\\\n Output: [1+2+3, 1*2*3]\\\\n\\\\n Input: digits = \\\\\\\"105\\\\\\\", target = 5\\\\n Output: [1*0+5, 10-5]\\\"},{\\\"server\\\":\\\"solaris\\\",\\\"name\\\":\\\"contract-882299.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[8],[1,4],[4,4,9]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[8],\\\\n&nbsp;&nbsp;&nbsp;[1,4],\\\\n&nbsp;&nbsp;[4,4,9]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-751483-NWO.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"LgzLzLzLzLzLBOyzLB8OvisLB8O8O8O8O8Oq7dC48jNxpxpxpxpxpxpxxpxpXxpXxpXxpXHZXxpXxpX\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; LgzLzLzLzLzLBOyzLB8OvisLB8O8O8O8O8Oq7dC48jNxpxpxpxpxpxpxxpxpXxpXxpXxpXHZXxpXxpX\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"applied-energetics\\\",\\\"name\\\":\\\"contract-327756.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"ggggggggjjjjjjjjjCCCCCCCCCC7IIiiVVVVVttttttttttttuXXjjjjddyyyyyyyyQQQQ\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; ggggggggjjjjjjjjjCCCCCCCCCC7IIiiVVVVVttttttttttttuXXjjjjddyyyyyyyyQQQQ\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"fulcrumtech\\\",\\\"name\\\":\\\"contract-297619.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[33,[1,3,4,6,7,8,12,14,15,19]],\\\"description\\\":\\\"How many different distinct ways can the number 33 be written as a sum of integers contained in the set:\\\\n\\\\n [1,3,4,6,7,8,12,14,15,19]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"fulcrumtech\\\",\\\"name\\\":\\\"contract-500495.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[1],[3,7],[5,7,4],[2,2,8,1],[5,2,5,1,1],[5,4,1,2,2,6],[1,4,5,7,6,1,6],[7,8,3,7,9,3,6,7],[7,2,6,4,4,1,4,6,7],[4,1,8,4,4,9,1,6,4,2],[9,5,2,3,8,7,4,4,4,2,9],[1,1,1,8,8,7,6,1,2,5,3,6]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[3,7],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[5,7,4],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2,2,8,1],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[5,2,5,1,1],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[5,4,1,2,2,6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,4,5,7,6,1,6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[7,8,3,7,9,3,6,7],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[7,2,6,4,4,1,4,6,7],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[4,1,8,4,4,9,1,6,4,2],\\\\n&nbsp;&nbsp;&nbsp;[9,5,2,3,8,7,4,4,4,2,9],\\\\n&nbsp;&nbsp;[1,1,1,8,8,7,6,1,2,5,3,6]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"kuai-gong\\\",\\\"name\\\":\\\"contract-563784-BitRunners.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"(a))())a((a)a()a(\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n (a))())a((a)a()a(\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"kuai-gong\\\",\\\"name\\\":\\\"contract-975255.cct\\\",\\\"type\\\":\\\"Find All Valid Math Expressions\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[\\\"6683199557\\\",38],\\\"description\\\":\\\"You are given the following string which contains only digits between 0 and 9:\\\\n\\\\n 6683199557\\\\n\\\\n You are also given a target number of 38. Return all possible ways you can add the +(add), -(subtract), and *(multiply) operators to the string such that it evaluates to the target number. (Normal order of operations applies.)\\\\n\\\\n The provided answer should be an array of strings containing the valid expressions. The data provided by this problem is an array with two elements. The first element is the string of digits, while the second element is the target number:\\\\n\\\\n [\\\\\\\"6683199557\\\\\\\", 38]\\\\n\\\\n NOTE: The order of evaluation expects script operator precedence NOTE: Numbers in the expression cannot have leading 0's. In other words, \\\\\\\"1+01\\\\\\\" is not a valid expression Examples:\\\\n\\\\n Input: digits = \\\\\\\"123\\\\\\\", target = 6\\\\n Output: [1+2+3, 1*2*3]\\\\n\\\\n Input: digits = \\\\\\\"105\\\\\\\", target = 5\\\\n Output: [1*0+5, 10-5]\\\"},{\\\"server\\\":\\\"powerhouse-fitness\\\",\\\"name\\\":\\\"contract-445487-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"ZZZZZmllllll88jjJwggggggdddMxc0111111111AAAA22222222227SSvp66qqqqqggnnDiiVVI\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; ZZZZZmllllll88jjJwggggggdddMxc0111111111AAAA22222222227SSvp66qqqqqggnnDiiVVI\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"helios\\\",\\\"name\\\":\\\"contract-96034.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":45,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 45 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"galactic-cyber\\\",\\\"name\\\":\\\"contract-979969-BladeIndustries.cct\\\",\\\"type\\\":\\\"Find All Valid Math Expressions\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[\\\"39738\\\",64],\\\"description\\\":\\\"You are given the following string which contains only digits between 0 and 9:\\\\n\\\\n 39738\\\\n\\\\n You are also given a target number of 64. Return all possible ways you can add the +(add), -(subtract), and *(multiply) operators to the string such that it evaluates to the target number. (Normal order of operations applies.)\\\\n\\\\n The provided answer should be an array of strings containing the valid expressions. The data provided by this problem is an array with two elements. The first element is the string of digits, while the second element is the target number:\\\\n\\\\n [\\\\\\\"39738\\\\\\\", 64]\\\\n\\\\n NOTE: The order of evaluation expects script operator precedence NOTE: Numbers in the expression cannot have leading 0's. In other words, \\\\\\\"1+01\\\\\\\" is not a valid expression Examples:\\\\n\\\\n Input: digits = \\\\\\\"123\\\\\\\", target = 6\\\\n Output: [1+2+3, 1*2*3]\\\\n\\\\n Input: digits = \\\\\\\"105\\\\\\\", target = 5\\\\n Output: [1*0+5, 10-5]\\\"},{\\\"server\\\":\\\"catalyst\\\",\\\"name\\\":\\\"contract-299807-TianDiHui.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader III\\\",\\\"attemptsLeft\\\":9,\\\"input\\\":[27,70,101,47,17,115,9,135,64,195,189,196,174,11,8],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 27,70,101,47,17,115,9,135,64,195,189,196,174,11,8\\\\n\\\\n Determine the maximum possible profit you can earn using at most two transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0\\\"}]\"}}],[\"analytics/2023-07-16-07-01-BitRunners-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-16-07-01-BitRunners-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-14T18:42:29.092Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-14T18:42:29.092Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"Chongqing\\\",\\\"firstTime\\\":\\\"2023-07-14T18:42:29.093Z\\\"},{\\\"factionToMax\\\":\\\"NiteSec\\\",\\\"firstTime\\\":\\\"2023-07-14T19:25:47.953Z\\\"},{\\\"factionToMax\\\":\\\"BitRunners\\\",\\\"firstTime\\\":\\\"2023-07-16T00:08:31.564Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":37500,\\\"currentFactionRep\\\":0,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-14T18:42:29.093Z\\\"},\\\"augsBought\\\":[\\\"BitRunners Neurolink\\\",\\\"Artificial Bio-neural Network Implant\\\",\\\"Embedded Netburner Module Core Implant\\\",\\\"Cranial Signal Processors - Gen V\\\",\\\"PCMatrix\\\",\\\"Neural Accelerator\\\",\\\"Neuroreceptor Management Implant\\\",\\\"CashRoot Starter Kit\\\",\\\"Nanofiber Weave\\\",\\\"Augmented Targeting I\\\",\\\"Augmented Targeting II\\\",\\\"Nuoptimal Nootropic Injector Implant\\\"],\\\"moneySpent\\\":{\\\"augments\\\":216402166430.733,\\\"homeCores\\\":0,\\\"homeRam\\\":0,\\\"fluxGovernors\\\":695822032676.5732,\\\"repPurchased\\\":0},\\\"moneyLeft\\\":124475476249.71924,\\\"lastSaved\\\":\\\"2023-07-16T12:01:43.917Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":true,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":112500,\\\"currentFactionRep\\\":112500.98808245687,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-15T07:50:20.980Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":false,\\\"moneyIsGreaterThanTriggered\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$0.00\\\",\\\"moneyRightNow\\\":\\\"$4,889,904,294.25\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$21,378,646,141.86\\\",\\\"time\\\":\\\"2023-07-15T07:50:20.981Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":false,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$0.00\\\",\\\"moneyRightNow\\\":\\\"$1,036,699,675,357.03\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$216,402,166,430.73\\\",\\\"time\\\":\\\"2023-07-16T12:01:43.912Z\\\"}}\"}}],[\"contracts/2023-07-16T12:01:46.791Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-16T12:01:46.791Z.txt\",\"text\":\"[{\\\"server\\\":\\\"syscore\\\",\\\"name\\\":\\\"contract-247364-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader III\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[144,20,5,28,21,119,82,182,65,121,95,5,138,140,90,143,191,73,181,131,13,136,2,145,160,65,99,117,98,187,164,135,2,98,188,25,15,142,107,84,119,127],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 144,20,5,28,21,119,82,182,65,121,95,5,138,140,90,143,191,73,181,131,13,136,2,145,160,65,99,117,98,187,164,135,2,98,188,25,15,142,107,84,119,127\\\\n\\\\n Determine the maximum possible profit you can earn using at most two transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0\\\"}]\"}}],[\"contracts/2023-07-16T13:38:32.194Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-16T13:38:32.194Z.txt\",\"text\":\"[{\\\"server\\\":\\\"deltaone\\\",\\\"name\\\":\\\"contract-47298.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[4,-8,-10,2,-7,6,-10,3,4,5,-1,2,-9,6,-7,-6,-6,8,-7],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 4,-8,-10,2,-7,6,-10,3,4,5,-1,2,-9,6,-7,-6,-6,8,-7\\\"},{\\\"server\\\":\\\"defcomm\\\",\\\"name\\\":\\\"contract-118250.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"0010000000000000000000000001001111100111011001111010010000101011\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '0010000000000000000000000001001111100111011001111010010000101011' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"kuai-gong\\\",\\\"name\\\":\\\"contract-837393-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[5,0,0,5,0,6,4,0,2,0],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 5,0,0,5,0,6,4,0,2,0\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"solaris\\\",\\\"name\\\":\\\"contract-313690.cct\\\",\\\"type\\\":\\\"Array Jumping Game II\\\",\\\"attemptsLeft\\\":3,\\\"input\\\":[1,3,3,3,5,5,2,3,2,1,0,1,4,1,5,0,3,1,1,2,2],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 1,3,3,3,5,5,2,3,2,1,0,1,4,1,5,0,3,1,1,2,2\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine the minimum number of jumps to reach the end of the array.\\\\n\\\\n If it's impossible to reach the end, then the answer should be 0.\\\"},{\\\"server\\\":\\\"galactic-cyber\\\",\\\"name\\\":\\\"contract-676548-CyberSec.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\")(())()aa))\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n )(())()aa))\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"rho-construction\\\",\\\"name\\\":\\\"contract-116290.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[9,4,6,-6,0,6,-8,-7,-1,7,8,-4,-9,9],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 9,4,6,-6,0,6,-8,-7,-1,7,8,-4,-9,9\\\"}]\"}}],[\"contracts/failure/aevum-police-contract-796033-BladeIndustries.cct-AlgorithmicStockTraderIII.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/failure/aevum-police-contract-796033-BladeIndustries.cct-AlgorithmicStockTraderIII.txt\",\"text\":\"{\\\"contract\\\":{\\\"server\\\":\\\"aevum-police\\\",\\\"name\\\":\\\"contract-796033-BladeIndustries.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader III\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[168,20,198,32,156,13,106,17,148,85,196,76,152,109,190,78,182,11,96,65,148,73,192,44,197,3,147,115,130],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 168,145,20,198,32,89,156,94,13,106,17,148,85,196,76,152,109,190,78,182,37,11,20,49,96,65,71,148,73,192,188,67,44,90,167,197,3,147,115,130\\\\n\\\\n Determine the maximum possible profit you can earn using at most two transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0\\\"},\\\"wrongResult\\\":359}\"}}],[\"contracts/failure/phantasy-contract-768611.cct-AlgorithmicStockTraderI.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/failure/phantasy-contract-768611.cct-AlgorithmicStockTraderI.txt\",\"text\":\"{\\\"contract\\\":{\\\"server\\\":\\\"phantasy\\\",\\\"name\\\":\\\"contract-768611.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader I\\\",\\\"attemptsLeft\\\":5,\\\"input\\\":[44,148,32,191,62,135,29,79,33,122,36,122,7,116,4,128,28,123,6,163,138,154,34,174,151,157],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 44,103,148,32,191,62,135,29,79,33,122,105,36,41,122,103,7,67,116,4,119,128,28,123,6,163,138,154,80,34,174,151,157,94,89\\\\n\\\\n Determine the maximum possible profit you can earn using at most one transaction (i.e. you can only buy and sell the stock once). If no profit can be made then the answer should be 0. Note that you have to buy the stock before you can sell it\\\"},\\\"wrongResult\\\":159}\"}}],[\"contracts/2023-07-16T20:19:53.413Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-16T20:19:53.413Z.txt\",\"text\":\"[{\\\"server\\\":\\\"phantasy\\\",\\\"name\\\":\\\"contract-768611.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader I\\\",\\\"attemptsLeft\\\":4,\\\"input\\\":[44,103,148,32,191,62,135,29,79,33,122,105,36,41,122,103,7,67,116,4,119,128,28,123,6,163,138,154,80,34,174,151,157,94,89],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 44,103,148,32,191,62,135,29,79,33,122,105,36,41,122,103,7,67,116,4,119,128,28,123,6,163,138,154,80,34,174,151,157,94,89\\\\n\\\\n Determine the maximum possible profit you can earn using at most one transaction (i.e. you can only buy and sell the stock once). If no profit can be made then the answer should be 0. Note that you have to buy the stock before you can sell it\\\"},{\\\"server\\\":\\\"crush-fitness\\\",\\\"name\\\":\\\"contract-687545.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,1,1,0,0,0,0,1,1,1,0],[0,0,0,1,1,0,0,1,1,0,0],[0,0,0,1,0,0,1,0,1,1,0],[0,1,0,0,0,1,0,1,0,0,1],[1,1,0,1,0,0,0,0,1,1,0],[0,0,0,1,0,1,0,1,0,1,1],[0,0,1,1,1,1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,1],[1,1,0,1,1,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,0],[1,1,1,1,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,1,1,0,0,0,0,1,1,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,1,1,0,0,1,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,1,0,0,1,0,1,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,0,1,0,1,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[1,1,0,1,0,0,0,0,1,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,1,0,1,0,1,0,1,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,1,1,1,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,0,0,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[1,1,0,1,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,0,0,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[1,1,1,1,0,0,0,0,0,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"zb-institute\\\",\\\"name\\\":\\\"contract-939391.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"62285191\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 62285191\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"},{\\\"server\\\":\\\"I.I.I.I\\\",\\\"name\\\":\\\"contract-972324.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"NNNNNNNNNNNNNNPYYYYYYYY2nnnggw4WWWWWWW66666666666666eeQQKKEEERRP535tt\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; NNNNNNNNNNNNNNPYYYYYYYY2nnnggw4WWWWWWW66666666666666eeQQKKEEERRP535tt\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"lexo-corp\\\",\\\"name\\\":\\\"contract-697251.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[7,2,8,5,4,3,0,9],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 7,2,8,5,4,3,0,9\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"galactic-cyber\\\",\\\"name\\\":\\\"contract-202226.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":637990270,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 637990270?\\\"},{\\\"server\\\":\\\"CSEC\\\",\\\"name\\\":\\\"contract-558172.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"(a)a)(()()()\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n (a)a)(()()()\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"neo-net\\\",\\\"name\\\":\\\"contract-218953-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"((((a))a()))()((((\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n ((((a))a()))()((((\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"aevum-police\\\",\\\"name\\\":\\\"contract-796033-BladeIndustries.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader III\\\",\\\"attemptsLeft\\\":9,\\\"input\\\":[168,145,20,198,32,89,156,94,13,106,17,148,85,196,76,152,109,190,78,182,37,11,20,49,96,65,71,148,73,192,188,67,44,90,167,197,3,147,115,130],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 168,145,20,198,32,89,156,94,13,106,17,148,85,196,76,152,109,190,78,182,37,11,20,49,96,65,71,148,73,192,188,67,44,90,167,197,3,147,115,130\\\\n\\\\n Determine the maximum possible profit you can earn using at most two transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0\\\"},{\\\"server\\\":\\\"megacorp\\\",\\\"name\\\":\\\"contract-845127-BachmanAssociates.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":1625456266023211,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 1625456266023211 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"}]\"}}],[\"contracts/failure/run4theh111z-contract-988917.cct-AlgorithmicStockTraderIV.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/failure/run4theh111z-contract-988917.cct-AlgorithmicStockTraderIV.txt\",\"text\":\"{\\\"contract\\\":{\\\"server\\\":\\\"run4theh111z\\\",\\\"name\\\":\\\"contract-988917.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader IV\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[3,[71,149,42,177,70,119,53,125,21,101,37,117,81,133,83,128,84,105]],\\\"description\\\":\\\"You are given the following array with two elements:\\\\n\\\\n [3, [71,129,131,149,117,42,177,72,70,119,80,53,113,125,21,101,61,37,40,117,81,106,133,83,128,84,105]]\\\\n\\\\n The first element is an integer k. The second element is an array of stock prices (which are numbers) where the i-th element represents the stock price on day i.\\\\n\\\\n Determine the maximum possible profit you can earn using at most k transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you can buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0.\\\"},\\\"wrongResult\\\":295}\"}}],[\"contracts/2023-07-17T04:41:28.605Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-17T04:41:28.605Z.txt\",\"text\":\"[{\\\"server\\\":\\\"zer0\\\",\\\"name\\\":\\\"contract-43393.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,1,0,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,1,0,0,0,0,0],[0,0,1,0,1,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,1,0,0,0,0,0,0,0,0,0,0,\\\\n1,0,0,0,0,0,1,0,0,0,0,0,\\\\n0,0,1,0,1,0,0,0,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"phantasy\\\",\\\"name\\\":\\\"contract-768611.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader I\\\",\\\"attemptsLeft\\\":4,\\\"input\\\":[44,103,148,32,191,62,135,29,79,33,122,105,36,41,122,103,7,67,116,4,119,128,28,123,6,163,138,154,80,34,174,151,157,94,89],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 44,103,148,32,191,62,135,29,79,33,122,105,36,41,122,103,7,67,116,4,119,128,28,123,6,163,138,154,80,34,174,151,157,94,89\\\\n\\\\n Determine the maximum possible profit you can earn using at most one transaction (i.e. you can only buy and sell the stock once). If no profit can be made then the answer should be 0. Note that you have to buy the stock before you can sell it\\\"},{\\\"server\\\":\\\"crush-fitness\\\",\\\"name\\\":\\\"contract-687545.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,1,1,0,0,0,0,1,1,1,0],[0,0,0,1,1,0,0,1,1,0,0],[0,0,0,1,0,0,1,0,1,1,0],[0,1,0,0,0,1,0,1,0,0,1],[1,1,0,1,0,0,0,0,1,1,0],[0,0,0,1,0,1,0,1,0,1,1],[0,0,1,1,1,1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,1],[1,1,0,1,1,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,0],[1,1,1,1,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,1,1,0,0,0,0,1,1,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,1,1,0,0,1,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,1,0,0,1,0,1,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,0,1,0,1,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[1,1,0,1,0,0,0,0,1,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,1,0,1,0,1,0,1,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,1,1,1,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,0,0,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[1,1,0,1,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,0,0,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[1,1,1,1,0,0,0,0,0,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"zb-institute\\\",\\\"name\\\":\\\"contract-939391.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"62285191\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 62285191\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"},{\\\"server\\\":\\\"I.I.I.I\\\",\\\"name\\\":\\\"contract-972324.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"NNNNNNNNNNNNNNPYYYYYYYY2nnnggw4WWWWWWW66666666666666eeQQKKEEERRP535tt\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; NNNNNNNNNNNNNNPYYYYYYYY2nnnggw4WWWWWWW66666666666666eeQQKKEEERRP535tt\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"lexo-corp\\\",\\\"name\\\":\\\"contract-697251.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[7,2,8,5,4,3,0,9],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 7,2,8,5,4,3,0,9\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"galactic-cyber\\\",\\\"name\\\":\\\"contract-202226.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":637990270,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 637990270?\\\"},{\\\"server\\\":\\\"max-hardware\\\",\\\"name\\\":\\\"contract-129622.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"71934678\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 71934678\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"},{\\\"server\\\":\\\"CSEC\\\",\\\"name\\\":\\\"contract-558172.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"(a)a)(()()()\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n (a)a)(()()()\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"neo-net\\\",\\\"name\\\":\\\"contract-218953-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"((((a))a()))()((((\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n ((((a))a()))()((((\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"syscore\\\",\\\"name\\\":\\\"contract-157685-CyberSec.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"11100110000001001111011110000011\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '11100110000001001111011110000011' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"aevum-police\\\",\\\"name\\\":\\\"contract-796033-BladeIndustries.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader III\\\",\\\"attemptsLeft\\\":9,\\\"input\\\":[168,145,20,198,32,89,156,94,13,106,17,148,85,196,76,152,109,190,78,182,37,11,20,49,96,65,71,148,73,192,188,67,44,90,167,197,3,147,115,130],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 168,145,20,198,32,89,156,94,13,106,17,148,85,196,76,152,109,190,78,182,37,11,20,49,96,65,71,148,73,192,188,67,44,90,167,197,3,147,115,130\\\\n\\\\n Determine the maximum possible profit you can earn using at most two transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0\\\"},{\\\"server\\\":\\\"defcomm\\\",\\\"name\\\":\\\"contract-274937-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":675368096,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 675368096?\\\"},{\\\"server\\\":\\\"univ-energy\\\",\\\"name\\\":\\\"contract-21596.cct\\\",\\\"type\\\":\\\"Proper 2-Coloring of a Graph\\\",\\\"attemptsLeft\\\":5,\\\"input\\\":[13,[[6,9],[3,12],[0,8],[2,9],[10,12],[1,3],[4,11],[0,10],[7,9],[2,7],[7,11],[5,9],[4,5],[10,11],[8,11],[2,3],[9,12],[6,8],[1,7],[3,11],[1,4],[0,3],[3,5]]],\\\"description\\\":\\\"You are given the following data, representing a graph:\\\\n [13,[[6,9],[3,12],[0,8],[2,9],[10,12],[1,3],[4,11],[0,10],[7,9],[2,7],[7,11],[5,9],[4,5],[10,11],[8,11],[2,3],[9,12],[6,8],[1,7],[3,11],[1,4],[0,3],[3,5]]]\\\\n Note that \\\\\\\"graph\\\\\\\", as used here, refers to the field of graph theory, and has no relation to statistics or plotting. The first element of the data represents the number of vertices in the graph. Each vertex is a unique number between 0 and 12. The next element of the data represents the edges of the graph. Two vertices u,v in a graph are said to be adjacent if there exists an edge [u,v]. Note that an edge [u,v] is the same as an edge [v,u], as order does not matter. You must construct a 2-coloring of the graph, meaning that you have to assign each vertex in the graph a \\\\\\\"color\\\\\\\", either 0 or 1, such that no two adjacent vertices have the same color. Submit your answer in the form of an array, where element i represents the color of vertex i. If it is impossible to construct a 2-coloring of the given graph, instead submit an empty array.\\\\n\\\\n Examples:\\\\n\\\\n Input: [4, [[0, 2], [0, 3], [1, 2], [1, 3]]]\\\\n Output: [0, 0, 1, 1]\\\\n\\\\n Input: [3, [[0, 1], [0, 2], [1, 2]]]\\\\n Output: []\\\"},{\\\"server\\\":\\\"4sigma\\\",\\\"name\\\":\\\"contract-659175-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,0,0],[0,1,0,0,0,1,1,0,0],[0,0,0,0,0,0,1,0,0],[0,1,0,0,0,1,0,0,0],[1,0,1,0,0,0,0,0,0],[1,0,1,0,0,0,0,0,0],[0,1,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,0,0,0,0,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,0,1,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,0,1,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[1,0,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[1,0,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,0,0,0,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"run4theh111z\\\",\\\"name\\\":\\\"contract-988917.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader IV\\\",\\\"attemptsLeft\\\":9,\\\"input\\\":[3,[71,129,131,149,117,42,177,72,70,119,80,53,113,125,21,101,61,37,40,117,81,106,133,83,128,84,105]],\\\"description\\\":\\\"You are given the following array with two elements:\\\\n\\\\n [3, [71,129,131,149,117,42,177,72,70,119,80,53,113,125,21,101,61,37,40,117,81,106,133,83,128,84,105]]\\\\n\\\\n The first element is an integer k. The second element is an array of stock prices (which are numbers) where the i-th element represents the stock price on day i.\\\\n\\\\n Determine the maximum possible profit you can earn using at most k transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you can buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0.\\\"},{\\\"server\\\":\\\"fulcrumtech\\\",\\\"name\\\":\\\"contract-960938-NWO.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[-8,-4,10,-10,-7,5,1,1,0],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n -8,-4,10,-10,-7,5,1,1,0\\\"},{\\\"server\\\":\\\"megacorp\\\",\\\"name\\\":\\\"contract-845127-BachmanAssociates.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":1625456266023211,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 1625456266023211 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"}]\"}}],[\"analytics/2023-07-17-06-06-Daedalus-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-17-06-06-Daedalus-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-16T15:53:06.295Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-16T15:53:06.295Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"Bachman & Associates\\\",\\\"firstTime\\\":\\\"2023-07-16T15:53:06.295Z\\\"},{\\\"factionToMax\\\":\\\"NWO\\\",\\\"firstTime\\\":\\\"2023-07-17T01:31:18.498Z\\\"},{\\\"factionToMax\\\":\\\"Daedalus\\\",\\\"firstTime\\\":\\\"2023-07-17T04:41:47.261Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":375000,\\\"currentFactionRep\\\":0.46197959594147,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-16T15:53:06.295Z\\\"},\\\"augsBought\\\":[\\\"Hydroflame Left Arm\\\",\\\"Embedded Netburner Module Core V3 Upgrade\\\",\\\"Embedded Netburner Module Direct Memory Access Upgrade\\\",\\\"Embedded Netburner Module Analyze Engine\\\",\\\"Xanipher\\\",\\\"NEMEAN Subdermal Weave\\\",\\\"Synthetic Heart\\\",\\\"Synfibril Muscle\\\",\\\"Power Recirculation Core\\\",\\\"Neurotrainer III\\\",\\\"The Red Pill\\\"],\\\"moneySpent\\\":{\\\"augments\\\":3024870935197.57,\\\"homeCores\\\":3164062500000,\\\"homeRam\\\":9996095182970.555,\\\"fluxGovernors\\\":712114491862.0477,\\\"repPurchased\\\":0},\\\"moneyLeft\\\":164737053720.6671,\\\"lastSaved\\\":\\\"2023-07-17T11:06:19.607Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":true,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":true,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":2500000,\\\"currentFactionRep\\\":2500111.4825186455,\\\"targetRepForGettingToFavor\\\":0,\\\"time\\\":\\\"2023-07-17T11:06:15.484Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":false,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$0.00\\\",\\\"moneyRightNow\\\":\\\"$9,434,446,404,033.54\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$3,024,870,935,197.57\\\",\\\"time\\\":\\\"2023-07-17T11:06:15.484Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":false,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$0.00\\\",\\\"moneyRightNow\\\":\\\"$17,061,880,163,750.84\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$3,024,870,935,197.57\\\",\\\"time\\\":\\\"2023-07-17T11:06:19.605Z\\\"},\\\"amountOfRamIncrease\\\":null,\\\"amountOfCoresIncrease\\\":null}\"}}],[\"contracts/2023-07-17T11:06:22.474Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-17T11:06:22.474Z.txt\",\"text\":\"[]\"}}],[\"contracts/failure/zer0-contract-752976-Chongqing.cct-AlgorithmicStockTraderIII.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/failure/zer0-contract-752976-Chongqing.cct-AlgorithmicStockTraderIII.txt\",\"text\":\"{\\\"contract\\\":{\\\"server\\\":\\\"zer0\\\",\\\"name\\\":\\\"contract-752976-Chongqing.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader III\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[79,180,45,175,10,141,24,186,19,194,44,191,25,190,33,200,11,91,37,176,31,50,35,191],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 79,180,111,45,175,35,10,141,104,80,64,24,72,186,19,94,118,138,194,44,191,25,190,33,200,11,91,37,176,176,31,50,35,191,114,95\\\\n\\\\n Determine the maximum possible profit you can earn using at most two transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0\\\"},\\\"wrongResult\\\":357}\"}}],[\"contracts/failure/icarus-contract-151400.cct-AlgorithmicStockTraderIII.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/failure/icarus-contract-151400.cct-AlgorithmicStockTraderIII.txt\",\"text\":\"{\\\"contract\\\":{\\\"server\\\":\\\"icarus\\\",\\\"name\\\":\\\"contract-151400.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader III\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[8,169,49,195,51,185,20,161,31,159,45,191,44,165,7,158,16,199,3,162,70,139,1,185],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 8,39,169,89,49,95,195,51,55,185,183,20,117,161,31,144,159,45,170,191,44,165,156,101,7,103,158,106,105,26,16,143,199,118,71,5,3,73,92,162,70,139,1,15,185\\\\n\\\\n Determine the maximum possible profit you can earn using at most two transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0\\\"},\\\"wrongResult\\\":376}\"}}],[\"contracts/2023-07-17T11:37:10.279Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-17T11:37:10.279Z.txt\",\"text\":\"[{\\\"server\\\":\\\"n00dles\\\",\\\"name\\\":\\\"contract-466235-CyberSec.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":12,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 12 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"foodnstuff\\\",\\\"name\\\":\\\"contract-114396-BladeIndustries.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[-10,-4,-5,-4,-8,9,0,1,1,-2,3,6,7,3,-4,-7,5,-8],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n -10,-4,-5,-4,-8,9,0,1,1,-2,3,6,7,3,-4,-7,5,-8\\\"},{\\\"server\\\":\\\"foodnstuff\\\",\\\"name\\\":\\\"contract-170562.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":203303262363,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 203303262363 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"},{\\\"server\\\":\\\"foodnstuff\\\",\\\"name\\\":\\\"contract-617759.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[4,3],\\\"description\\\":\\\"You are in a grid with 4 rows and 3 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [4, 3]\\\"},{\\\"server\\\":\\\"darkweb\\\",\\\"name\\\":\\\"contract-668090.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[2,11],[21,28],[3,7],[3,5]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[2,11],[21,28],[3,7],[3,5]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"zer0\\\",\\\"name\\\":\\\"contract-752976-Chongqing.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader III\\\",\\\"attemptsLeft\\\":9,\\\"input\\\":[79,180,111,45,175,35,10,141,104,80,64,24,72,186,19,94,118,138,194,44,191,25,190,33,200,11,91,37,176,176,31,50,35,191,114,95],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 79,180,111,45,175,35,10,141,104,80,64,24,72,186,19,94,118,138,194,44,191,25,190,33,200,11,91,37,176,176,31,50,35,191,114,95\\\\n\\\\n Determine the maximum possible profit you can earn using at most two transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0\\\"},{\\\"server\\\":\\\"zb-institute\\\",\\\"name\\\":\\\"contract-982890-CyberSec.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[13,11],\\\"description\\\":\\\"You are in a grid with 13 rows and 11 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [13, 11]\\\"},{\\\"server\\\":\\\"I.I.I.I\\\",\\\"name\\\":\\\"contract-700283-TianDiHui.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":65,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 65 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"aerocorp\\\",\\\"name\\\":\\\"contract-879575-NWO.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[24,30],[4,13],[3,7],[3,13],[15,22],[7,16]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[24,30],[4,13],[3,7],[3,13],[15,22],[7,16]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"solaris\\\",\\\"name\\\":\\\"contract-139555.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"X2yt0amgB78Y78Y78kY78kY78kY00000RaRuvrbbbbbbbbrbiiiiiiiiiiDirdp\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; X2yt0amgB78Y78Y78kY78kY78kY00000RaRuvrbbbbbbbbrbiiiiiiiiiiDirdp\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"taiyang-digital\\\",\\\"name\\\":\\\"contract-507336.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":177120045,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 177120045 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"},{\\\"server\\\":\\\"4sigma\\\",\\\"name\\\":\\\"contract-284449.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"2715148182\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 2715148182\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"},{\\\"server\\\":\\\"nwo\\\",\\\"name\\\":\\\"contract-853005-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[10,0,5,8,0,0,8,5,0,0,7,9,0,8,10,7,10,9,0],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 10,0,5,8,0,0,8,5,0,0,7,9,0,8,10,7,10,9,0\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"nwo\\\",\\\"name\\\":\\\"contract-945507-BladeIndustries.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[0,4,0,2,10,0,10,6,8],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 0,4,0,2,10,0,10,6,8\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"ecorp\\\",\\\"name\\\":\\\"contract-78126.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[11,18],[12,21],[4,13],[2,6],[22,26],[10,19],[3,11],[17,23],[4,6],[10,12],[17,22],[15,23],[24,27],[21,30],[15,17],[6,11],[15,21]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[11,18],[12,21],[4,13],[2,6],[22,26],[10,19],[3,11],[17,23],[4,6],[10,12],[17,22],[15,23],[24,27],[21,30],[15,17],[6,11],[15,21]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"fulcrumassets\\\",\\\"name\\\":\\\"contract-180242.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[9,18],[25,27],[24,30],[16,17],[25,31],[4,14],[13,17],[25,27],[25,29],[16,21],[14,19],[24,34],[21,30],[18,22]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[9,18],[25,27],[24,30],[16,17],[25,31],[4,14],[13,17],[25,27],[25,29],[16,21],[14,19],[24,34],[21,30],[18,22]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"rho-construction\\\",\\\"name\\\":\\\"contract-129080.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[7,10,0,10,10,10,7,0,5,0,10,6,7,0,5,8,9,6,0,1,7,5,5,0,2],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 7,10,0,10,10,10,7,0,5,0,10,6,7,0,5,8,9,6,0,1,7,5,5,0,2\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"the-hub\\\",\\\"name\\\":\\\"contract-183995.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"59391098\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 59391098\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"},{\\\"server\\\":\\\"icarus\\\",\\\"name\\\":\\\"contract-151400.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader III\\\",\\\"attemptsLeft\\\":9,\\\"input\\\":[8,39,169,89,49,95,195,51,55,185,183,20,117,161,31,144,159,45,170,191,44,165,156,101,7,103,158,106,105,26,16,143,199,118,71,5,3,73,92,162,70,139,1,15,185],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 8,39,169,89,49,95,195,51,55,185,183,20,117,161,31,144,159,45,170,191,44,165,156,101,7,103,158,106,105,26,16,143,199,118,71,5,3,73,92,162,70,139,1,15,185\\\\n\\\\n Determine the maximum possible profit you can earn using at most two transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0\\\"}]\"}}],[\"analytics/2023-07-18-19-23-CyberSec-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-18-19-23-CyberSec-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-17T15:01:59.454Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-17T15:01:59.454Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"CyberSec\\\",\\\"firstTime\\\":\\\"2023-07-17T15:01:59.454Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":56250,\\\"currentFactionRep\\\":9575.57211897485,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-17T15:01:59.454Z\\\"},\\\"augsBought\\\":[\\\"Cranial Signal Processors - Gen I\\\",\\\"Cranial Signal Processors - Gen II\\\",\\\"BitWire\\\",\\\"Synaptic Enhancement Implant\\\",\\\"Neurotrainer I\\\",\\\"Wired Reflexes\\\"],\\\"moneySpent\\\":{\\\"augments\\\":1527220125,\\\"homeCores\\\":0,\\\"homeRam\\\":0,\\\"fluxGovernors\\\":105853232.25,\\\"repPurchased\\\":0},\\\"moneyLeft\\\":180990271.22235352,\\\"lastSaved\\\":\\\"2023-07-18T00:23:57.041Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":true,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":56250,\\\"currentFactionRep\\\":56366.304164084075,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-18T00:17:40.293Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":false,\\\"moneyIsGreaterThanTriggered\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$417,766,412.90\\\",\\\"moneyRightNow\\\":\\\"$15,180.11\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$1,527,220,125.00\\\",\\\"time\\\":\\\"2023-07-18T00:17:40.297Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":false,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$427,568,338.06\\\",\\\"moneyRightNow\\\":\\\"$1,814,063,628.47\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$1,527,220,125.00\\\",\\\"time\\\":\\\"2023-07-18T00:23:57.034Z\\\"}}\"}}],[\"contracts/2023-07-18T00:23:59.915Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-18T00:23:59.915Z.txt\",\"text\":\"[]\"}}],[\"contracts/failure/joesguns-contract-665303-BachmanAssociates.cct-AlgorithmicStockTraderIV.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/failure/joesguns-contract-665303-BachmanAssociates.cct-AlgorithmicStockTraderIV.txt\",\"text\":\"{\\\"contract\\\":{\\\"server\\\":\\\"joesguns\\\",\\\"name\\\":\\\"contract-665303-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader IV\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[9,[27,130,53,133,11,164,19,177,78,176,28,137,108,178,11,165,55,138,84,100,14,124,6,159,46,161,2,122]],\\\"description\\\":\\\"You are given the following array with two elements:\\\\n\\\\n [9, [27,130,128,53,133,85,11,57,164,78,19,147,177,78,176,122,28,102,137,108,178,79,11,99,165,153,125,55,72,138,123,90,84,100,14,124,7,6,86,159,141,118,46,161,27,3,2,122]]\\\\n\\\\n The first element is an integer k. The second element is an array of stock prices (which are numbers) where the i-th element represents the stock price on day i.\\\\n\\\\n Determine the maximum possible profit you can earn using at most k transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you can buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0.\\\"},\\\"wrongResult\\\":1216}\"}}],[\"contracts/2023-07-18T11:38:52.713Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-18T11:38:52.713Z.txt\",\"text\":\"[{\\\"server\\\":\\\"joesguns\\\",\\\"name\\\":\\\"contract-665303-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader IV\\\",\\\"attemptsLeft\\\":9,\\\"input\\\":[9,[27,130,128,53,133,85,11,57,164,78,19,147,177,78,176,122,28,102,137,108,178,79,11,99,165,153,125,55,72,138,123,90,84,100,14,124,7,6,86,159,141,118,46,161,27,3,2,122]],\\\"description\\\":\\\"You are given the following array with two elements:\\\\n\\\\n [9, [27,130,128,53,133,85,11,57,164,78,19,147,177,78,176,122,28,102,137,108,178,79,11,99,165,153,125,55,72,138,123,90,84,100,14,124,7,6,86,159,141,118,46,161,27,3,2,122]]\\\\n\\\\n The first element is an integer k. The second element is an array of stock prices (which are numbers) where the i-th element represents the stock price on day i.\\\\n\\\\n Determine the maximum possible profit you can earn using at most k transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you can buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0.\\\"},{\\\"server\\\":\\\"iron-gym\\\",\\\"name\\\":\\\"contract-351757-TianDiHui.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[153,[2,5,6,9,10,11,14,15,16]],\\\"description\\\":\\\"How many different distinct ways can the number 153 be written as a sum of integers contained in the set:\\\\n\\\\n [2,5,6,9,10,11,14,15,16]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"neo-net\\\",\\\"name\\\":\\\"contract-839291-Chongqing.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":78,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 78 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"computek\\\",\\\"name\\\":\\\"contract-872421.cct\\\",\\\"type\\\":\\\"Find All Valid Math Expressions\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[\\\"9909267137\\\",40],\\\"description\\\":\\\"You are given the following string which contains only digits between 0 and 9:\\\\n\\\\n 9909267137\\\\n\\\\n You are also given a target number of 40. Return all possible ways you can add the +(add), -(subtract), and *(multiply) operators to the string such that it evaluates to the target number. (Normal order of operations applies.)\\\\n\\\\n The provided answer should be an array of strings containing the valid expressions. The data provided by this problem is an array with two elements. The first element is the string of digits, while the second element is the target number:\\\\n\\\\n [\\\\\\\"9909267137\\\\\\\", 40]\\\\n\\\\n NOTE: The order of evaluation expects script operator precedence NOTE: Numbers in the expression cannot have leading 0's. In other words, \\\\\\\"1+01\\\\\\\" is not a valid expression Examples:\\\\n\\\\n Input: digits = \\\\\\\"123\\\\\\\", target = 6\\\\n Output: [1+2+3, 1*2*3]\\\\n\\\\n Input: digits = \\\\\\\"105\\\\\\\", target = 5\\\\n Output: [1*0+5, 10-5]\\\"},{\\\"server\\\":\\\"nectar-net\\\",\\\"name\\\":\\\"contract-984796-ECorp.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[37,[5,6,8,9,11,12,13,16,17,18]],\\\"description\\\":\\\"How many different distinct ways can the number 37 be written as a sum of integers contained in the set:\\\\n\\\\n [5,6,8,9,11,12,13,16,17,18]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"}]\"}}],[\"contracts/2023-07-19T01:25:07.967Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-19T01:25:07.967Z.txt\",\"text\":\"[{\\\"server\\\":\\\"joesguns\\\",\\\"name\\\":\\\"contract-665303-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader IV\\\",\\\"attemptsLeft\\\":9,\\\"input\\\":[9,[27,130,128,53,133,85,11,57,164,78,19,147,177,78,176,122,28,102,137,108,178,79,11,99,165,153,125,55,72,138,123,90,84,100,14,124,7,6,86,159,141,118,46,161,27,3,2,122]],\\\"description\\\":\\\"You are given the following array with two elements:\\\\n\\\\n [9, [27,130,128,53,133,85,11,57,164,78,19,147,177,78,176,122,28,102,137,108,178,79,11,99,165,153,125,55,72,138,123,90,84,100,14,124,7,6,86,159,141,118,46,161,27,3,2,122]]\\\\n\\\\n The first element is an integer k. The second element is an array of stock prices (which are numbers) where the i-th element represents the stock price on day i.\\\\n\\\\n Determine the maximum possible profit you can earn using at most k transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you can buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0.\\\"},{\\\"server\\\":\\\"iron-gym\\\",\\\"name\\\":\\\"contract-351757-TianDiHui.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[153,[2,5,6,9,10,11,14,15,16]],\\\"description\\\":\\\"How many different distinct ways can the number 153 be written as a sum of integers contained in the set:\\\\n\\\\n [2,5,6,9,10,11,14,15,16]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"neo-net\\\",\\\"name\\\":\\\"contract-839291-Chongqing.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":78,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 78 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"computek\\\",\\\"name\\\":\\\"contract-872421.cct\\\",\\\"type\\\":\\\"Find All Valid Math Expressions\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[\\\"9909267137\\\",40],\\\"description\\\":\\\"You are given the following string which contains only digits between 0 and 9:\\\\n\\\\n 9909267137\\\\n\\\\n You are also given a target number of 40. Return all possible ways you can add the +(add), -(subtract), and *(multiply) operators to the string such that it evaluates to the target number. (Normal order of operations applies.)\\\\n\\\\n The provided answer should be an array of strings containing the valid expressions. The data provided by this problem is an array with two elements. The first element is the string of digits, while the second element is the target number:\\\\n\\\\n [\\\\\\\"9909267137\\\\\\\", 40]\\\\n\\\\n NOTE: The order of evaluation expects script operator precedence NOTE: Numbers in the expression cannot have leading 0's. In other words, \\\\\\\"1+01\\\\\\\" is not a valid expression Examples:\\\\n\\\\n Input: digits = \\\\\\\"123\\\\\\\", target = 6\\\\n Output: [1+2+3, 1*2*3]\\\\n\\\\n Input: digits = \\\\\\\"105\\\\\\\", target = 5\\\\n Output: [1*0+5, 10-5]\\\"},{\\\"server\\\":\\\"nectar-net\\\",\\\"name\\\":\\\"contract-984796-ECorp.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[37,[5,6,8,9,11,12,13,16,17,18]],\\\"description\\\":\\\"How many different distinct ways can the number 37 be written as a sum of integers contained in the set:\\\\n\\\\n [5,6,8,9,11,12,13,16,17,18]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"}]\"}}],[\"contracts/2023-07-19T11:36:24.027Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-19T11:36:24.027Z.txt\",\"text\":\"[{\\\"server\\\":\\\"joesguns\\\",\\\"name\\\":\\\"contract-281744.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[8,9,4,10,-4,1,8,3,-5,10,-10,2,-10,-1,10,8,1,-5],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 8,9,4,10,-4,1,8,3,-5,10,-10,2,-10,-1,10,8,1,-5\\\"},{\\\"server\\\":\\\"joesguns\\\",\\\"name\\\":\\\"contract-665303-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader IV\\\",\\\"attemptsLeft\\\":9,\\\"input\\\":[9,[27,130,128,53,133,85,11,57,164,78,19,147,177,78,176,122,28,102,137,108,178,79,11,99,165,153,125,55,72,138,123,90,84,100,14,124,7,6,86,159,141,118,46,161,27,3,2,122]],\\\"description\\\":\\\"You are given the following array with two elements:\\\\n\\\\n [9, [27,130,128,53,133,85,11,57,164,78,19,147,177,78,176,122,28,102,137,108,178,79,11,99,165,153,125,55,72,138,123,90,84,100,14,124,7,6,86,159,141,118,46,161,27,3,2,122]]\\\\n\\\\n The first element is an integer k. The second element is an array of stock prices (which are numbers) where the i-th element represents the stock price on day i.\\\\n\\\\n Determine the maximum possible profit you can earn using at most k transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you can buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0.\\\"},{\\\"server\\\":\\\"iron-gym\\\",\\\"name\\\":\\\"contract-351757-TianDiHui.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[153,[2,5,6,9,10,11,14,15,16]],\\\"description\\\":\\\"How many different distinct ways can the number 153 be written as a sum of integers contained in the set:\\\\n\\\\n [2,5,6,9,10,11,14,15,16]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"zer0\\\",\\\"name\\\":\\\"contract-800650-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Find All Valid Math Expressions\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[\\\"355877\\\",8],\\\"description\\\":\\\"You are given the following string which contains only digits between 0 and 9:\\\\n\\\\n 355877\\\\n\\\\n You are also given a target number of 8. Return all possible ways you can add the +(add), -(subtract), and *(multiply) operators to the string such that it evaluates to the target number. (Normal order of operations applies.)\\\\n\\\\n The provided answer should be an array of strings containing the valid expressions. The data provided by this problem is an array with two elements. The first element is the string of digits, while the second element is the target number:\\\\n\\\\n [\\\\\\\"355877\\\\\\\", 8]\\\\n\\\\n NOTE: The order of evaluation expects script operator precedence NOTE: Numbers in the expression cannot have leading 0's. In other words, \\\\\\\"1+01\\\\\\\" is not a valid expression Examples:\\\\n\\\\n Input: digits = \\\\\\\"123\\\\\\\", target = 6\\\\n Output: [1+2+3, 1*2*3]\\\\n\\\\n Input: digits = \\\\\\\"105\\\\\\\", target = 5\\\\n Output: [1*0+5, 10-5]\\\"},{\\\"server\\\":\\\"neo-net\\\",\\\"name\\\":\\\"contract-839291-Chongqing.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":78,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 78 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"computek\\\",\\\"name\\\":\\\"contract-280659-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"p4zroASVvUEuOp7BC5vrN1rKSMIKSMIKSMWSH7w6RsI5AQXaawRwntUtUtUtUtcJty2dUtcJfty2mtzty\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; p4zroASVvUEuOp7BC5vrN1rKSMIKSMIKSMWSH7w6RsI5AQXaawRwntUtUtUtUtcJty2dUtcJfty2mtzty\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"computek\\\",\\\"name\\\":\\\"contract-872421.cct\\\",\\\"type\\\":\\\"Find All Valid Math Expressions\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[\\\"9909267137\\\",40],\\\"description\\\":\\\"You are given the following string which contains only digits between 0 and 9:\\\\n\\\\n 9909267137\\\\n\\\\n You are also given a target number of 40. Return all possible ways you can add the +(add), -(subtract), and *(multiply) operators to the string such that it evaluates to the target number. (Normal order of operations applies.)\\\\n\\\\n The provided answer should be an array of strings containing the valid expressions. The data provided by this problem is an array with two elements. The first element is the string of digits, while the second element is the target number:\\\\n\\\\n [\\\\\\\"9909267137\\\\\\\", 40]\\\\n\\\\n NOTE: The order of evaluation expects script operator precedence NOTE: Numbers in the expression cannot have leading 0's. In other words, \\\\\\\"1+01\\\\\\\" is not a valid expression Examples:\\\\n\\\\n Input: digits = \\\\\\\"123\\\\\\\", target = 6\\\\n Output: [1+2+3, 1*2*3]\\\\n\\\\n Input: digits = \\\\\\\"105\\\\\\\", target = 5\\\\n Output: [1*0+5, 10-5]\\\"},{\\\"server\\\":\\\"nectar-net\\\",\\\"name\\\":\\\"contract-984796-ECorp.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[37,[5,6,8,9,11,12,13,16,17,18]],\\\"description\\\":\\\"How many different distinct ways can the number 37 be written as a sum of integers contained in the set:\\\\n\\\\n [5,6,8,9,11,12,13,16,17,18]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"}]\"}}],[\"analytics/2023-07-19-12-48-Chongqing-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-19-12-48-Chongqing-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-18T12:23:04.481Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-18T12:23:04.481Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"Chongqing\\\",\\\"firstTime\\\":\\\"2023-07-18T12:23:04.481Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":112500,\\\"currentFactionRep\\\":0.0538667088,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-18T12:23:04.481Z\\\"},\\\"augsBought\\\":[\\\"Neuralstimulator\\\",\\\"Neuregen Gene Modification\\\",\\\"Speech Processor Implant\\\",\\\"Nuoptimal Nootropic Injector Implant\\\",\\\"ADR-V1 Pheromone Gene\\\",\\\"Speech Enhancement\\\"],\\\"moneySpent\\\":{\\\"augments\\\":13703262375,\\\"homeCores\\\":0,\\\"homeRam\\\":0,\\\"fluxGovernors\\\":4830547361.117641,\\\"repPurchased\\\":0},\\\"moneyLeft\\\":1096928387.9418674,\\\"lastSaved\\\":\\\"2023-07-19T17:48:45.411Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":true,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":112500,\\\"currentFactionRep\\\":206240.08301470877,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-19T11:36:24.281Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":false,\\\"moneyIsGreaterThanTriggered\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$NaN\\\",\\\"moneyRightNow\\\":\\\"$4,160,871,565.61\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$12,090,540,000.00\\\",\\\"time\\\":\\\"2023-07-19T11:36:24.283Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":false,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$877,193,741.98\\\",\\\"moneyRightNow\\\":\\\"$19,630,738,124.06\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$13,703,262,375.00\\\",\\\"time\\\":\\\"2023-07-19T17:48:45.405Z\\\"}}\"}}],[\"contracts/2023-07-19T17:48:48.121Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-19T17:48:48.121Z.txt\",\"text\":\"[{\\\"server\\\":\\\"sigma-cosmetics\\\",\\\"name\\\":\\\"contract-482557.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,1,0,0,0,0,0],[0,0,0,0,0,0,1],[0,0,0,1,0,1,0],[0,1,0,1,1,0,0],[0,1,0,1,0,0,0],[0,0,0,0,0,0,0],[1,0,0,0,1,0,0],[1,0,0,0,1,0,0],[1,0,1,0,0,1,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,1,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,1,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,1,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,1,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[1,0,1,0,0,1,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"sigma-cosmetics\\\",\\\"name\\\":\\\"contract-928339.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[6],[2,7],[1,6,8],[6,6,2,3],[9,3,9,2,8]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2,7],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[1,6,8],\\\\n&nbsp;&nbsp;&nbsp;[6,6,2,3],\\\\n&nbsp;&nbsp;[9,3,9,2,8]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"joesguns\\\",\\\"name\\\":\\\"contract-683482-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Find All Valid Math Expressions\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[\\\"429563\\\",88],\\\"description\\\":\\\"You are given the following string which contains only digits between 0 and 9:\\\\n\\\\n 429563\\\\n\\\\n You are also given a target number of 88. Return all possible ways you can add the +(add), -(subtract), and *(multiply) operators to the string such that it evaluates to the target number. (Normal order of operations applies.)\\\\n\\\\n The provided answer should be an array of strings containing the valid expressions. The data provided by this problem is an array with two elements. The first element is the string of digits, while the second element is the target number:\\\\n\\\\n [\\\\\\\"429563\\\\\\\", 88]\\\\n\\\\n NOTE: The order of evaluation expects script operator precedence NOTE: Numbers in the expression cannot have leading 0's. In other words, \\\\\\\"1+01\\\\\\\" is not a valid expression Examples:\\\\n\\\\n Input: digits = \\\\\\\"123\\\\\\\", target = 6\\\\n Output: [1+2+3, 1*2*3]\\\\n\\\\n Input: digits = \\\\\\\"105\\\\\\\", target = 5\\\\n Output: [1*0+5, 10-5]\\\"},{\\\"server\\\":\\\"harakiri-sushi\\\",\\\"name\\\":\\\"contract-101955-CyberSec.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[1,0,0,0,0],[0,0,0,1,0],[0,0,0,0,0],[0,0,1,1,0],[1,0,0,0,0],[1,1,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,0,0,\\\\n0,0,0,0,0,\\\\n0,0,0,0,0,\\\\n0,0,0,0,0,\\\\n0,0,0,0,0,\\\\n0,0,0,0,0,\\\\n1,0,0,0,0,\\\\n0,0,0,1,0,\\\\n0,0,0,0,0,\\\\n0,0,1,1,0,\\\\n1,0,0,0,0,\\\\n1,1,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"max-hardware\\\",\\\"name\\\":\\\"contract-363580.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"((a(a)aaaa(a()))(a(\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n ((a(a)aaaa(a()))(a(\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"rothman-uni\\\",\\\"name\\\":\\\"contract-686649-ECorp.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,1,0,0,0,0],[0,1,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,0],[0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,0,1,0,0,0,0,\\\\n0,1,0,0,0,0,1,0,0,\\\\n0,0,0,0,0,0,0,1,0,\\\\n0,0,0,0,0,1,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,\\\\n1,0,0,0,0,0,0,0,1,\\\\n0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,\\\\n0,1,0,0,0,0,0,0,1,\\\\n0,0,0,0,0,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"galactic-cyber\\\",\\\"name\\\":\\\"contract-580876.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\")((((a(())a()))aa\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n )((((a(())a()))aa\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"syscore\\\",\\\"name\\\":\\\"contract-833725-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,0,0,0],[0,0,1,0,1,1,0],[0,0,0,0,0,1,0],[0,1,1,0,1,0,0],[0,0,0,0,0,1,1],[1,1,1,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,1,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,1,1],\\\\n&nbsp;&nbsp;&nbsp;[1,1,1,0,0,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"snap-fitness\\\",\\\"name\\\":\\\"contract-969263-CyberSec.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,1,0,0,0,0,0,1],[0,0,0,0,0,1,1,1,0,1,1],[0,0,0,0,0,1,0,0,0,0,0],[0,1,1,0,0,0,0,0,0,0,0],[1,1,1,0,0,1,0,0,0,0,1],[0,0,1,1,0,0,1,0,0,0,0],[0,0,0,0,1,0,0,0,0,0,0],[0,1,0,1,0,1,1,0,1,1,0],[1,0,0,0,1,0,0,0,0,0,0],[0,1,0,1,0,1,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,1,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,0,0,0,1,0,0,0,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,1,1,1,0,1,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,1,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,0,0,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[1,1,1,0,0,1,0,0,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,1,0,0,1,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,1,0,1,1,0,1,1,0],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,0,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,1,0,1,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,0,0,0,1,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"univ-energy\\\",\\\"name\\\":\\\"contract-584719.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[1,0,3,0],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 1,0,3,0\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"univ-energy\\\",\\\"name\\\":\\\"contract-860676.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,1,0,0,0,1],[0,0,0,1,0,1],[0,0,1,0,0,1],[0,0,1,1,0,0],[0,0,1,0,0,1],[0,0,0,0,0,0],[0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,1,0,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,1,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"taiyang-digital\\\",\\\"name\\\":\\\"contract-90682-TianDiHui.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"0110000010010000\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '0110000010010000' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"taiyang-digital\\\",\\\"name\\\":\\\"contract-951732.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[1,2],[25,26],[6,7],[18,19],[19,21],[11,18],[17,19],[23,30]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[1,2],[25,26],[6,7],[18,19],[19,21],[11,18],[17,19],[23,30]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"zb-def\\\",\\\"name\\\":\\\"contract-875972.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[27,[1,4,6,7,9,10,11,12,13]],\\\"description\\\":\\\"How many different distinct ways can the number 27 be written as a sum of integers contained in the set:\\\\n\\\\n [1,4,6,7,9,10,11,12,13]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"applied-energetics\\\",\\\"name\\\":\\\"contract-795055-CyberSec.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[19,28],[20,29],[15,16],[12,14],[3,7],[15,19],[12,16]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[19,28],[20,29],[15,16],[12,14],[3,7],[15,19],[12,16]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"stormtech\\\",\\\"name\\\":\\\"contract-600398-ECorp.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"AqLFevqLFcp7oyIwFcp7oyXpcp7NIBrTH6xlI6xlI6xl5ljxlexxle2zIGbibibibM02Qj4qiwdaMQ6M\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; AqLFevqLFcp7oyIwFcp7oyXpcp7NIBrTH6xlI6xlI6xl5ljxlexxle2zIGbibibibM02Qj4qiwdaMQ6M\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"kuai-gong\\\",\\\"name\\\":\\\"contract-576645-NiteSec.cct\\\",\\\"type\\\":\\\"Proper 2-Coloring of a Graph\\\",\\\"attemptsLeft\\\":5,\\\"input\\\":[8,[[1,5],[2,5],[5,6],[5,7],[1,3],[0,3],[5,6],[4,7],[2,3],[2,4],[1,4]]],\\\"description\\\":\\\"You are given the following data, representing a graph:\\\\n [8,[[1,5],[2,5],[5,6],[5,7],[1,3],[0,3],[5,6],[4,7],[2,3],[2,4],[1,4]]]\\\\n Note that \\\\\\\"graph\\\\\\\", as used here, refers to the field of graph theory, and has no relation to statistics or plotting. The first element of the data represents the number of vertices in the graph. Each vertex is a unique number between 0 and 7. The next element of the data represents the edges of the graph. Two vertices u,v in a graph are said to be adjacent if there exists an edge [u,v]. Note that an edge [u,v] is the same as an edge [v,u], as order does not matter. You must construct a 2-coloring of the graph, meaning that you have to assign each vertex in the graph a \\\\\\\"color\\\\\\\", either 0 or 1, such that no two adjacent vertices have the same color. Submit your answer in the form of an array, where element i represents the color of vertex i. If it is impossible to construct a 2-coloring of the given graph, instead submit an empty array.\\\\n\\\\n Examples:\\\\n\\\\n Input: [4, [[0, 2], [0, 3], [1, 2], [1, 3]]]\\\\n Output: [0, 0, 1, 1]\\\\n\\\\n Input: [3, [[0, 1], [0, 2], [1, 2]]]\\\\n Output: []\\\"},{\\\"server\\\":\\\"b-and-a\\\",\\\"name\\\":\\\"contract-495044.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[3,9],[3,12],[20,22],[23,25],[23,31],[12,17],[13,16],[4,11],[10,19]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[3,9],[3,12],[20,22],[23,25],[23,31],[12,17],[13,16],[4,11],[10,19]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"megacorp\\\",\\\"name\\\":\\\"contract-15650-CyberSec.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[2,5,9,3,8,7,4,0,10,5,9,5,7,10,5,3,8,2,9,10,7,8],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 2,5,9,3,8,7,4,0,10,5,9,5,7,10,5,3,8,2,9,10,7,8\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"megacorp\\\",\\\"name\\\":\\\"contract-313946-BladeIndustries.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[13,5],\\\"description\\\":\\\"You are in a grid with 13 rows and 5 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [13, 5]\\\"},{\\\"server\\\":\\\"run4theh111z\\\",\\\"name\\\":\\\"contract-523738-TheBlackHand.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"52204140202\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 52204140202\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"},{\\\"server\\\":\\\"CSEC\\\",\\\"name\\\":\\\"contract-202598-CyberSec.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[175,[3,4,5,6,7,9,10,12,15]],\\\"description\\\":\\\"How many different distinct ways can the number 175 be written as a sum of integers contained in the set:\\\\n\\\\n [3,4,5,6,7,9,10,12,15]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"I.I.I.I\\\",\\\"name\\\":\\\"contract-39560.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[14,10],\\\"description\\\":\\\"You are in a grid with 14 rows and 10 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [14, 10]\\\"},{\\\"server\\\":\\\"johnson-ortho\\\",\\\"name\\\":\\\"contract-808154-CyberSec.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":31,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 31 be written as a sum of at least two positive integers?\\\"}]\"}}],[\"analytics/2023-07-20-04-20-NiteSec-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-20-04-20-NiteSec-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-19T18:25:41.782Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-19T18:25:41.782Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"NiteSec\\\",\\\"firstTime\\\":\\\"2023-07-19T18:25:41.782Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":150000,\\\"currentFactionRep\\\":0.4850529923899739,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-19T18:25:41.782Z\\\"},\\\"augsBought\\\":[\\\"Cranial Signal Processors - Gen III\\\",\\\"Neural-Retention Enhancement\\\",\\\"Embedded Netburner Module\\\",\\\"CRTX42-AA Gene Modification\\\",\\\"Artificial Synaptic Potentiation\\\",\\\"Neurotrainer II\\\"],\\\"moneySpent\\\":{\\\"augments\\\":16882762650,\\\"homeCores\\\":0,\\\"homeRam\\\":0,\\\"fluxGovernors\\\":735604102.0243528,\\\"repPurchased\\\":0},\\\"moneyLeft\\\":242492867.6541854,\\\"lastSaved\\\":\\\"2023-07-20T09:20:20.822Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":true,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":150000,\\\"currentFactionRep\\\":150002.03570172685,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-20T07:31:58.717Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":false,\\\"moneyIsGreaterThanTriggered\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$493,779,692.90\\\",\\\"moneyRightNow\\\":\\\"$5,517,622,556.06\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$16,882,762,650.00\\\",\\\"time\\\":\\\"2023-07-20T07:31:58.717Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":false,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$410,032,490.32\\\",\\\"moneyRightNow\\\":\\\"$17,860,859,619.68\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$16,882,762,650.00\\\",\\\"time\\\":\\\"2023-07-20T09:20:20.814Z\\\"}}\"}}],[\"contracts/2023-07-20T09:20:23.522Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-20T09:20:23.522Z.txt\",\"text\":\"[{\\\"server\\\":\\\"sigma-cosmetics\\\",\\\"name\\\":\\\"contract-160196.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[16,19],[4,8],[19,27],[14,20],[9,11],[14,24],[18,22]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[16,19],[4,8],[19,27],[14,20],[9,11],[14,24],[18,22]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"harakiri-sushi\\\",\\\"name\\\":\\\"contract-198363.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"EHGiHGSFzoYvTdfvrLZyTdfvrvrvrvrvrvrvrekmvrekmvreowtlrlrlrlrlrlslrlIlslr\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; EHGiHGSFzoYvTdfvrLZyTdfvrvrvrvrvrvrvrekmvrekmvreowtlrlrlrlrlrlslrlIlslr\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"darkweb\\\",\\\"name\\\":\\\"contract-551996.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[7],[7,9],[3,6,2],[5,7,8,1],[8,9,5,6,6],[6,5,6,1,3,9]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[7],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[7,9],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[3,6,2],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[5,7,8,1],\\\\n&nbsp;&nbsp;&nbsp;[8,9,5,6,6],\\\\n&nbsp;&nbsp;[6,5,6,1,3,9]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"omega-net\\\",\\\"name\\\":\\\"contract-185836-CyberSec.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[9,7],\\\"description\\\":\\\"You are in a grid with 9 rows and 7 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [9, 7]\\\"},{\\\"server\\\":\\\"johnson-ortho\\\",\\\"name\\\":\\\"contract-203937-ECorp.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":81,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 81 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"johnson-ortho\\\",\\\"name\\\":\\\"contract-646201-CyberSec.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[12,4],\\\"description\\\":\\\"You are in a grid with 12 rows and 4 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [12, 4]\\\"},{\\\"server\\\":\\\"I.I.I.I\\\",\\\"name\\\":\\\"contract-726800-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Array Jumping Game II\\\",\\\"attemptsLeft\\\":3,\\\"input\\\":[0,7,3,4,3,3,3,4,1,0,3,1,0,1],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 0,7,3,4,3,3,3,4,1,0,3,1,0,1\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine the minimum number of jumps to reach the end of the array.\\\\n\\\\n If it's impossible to reach the end, then the answer should be 0.\\\"},{\\\"server\\\":\\\"aevum-police\\\",\\\"name\\\":\\\"contract-814551.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"wwwwwwwfPPGGGGGGcHHgMMhhooE8IIMmPPPPPPPPPPPPM0kkSSSSSSSSSS7777777777777yyyyyyzzzzzzzzz\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; wwwwwwwfPPGGGGGGcHHgMMhhooE8IIMmPPPPPPPPPPPPM0kkSSSSSSSSSS7777777777777yyyyyyzzzzzzzzz\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"defcomm\\\",\\\"name\\\":\\\"contract-184215.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,0,0,1,0,0,0,1,1],[1,0,0,0,0,0,1,1,1,1,0,0],[0,0,0,0,0,1,0,1,1,1,1,1],[0,0,0,0,1,1,0,0,0,1,0,0],[0,0,0,0,1,1,0,1,1,1,0,0],[0,0,1,0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,1,0,0],[0,1,0,0,0,1,1,1,1,0,1,0],[0,0,0,0,1,0,0,1,0,0,0,0],[0,0,0,1,1,0,0,0,0,0,1,1],[0,1,1,0,0,0,0,0,0,1,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,0,0,0,0,0,1,0,0,0,1,1],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,0,0,0,1,1,1,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,1,0,1,1,1,1,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,1,0,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,1,0,1,1,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,0,0,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,0,0,0,0,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,0,1,1,1,1,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,0,1,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,1,1,0,0,0,0,0,1,1],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,0,0,0,0,0,0,1,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-698434-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":470074817,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 470074817?\\\"},{\\\"server\\\":\\\"fulcrumassets\\\",\\\"name\\\":\\\"contract-113752.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"((()a))(\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n ((()a))(\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"4sigma\\\",\\\"name\\\":\\\"contract-509231.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[15,22],[16,21],[21,31],[4,6]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[15,22],[16,21],[21,31],[4,6]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"blade\\\",\\\"name\\\":\\\"contract-153104.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[193,[2,3,4,5,7,8,9,10,13]],\\\"description\\\":\\\"How many different distinct ways can the number 193 be written as a sum of integers contained in the set:\\\\n\\\\n [2,3,4,5,7,8,9,10,13]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"ecorp\\\",\\\"name\\\":\\\"contract-283509.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":86,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 86 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"b-and-a\\\",\\\"name\\\":\\\"contract-424311-BitRunners.cct\\\",\\\"type\\\":\\\"Proper 2-Coloring of a Graph\\\",\\\"attemptsLeft\\\":5,\\\"input\\\":[11,[[4,7],[0,2],[7,8],[3,6],[0,10],[2,3],[8,9],[5,9],[6,9],[2,7],[6,9],[2,9],[6,7],[1,7],[9,10]]],\\\"description\\\":\\\"You are given the following data, representing a graph:\\\\n [11,[[4,7],[0,2],[7,8],[3,6],[0,10],[2,3],[8,9],[5,9],[6,9],[2,7],[6,9],[2,9],[6,7],[1,7],[9,10]]]\\\\n Note that \\\\\\\"graph\\\\\\\", as used here, refers to the field of graph theory, and has no relation to statistics or plotting. The first element of the data represents the number of vertices in the graph. Each vertex is a unique number between 0 and 10. The next element of the data represents the edges of the graph. Two vertices u,v in a graph are said to be adjacent if there exists an edge [u,v]. Note that an edge [u,v] is the same as an edge [v,u], as order does not matter. You must construct a 2-coloring of the graph, meaning that you have to assign each vertex in the graph a \\\\\\\"color\\\\\\\", either 0 or 1, such that no two adjacent vertices have the same color. Submit your answer in the form of an array, where element i represents the color of vertex i. If it is impossible to construct a 2-coloring of the given graph, instead submit an empty array.\\\\n\\\\n Examples:\\\\n\\\\n Input: [4, [[0, 2], [0, 3], [1, 2], [1, 3]]]\\\\n Output: [0, 0, 1, 1]\\\\n\\\\n Input: [3, [[0, 1], [0, 2], [1, 2]]]\\\\n Output: []\\\"},{\\\"server\\\":\\\"infocomm\\\",\\\"name\\\":\\\"contract-290448-BladeIndustries.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"qcgqcYvNfpYUha6ha6ha6hlb42Bee3wiywywyfViywywyfVibuIbP0kVibuIQrVkVibebebebebebveWQeWQeWQeWJeW\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; qcgqcYvNfpYUha6ha6ha6hlb42Bee3wiywywyfViywywyfVibuIbP0kVibuIQrVkVibebebebebebveWQeWQeWQeWJeW\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"catalyst\\\",\\\"name\\\":\\\"contract-758844.cct\\\",\\\"type\\\":\\\"Find All Valid Math Expressions\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[\\\"22832320932\\\",81],\\\"description\\\":\\\"You are given the following string which contains only digits between 0 and 9:\\\\n\\\\n 22832320932\\\\n\\\\n You are also given a target number of 81. Return all possible ways you can add the +(add), -(subtract), and *(multiply) operators to the string such that it evaluates to the target number. (Normal order of operations applies.)\\\\n\\\\n The provided answer should be an array of strings containing the valid expressions. The data provided by this problem is an array with two elements. The first element is the string of digits, while the second element is the target number:\\\\n\\\\n [\\\\\\\"22832320932\\\\\\\", 81]\\\\n\\\\n NOTE: The order of evaluation expects script operator precedence NOTE: Numbers in the expression cannot have leading 0's. In other words, \\\\\\\"1+01\\\\\\\" is not a valid expression Examples:\\\\n\\\\n Input: digits = \\\\\\\"123\\\\\\\", target = 6\\\\n Output: [1+2+3, 1*2*3]\\\\n\\\\n Input: digits = \\\\\\\"105\\\\\\\", target = 5\\\\n Output: [1*0+5, 10-5]\\\"},{\\\"server\\\":\\\"omnia\\\",\\\"name\\\":\\\"contract-180064.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[120,[1,2,4,5,7,8,9,10,11,12]],\\\"description\\\":\\\"How many different distinct ways can the number 120 be written as a sum of integers contained in the set:\\\\n\\\\n [1,2,4,5,7,8,9,10,11,12]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"zeus-med\\\",\\\"name\\\":\\\"contract-775664.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,1,1,0,0,0,0,0,0,1],[0,1,0,0,0,0,1,0,1,1],[0,0,0,0,1,0,0,1,0,0],[0,1,0,0,0,0,0,0,0,0],[1,1,1,0,0,0,0,1,1,1],[0,1,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,0,0,0,1],[0,1,0,1,0,1,0,0,0,0],[0,0,1,0,0,0,0,0,0,1],[0,1,0,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,1,1,0,0,0,0,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,0,0,1,0,1,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[1,1,1,0,0,0,0,1,1,1],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,0,0,1,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,0,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,1,0,1,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,0,0,0,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,0,0,0,0,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"}]\"}}],[\"analytics/2023-07-21-03-35-TheBlackHand-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-21-03-35-TheBlackHand-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-20T13:19:37.890Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-20T13:19:37.890Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"The Black Hand\\\",\\\"firstTime\\\":\\\"2023-07-20T13:19:37.890Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":375000,\\\"currentFactionRep\\\":0,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-20T13:19:37.891Z\\\"},\\\"augsBought\\\":[\\\"Enhanced Myelin Sheathing\\\",\\\"Cranial Signal Processors - Gen IV\\\",\\\"The Black Hand\\\",\\\"DataJack\\\",\\\"Social Negotiation Assistant (S.N.A)\\\"],\\\"moneySpent\\\":{\\\"augments\\\":26784039000,\\\"homeCores\\\":0,\\\"homeRam\\\":475182451795.6437,\\\"fluxGovernors\\\":670881065159.001,\\\"repPurchased\\\":0},\\\"moneyLeft\\\":159955728162.7616,\\\"lastSaved\\\":\\\"2023-07-21T08:35:25.556Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":true,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":375000,\\\"currentFactionRep\\\":375012.4444733313,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-21T08:32:58.201Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$44,332,067,495.85\\\",\\\"moneyRightNow\\\":\\\"$836,033,121.15\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$26,784,039,000.00\\\",\\\"time\\\":\\\"2023-07-21T08:32:58.201Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$49,129,547,840.44\\\",\\\"moneyRightNow\\\":\\\"$1,332,803,284,117.41\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$26,784,039,000.00\\\",\\\"time\\\":\\\"2023-07-21T08:35:25.555Z\\\"},\\\"amountOfRamIncrease\\\":null,\\\"amountOfCoresIncrease\\\":null}\"}}],[\"contracts/failure/nectar-net-contract-394118-BitRunners.cct-AlgorithmicStockTraderIII.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/failure/nectar-net-contract-394118-BitRunners.cct-AlgorithmicStockTraderIII.txt\",\"text\":\"{\\\"contract\\\":{\\\"server\\\":\\\"nectar-net\\\",\\\"name\\\":\\\"contract-394118-BitRunners.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader III\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[83,18,162,4,95,11,195,119,187,88,196,1,159,29,59,17,164,79,89,61,177,49,170],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 83,18,162,4,46,95,11,119,195,120,119,187,88,196,77,1,159,129,29,59,17,164,79,89,61,109,127,177,49,84,170\\\\n\\\\n Determine the maximum possible profit you can earn using at most two transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0\\\"},\\\"wrongResult\\\":350}\"}}],[\"contracts/2023-07-21T08:35:28.271Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-21T08:35:28.271Z.txt\",\"text\":\"[{\\\"server\\\":\\\"sigma-cosmetics\\\",\\\"name\\\":\\\"contract-704097.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[0,0,5,0,8,1],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 0,0,5,0,8,1\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"joesguns\\\",\\\"name\\\":\\\"contract-999646.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"0100000011101010100010011011010101001111011100111111100010011110\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '0100000011101010100010011011010101001111011100111111100010011110' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"hong-fang-tea\\\",\\\"name\\\":\\\"contract-797194-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,0,0,0,0,0,1,0],[0,1,0,0,0,0,1,0,0,0,0],[0,0,0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,1,0,1,0,0],[0,0,0,0,0,0,0,0,0,1,0],[0,1,1,0,1,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,0,0,0,0,0,0,1,0,\\\\n0,1,0,0,0,0,1,0,0,0,0,\\\\n0,0,0,0,0,0,0,1,0,0,0,\\\\n0,0,0,0,0,0,1,0,1,0,0,\\\\n0,0,0,0,0,0,0,0,0,1,0,\\\\n0,1,1,0,1,0,0,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"darkweb\\\",\\\"name\\\":\\\"contract-605259.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":66,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 66 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"rothman-uni\\\",\\\"name\\\":\\\"contract-36453-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[3,2,0,8,-2,-7,-7],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 3,2,0,8,-2,-7,-7\\\"},{\\\"server\\\":\\\"aevum-police\\\",\\\"name\\\":\\\"contract-305165.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":72,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 72 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"univ-energy\\\",\\\"name\\\":\\\"contract-771627.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":11,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 11 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"nova-med\\\",\\\"name\\\":\\\"contract-678006.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"W0i1EEEEEE6z0z6yCCxz0z6yCCxzN3yCx2Cx2Cx2CsLhx2Cx2CsLhNzigs0777777777SFNUWSFNUWSFNUFNUPW0FNU\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; W0i1EEEEEE6z0z6yCCxz0z6yCCxzN3yCx2Cx2Cx2CsLhx2Cx2CsLhNzigs0777777777SFNUWSFNUWSFNUFNUPW0FNU\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"blade\\\",\\\"name\\\":\\\"contract-202243-TheBlackHand.cct\\\",\\\"type\\\":\\\"Find All Valid Math Expressions\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[\\\"663317949728\\\",63],\\\"description\\\":\\\"You are given the following string which contains only digits between 0 and 9:\\\\n\\\\n 663317949728\\\\n\\\\n You are also given a target number of 63. Return all possible ways you can add the +(add), -(subtract), and *(multiply) operators to the string such that it evaluates to the target number. (Normal order of operations applies.)\\\\n\\\\n The provided answer should be an array of strings containing the valid expressions. The data provided by this problem is an array with two elements. The first element is the string of digits, while the second element is the target number:\\\\n\\\\n [\\\\\\\"663317949728\\\\\\\", 63]\\\\n\\\\n NOTE: The order of evaluation expects script operator precedence NOTE: Numbers in the expression cannot have leading 0's. In other words, \\\\\\\"1+01\\\\\\\" is not a valid expression Examples:\\\\n\\\\n Input: digits = \\\\\\\"123\\\\\\\", target = 6\\\\n Output: [1+2+3, 1*2*3]\\\\n\\\\n Input: digits = \\\\\\\"105\\\\\\\", target = 5\\\\n Output: [1*0+5, 10-5]\\\"},{\\\"server\\\":\\\"vitalife\\\",\\\"name\\\":\\\"contract-813507-BitRunners.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"95163141220\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 95163141220\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"},{\\\"server\\\":\\\"omnitek\\\",\\\"name\\\":\\\"contract-314967.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":668710506,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 668710506?\\\"},{\\\"server\\\":\\\"ecorp\\\",\\\"name\\\":\\\"contract-620424.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":50,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 50 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"johnson-ortho\\\",\\\"name\\\":\\\"contract-273352.cct\\\",\\\"type\\\":\\\"Find All Valid Math Expressions\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[\\\"469324190930\\\",79],\\\"description\\\":\\\"You are given the following string which contains only digits between 0 and 9:\\\\n\\\\n 469324190930\\\\n\\\\n You are also given a target number of 79. Return all possible ways you can add the +(add), -(subtract), and *(multiply) operators to the string such that it evaluates to the target number. (Normal order of operations applies.)\\\\n\\\\n The provided answer should be an array of strings containing the valid expressions. The data provided by this problem is an array with two elements. The first element is the string of digits, while the second element is the target number:\\\\n\\\\n [\\\\\\\"469324190930\\\\\\\", 79]\\\\n\\\\n NOTE: The order of evaluation expects script operator precedence NOTE: Numbers in the expression cannot have leading 0's. In other words, \\\\\\\"1+01\\\\\\\" is not a valid expression Examples:\\\\n\\\\n Input: digits = \\\\\\\"123\\\\\\\", target = 6\\\\n Output: [1+2+3, 1*2*3]\\\\n\\\\n Input: digits = \\\\\\\"105\\\\\\\", target = 5\\\\n Output: [1*0+5, 10-5]\\\"},{\\\"server\\\":\\\"zb-institute\\\",\\\"name\\\":\\\"contract-294288-BitRunners.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"0000101001010001\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '0000101001010001' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"zb-def\\\",\\\"name\\\":\\\"contract-524316-ECorp.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[7,17],[5,12],[5,14],[4,11],[8,18],[20,27],[19,27],[19,25],[5,9],[13,22],[25,28],[25,31],[9,19],[15,19],[2,9],[22,27]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[7,17],[5,12],[5,14],[4,11],[8,18],[20,27],[19,27],[19,25],[5,9],[13,22],[25,28],[25,31],[9,19],[15,19],[2,9],[22,27]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"zb-def\\\",\\\"name\\\":\\\"contract-57092.cct\\\",\\\"type\\\":\\\"Array Jumping Game II\\\",\\\"attemptsLeft\\\":3,\\\"input\\\":[3,0,5,1,4,4,3,6,3,1,1,4,4,0,3],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 3,0,5,1,4,4,3,6,3,1,1,4,4,0,3\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine the minimum number of jumps to reach the end of the array.\\\\n\\\\n If it's impossible to reach the end, then the answer should be 0.\\\"},{\\\"server\\\":\\\"zb-def\\\",\\\"name\\\":\\\"contract-904886.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":28,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 28 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"the-hub\\\",\\\"name\\\":\\\"contract-625337.cct\\\",\\\"type\\\":\\\"Array Jumping Game II\\\",\\\"attemptsLeft\\\":3,\\\"input\\\":[6,4,3,2,4,8,2,6,3,0,4,0,2,2,0,5,6,3,3,7,5,0,2],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 6,4,3,2,4,8,2,6,3,0,4,0,2,2,0,5,6,3,3,7,5,0,2\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine the minimum number of jumps to reach the end of the array.\\\\n\\\\n If it's impossible to reach the end, then the answer should be 0.\\\"},{\\\"server\\\":\\\"nectar-net\\\",\\\"name\\\":\\\"contract-394118-BitRunners.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader III\\\",\\\"attemptsLeft\\\":9,\\\"input\\\":[83,18,162,4,46,95,11,119,195,120,119,187,88,196,77,1,159,129,29,59,17,164,79,89,61,109,127,177,49,84,170],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 83,18,162,4,46,95,11,119,195,120,119,187,88,196,77,1,159,129,29,59,17,164,79,89,61,109,127,177,49,84,170\\\\n\\\\n Determine the maximum possible profit you can earn using at most two transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0\\\"}]\"}}],[\"analytics/2023-07-22-00-43-Bachman&Associates-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-22-00-43-Bachman&Associates-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-21T09:07:14.531Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-21T09:07:14.531Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"BitRunners\\\",\\\"firstTime\\\":\\\"2023-07-21T09:07:14.532Z\\\"},{\\\"factionToMax\\\":\\\"Bachman & Associates\\\",\\\"firstTime\\\":\\\"2023-07-21T15:38:51.410Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":3000000,\\\"currentFactionRep\\\":0,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-21T09:07:14.532Z\\\"},\\\"augsBought\\\":[\\\"FocusWire\\\",\\\"ADR-V2 Pheromone Gene\\\",\\\"CashRoot Starter Kit\\\",\\\"Nanofiber Weave\\\",\\\"Augmented Targeting I\\\",\\\"Augmented Targeting II\\\"],\\\"moneySpent\\\":{\\\"augments\\\":13504345725,\\\"homeCores\\\":0,\\\"homeRam\\\":0,\\\"fluxGovernors\\\":529136852962.8832,\\\"repPurchased\\\":0},\\\"moneyLeft\\\":478094288875.795,\\\"lastSaved\\\":\\\"2023-07-22T05:43:08.455Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":true,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":1125000,\\\"currentFactionRep\\\":462513.38379352586,\\\"targetRepForGettingToFavor\\\":0,\\\"time\\\":\\\"2023-07-22T05:43:03.775Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$721,453,082,023.73\\\",\\\"moneyRightNow\\\":\\\"$517,995,312,219.22\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$13,504,345,725.00\\\",\\\"time\\\":\\\"2023-07-22T05:43:03.776Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$721,453,082,023.73\\\",\\\"moneyRightNow\\\":\\\"$1,020,735,487,563.68\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$13,504,345,725.00\\\",\\\"time\\\":\\\"2023-07-22T05:43:08.447Z\\\"}}\"}}],[\"contracts/2023-07-22T05:43:11.146Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-22T05:43:11.146Z.txt\",\"text\":\"[{\\\"server\\\":\\\"sigma-cosmetics\\\",\\\"name\\\":\\\"contract-11351.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[9,1,0,1,4,8,2,9,3,0,0,1],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 9,1,0,1,4,8,2,9,3,0,0,1\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"darkweb\\\",\\\"name\\\":\\\"contract-380792-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[8],[6,7],[8,5,3],[1,9,2,9],[7,5,6,6,4],[7,7,7,8,3,3],[1,5,4,5,4,8,9]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[8],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6,7],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[8,5,3],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,9,2,9],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[7,5,6,6,4],\\\\n&nbsp;&nbsp;&nbsp;[7,7,7,8,3,3],\\\\n&nbsp;&nbsp;[1,5,4,5,4,8,9]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"lexo-corp\\\",\\\"name\\\":\\\"contract-347251-TianDiHui.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"64125109196\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 64125109196\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"},{\\\"server\\\":\\\"nectar-net\\\",\\\"name\\\":\\\"contract-489407-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[22,23],[14,20],[7,12],[21,25],[2,7],[5,7],[6,16],[5,10],[7,13],[24,34],[11,19],[23,31],[15,19],[17,19],[16,21],[25,32],[5,11],[2,10],[10,18],[22,26]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[22,23],[14,20],[7,12],[21,25],[2,7],[5,7],[6,16],[5,10],[7,13],[24,34],[11,19],[23,31],[15,19],[17,19],[16,21],[25,32],[5,11],[2,10],[10,18],[22,26]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"silver-helix\\\",\\\"name\\\":\\\"contract-740419-Sector12.cct\\\",\\\"type\\\":\\\"Proper 2-Coloring of a Graph\\\",\\\"attemptsLeft\\\":5,\\\"input\\\":[12,[[0,10],[5,9],[2,8],[9,10],[1,7],[6,11],[1,4],[0,5],[0,6],[1,5],[0,3],[1,2],[1,10],[8,10],[3,11],[5,11],[7,8],[1,3]]],\\\"description\\\":\\\"You are given the following data, representing a graph:\\\\n [12,[[0,10],[5,9],[2,8],[9,10],[1,7],[6,11],[1,4],[0,5],[0,6],[1,5],[0,3],[1,2],[1,10],[8,10],[3,11],[5,11],[7,8],[1,3]]]\\\\n Note that \\\\\\\"graph\\\\\\\", as used here, refers to the field of graph theory, and has no relation to statistics or plotting. The first element of the data represents the number of vertices in the graph. Each vertex is a unique number between 0 and 11. The next element of the data represents the edges of the graph. Two vertices u,v in a graph are said to be adjacent if there exists an edge [u,v]. Note that an edge [u,v] is the same as an edge [v,u], as order does not matter. You must construct a 2-coloring of the graph, meaning that you have to assign each vertex in the graph a \\\\\\\"color\\\\\\\", either 0 or 1, such that no two adjacent vertices have the same color. Submit your answer in the form of an array, where element i represents the color of vertex i. If it is impossible to construct a 2-coloring of the given graph, instead submit an empty array.\\\\n\\\\n Examples:\\\\n\\\\n Input: [4, [[0, 2], [0, 3], [1, 2], [1, 3]]]\\\\n Output: [0, 0, 1, 1]\\\\n\\\\n Input: [3, [[0, 1], [0, 2], [1, 2]]]\\\\n Output: []\\\"},{\\\"server\\\":\\\"avmnite-02h\\\",\\\"name\\\":\\\"contract-995428.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":976679328,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 976679328?\\\"},{\\\"server\\\":\\\"aevum-police\\\",\\\"name\\\":\\\"contract-399060-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[17,26],[24,30],[6,10],[20,25],[24,27]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[17,26],[24,30],[6,10],[20,25],[24,27]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"univ-energy\\\",\\\"name\\\":\\\"contract-829895-NWO.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"1242558141\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 1242558141\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"},{\\\"server\\\":\\\"powerhouse-fitness\\\",\\\"name\\\":\\\"contract-881035.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"rmmTTTTTkiiGGGGGGGiiiiiiiwwwwww1T4xxW00000000MPPHHHHWWWWWWW\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; rmmTTTTTkiiGGGGGGGiiiiiiiwwwwww1T4xxW00000000MPPHHHHWWWWWWW\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"fulcrumassets\\\",\\\"name\\\":\\\"contract-611935.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[8,11],[1,5],[7,17]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[8,11],[1,5],[7,17]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"The-Cave\\\",\\\"name\\\":\\\"contract-387094-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[20,30],[25,29],[12,16],[21,23],[11,18],[8,16],[15,16],[10,20],[21,29],[20,23],[5,15],[20,30]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[20,30],[25,29],[12,16],[21,23],[11,18],[8,16],[15,16],[10,20],[21,29],[20,23],[5,15],[20,30]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"run4theh111z\\\",\\\"name\\\":\\\"contract-797670.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[5,10],[1,3],[3,12],[11,16],[11,19],[24,34],[1,10],[9,19],[7,15],[24,28],[9,19],[6,13],[18,24],[10,20],[2,11]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[5,10],[1,3],[3,12],[11,16],[11,19],[24,34],[1,10],[9,19],[7,15],[24,28],[9,19],[6,13],[18,24],[10,20],[2,11]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"solaris\\\",\\\"name\\\":\\\"contract-188827.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"16442178219\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 16442178219\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"},{\\\"server\\\":\\\"zeus-med\\\",\\\"name\\\":\\\"contract-464359-NiteSec.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"ii44XXTTMM6cdBtttttttttttoooooooooooooo222222233v882222000rrrrrrrjjjjj\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; ii44XXTTMM6cdBtttttttttttoooooooooooooo222222233v882222000rrrrrrrjjjjj\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"}]\"}}],[\"analytics/2023-07-22-09-43-BitRunners-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-22-09-43-BitRunners-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-22T06:02:37.619Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-22T06:02:37.619Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"BitRunners\\\",\\\"firstTime\\\":\\\"2023-07-22T06:02:37.620Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":3000000,\\\"currentFactionRep\\\":3.2864092291602076,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-22T06:02:37.620Z\\\"},\\\"augsBought\\\":[\\\"Embedded Netburner Module Core Implant\\\",\\\"Neuroreceptor Management Implant\\\"],\\\"moneySpent\\\":{\\\"augments\\\":10635000000,\\\"homeCores\\\":0,\\\"homeRam\\\":0,\\\"fluxGovernors\\\":544271461926.7823,\\\"repPurchased\\\":0},\\\"moneyLeft\\\":444192826113.2349,\\\"lastSaved\\\":\\\"2023-07-22T14:43:13.384Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":true,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":3000000,\\\"currentFactionRep\\\":424401.7324430114,\\\"targetRepForGettingToFavor\\\":46.7456,\\\"time\\\":\\\"2023-07-22T12:46:06.443Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$56,130,176,702.47\\\",\\\"moneyRightNow\\\":\\\"$8,419,609.39\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$10,635,000,000.00\\\",\\\"time\\\":\\\"2023-07-22T14:30:11.871Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$78,940,357,809.55\\\",\\\"moneyRightNow\\\":\\\"$999,099,288,040.02\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$10,635,000,000.00\\\",\\\"time\\\":\\\"2023-07-22T14:43:13.379Z\\\"}}\"}}],[\"contracts/2023-07-22T14:43:15.941Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-22T14:43:15.941Z.txt\",\"text\":\"[{\\\"server\\\":\\\"zeus-med\\\",\\\"name\\\":\\\"contract-753491-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader I\\\",\\\"attemptsLeft\\\":5,\\\"input\\\":[55,2,86,172,107,98,152,148,14,103,31,116,22,49],\\\"description\\\":\\\"You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\\\\n\\\\n 55,2,86,172,107,98,152,148,14,103,31,116,22,49\\\\n\\\\n Determine the maximum possible profit you can earn using at most one transaction (i.e. you can only buy and sell the stock once). If no profit can be made then the answer should be 0. Note that you have to buy the stock before you can sell it\\\"}]\"}}],[\"contracts/2023-07-22T14:56:24.747Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-22T14:56:24.747Z.txt\",\"text\":\"[{\\\"server\\\":\\\"solaris\\\",\\\"name\\\":\\\"contract-847565-BladeIndustries.cct\\\",\\\"type\\\":\\\"Find All Valid Math Expressions\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[\\\"215407675\\\",-39],\\\"description\\\":\\\"You are given the following string which contains only digits between 0 and 9:\\\\n\\\\n 215407675\\\\n\\\\n You are also given a target number of -39. Return all possible ways you can add the +(add), -(subtract), and *(multiply) operators to the string such that it evaluates to the target number. (Normal order of operations applies.)\\\\n\\\\n The provided answer should be an array of strings containing the valid expressions. The data provided by this problem is an array with two elements. The first element is the string of digits, while the second element is the target number:\\\\n\\\\n [\\\\\\\"215407675\\\\\\\", -39]\\\\n\\\\n NOTE: The order of evaluation expects script operator precedence NOTE: Numbers in the expression cannot have leading 0's. In other words, \\\\\\\"1+01\\\\\\\" is not a valid expression Examples:\\\\n\\\\n Input: digits = \\\\\\\"123\\\\\\\", target = 6\\\\n Output: [1+2+3, 1*2*3]\\\\n\\\\n Input: digits = \\\\\\\"105\\\\\\\", target = 5\\\\n Output: [1*0+5, 10-5]\\\"},{\\\"server\\\":\\\"blade\\\",\\\"name\\\":\\\"contract-372294-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":193172784,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 193172784?\\\"},{\\\"server\\\":\\\"clarkinc\\\",\\\"name\\\":\\\"contract-355180.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":2619,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 2619 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"}]\"}}],[\"contracts/2023-07-22T19:15:14.104Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-22T19:15:14.104Z.txt\",\"text\":\"[{\\\"server\\\":\\\"solaris\\\",\\\"name\\\":\\\"contract-847565-BladeIndustries.cct\\\",\\\"type\\\":\\\"Find All Valid Math Expressions\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[\\\"215407675\\\",-39],\\\"description\\\":\\\"You are given the following string which contains only digits between 0 and 9:\\\\n\\\\n 215407675\\\\n\\\\n You are also given a target number of -39. Return all possible ways you can add the +(add), -(subtract), and *(multiply) operators to the string such that it evaluates to the target number. (Normal order of operations applies.)\\\\n\\\\n The provided answer should be an array of strings containing the valid expressions. The data provided by this problem is an array with two elements. The first element is the string of digits, while the second element is the target number:\\\\n\\\\n [\\\\\\\"215407675\\\\\\\", -39]\\\\n\\\\n NOTE: The order of evaluation expects script operator precedence NOTE: Numbers in the expression cannot have leading 0's. In other words, \\\\\\\"1+01\\\\\\\" is not a valid expression Examples:\\\\n\\\\n Input: digits = \\\\\\\"123\\\\\\\", target = 6\\\\n Output: [1+2+3, 1*2*3]\\\\n\\\\n Input: digits = \\\\\\\"105\\\\\\\", target = 5\\\\n Output: [1*0+5, 10-5]\\\"},{\\\"server\\\":\\\"blade\\\",\\\"name\\\":\\\"contract-372294-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":193172784,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 193172784?\\\"},{\\\"server\\\":\\\"clarkinc\\\",\\\"name\\\":\\\"contract-355180.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":2619,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 2619 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"}]\"}}],[\"analytics/2023-07-22-14-28-NWO-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-22-14-28-NWO-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-22T18:07:08.879Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-22T18:07:08.879Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"NWO\\\",\\\"firstTime\\\":\\\"2023-07-22T18:07:08.879Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":5250000,\\\"currentFactionRep\\\":0,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-22T18:07:08.880Z\\\"},\\\"augsBought\\\":[\\\"Power Recirculation Core\\\",\\\"Neurotrainer III\\\"],\\\"moneySpent\\\":{\\\"augments\\\":1281000000,\\\"homeCores\\\":0,\\\"homeRam\\\":0,\\\"fluxGovernors\\\":429379128590.6032,\\\"repPurchased\\\":93720000000},\\\"moneyLeft\\\":275337831020.79755,\\\"lastSaved\\\":\\\"2023-07-22T19:28:26.372Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":true,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":5250000,\\\"currentFactionRep\\\":85420.86318980539,\\\"targetRepForGettingToFavor\\\":0,\\\"time\\\":\\\"2023-07-22T19:27:56.980Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$1,379,208,116,078.57\\\",\\\"moneyRightNow\\\":\\\"$592.87\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$1,281,000,000.00\\\",\\\"time\\\":\\\"2023-07-22T19:27:56.981Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$1,287,219,116,506.24\\\",\\\"moneyRightNow\\\":\\\"$799,717,959,611.40\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$1,281,000,000.00\\\",\\\"time\\\":\\\"2023-07-22T19:28:26.347Z\\\"}}\"}}],[\"contracts/2023-07-22T19:28:28.997Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-22T19:28:28.997Z.txt\",\"text\":\"[{\\\"server\\\":\\\"hong-fang-tea\\\",\\\"name\\\":\\\"contract-816744.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[5],[7,3],[2,9,6],[2,7,6,6],[9,1,9,5,9],[8,3,8,4,4,5],[6,2,5,4,4,7,1],[4,6,5,4,2,7,4,7],[8,9,5,6,1,3,5,5,5]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[5],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[7,3],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2,9,6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2,7,6,6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[9,1,9,5,9],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[8,3,8,4,4,5],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[6,2,5,4,4,7,1],\\\\n&nbsp;&nbsp;&nbsp;[4,6,5,4,2,7,4,7],\\\\n&nbsp;&nbsp;[8,9,5,6,1,3,5,5,5]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"iron-gym\\\",\\\"name\\\":\\\"contract-751646.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":1771645887127,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 1771645887127 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"},{\\\"server\\\":\\\"univ-energy\\\",\\\"name\\\":\\\"contract-825287-BladeIndustries.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[14,10],\\\"description\\\":\\\"You are in a grid with 14 rows and 10 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [14, 10]\\\"},{\\\"server\\\":\\\"fulcrumassets\\\",\\\"name\\\":\\\"contract-829370-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,1,0,0,0,0,0,0,0],[0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[1,1,0,0,0,0,0,1,1],[0,0,0,0,1,0,0,0,0],[0,0,1,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,1,1,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,1,0,0,0,0,0,0,0,\\\\n0,0,0,1,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,\\\\n1,1,0,0,0,0,0,1,1,\\\\n0,0,0,0,1,0,0,0,0,\\\\n0,0,1,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,\\\\n1,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,1,1,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"}]\"}}],[\"analytics/2023-07-22-17-47-OmniTekIncorporated-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-22-17-47-OmniTekIncorporated-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-22T21:38:23.035Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-22T21:38:23.035Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"OmniTek Incorporated\\\",\\\"firstTime\\\":\\\"2023-07-22T21:38:23.035Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":3000000,\\\"currentFactionRep\\\":0,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-22T21:38:23.035Z\\\"},\\\"augsBought\\\":[\\\"Augmented Targeting III\\\",\\\"Combat Rib I\\\",\\\"Combat Rib II\\\"],\\\"moneySpent\\\":{\\\"augments\\\":1184325000,\\\"homeCores\\\":0,\\\"homeRam\\\":0,\\\"fluxGovernors\\\":492252175215.5397,\\\"repPurchased\\\":273260000000},\\\"moneyLeft\\\":1105056896.8406372,\\\"lastSaved\\\":\\\"2023-07-22T22:47:33.683Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":true,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":3000000,\\\"currentFactionRep\\\":85407.69418403886,\\\"targetRepForGettingToFavor\\\":0,\\\"time\\\":\\\"2023-07-22T22:43:45.648Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$668,528,618,551.94\\\",\\\"moneyRightNow\\\":\\\"$36,502,335,303.15\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$1,184,325,000.00\\\",\\\"time\\\":\\\"2023-07-22T22:43:45.648Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$766,198,261,105.09\\\",\\\"moneyRightNow\\\":\\\"$767,801,557,112.38\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$1,184,325,000.00\\\",\\\"time\\\":\\\"2023-07-22T22:47:33.635Z\\\"}}\"}}],[\"contracts/2023-07-22T22:47:36.350Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-22T22:47:36.350Z.txt\",\"text\":\"[{\\\"server\\\":\\\"hong-fang-tea\\\",\\\"name\\\":\\\"contract-582184.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[0,-8,4,-2,-7,5,5,-7,1,3],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 0,-8,4,-2,-7,5,5,-7,1,3\\\"},{\\\"server\\\":\\\"iron-gym\\\",\\\"name\\\":\\\"contract-471181.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[9,6,2,1,4,4,0,10],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 9,6,2,1,4,4,0,10\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"zer0\\\",\\\"name\\\":\\\"contract-690374.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"axRv7rLNcTMzusBusBusBusBusBsBusBusBBsBusBuL4sBusBuL4szlzlzlzlzl4kY0KcHFl4kY0KcHF6OHF6OHF6OHieR\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; axRv7rLNcTMzusBusBusBusBusBsBusBusBBsBusBuL4sBusBuL4szlzlzlzlzl4kY0KcHFl4kY0KcHF6OHF6OHF6OHieR\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"snap-fitness\\\",\\\"name\\\":\\\"contract-379736-Sector12.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"))))((a((\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n ))))((a((\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"unitalife\\\",\\\"name\\\":\\\"contract-741659.cct\\\",\\\"type\\\":\\\"Proper 2-Coloring of a Graph\\\",\\\"attemptsLeft\\\":5,\\\"input\\\":[9,[[3,6],[0,6],[1,2],[0,8],[4,7],[5,6],[1,3],[4,5],[7,8],[3,4],[3,8],[1,6],[5,8],[1,8],[6,7],[2,3]]],\\\"description\\\":\\\"You are given the following data, representing a graph:\\\\n [9,[[3,6],[0,6],[1,2],[0,8],[4,7],[5,6],[1,3],[4,5],[7,8],[3,4],[3,8],[1,6],[5,8],[1,8],[6,7],[2,3]]]\\\\n Note that \\\\\\\"graph\\\\\\\", as used here, refers to the field of graph theory, and has no relation to statistics or plotting. The first element of the data represents the number of vertices in the graph. Each vertex is a unique number between 0 and 8. The next element of the data represents the edges of the graph. Two vertices u,v in a graph are said to be adjacent if there exists an edge [u,v]. Note that an edge [u,v] is the same as an edge [v,u], as order does not matter. You must construct a 2-coloring of the graph, meaning that you have to assign each vertex in the graph a \\\\\\\"color\\\\\\\", either 0 or 1, such that no two adjacent vertices have the same color. Submit your answer in the form of an array, where element i represents the color of vertex i. If it is impossible to construct a 2-coloring of the given graph, instead submit an empty array.\\\\n\\\\n Examples:\\\\n\\\\n Input: [4, [[0, 2], [0, 3], [1, 2], [1, 3]]]\\\\n Output: [0, 0, 1, 1]\\\\n\\\\n Input: [3, [[0, 1], [0, 2], [1, 2]]]\\\\n Output: []\\\"},{\\\"server\\\":\\\"zb-def\\\",\\\"name\\\":\\\"contract-274629.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[6,7,6,5,1,-9,-9,6,9,3,-5,1,2,1,10,6,-1,9,6,7,-10,5,8,2,2,-4,-2,-3,-3,-3,-5,7,-5,-10,8,-8,-6,5,10],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 6,7,6,5,1,-9,-9,6,9,3,-5,1,2,1,10,6,-1,9,6,7,-10,5,8,2,2,-4,-2,-3,-3,-3,-5,7,-5,-10,8,-8,-6,5,10\\\"},{\\\"server\\\":\\\"vitalife\\\",\\\"name\\\":\\\"contract-575293.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[9,0,5,9,0,0,3,0,3,4,2,5,1,9],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 9,0,5,9,0,0,3,0,3,4,2,5,1,9\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"megacorp\\\",\\\"name\\\":\\\"contract-967890.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":312328765,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 312328765?\\\"},{\\\"server\\\":\\\"microdyne\\\",\\\"name\\\":\\\"contract-588254.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"5725283224\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 5725283224\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"},{\\\"server\\\":\\\"b-and-a\\\",\\\"name\\\":\\\"contract-67120.cct\\\",\\\"type\\\":\\\"Find All Valid Math Expressions\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[\\\"4281543629\\\",58],\\\"description\\\":\\\"You are given the following string which contains only digits between 0 and 9:\\\\n\\\\n 4281543629\\\\n\\\\n You are also given a target number of 58. Return all possible ways you can add the +(add), -(subtract), and *(multiply) operators to the string such that it evaluates to the target number. (Normal order of operations applies.)\\\\n\\\\n The provided answer should be an array of strings containing the valid expressions. The data provided by this problem is an array with two elements. The first element is the string of digits, while the second element is the target number:\\\\n\\\\n [\\\\\\\"4281543629\\\\\\\", 58]\\\\n\\\\n NOTE: The order of evaluation expects script operator precedence NOTE: Numbers in the expression cannot have leading 0's. In other words, \\\\\\\"1+01\\\\\\\" is not a valid expression Examples:\\\\n\\\\n Input: digits = \\\\\\\"123\\\\\\\", target = 6\\\\n Output: [1+2+3, 1*2*3]\\\\n\\\\n Input: digits = \\\\\\\"105\\\\\\\", target = 5\\\\n Output: [1*0+5, 10-5]\\\"},{\\\"server\\\":\\\"deltaone\\\",\\\"name\\\":\\\"contract-5790.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"NMGpXdr41IG3cxkxGj6fNOtOtOtOsssssstssstsssDvP4QsssDvP4Cl3fsDK7yad0dXd\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; NMGpXdr41IG3cxkxGj6fNOtOtOtOsssssstssstsssDvP4QsssDvP4Cl3fsDK7yad0dXd\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"deltaone\\\",\\\"name\\\":\\\"contract-776549-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,1,0,1,0,0,0,1],[0,0,0,1,0,0,0,0],[1,0,0,0,1,1,0,0],[0,1,1,0,0,1,1,0],[0,0,0,0,0,0,0,0],[1,0,0,0,0,1,0,0],[0,0,0,0,0,0,1,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,1,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,\\\\n0,1,0,1,0,0,0,1,\\\\n0,0,0,1,0,0,0,0,\\\\n1,0,0,0,1,1,0,0,\\\\n0,1,1,0,0,1,1,0,\\\\n0,0,0,0,0,0,0,0,\\\\n1,0,0,0,0,1,0,0,\\\\n0,0,0,0,0,0,1,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"catalyst\\\",\\\"name\\\":\\\"contract-908432-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Array Jumping Game II\\\",\\\"attemptsLeft\\\":3,\\\"input\\\":[1,4,5,5,1,1,3,2,4,3,1],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 1,4,5,5,1,1,3,2,4,3,1\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine the minimum number of jumps to reach the end of the array.\\\\n\\\\n If it's impossible to reach the end, then the answer should be 0.\\\"},{\\\"server\\\":\\\"nectar-net\\\",\\\"name\\\":\\\"contract-618789.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[152,[1,2,3,5,6,7,9,10,12,14,15]],\\\"description\\\":\\\"How many different distinct ways can the number 152 be written as a sum of integers contained in the set:\\\\n\\\\n [1,2,3,5,6,7,9,10,12,14,15]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"}]\"}}],[\"analytics/2023-07-23-11-59-ECorp-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-23-11-59-ECorp-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-23T00:56:11.917Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-23T00:56:11.917Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"Blade Industries\\\",\\\"firstTime\\\":\\\"2023-07-23T00:56:11.917Z\\\"},{\\\"factionToMax\\\":\\\"ECorp\\\",\\\"firstTime\\\":\\\"2023-07-23T14:49:04.700Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":3000000,\\\"currentFactionRep\\\":0,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-23T00:56:11.917Z\\\"},\\\"augsBought\\\":[\\\"Hydroflame Left Arm\\\",\\\"Embedded Netburner Module Direct Memory Access Upgrade\\\",\\\"Embedded Netburner Module Analyze Engine\\\",\\\"ECorp HVMind Implant\\\",\\\"Bionic Legs\\\",\\\"Graphene Bionic Legs Upgrade\\\",\\\"Embedded Netburner Module Core V2 Upgrade\\\",\\\"PC Direct-Neural Interface\\\",\\\"PC Direct-Neural Interface Optimization Submodule\\\",\\\"BitRunners Neurolink\\\",\\\"Xanipher\\\",\\\"Artificial Bio-neural Network Implant\\\",\\\"Neotra\\\",\\\"Synthetic Heart\\\",\\\"OmniTek InfoLoad\\\",\\\"SmartJaw\\\",\\\"HyperSight Corneal Implant\\\",\\\"Cranial Signal Processors - Gen V\\\",\\\"Neural Accelerator\\\",\\\"Enhanced Social Interaction Implant\\\",\\\"Synfibril Muscle\\\"],\\\"moneySpent\\\":{\\\"augments\\\":3523374747269026.5,\\\"homeCores\\\":0,\\\"homeRam\\\":0,\\\"fluxGovernors\\\":0,\\\"repPurchased\\\":0},\\\"moneyLeft\\\":11334270935597.5,\\\"lastSaved\\\":\\\"2023-07-23T16:59:30.520Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":true,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":3000000,\\\"currentFactionRep\\\":85453.09018885919,\\\"targetRepForGettingToFavor\\\":0,\\\"time\\\":\\\"2023-07-23T01:53:57.167Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$2,308,060,639,891.18\\\",\\\"moneyRightNow\\\":\\\"$233,863,763,984.28\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$1,059,000,000.00\\\",\\\"time\\\":\\\"2023-07-23T02:07:05.581Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$2,308,060,639,891.18\\\",\\\"moneyRightNow\\\":\\\"$1,837,790,952,925.58\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$1,059,000,000.00\\\",\\\"time\\\":\\\"2023-07-23T02:07:10.071Z\\\"}}\"}}],[\"analytics/2023-07-23-12-00-Daedalus-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-23-12-00-Daedalus-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-23T17:00:28.477Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-23T17:00:28.477Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"Daedalus\\\",\\\"firstTime\\\":\\\"2023-07-23T17:00:28.477Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":7500000,\\\"currentFactionRep\\\":0,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-23T17:00:28.477Z\\\"},\\\"augsBought\\\":[\\\"Embedded Netburner Module Core V3 Upgrade\\\",\\\"Graphene Bionic Spine Upgrade\\\",\\\"NEMEAN Subdermal Weave\\\",\\\"PCMatrix\\\",\\\"The Red Pill\\\"],\\\"moneySpent\\\":{\\\"augments\\\":133051500000,\\\"homeCores\\\":0,\\\"homeRam\\\":0,\\\"fluxGovernors\\\":45584400824051.39,\\\"repPurchased\\\":0},\\\"moneyLeft\\\":40791342748081.83,\\\"lastSaved\\\":\\\"2023-07-23T17:00:34.804Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":true,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":true,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":7500000,\\\"currentFactionRep\\\":7500126.051371851,\\\"targetRepForGettingToFavor\\\":0,\\\"time\\\":\\\"2023-07-23T17:00:30.625Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":false,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$0.00\\\",\\\"moneyRightNow\\\":\\\"$84,474,904,563,461.88\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$133,051,500,000.00\\\",\\\"time\\\":\\\"2023-07-23T17:00:30.625Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":false,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$0.00\\\",\\\"moneyRightNow\\\":\\\"$86,508,795,072,133.22\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$133,051,500,000.00\\\",\\\"time\\\":\\\"2023-07-23T17:00:34.804Z\\\"}}\"}}],[\"contracts/2023-07-23T16:59:33.190Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-23T16:59:33.190Z.txt\",\"text\":\"[{\\\"server\\\":\\\"iron-gym\\\",\\\"name\\\":\\\"contract-983199.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[3,2],\\\"description\\\":\\\"You are in a grid with 3 rows and 2 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [3, 2]\\\"},{\\\"server\\\":\\\"darkweb\\\",\\\"name\\\":\\\"contract-813084-CyberSec.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[6,9],[25,27],[7,13],[10,12],[6,14],[12,14],[6,10],[6,11]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[6,9],[25,27],[7,13],[10,12],[6,14],[12,14],[6,10],[6,11]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"silver-helix\\\",\\\"name\\\":\\\"contract-815379.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[1],[3,8],[6,7,6]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[1],\\\\n&nbsp;&nbsp;&nbsp;[3,8],\\\\n&nbsp;&nbsp;[6,7,6]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"taiyang-digital\\\",\\\"name\\\":\\\"contract-41190-CyberSec.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[6],[4,8],[3,8,9],[4,4,1,8]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[4,8],\\\\n&nbsp;&nbsp;&nbsp;[3,8,9],\\\\n&nbsp;&nbsp;[4,4,1,8]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"fulcrumtech\\\",\\\"name\\\":\\\"contract-551305-NWO.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[4,2,5,6,7,7,9,7,0,8,5],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 4,2,5,6,7,7,9,7,0,8,5\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"blade\\\",\\\"name\\\":\\\"contract-824470.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":2206660927995210,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 2206660927995210 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"},{\\\"server\\\":\\\"The-Cave\\\",\\\"name\\\":\\\"contract-193424.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[8,2],\\\"description\\\":\\\"You are in a grid with 8 rows and 2 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [8, 2]\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-431789-TianDiHui.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":71704917,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 71704917?\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-581142.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"Je2n72bQKwQOK47OK47OkLgOkLgOkLJYorlU86ToStuUMPmslMPmssOXivQiQIQ\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; Je2n72bQKwQOK47OK47OkLgOkLgOkLJYorlU86ToStuUMPmslMPmssOXivQiQIQ\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-583952.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"WWWWWWWWWuiiiiiIIIIIIFUUvvTTTeeeee3333333333X0zrrrrbbbbvpprrSLkkkkkkkkG7\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; WWWWWWWWWuiiiiiIIIIIIFUUvvTTTeeeee3333333333X0zrrrrbbbbvpprrSLkkkkkkkkG7\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"defcomm\\\",\\\"name\\\":\\\"contract-214124.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"(a)(((()\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n (a)(((()\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"infocomm\\\",\\\"name\\\":\\\"contract-121332.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,1,0],[1,0,1,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,1],[1,0,0,1,0,0,0,0,1,0,0],[0,0,0,1,0,0,0,1,0,0,0],[1,0,0,0,0,1,1,0,0,1,0],[0,0,0,1,0,0,0,0,0,1,0],[0,1,0,0,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,1,0,1,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,1,0,\\\\n1,0,1,0,0,0,0,0,0,0,0,\\\\n1,0,0,0,0,0,0,0,0,0,1,\\\\n1,0,0,1,0,0,0,0,1,0,0,\\\\n0,0,0,1,0,0,0,1,0,0,0,\\\\n1,0,0,0,0,1,1,0,0,1,0,\\\\n0,0,0,1,0,0,0,0,0,1,0,\\\\n0,1,0,0,0,0,0,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"microdyne\\\",\\\"name\\\":\\\"contract-909434.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,1,0,1,0,1],[0,0,0,0,0,1,0,0,1],[1,0,0,0,0,0,0,1,0],[0,1,1,0,0,0,0,0,0],[0,0,0,0,1,0,0,1,0],[0,1,0,0,0,0,1,0,0],[0,1,1,1,0,1,0,0,0],[0,0,1,0,0,0,0,0,0],[0,0,0,0,1,0,1,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,0,0,0,1,0,1,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,1,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,0,0,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,1,0,1,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,1,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"neo-net\\\",\\\"name\\\":\\\"contract-570067.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[10,9],\\\"description\\\":\\\"You are in a grid with 10 rows and 9 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [10, 9]\\\"}]\"}}],[\"contracts/2023-07-24T15:25:43.759Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-24T15:25:43.759Z.txt\",\"text\":\"[{\\\"server\\\":\\\"iron-gym\\\",\\\"name\\\":\\\"contract-983199.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[3,2],\\\"description\\\":\\\"You are in a grid with 3 rows and 2 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [3, 2]\\\"},{\\\"server\\\":\\\"darkweb\\\",\\\"name\\\":\\\"contract-813084-CyberSec.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[6,9],[25,27],[7,13],[10,12],[6,14],[12,14],[6,10],[6,11]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[6,9],[25,27],[7,13],[10,12],[6,14],[12,14],[6,10],[6,11]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"silver-helix\\\",\\\"name\\\":\\\"contract-815379.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[1],[3,8],[6,7,6]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[1],\\\\n&nbsp;&nbsp;&nbsp;[3,8],\\\\n&nbsp;&nbsp;[6,7,6]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"taiyang-digital\\\",\\\"name\\\":\\\"contract-41190-CyberSec.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[6],[4,8],[3,8,9],[4,4,1,8]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[4,8],\\\\n&nbsp;&nbsp;&nbsp;[3,8,9],\\\\n&nbsp;&nbsp;[4,4,1,8]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"fulcrumtech\\\",\\\"name\\\":\\\"contract-551305-NWO.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[4,2,5,6,7,7,9,7,0,8,5],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 4,2,5,6,7,7,9,7,0,8,5\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"blade\\\",\\\"name\\\":\\\"contract-824470.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":2206660927995210,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 2206660927995210 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"},{\\\"server\\\":\\\"The-Cave\\\",\\\"name\\\":\\\"contract-193424.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[8,2],\\\"description\\\":\\\"You are in a grid with 8 rows and 2 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [8, 2]\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-431789-TianDiHui.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":71704917,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 71704917?\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-581142.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"Je2n72bQKwQOK47OK47OkLgOkLgOkLJYorlU86ToStuUMPmslMPmssOXivQiQIQ\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; Je2n72bQKwQOK47OK47OkLgOkLgOkLJYorlU86ToStuUMPmslMPmssOXivQiQIQ\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-583952.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"WWWWWWWWWuiiiiiIIIIIIFUUvvTTTeeeee3333333333X0zrrrrbbbbvpprrSLkkkkkkkkG7\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; WWWWWWWWWuiiiiiIIIIIIFUUvvTTTeeeee3333333333X0zrrrrbbbbvpprrSLkkkkkkkkG7\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"defcomm\\\",\\\"name\\\":\\\"contract-214124.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"(a)(((()\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n (a)(((()\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"infocomm\\\",\\\"name\\\":\\\"contract-121332.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,1,0],[1,0,1,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,1],[1,0,0,1,0,0,0,0,1,0,0],[0,0,0,1,0,0,0,1,0,0,0],[1,0,0,0,0,1,1,0,0,1,0],[0,0,0,1,0,0,0,0,0,1,0],[0,1,0,0,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,1,0,1,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,1,0,\\\\n1,0,1,0,0,0,0,0,0,0,0,\\\\n1,0,0,0,0,0,0,0,0,0,1,\\\\n1,0,0,1,0,0,0,0,1,0,0,\\\\n0,0,0,1,0,0,0,1,0,0,0,\\\\n1,0,0,0,0,1,1,0,0,1,0,\\\\n0,0,0,1,0,0,0,0,0,1,0,\\\\n0,1,0,0,0,0,0,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"microdyne\\\",\\\"name\\\":\\\"contract-909434.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,1,0,1,0,1],[0,0,0,0,0,1,0,0,1],[1,0,0,0,0,0,0,1,0],[0,1,1,0,0,0,0,0,0],[0,0,0,0,1,0,0,1,0],[0,1,0,0,0,0,1,0,0],[0,1,1,1,0,1,0,0,0],[0,0,1,0,0,0,0,0,0],[0,0,0,0,1,0,1,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,0,0,0,1,0,1,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,1,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,0,0,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,1,0,1,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,1,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"neo-net\\\",\\\"name\\\":\\\"contract-570067.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[10,9],\\\"description\\\":\\\"You are in a grid with 10 rows and 9 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [10, 9]\\\"}]\"}}],[\"contracts/2023-07-24T16:11:41.072Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-24T16:11:41.072Z.txt\",\"text\":\"[{\\\"server\\\":\\\"hong-fang-tea\\\",\\\"name\\\":\\\"contract-346431.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\")))a)a))))()((a())(\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n )))a)a))))()((a())(\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"iron-gym\\\",\\\"name\\\":\\\"contract-983199.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[3,2],\\\"description\\\":\\\"You are in a grid with 3 rows and 2 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [3, 2]\\\"},{\\\"server\\\":\\\"darkweb\\\",\\\"name\\\":\\\"contract-813084-CyberSec.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[6,9],[25,27],[7,13],[10,12],[6,14],[12,14],[6,10],[6,11]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[6,9],[25,27],[7,13],[10,12],[6,14],[12,14],[6,10],[6,11]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"silver-helix\\\",\\\"name\\\":\\\"contract-815379.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[1],[3,8],[6,7,6]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[1],\\\\n&nbsp;&nbsp;&nbsp;[3,8],\\\\n&nbsp;&nbsp;[6,7,6]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"taiyang-digital\\\",\\\"name\\\":\\\"contract-41190-CyberSec.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[6],[4,8],[3,8,9],[4,4,1,8]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[4,8],\\\\n&nbsp;&nbsp;&nbsp;[3,8,9],\\\\n&nbsp;&nbsp;[4,4,1,8]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"fulcrumtech\\\",\\\"name\\\":\\\"contract-551305-NWO.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[4,2,5,6,7,7,9,7,0,8,5],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 4,2,5,6,7,7,9,7,0,8,5\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"blade\\\",\\\"name\\\":\\\"contract-824470.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":2206660927995210,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 2206660927995210 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"},{\\\"server\\\":\\\"The-Cave\\\",\\\"name\\\":\\\"contract-193424.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[8,2],\\\"description\\\":\\\"You are in a grid with 8 rows and 2 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [8, 2]\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-431789-TianDiHui.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":71704917,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 71704917?\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-581142.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"Je2n72bQKwQOK47OK47OkLgOkLgOkLJYorlU86ToStuUMPmslMPmssOXivQiQIQ\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; Je2n72bQKwQOK47OK47OkLgOkLgOkLJYorlU86ToStuUMPmslMPmssOXivQiQIQ\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-583952.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"WWWWWWWWWuiiiiiIIIIIIFUUvvTTTeeeee3333333333X0zrrrrbbbbvpprrSLkkkkkkkkG7\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; WWWWWWWWWuiiiiiIIIIIIFUUvvTTTeeeee3333333333X0zrrrrbbbbvpprrSLkkkkkkkkG7\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"defcomm\\\",\\\"name\\\":\\\"contract-214124.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"(a)(((()\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n (a)(((()\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"infocomm\\\",\\\"name\\\":\\\"contract-121332.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,1,0],[1,0,1,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,1],[1,0,0,1,0,0,0,0,1,0,0],[0,0,0,1,0,0,0,1,0,0,0],[1,0,0,0,0,1,1,0,0,1,0],[0,0,0,1,0,0,0,0,0,1,0],[0,1,0,0,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,1,0,1,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,1,0,\\\\n1,0,1,0,0,0,0,0,0,0,0,\\\\n1,0,0,0,0,0,0,0,0,0,1,\\\\n1,0,0,1,0,0,0,0,1,0,0,\\\\n0,0,0,1,0,0,0,1,0,0,0,\\\\n1,0,0,0,0,1,1,0,0,1,0,\\\\n0,0,0,1,0,0,0,0,0,1,0,\\\\n0,1,0,0,0,0,0,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"microdyne\\\",\\\"name\\\":\\\"contract-909434.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,1,0,1,0,1],[0,0,0,0,0,1,0,0,1],[1,0,0,0,0,0,0,1,0],[0,1,1,0,0,0,0,0,0],[0,0,0,0,1,0,0,1,0],[0,1,0,0,0,0,1,0,0],[0,1,1,1,0,1,0,0,0],[0,0,1,0,0,0,0,0,0],[0,0,0,0,1,0,1,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,0,0,0,1,0,1,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,1,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,0,0,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,1,0,1,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,1,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"neo-net\\\",\\\"name\\\":\\\"contract-570067.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[10,9],\\\"description\\\":\\\"You are in a grid with 10 rows and 9 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [10, 9]\\\"}]\"}}],[\"contracts/2023-07-24T16:28:22.611Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-24T16:28:22.611Z.txt\",\"text\":\"[{\\\"server\\\":\\\"hong-fang-tea\\\",\\\"name\\\":\\\"contract-346431.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\")))a)a))))()((a())(\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n )))a)a))))()((a())(\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"iron-gym\\\",\\\"name\\\":\\\"contract-983199.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[3,2],\\\"description\\\":\\\"You are in a grid with 3 rows and 2 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [3, 2]\\\"},{\\\"server\\\":\\\"darkweb\\\",\\\"name\\\":\\\"contract-813084-CyberSec.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[6,9],[25,27],[7,13],[10,12],[6,14],[12,14],[6,10],[6,11]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[6,9],[25,27],[7,13],[10,12],[6,14],[12,14],[6,10],[6,11]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"silver-helix\\\",\\\"name\\\":\\\"contract-815379.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[1],[3,8],[6,7,6]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[1],\\\\n&nbsp;&nbsp;&nbsp;[3,8],\\\\n&nbsp;&nbsp;[6,7,6]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"taiyang-digital\\\",\\\"name\\\":\\\"contract-41190-CyberSec.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[6],[4,8],[3,8,9],[4,4,1,8]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[4,8],\\\\n&nbsp;&nbsp;&nbsp;[3,8,9],\\\\n&nbsp;&nbsp;[4,4,1,8]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"fulcrumtech\\\",\\\"name\\\":\\\"contract-551305-NWO.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[4,2,5,6,7,7,9,7,0,8,5],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 4,2,5,6,7,7,9,7,0,8,5\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"blade\\\",\\\"name\\\":\\\"contract-824470.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":2206660927995210,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 2206660927995210 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"},{\\\"server\\\":\\\"The-Cave\\\",\\\"name\\\":\\\"contract-193424.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[8,2],\\\"description\\\":\\\"You are in a grid with 8 rows and 2 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [8, 2]\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-431789-TianDiHui.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":71704917,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 71704917?\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-581142.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"Je2n72bQKwQOK47OK47OkLgOkLgOkLJYorlU86ToStuUMPmslMPmssOXivQiQIQ\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; Je2n72bQKwQOK47OK47OkLgOkLgOkLJYorlU86ToStuUMPmslMPmssOXivQiQIQ\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-583952.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"WWWWWWWWWuiiiiiIIIIIIFUUvvTTTeeeee3333333333X0zrrrrbbbbvpprrSLkkkkkkkkG7\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; WWWWWWWWWuiiiiiIIIIIIFUUvvTTTeeeee3333333333X0zrrrrbbbbvpprrSLkkkkkkkkG7\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"defcomm\\\",\\\"name\\\":\\\"contract-214124.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"(a)(((()\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n (a)(((()\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"infocomm\\\",\\\"name\\\":\\\"contract-121332.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,1,0],[1,0,1,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,1],[1,0,0,1,0,0,0,0,1,0,0],[0,0,0,1,0,0,0,1,0,0,0],[1,0,0,0,0,1,1,0,0,1,0],[0,0,0,1,0,0,0,0,0,1,0],[0,1,0,0,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,1,0,1,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,1,0,\\\\n1,0,1,0,0,0,0,0,0,0,0,\\\\n1,0,0,0,0,0,0,0,0,0,1,\\\\n1,0,0,1,0,0,0,0,1,0,0,\\\\n0,0,0,1,0,0,0,1,0,0,0,\\\\n1,0,0,0,0,1,1,0,0,1,0,\\\\n0,0,0,1,0,0,0,0,0,1,0,\\\\n0,1,0,0,0,0,0,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"microdyne\\\",\\\"name\\\":\\\"contract-909434.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,1,0,1,0,1],[0,0,0,0,0,1,0,0,1],[1,0,0,0,0,0,0,1,0],[0,1,1,0,0,0,0,0,0],[0,0,0,0,1,0,0,1,0],[0,1,0,0,0,0,1,0,0],[0,1,1,1,0,1,0,0,0],[0,0,1,0,0,0,0,0,0],[0,0,0,0,1,0,1,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,0,0,0,1,0,1,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,1,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,0,0,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,1,0,1,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,1,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"neo-net\\\",\\\"name\\\":\\\"contract-570067.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[10,9],\\\"description\\\":\\\"You are in a grid with 10 rows and 9 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [10, 9]\\\"}]\"}}],[\"contracts/2023-07-24T17:40:18.455Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-24T17:40:18.455Z.txt\",\"text\":\"[{\\\"server\\\":\\\"hong-fang-tea\\\",\\\"name\\\":\\\"contract-346431.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\")))a)a))))()((a())(\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n )))a)a))))()((a())(\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"iron-gym\\\",\\\"name\\\":\\\"contract-983199.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[3,2],\\\"description\\\":\\\"You are in a grid with 3 rows and 2 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [3, 2]\\\"},{\\\"server\\\":\\\"darkweb\\\",\\\"name\\\":\\\"contract-813084-CyberSec.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[6,9],[25,27],[7,13],[10,12],[6,14],[12,14],[6,10],[6,11]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[6,9],[25,27],[7,13],[10,12],[6,14],[12,14],[6,10],[6,11]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"silver-helix\\\",\\\"name\\\":\\\"contract-815379.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[1],[3,8],[6,7,6]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[1],\\\\n&nbsp;&nbsp;&nbsp;[3,8],\\\\n&nbsp;&nbsp;[6,7,6]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"taiyang-digital\\\",\\\"name\\\":\\\"contract-41190-CyberSec.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[6],[4,8],[3,8,9],[4,4,1,8]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[4,8],\\\\n&nbsp;&nbsp;&nbsp;[3,8,9],\\\\n&nbsp;&nbsp;[4,4,1,8]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"fulcrumtech\\\",\\\"name\\\":\\\"contract-551305-NWO.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[4,2,5,6,7,7,9,7,0,8,5],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 4,2,5,6,7,7,9,7,0,8,5\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"blade\\\",\\\"name\\\":\\\"contract-824470.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":2206660927995210,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 2206660927995210 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"},{\\\"server\\\":\\\"The-Cave\\\",\\\"name\\\":\\\"contract-193424.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[8,2],\\\"description\\\":\\\"You are in a grid with 8 rows and 2 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [8, 2]\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-431789-TianDiHui.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":71704917,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 71704917?\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-581142.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"Je2n72bQKwQOK47OK47OkLgOkLgOkLJYorlU86ToStuUMPmslMPmssOXivQiQIQ\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; Je2n72bQKwQOK47OK47OkLgOkLgOkLJYorlU86ToStuUMPmslMPmssOXivQiQIQ\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-583952.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"WWWWWWWWWuiiiiiIIIIIIFUUvvTTTeeeee3333333333X0zrrrrbbbbvpprrSLkkkkkkkkG7\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; WWWWWWWWWuiiiiiIIIIIIFUUvvTTTeeeee3333333333X0zrrrrbbbbvpprrSLkkkkkkkkG7\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"defcomm\\\",\\\"name\\\":\\\"contract-214124.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"(a)(((()\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n (a)(((()\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"infocomm\\\",\\\"name\\\":\\\"contract-121332.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,1,0],[1,0,1,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,1],[1,0,0,1,0,0,0,0,1,0,0],[0,0,0,1,0,0,0,1,0,0,0],[1,0,0,0,0,1,1,0,0,1,0],[0,0,0,1,0,0,0,0,0,1,0],[0,1,0,0,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,1,0,1,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,1,0,\\\\n1,0,1,0,0,0,0,0,0,0,0,\\\\n1,0,0,0,0,0,0,0,0,0,1,\\\\n1,0,0,1,0,0,0,0,1,0,0,\\\\n0,0,0,1,0,0,0,1,0,0,0,\\\\n1,0,0,0,0,1,1,0,0,1,0,\\\\n0,0,0,1,0,0,0,0,0,1,0,\\\\n0,1,0,0,0,0,0,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"microdyne\\\",\\\"name\\\":\\\"contract-909434.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,1,0,1,0,1],[0,0,0,0,0,1,0,0,1],[1,0,0,0,0,0,0,1,0],[0,1,1,0,0,0,0,0,0],[0,0,0,0,1,0,0,1,0],[0,1,0,0,0,0,1,0,0],[0,1,1,1,0,1,0,0,0],[0,0,1,0,0,0,0,0,0],[0,0,0,0,1,0,1,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,0,0,0,1,0,1,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,1,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,0,0,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,1,0,1,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,1,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"neo-net\\\",\\\"name\\\":\\\"contract-570067.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[10,9],\\\"description\\\":\\\"You are in a grid with 10 rows and 9 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [10, 9]\\\"}]\"}}],[\"contracts/2023-07-24T18:07:17.894Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-24T18:07:17.894Z.txt\",\"text\":\"[{\\\"server\\\":\\\"hong-fang-tea\\\",\\\"name\\\":\\\"contract-346431.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\")))a)a))))()((a())(\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n )))a)a))))()((a())(\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"iron-gym\\\",\\\"name\\\":\\\"contract-983199.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[3,2],\\\"description\\\":\\\"You are in a grid with 3 rows and 2 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [3, 2]\\\"},{\\\"server\\\":\\\"darkweb\\\",\\\"name\\\":\\\"contract-813084-CyberSec.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[6,9],[25,27],[7,13],[10,12],[6,14],[12,14],[6,10],[6,11]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[6,9],[25,27],[7,13],[10,12],[6,14],[12,14],[6,10],[6,11]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"silver-helix\\\",\\\"name\\\":\\\"contract-815379.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[1],[3,8],[6,7,6]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[1],\\\\n&nbsp;&nbsp;&nbsp;[3,8],\\\\n&nbsp;&nbsp;[6,7,6]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"taiyang-digital\\\",\\\"name\\\":\\\"contract-41190-CyberSec.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[6],[4,8],[3,8,9],[4,4,1,8]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[4,8],\\\\n&nbsp;&nbsp;&nbsp;[3,8,9],\\\\n&nbsp;&nbsp;[4,4,1,8]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"fulcrumtech\\\",\\\"name\\\":\\\"contract-551305-NWO.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[4,2,5,6,7,7,9,7,0,8,5],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 4,2,5,6,7,7,9,7,0,8,5\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"blade\\\",\\\"name\\\":\\\"contract-824470.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":2206660927995210,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 2206660927995210 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"},{\\\"server\\\":\\\"The-Cave\\\",\\\"name\\\":\\\"contract-193424.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[8,2],\\\"description\\\":\\\"You are in a grid with 8 rows and 2 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [8, 2]\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-431789-TianDiHui.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":71704917,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 71704917?\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-581142.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"Je2n72bQKwQOK47OK47OkLgOkLgOkLJYorlU86ToStuUMPmslMPmssOXivQiQIQ\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; Je2n72bQKwQOK47OK47OkLgOkLgOkLJYorlU86ToStuUMPmslMPmssOXivQiQIQ\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-583952.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"WWWWWWWWWuiiiiiIIIIIIFUUvvTTTeeeee3333333333X0zrrrrbbbbvpprrSLkkkkkkkkG7\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; WWWWWWWWWuiiiiiIIIIIIFUUvvTTTeeeee3333333333X0zrrrrbbbbvpprrSLkkkkkkkkG7\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"defcomm\\\",\\\"name\\\":\\\"contract-214124.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"(a)(((()\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n (a)(((()\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"infocomm\\\",\\\"name\\\":\\\"contract-121332.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,1,0],[1,0,1,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,1],[1,0,0,1,0,0,0,0,1,0,0],[0,0,0,1,0,0,0,1,0,0,0],[1,0,0,0,0,1,1,0,0,1,0],[0,0,0,1,0,0,0,0,0,1,0],[0,1,0,0,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,1,0,1,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,1,0,\\\\n1,0,1,0,0,0,0,0,0,0,0,\\\\n1,0,0,0,0,0,0,0,0,0,1,\\\\n1,0,0,1,0,0,0,0,1,0,0,\\\\n0,0,0,1,0,0,0,1,0,0,0,\\\\n1,0,0,0,0,1,1,0,0,1,0,\\\\n0,0,0,1,0,0,0,0,0,1,0,\\\\n0,1,0,0,0,0,0,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"microdyne\\\",\\\"name\\\":\\\"contract-909434.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,1,0,1,0,1],[0,0,0,0,0,1,0,0,1],[1,0,0,0,0,0,0,1,0],[0,1,1,0,0,0,0,0,0],[0,0,0,0,1,0,0,1,0],[0,1,0,0,0,0,1,0,0],[0,1,1,1,0,1,0,0,0],[0,0,1,0,0,0,0,0,0],[0,0,0,0,1,0,1,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,0,0,0,1,0,1,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,1,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,0,0,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,1,0,1,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,1,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"neo-net\\\",\\\"name\\\":\\\"contract-570067.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[10,9],\\\"description\\\":\\\"You are in a grid with 10 rows and 9 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [10, 9]\\\"}]\"}}],[\"contracts/2023-07-24T18:23:10.151Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-24T18:23:10.151Z.txt\",\"text\":\"[{\\\"server\\\":\\\"hong-fang-tea\\\",\\\"name\\\":\\\"contract-346431.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\")))a)a))))()((a())(\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n )))a)a))))()((a())(\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"iron-gym\\\",\\\"name\\\":\\\"contract-983199.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[3,2],\\\"description\\\":\\\"You are in a grid with 3 rows and 2 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [3, 2]\\\"},{\\\"server\\\":\\\"darkweb\\\",\\\"name\\\":\\\"contract-813084-CyberSec.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[6,9],[25,27],[7,13],[10,12],[6,14],[12,14],[6,10],[6,11]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[6,9],[25,27],[7,13],[10,12],[6,14],[12,14],[6,10],[6,11]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"silver-helix\\\",\\\"name\\\":\\\"contract-815379.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[1],[3,8],[6,7,6]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[1],\\\\n&nbsp;&nbsp;&nbsp;[3,8],\\\\n&nbsp;&nbsp;[6,7,6]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"taiyang-digital\\\",\\\"name\\\":\\\"contract-41190-CyberSec.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[6],[4,8],[3,8,9],[4,4,1,8]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[4,8],\\\\n&nbsp;&nbsp;&nbsp;[3,8,9],\\\\n&nbsp;&nbsp;[4,4,1,8]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"fulcrumtech\\\",\\\"name\\\":\\\"contract-551305-NWO.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[4,2,5,6,7,7,9,7,0,8,5],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 4,2,5,6,7,7,9,7,0,8,5\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"blade\\\",\\\"name\\\":\\\"contract-824470.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":2206660927995210,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 2206660927995210 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"},{\\\"server\\\":\\\"The-Cave\\\",\\\"name\\\":\\\"contract-193424.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[8,2],\\\"description\\\":\\\"You are in a grid with 8 rows and 2 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [8, 2]\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-431789-TianDiHui.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":71704917,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 71704917?\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-581142.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"Je2n72bQKwQOK47OK47OkLgOkLgOkLJYorlU86ToStuUMPmslMPmssOXivQiQIQ\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; Je2n72bQKwQOK47OK47OkLgOkLgOkLJYorlU86ToStuUMPmslMPmssOXivQiQIQ\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-583952.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"WWWWWWWWWuiiiiiIIIIIIFUUvvTTTeeeee3333333333X0zrrrrbbbbvpprrSLkkkkkkkkG7\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; WWWWWWWWWuiiiiiIIIIIIFUUvvTTTeeeee3333333333X0zrrrrbbbbvpprrSLkkkkkkkkG7\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"defcomm\\\",\\\"name\\\":\\\"contract-214124.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"(a)(((()\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n (a)(((()\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"infocomm\\\",\\\"name\\\":\\\"contract-121332.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,1,0],[1,0,1,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,1],[1,0,0,1,0,0,0,0,1,0,0],[0,0,0,1,0,0,0,1,0,0,0],[1,0,0,0,0,1,1,0,0,1,0],[0,0,0,1,0,0,0,0,0,1,0],[0,1,0,0,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,1,0,1,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,1,0,\\\\n1,0,1,0,0,0,0,0,0,0,0,\\\\n1,0,0,0,0,0,0,0,0,0,1,\\\\n1,0,0,1,0,0,0,0,1,0,0,\\\\n0,0,0,1,0,0,0,1,0,0,0,\\\\n1,0,0,0,0,1,1,0,0,1,0,\\\\n0,0,0,1,0,0,0,0,0,1,0,\\\\n0,1,0,0,0,0,0,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"microdyne\\\",\\\"name\\\":\\\"contract-909434.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,1,0,1,0,1],[0,0,0,0,0,1,0,0,1],[1,0,0,0,0,0,0,1,0],[0,1,1,0,0,0,0,0,0],[0,0,0,0,1,0,0,1,0],[0,1,0,0,0,0,1,0,0],[0,1,1,1,0,1,0,0,0],[0,0,1,0,0,0,0,0,0],[0,0,0,0,1,0,1,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,0,0,0,1,0,1,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,1,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,0,0,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,1,0,1,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,1,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"neo-net\\\",\\\"name\\\":\\\"contract-570067.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[10,9],\\\"description\\\":\\\"You are in a grid with 10 rows and 9 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [10, 9]\\\"}]\"}}],[\"contracts/2023-07-24T19:23:40.991Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-24T19:23:40.991Z.txt\",\"text\":\"[{\\\"server\\\":\\\"hong-fang-tea\\\",\\\"name\\\":\\\"contract-346431.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\")))a)a))))()((a())(\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n )))a)a))))()((a())(\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"iron-gym\\\",\\\"name\\\":\\\"contract-983199.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[3,2],\\\"description\\\":\\\"You are in a grid with 3 rows and 2 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [3, 2]\\\"},{\\\"server\\\":\\\"darkweb\\\",\\\"name\\\":\\\"contract-813084-CyberSec.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[6,9],[25,27],[7,13],[10,12],[6,14],[12,14],[6,10],[6,11]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[6,9],[25,27],[7,13],[10,12],[6,14],[12,14],[6,10],[6,11]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"silver-helix\\\",\\\"name\\\":\\\"contract-815379.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[1],[3,8],[6,7,6]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[1],\\\\n&nbsp;&nbsp;&nbsp;[3,8],\\\\n&nbsp;&nbsp;[6,7,6]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"taiyang-digital\\\",\\\"name\\\":\\\"contract-41190-CyberSec.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[6],[4,8],[3,8,9],[4,4,1,8]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[4,8],\\\\n&nbsp;&nbsp;&nbsp;[3,8,9],\\\\n&nbsp;&nbsp;[4,4,1,8]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"fulcrumtech\\\",\\\"name\\\":\\\"contract-551305-NWO.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[4,2,5,6,7,7,9,7,0,8,5],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 4,2,5,6,7,7,9,7,0,8,5\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"kuai-gong\\\",\\\"name\\\":\\\"contract-417173-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":99,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 99 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"blade\\\",\\\"name\\\":\\\"contract-824470.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":2206660927995210,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 2206660927995210 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"},{\\\"server\\\":\\\"The-Cave\\\",\\\"name\\\":\\\"contract-193424.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[8,2],\\\"description\\\":\\\"You are in a grid with 8 rows and 2 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [8, 2]\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-431789-TianDiHui.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":71704917,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 71704917?\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-581142.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"Je2n72bQKwQOK47OK47OkLgOkLgOkLJYorlU86ToStuUMPmslMPmssOXivQiQIQ\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; Je2n72bQKwQOK47OK47OkLgOkLgOkLJYorlU86ToStuUMPmslMPmssOXivQiQIQ\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-583952.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"WWWWWWWWWuiiiiiIIIIIIFUUvvTTTeeeee3333333333X0zrrrrbbbbvpprrSLkkkkkkkkG7\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; WWWWWWWWWuiiiiiIIIIIIFUUvvTTTeeeee3333333333X0zrrrrbbbbvpprrSLkkkkkkkkG7\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"defcomm\\\",\\\"name\\\":\\\"contract-214124.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"(a)(((()\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n (a)(((()\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"infocomm\\\",\\\"name\\\":\\\"contract-121332.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,1,0],[1,0,1,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,1],[1,0,0,1,0,0,0,0,1,0,0],[0,0,0,1,0,0,0,1,0,0,0],[1,0,0,0,0,1,1,0,0,1,0],[0,0,0,1,0,0,0,0,0,1,0],[0,1,0,0,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,1,0,1,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,1,0,\\\\n1,0,1,0,0,0,0,0,0,0,0,\\\\n1,0,0,0,0,0,0,0,0,0,1,\\\\n1,0,0,1,0,0,0,0,1,0,0,\\\\n0,0,0,1,0,0,0,1,0,0,0,\\\\n1,0,0,0,0,1,1,0,0,1,0,\\\\n0,0,0,1,0,0,0,0,0,1,0,\\\\n0,1,0,0,0,0,0,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"microdyne\\\",\\\"name\\\":\\\"contract-909434.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,1,0,1,0,1],[0,0,0,0,0,1,0,0,1],[1,0,0,0,0,0,0,1,0],[0,1,1,0,0,0,0,0,0],[0,0,0,0,1,0,0,1,0],[0,1,0,0,0,0,1,0,0],[0,1,1,1,0,1,0,0,0],[0,0,1,0,0,0,0,0,0],[0,0,0,0,1,0,1,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,0,0,0,1,0,1,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,1,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,0,0,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,1,0,1,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,1,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"neo-net\\\",\\\"name\\\":\\\"contract-570067.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[10,9],\\\"description\\\":\\\"You are in a grid with 10 rows and 9 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [10, 9]\\\"}]\"}}],[\"contracts/2023-07-24T22:15:59.703Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-24T22:15:59.703Z.txt\",\"text\":\"[{\\\"server\\\":\\\"hong-fang-tea\\\",\\\"name\\\":\\\"contract-346431.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\")))a)a))))()((a())(\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n )))a)a))))()((a())(\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"iron-gym\\\",\\\"name\\\":\\\"contract-983199.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[3,2],\\\"description\\\":\\\"You are in a grid with 3 rows and 2 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [3, 2]\\\"},{\\\"server\\\":\\\"darkweb\\\",\\\"name\\\":\\\"contract-813084-CyberSec.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[6,9],[25,27],[7,13],[10,12],[6,14],[12,14],[6,10],[6,11]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[6,9],[25,27],[7,13],[10,12],[6,14],[12,14],[6,10],[6,11]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"silver-helix\\\",\\\"name\\\":\\\"contract-815379.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[1],[3,8],[6,7,6]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[1],\\\\n&nbsp;&nbsp;&nbsp;[3,8],\\\\n&nbsp;&nbsp;[6,7,6]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"taiyang-digital\\\",\\\"name\\\":\\\"contract-41190-CyberSec.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[6],[4,8],[3,8,9],[4,4,1,8]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[4,8],\\\\n&nbsp;&nbsp;&nbsp;[3,8,9],\\\\n&nbsp;&nbsp;[4,4,1,8]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"fulcrumtech\\\",\\\"name\\\":\\\"contract-551305-NWO.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[4,2,5,6,7,7,9,7,0,8,5],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 4,2,5,6,7,7,9,7,0,8,5\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"kuai-gong\\\",\\\"name\\\":\\\"contract-417173-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":99,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 99 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"blade\\\",\\\"name\\\":\\\"contract-824470.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":2206660927995210,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 2206660927995210 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"},{\\\"server\\\":\\\"The-Cave\\\",\\\"name\\\":\\\"contract-193424.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[8,2],\\\"description\\\":\\\"You are in a grid with 8 rows and 2 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [8, 2]\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-431789-TianDiHui.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":71704917,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 71704917?\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-581142.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"Je2n72bQKwQOK47OK47OkLgOkLgOkLJYorlU86ToStuUMPmslMPmssOXivQiQIQ\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; Je2n72bQKwQOK47OK47OkLgOkLgOkLJYorlU86ToStuUMPmslMPmssOXivQiQIQ\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-583952.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"WWWWWWWWWuiiiiiIIIIIIFUUvvTTTeeeee3333333333X0zrrrrbbbbvpprrSLkkkkkkkkG7\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; WWWWWWWWWuiiiiiIIIIIIFUUvvTTTeeeee3333333333X0zrrrrbbbbvpprrSLkkkkkkkkG7\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"defcomm\\\",\\\"name\\\":\\\"contract-214124.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"(a)(((()\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n (a)(((()\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"infocomm\\\",\\\"name\\\":\\\"contract-121332.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,1,0],[1,0,1,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,1],[1,0,0,1,0,0,0,0,1,0,0],[0,0,0,1,0,0,0,1,0,0,0],[1,0,0,0,0,1,1,0,0,1,0],[0,0,0,1,0,0,0,0,0,1,0],[0,1,0,0,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,1,0,1,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,1,0,\\\\n1,0,1,0,0,0,0,0,0,0,0,\\\\n1,0,0,0,0,0,0,0,0,0,1,\\\\n1,0,0,1,0,0,0,0,1,0,0,\\\\n0,0,0,1,0,0,0,1,0,0,0,\\\\n1,0,0,0,0,1,1,0,0,1,0,\\\\n0,0,0,1,0,0,0,0,0,1,0,\\\\n0,1,0,0,0,0,0,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"microdyne\\\",\\\"name\\\":\\\"contract-909434.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,1,0,1,0,1],[0,0,0,0,0,1,0,0,1],[1,0,0,0,0,0,0,1,0],[0,1,1,0,0,0,0,0,0],[0,0,0,0,1,0,0,1,0],[0,1,0,0,0,0,1,0,0],[0,1,1,1,0,1,0,0,0],[0,0,1,0,0,0,0,0,0],[0,0,0,0,1,0,1,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,0,0,0,1,0,1,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,1,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,0,0,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,1,0,1,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,1,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"neo-net\\\",\\\"name\\\":\\\"contract-570067.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[10,9],\\\"description\\\":\\\"You are in a grid with 10 rows and 9 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [10, 9]\\\"}]\"}}],[\"contracts/2023-07-24T23:19:05.118Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-24T23:19:05.118Z.txt\",\"text\":\"[{\\\"server\\\":\\\"hong-fang-tea\\\",\\\"name\\\":\\\"contract-346431.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\")))a)a))))()((a())(\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n )))a)a))))()((a())(\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"iron-gym\\\",\\\"name\\\":\\\"contract-983199.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[3,2],\\\"description\\\":\\\"You are in a grid with 3 rows and 2 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [3, 2]\\\"},{\\\"server\\\":\\\"darkweb\\\",\\\"name\\\":\\\"contract-813084-CyberSec.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[6,9],[25,27],[7,13],[10,12],[6,14],[12,14],[6,10],[6,11]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[6,9],[25,27],[7,13],[10,12],[6,14],[12,14],[6,10],[6,11]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"silver-helix\\\",\\\"name\\\":\\\"contract-815379.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[1],[3,8],[6,7,6]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[1],\\\\n&nbsp;&nbsp;&nbsp;[3,8],\\\\n&nbsp;&nbsp;[6,7,6]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"taiyang-digital\\\",\\\"name\\\":\\\"contract-41190-CyberSec.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[6],[4,8],[3,8,9],[4,4,1,8]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[4,8],\\\\n&nbsp;&nbsp;&nbsp;[3,8,9],\\\\n&nbsp;&nbsp;[4,4,1,8]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"fulcrumtech\\\",\\\"name\\\":\\\"contract-551305-NWO.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[4,2,5,6,7,7,9,7,0,8,5],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 4,2,5,6,7,7,9,7,0,8,5\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"kuai-gong\\\",\\\"name\\\":\\\"contract-417173-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":99,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 99 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"4sigma\\\",\\\"name\\\":\\\"contract-931933.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[3,7,1,8,4,0,5,-3,-3,3,-1,5,-7,0,-3,-4,-7],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 3,7,1,8,4,0,5,-3,-3,3,-1,5,-7,0,-3,-4,-7\\\"},{\\\"server\\\":\\\"blade\\\",\\\"name\\\":\\\"contract-824470.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":2206660927995210,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 2206660927995210 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"},{\\\"server\\\":\\\"The-Cave\\\",\\\"name\\\":\\\"contract-193424.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[8,2],\\\"description\\\":\\\"You are in a grid with 8 rows and 2 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [8, 2]\\\"},{\\\"server\\\":\\\"The-Cave\\\",\\\"name\\\":\\\"contract-997451-Chongqing.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[-1,-7,-8,3,-6,-4,-9,3,-9,5,-3,6,1,-3,3,5,8,0,-7,-8,7,9,-6,7,-4,6,-9,2,-3,2,7,10,-9,-9,10,-4,6,-7,-9],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n -1,-7,-8,3,-6,-4,-9,3,-9,5,-3,6,1,-3,3,5,8,0,-7,-8,7,9,-6,7,-4,6,-9,2,-3,2,7,10,-9,-9,10,-4,6,-7,-9\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-431789-TianDiHui.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":71704917,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 71704917?\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-581142.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"Je2n72bQKwQOK47OK47OkLgOkLgOkLJYorlU86ToStuUMPmslMPmssOXivQiQIQ\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; Je2n72bQKwQOK47OK47OkLgOkLgOkLJYorlU86ToStuUMPmslMPmssOXivQiQIQ\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-583952.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"WWWWWWWWWuiiiiiIIIIIIFUUvvTTTeeeee3333333333X0zrrrrbbbbvpprrSLkkkkkkkkG7\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; WWWWWWWWWuiiiiiIIIIIIFUUvvTTTeeeee3333333333X0zrrrrbbbbvpprrSLkkkkkkkkG7\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"defcomm\\\",\\\"name\\\":\\\"contract-214124.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"(a)(((()\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n (a)(((()\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"infocomm\\\",\\\"name\\\":\\\"contract-121332.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,1,0],[1,0,1,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,1],[1,0,0,1,0,0,0,0,1,0,0],[0,0,0,1,0,0,0,1,0,0,0],[1,0,0,0,0,1,1,0,0,1,0],[0,0,0,1,0,0,0,0,0,1,0],[0,1,0,0,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,1,0,1,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,1,0,\\\\n1,0,1,0,0,0,0,0,0,0,0,\\\\n1,0,0,0,0,0,0,0,0,0,1,\\\\n1,0,0,1,0,0,0,0,1,0,0,\\\\n0,0,0,1,0,0,0,1,0,0,0,\\\\n1,0,0,0,0,1,1,0,0,1,0,\\\\n0,0,0,1,0,0,0,0,0,1,0,\\\\n0,1,0,0,0,0,0,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"microdyne\\\",\\\"name\\\":\\\"contract-909434.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,1,0,1,0,1],[0,0,0,0,0,1,0,0,1],[1,0,0,0,0,0,0,1,0],[0,1,1,0,0,0,0,0,0],[0,0,0,0,1,0,0,1,0],[0,1,0,0,0,0,1,0,0],[0,1,1,1,0,1,0,0,0],[0,0,1,0,0,0,0,0,0],[0,0,0,0,1,0,1,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,0,0,0,1,0,1,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,1,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,0,0,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,1,0,1,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,1,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"neo-net\\\",\\\"name\\\":\\\"contract-570067.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[10,9],\\\"description\\\":\\\"You are in a grid with 10 rows and 9 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [10, 9]\\\"}]\"}}],[\"contracts/2023-07-25T11:22:07.755Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-25T11:22:07.755Z.txt\",\"text\":\"[{\\\"server\\\":\\\"foodnstuff\\\",\\\"name\\\":\\\"contract-727697.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[6],[7,2],[5,4,2],[5,1,6,1],[5,7,2,1,6],[5,5,3,1,7,1],[2,7,9,7,2,8,2],[7,7,8,3,4,8,3,7],[1,7,5,4,2,4,3,6,6],[3,3,5,4,3,4,5,8,7,1]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[7,2],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[5,4,2],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[5,1,6,1],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[5,7,2,1,6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[5,5,3,1,7,1],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2,7,9,7,2,8,2],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[7,7,8,3,4,8,3,7],\\\\n&nbsp;&nbsp;&nbsp;[1,7,5,4,2,4,3,6,6],\\\\n&nbsp;&nbsp;[3,3,5,4,3,4,5,8,7,1]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"hong-fang-tea\\\",\\\"name\\\":\\\"contract-346431.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\")))a)a))))()((a())(\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n )))a)a))))()((a())(\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"iron-gym\\\",\\\"name\\\":\\\"contract-983199.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[3,2],\\\"description\\\":\\\"You are in a grid with 3 rows and 2 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [3, 2]\\\"},{\\\"server\\\":\\\"darkweb\\\",\\\"name\\\":\\\"contract-813084-CyberSec.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[6,9],[25,27],[7,13],[10,12],[6,14],[12,14],[6,10],[6,11]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[6,9],[25,27],[7,13],[10,12],[6,14],[12,14],[6,10],[6,11]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"silver-helix\\\",\\\"name\\\":\\\"contract-815379.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[1],[3,8],[6,7,6]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[1],\\\\n&nbsp;&nbsp;&nbsp;[3,8],\\\\n&nbsp;&nbsp;[6,7,6]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"computek\\\",\\\"name\\\":\\\"contract-487301.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"afMUfkDBBBBBBBVBBBBB2iR0R0R0RfuR0QBVsoDwfIVsoiDwfsBkbsP3wfsBkbfbfsB\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; afMUfkDBBBBBBBVBBBBB2iR0R0R0RfuR0QBVsoDwfIVsoiDwfsBkbsP3wfsBkbfbfsB\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"johnson-ortho\\\",\\\"name\\\":\\\"contract-51402-NiteSec.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[6,9],\\\"description\\\":\\\"You are in a grid with 6 rows and 9 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [6, 9]\\\"},{\\\"server\\\":\\\"avmnite-02h\\\",\\\"name\\\":\\\"contract-757402-ECorp.cct\\\",\\\"type\\\":\\\"Proper 2-Coloring of a Graph\\\",\\\"attemptsLeft\\\":5,\\\"input\\\":[10,[[1,8],[2,3],[6,8],[0,2],[3,4],[5,9],[3,9],[3,7],[2,6],[0,9],[4,5],[5,7],[0,4]]],\\\"description\\\":\\\"You are given the following data, representing a graph:\\\\n [10,[[1,8],[2,3],[6,8],[0,2],[3,4],[5,9],[3,9],[3,7],[2,6],[0,9],[4,5],[5,7],[0,4]]]\\\\n Note that \\\\\\\"graph\\\\\\\", as used here, refers to the field of graph theory, and has no relation to statistics or plotting. The first element of the data represents the number of vertices in the graph. Each vertex is a unique number between 0 and 9. The next element of the data represents the edges of the graph. Two vertices u,v in a graph are said to be adjacent if there exists an edge [u,v]. Note that an edge [u,v] is the same as an edge [v,u], as order does not matter. You must construct a 2-coloring of the graph, meaning that you have to assign each vertex in the graph a \\\\\\\"color\\\\\\\", either 0 or 1, such that no two adjacent vertices have the same color. Submit your answer in the form of an array, where element i represents the color of vertex i. If it is impossible to construct a 2-coloring of the given graph, instead submit an empty array.\\\\n\\\\n Examples:\\\\n\\\\n Input: [4, [[0, 2], [0, 3], [1, 2], [1, 3]]]\\\\n Output: [0, 0, 1, 1]\\\\n\\\\n Input: [3, [[0, 1], [0, 2], [1, 2]]]\\\\n Output: []\\\"},{\\\"server\\\":\\\"icarus\\\",\\\"name\\\":\\\"contract-988660.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":159120851,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 159120851?\\\"},{\\\"server\\\":\\\"univ-energy\\\",\\\"name\\\":\\\"contract-426113-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[-5,7,4,-10,-7,6,2,3,6,-7,-2,-7,-2,-10,9,-10,7,5,-2,5,4,8,7,-10,3,8,-8,-3,8,-3,3,-7,-1,6],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n -5,7,4,-10,-7,6,2,3,6,-7,-2,-7,-2,-10,9,-10,7,5,-2,5,4,8,7,-10,3,8,-8,-3,8,-3,3,-7,-1,6\\\"},{\\\"server\\\":\\\"taiyang-digital\\\",\\\"name\\\":\\\"contract-41190-CyberSec.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[6],[4,8],[3,8,9],[4,4,1,8]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[4,8],\\\\n&nbsp;&nbsp;&nbsp;[3,8,9],\\\\n&nbsp;&nbsp;[4,4,1,8]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"fulcrumtech\\\",\\\"name\\\":\\\"contract-551305-NWO.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[4,2,5,6,7,7,9,7,0,8,5],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 4,2,5,6,7,7,9,7,0,8,5\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"kuai-gong\\\",\\\"name\\\":\\\"contract-417173-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":99,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 99 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"4sigma\\\",\\\"name\\\":\\\"contract-931933.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[3,7,1,8,4,0,5,-3,-3,3,-1,5,-7,0,-3,-4,-7],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 3,7,1,8,4,0,5,-3,-3,3,-1,5,-7,0,-3,-4,-7\\\"},{\\\"server\\\":\\\"megacorp\\\",\\\"name\\\":\\\"contract-10960-BladeIndustries.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"pTepTGD8eDoqbMN8AR8qNM8qNGFNM8qNGFNTFNTFNTFj5gFllGqLFllrXLFllFllFllFlllFllFI2sb2R0F2R0\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; pTepTGD8eDoqbMN8AR8qNM8qNGFNM8qNGFNTFNTFNTFj5gFllGqLFllrXLFllFllFllFlllFllFI2sb2R0F2R0\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"fulcrumassets\\\",\\\"name\\\":\\\"contract-408932-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[0,0,1,-5,9,-9,4,-3,3,9,6,7,9,10,-2,-9,1,-9,-9,-8,4],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 0,0,1,-5,9,-9,4,-3,3,9,6,7,9,10,-2,-9,1,-9,-9,-8,4\\\"},{\\\"server\\\":\\\"fulcrumassets\\\",\\\"name\\\":\\\"contract-663748.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[-7,-5,4,0,-4,3],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n -7,-5,4,0,-4,3\\\"},{\\\"server\\\":\\\"blade\\\",\\\"name\\\":\\\"contract-321164.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":94,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 94 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"blade\\\",\\\"name\\\":\\\"contract-824470.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":2206660927995210,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 2206660927995210 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"},{\\\"server\\\":\\\"The-Cave\\\",\\\"name\\\":\\\"contract-193424.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[8,2],\\\"description\\\":\\\"You are in a grid with 8 rows and 2 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [8, 2]\\\"},{\\\"server\\\":\\\"The-Cave\\\",\\\"name\\\":\\\"contract-997451-Chongqing.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[-1,-7,-8,3,-6,-4,-9,3,-9,5,-3,6,1,-3,3,5,8,0,-7,-8,7,9,-6,7,-4,6,-9,2,-3,2,7,10,-9,-9,10,-4,6,-7,-9],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n -1,-7,-8,3,-6,-4,-9,3,-9,5,-3,6,1,-3,3,5,8,0,-7,-8,7,9,-6,7,-4,6,-9,2,-3,2,7,10,-9,-9,10,-4,6,-7,-9\\\"},{\\\"server\\\":\\\"stormtech\\\",\\\"name\\\":\\\"contract-554970-CyberSec.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"nnjjFFOOCCC888JuaaaaaaaaaaDDKKt777700000000QQMLLLLLLQeeMbuuuuuu66jOOOOOOOOOzzzzrrrrrr\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; nnjjFFOOCCC888JuaaaaaaaaaaDDKKt777700000000QQMLLLLLLQeeMbuuuuuu66jOOOOOOOOOzzzzrrrrrr\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-431789-TianDiHui.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":71704917,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 71704917?\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-581142.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"Je2n72bQKwQOK47OK47OkLgOkLgOkLJYorlU86ToStuUMPmslMPmssOXivQiQIQ\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; Je2n72bQKwQOK47OK47OkLgOkLgOkLJYorlU86ToStuUMPmslMPmssOXivQiQIQ\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-583952.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"WWWWWWWWWuiiiiiIIIIIIFUUvvTTTeeeee3333333333X0zrrrrbbbbvpprrSLkkkkkkkkG7\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; WWWWWWWWWuiiiiiIIIIIIFUUvvTTTeeeee3333333333X0zrrrrbbbbvpprrSLkkkkkkkkG7\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"I.I.I.I\\\",\\\"name\\\":\\\"contract-364593-ECorp.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[15,[1,2,4,5,6,9,10,11,12,13,14,15]],\\\"description\\\":\\\"How many different distinct ways can the number 15 be written as a sum of integers contained in the set:\\\\n\\\\n [1,2,4,5,6,9,10,11,12,13,14,15]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"defcomm\\\",\\\"name\\\":\\\"contract-214124.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"(a)(((()\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n (a)(((()\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"infocomm\\\",\\\"name\\\":\\\"contract-121332.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,1,0],[1,0,1,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,1],[1,0,0,1,0,0,0,0,1,0,0],[0,0,0,1,0,0,0,1,0,0,0],[1,0,0,0,0,1,1,0,0,1,0],[0,0,0,1,0,0,0,0,0,1,0],[0,1,0,0,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,1,0,1,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,1,0,\\\\n1,0,1,0,0,0,0,0,0,0,0,\\\\n1,0,0,0,0,0,0,0,0,0,1,\\\\n1,0,0,1,0,0,0,0,1,0,0,\\\\n0,0,0,1,0,0,0,1,0,0,0,\\\\n1,0,0,0,0,1,1,0,0,1,0,\\\\n0,0,0,1,0,0,0,0,0,1,0,\\\\n0,1,0,0,0,0,0,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"microdyne\\\",\\\"name\\\":\\\"contract-909434.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,1,0,1,0,1],[0,0,0,0,0,1,0,0,1],[1,0,0,0,0,0,0,1,0],[0,1,1,0,0,0,0,0,0],[0,0,0,0,1,0,0,1,0],[0,1,0,0,0,0,1,0,0],[0,1,1,1,0,1,0,0,0],[0,0,1,0,0,0,0,0,0],[0,0,0,0,1,0,1,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,0,0,0,1,0,1,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,1,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,0,0,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,1,0,1,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,1,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"neo-net\\\",\\\"name\\\":\\\"contract-570067.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[10,9],\\\"description\\\":\\\"You are in a grid with 10 rows and 9 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [10, 9]\\\"},{\\\"server\\\":\\\"omega-net\\\",\\\"name\\\":\\\"contract-990335-NWO.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"0100100010000000100000001100110001011100011111110100010101110100\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '0100100010000000100000001100110001011100011111110100010101110100' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"}]\"}}],[\"contracts/2023-07-25T11:26:58.539Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-25T11:26:58.539Z.txt\",\"text\":\"[{\\\"server\\\":\\\"foodnstuff\\\",\\\"name\\\":\\\"contract-727697.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[6],[7,2],[5,4,2],[5,1,6,1],[5,7,2,1,6],[5,5,3,1,7,1],[2,7,9,7,2,8,2],[7,7,8,3,4,8,3,7],[1,7,5,4,2,4,3,6,6],[3,3,5,4,3,4,5,8,7,1]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[7,2],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[5,4,2],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[5,1,6,1],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[5,7,2,1,6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[5,5,3,1,7,1],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2,7,9,7,2,8,2],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[7,7,8,3,4,8,3,7],\\\\n&nbsp;&nbsp;&nbsp;[1,7,5,4,2,4,3,6,6],\\\\n&nbsp;&nbsp;[3,3,5,4,3,4,5,8,7,1]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"hong-fang-tea\\\",\\\"name\\\":\\\"contract-346431.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\")))a)a))))()((a())(\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n )))a)a))))()((a())(\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"iron-gym\\\",\\\"name\\\":\\\"contract-983199.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[3,2],\\\"description\\\":\\\"You are in a grid with 3 rows and 2 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [3, 2]\\\"},{\\\"server\\\":\\\"darkweb\\\",\\\"name\\\":\\\"contract-813084-CyberSec.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[6,9],[25,27],[7,13],[10,12],[6,14],[12,14],[6,10],[6,11]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[6,9],[25,27],[7,13],[10,12],[6,14],[12,14],[6,10],[6,11]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"silver-helix\\\",\\\"name\\\":\\\"contract-815379.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[1],[3,8],[6,7,6]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[1],\\\\n&nbsp;&nbsp;&nbsp;[3,8],\\\\n&nbsp;&nbsp;[6,7,6]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"computek\\\",\\\"name\\\":\\\"contract-487301.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"afMUfkDBBBBBBBVBBBBB2iR0R0R0RfuR0QBVsoDwfIVsoiDwfsBkbsP3wfsBkbfbfsB\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; afMUfkDBBBBBBBVBBBBB2iR0R0R0RfuR0QBVsoDwfIVsoiDwfsBkbsP3wfsBkbfbfsB\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"johnson-ortho\\\",\\\"name\\\":\\\"contract-51402-NiteSec.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[6,9],\\\"description\\\":\\\"You are in a grid with 6 rows and 9 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [6, 9]\\\"},{\\\"server\\\":\\\"avmnite-02h\\\",\\\"name\\\":\\\"contract-757402-ECorp.cct\\\",\\\"type\\\":\\\"Proper 2-Coloring of a Graph\\\",\\\"attemptsLeft\\\":5,\\\"input\\\":[10,[[1,8],[2,3],[6,8],[0,2],[3,4],[5,9],[3,9],[3,7],[2,6],[0,9],[4,5],[5,7],[0,4]]],\\\"description\\\":\\\"You are given the following data, representing a graph:\\\\n [10,[[1,8],[2,3],[6,8],[0,2],[3,4],[5,9],[3,9],[3,7],[2,6],[0,9],[4,5],[5,7],[0,4]]]\\\\n Note that \\\\\\\"graph\\\\\\\", as used here, refers to the field of graph theory, and has no relation to statistics or plotting. The first element of the data represents the number of vertices in the graph. Each vertex is a unique number between 0 and 9. The next element of the data represents the edges of the graph. Two vertices u,v in a graph are said to be adjacent if there exists an edge [u,v]. Note that an edge [u,v] is the same as an edge [v,u], as order does not matter. You must construct a 2-coloring of the graph, meaning that you have to assign each vertex in the graph a \\\\\\\"color\\\\\\\", either 0 or 1, such that no two adjacent vertices have the same color. Submit your answer in the form of an array, where element i represents the color of vertex i. If it is impossible to construct a 2-coloring of the given graph, instead submit an empty array.\\\\n\\\\n Examples:\\\\n\\\\n Input: [4, [[0, 2], [0, 3], [1, 2], [1, 3]]]\\\\n Output: [0, 0, 1, 1]\\\\n\\\\n Input: [3, [[0, 1], [0, 2], [1, 2]]]\\\\n Output: []\\\"},{\\\"server\\\":\\\"icarus\\\",\\\"name\\\":\\\"contract-988660.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":159120851,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 159120851?\\\"},{\\\"server\\\":\\\"univ-energy\\\",\\\"name\\\":\\\"contract-426113-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[-5,7,4,-10,-7,6,2,3,6,-7,-2,-7,-2,-10,9,-10,7,5,-2,5,4,8,7,-10,3,8,-8,-3,8,-3,3,-7,-1,6],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n -5,7,4,-10,-7,6,2,3,6,-7,-2,-7,-2,-10,9,-10,7,5,-2,5,4,8,7,-10,3,8,-8,-3,8,-3,3,-7,-1,6\\\"},{\\\"server\\\":\\\"taiyang-digital\\\",\\\"name\\\":\\\"contract-41190-CyberSec.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[6],[4,8],[3,8,9],[4,4,1,8]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[4,8],\\\\n&nbsp;&nbsp;&nbsp;[3,8,9],\\\\n&nbsp;&nbsp;[4,4,1,8]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"fulcrumtech\\\",\\\"name\\\":\\\"contract-551305-NWO.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[4,2,5,6,7,7,9,7,0,8,5],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 4,2,5,6,7,7,9,7,0,8,5\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"kuai-gong\\\",\\\"name\\\":\\\"contract-417173-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":99,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 99 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"4sigma\\\",\\\"name\\\":\\\"contract-931933.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[3,7,1,8,4,0,5,-3,-3,3,-1,5,-7,0,-3,-4,-7],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 3,7,1,8,4,0,5,-3,-3,3,-1,5,-7,0,-3,-4,-7\\\"},{\\\"server\\\":\\\"megacorp\\\",\\\"name\\\":\\\"contract-10960-BladeIndustries.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"pTepTGD8eDoqbMN8AR8qNM8qNGFNM8qNGFNTFNTFNTFj5gFllGqLFllrXLFllFllFllFlllFllFI2sb2R0F2R0\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; pTepTGD8eDoqbMN8AR8qNM8qNGFNM8qNGFNTFNTFNTFj5gFllGqLFllrXLFllFllFllFlllFllFI2sb2R0F2R0\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"fulcrumassets\\\",\\\"name\\\":\\\"contract-408932-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[0,0,1,-5,9,-9,4,-3,3,9,6,7,9,10,-2,-9,1,-9,-9,-8,4],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 0,0,1,-5,9,-9,4,-3,3,9,6,7,9,10,-2,-9,1,-9,-9,-8,4\\\"},{\\\"server\\\":\\\"fulcrumassets\\\",\\\"name\\\":\\\"contract-663748.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[-7,-5,4,0,-4,3],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n -7,-5,4,0,-4,3\\\"},{\\\"server\\\":\\\"blade\\\",\\\"name\\\":\\\"contract-321164.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":94,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 94 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"blade\\\",\\\"name\\\":\\\"contract-824470.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":2206660927995210,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 2206660927995210 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"},{\\\"server\\\":\\\"The-Cave\\\",\\\"name\\\":\\\"contract-193424.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[8,2],\\\"description\\\":\\\"You are in a grid with 8 rows and 2 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [8, 2]\\\"},{\\\"server\\\":\\\"The-Cave\\\",\\\"name\\\":\\\"contract-997451-Chongqing.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[-1,-7,-8,3,-6,-4,-9,3,-9,5,-3,6,1,-3,3,5,8,0,-7,-8,7,9,-6,7,-4,6,-9,2,-3,2,7,10,-9,-9,10,-4,6,-7,-9],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n -1,-7,-8,3,-6,-4,-9,3,-9,5,-3,6,1,-3,3,5,8,0,-7,-8,7,9,-6,7,-4,6,-9,2,-3,2,7,10,-9,-9,10,-4,6,-7,-9\\\"},{\\\"server\\\":\\\"stormtech\\\",\\\"name\\\":\\\"contract-554970-CyberSec.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"nnjjFFOOCCC888JuaaaaaaaaaaDDKKt777700000000QQMLLLLLLQeeMbuuuuuu66jOOOOOOOOOzzzzrrrrrr\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; nnjjFFOOCCC888JuaaaaaaaaaaDDKKt777700000000QQMLLLLLLQeeMbuuuuuu66jOOOOOOOOOzzzzrrrrrr\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-431789-TianDiHui.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":71704917,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 71704917?\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-581142.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"Je2n72bQKwQOK47OK47OkLgOkLgOkLJYorlU86ToStuUMPmslMPmssOXivQiQIQ\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; Je2n72bQKwQOK47OK47OkLgOkLgOkLJYorlU86ToStuUMPmslMPmssOXivQiQIQ\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-583952.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"WWWWWWWWWuiiiiiIIIIIIFUUvvTTTeeeee3333333333X0zrrrrbbbbvpprrSLkkkkkkkkG7\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; WWWWWWWWWuiiiiiIIIIIIFUUvvTTTeeeee3333333333X0zrrrrbbbbvpprrSLkkkkkkkkG7\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"I.I.I.I\\\",\\\"name\\\":\\\"contract-364593-ECorp.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[15,[1,2,4,5,6,9,10,11,12,13,14,15]],\\\"description\\\":\\\"How many different distinct ways can the number 15 be written as a sum of integers contained in the set:\\\\n\\\\n [1,2,4,5,6,9,10,11,12,13,14,15]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"defcomm\\\",\\\"name\\\":\\\"contract-214124.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"(a)(((()\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n (a)(((()\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"infocomm\\\",\\\"name\\\":\\\"contract-121332.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,1,0],[1,0,1,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,1],[1,0,0,1,0,0,0,0,1,0,0],[0,0,0,1,0,0,0,1,0,0,0],[1,0,0,0,0,1,1,0,0,1,0],[0,0,0,1,0,0,0,0,0,1,0],[0,1,0,0,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,1,0,1,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,1,0,\\\\n1,0,1,0,0,0,0,0,0,0,0,\\\\n1,0,0,0,0,0,0,0,0,0,1,\\\\n1,0,0,1,0,0,0,0,1,0,0,\\\\n0,0,0,1,0,0,0,1,0,0,0,\\\\n1,0,0,0,0,1,1,0,0,1,0,\\\\n0,0,0,1,0,0,0,0,0,1,0,\\\\n0,1,0,0,0,0,0,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"microdyne\\\",\\\"name\\\":\\\"contract-909434.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,1,0,1,0,1],[0,0,0,0,0,1,0,0,1],[1,0,0,0,0,0,0,1,0],[0,1,1,0,0,0,0,0,0],[0,0,0,0,1,0,0,1,0],[0,1,0,0,0,0,1,0,0],[0,1,1,1,0,1,0,0,0],[0,0,1,0,0,0,0,0,0],[0,0,0,0,1,0,1,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,0,0,0,1,0,1,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,1,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,0,0,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,1,0,1,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,1,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"neo-net\\\",\\\"name\\\":\\\"contract-570067.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[10,9],\\\"description\\\":\\\"You are in a grid with 10 rows and 9 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [10, 9]\\\"},{\\\"server\\\":\\\"omega-net\\\",\\\"name\\\":\\\"contract-990335-NWO.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"0100100010000000100000001100110001011100011111110100010101110100\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '0100100010000000100000001100110001011100011111110100010101110100' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"}]\"}}],[\"contracts/2023-07-25T11:57:10.456Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-25T11:57:10.456Z.txt\",\"text\":\"[{\\\"server\\\":\\\"foodnstuff\\\",\\\"name\\\":\\\"contract-727697.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[6],[7,2],[5,4,2],[5,1,6,1],[5,7,2,1,6],[5,5,3,1,7,1],[2,7,9,7,2,8,2],[7,7,8,3,4,8,3,7],[1,7,5,4,2,4,3,6,6],[3,3,5,4,3,4,5,8,7,1]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[7,2],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[5,4,2],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[5,1,6,1],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[5,7,2,1,6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[5,5,3,1,7,1],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2,7,9,7,2,8,2],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[7,7,8,3,4,8,3,7],\\\\n&nbsp;&nbsp;&nbsp;[1,7,5,4,2,4,3,6,6],\\\\n&nbsp;&nbsp;[3,3,5,4,3,4,5,8,7,1]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"hong-fang-tea\\\",\\\"name\\\":\\\"contract-346431.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\")))a)a))))()((a())(\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n )))a)a))))()((a())(\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"harakiri-sushi\\\",\\\"name\\\":\\\"contract-46182.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":66,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 66 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"iron-gym\\\",\\\"name\\\":\\\"contract-983199.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[3,2],\\\"description\\\":\\\"You are in a grid with 3 rows and 2 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [3, 2]\\\"},{\\\"server\\\":\\\"darkweb\\\",\\\"name\\\":\\\"contract-813084-CyberSec.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[6,9],[25,27],[7,13],[10,12],[6,14],[12,14],[6,10],[6,11]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[6,9],[25,27],[7,13],[10,12],[6,14],[12,14],[6,10],[6,11]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"silver-helix\\\",\\\"name\\\":\\\"contract-815379.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[1],[3,8],[6,7,6]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[1],\\\\n&nbsp;&nbsp;&nbsp;[3,8],\\\\n&nbsp;&nbsp;[6,7,6]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"computek\\\",\\\"name\\\":\\\"contract-487301.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"afMUfkDBBBBBBBVBBBBB2iR0R0R0RfuR0QBVsoDwfIVsoiDwfsBkbsP3wfsBkbfbfsB\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; afMUfkDBBBBBBBVBBBBB2iR0R0R0RfuR0QBVsoDwfIVsoiDwfsBkbsP3wfsBkbfbfsB\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"johnson-ortho\\\",\\\"name\\\":\\\"contract-51402-NiteSec.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[6,9],\\\"description\\\":\\\"You are in a grid with 6 rows and 9 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [6, 9]\\\"},{\\\"server\\\":\\\"avmnite-02h\\\",\\\"name\\\":\\\"contract-757402-ECorp.cct\\\",\\\"type\\\":\\\"Proper 2-Coloring of a Graph\\\",\\\"attemptsLeft\\\":5,\\\"input\\\":[10,[[1,8],[2,3],[6,8],[0,2],[3,4],[5,9],[3,9],[3,7],[2,6],[0,9],[4,5],[5,7],[0,4]]],\\\"description\\\":\\\"You are given the following data, representing a graph:\\\\n [10,[[1,8],[2,3],[6,8],[0,2],[3,4],[5,9],[3,9],[3,7],[2,6],[0,9],[4,5],[5,7],[0,4]]]\\\\n Note that \\\\\\\"graph\\\\\\\", as used here, refers to the field of graph theory, and has no relation to statistics or plotting. The first element of the data represents the number of vertices in the graph. Each vertex is a unique number between 0 and 9. The next element of the data represents the edges of the graph. Two vertices u,v in a graph are said to be adjacent if there exists an edge [u,v]. Note that an edge [u,v] is the same as an edge [v,u], as order does not matter. You must construct a 2-coloring of the graph, meaning that you have to assign each vertex in the graph a \\\\\\\"color\\\\\\\", either 0 or 1, such that no two adjacent vertices have the same color. Submit your answer in the form of an array, where element i represents the color of vertex i. If it is impossible to construct a 2-coloring of the given graph, instead submit an empty array.\\\\n\\\\n Examples:\\\\n\\\\n Input: [4, [[0, 2], [0, 3], [1, 2], [1, 3]]]\\\\n Output: [0, 0, 1, 1]\\\\n\\\\n Input: [3, [[0, 1], [0, 2], [1, 2]]]\\\\n Output: []\\\"},{\\\"server\\\":\\\"icarus\\\",\\\"name\\\":\\\"contract-988660.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":159120851,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 159120851?\\\"},{\\\"server\\\":\\\"univ-energy\\\",\\\"name\\\":\\\"contract-426113-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[-5,7,4,-10,-7,6,2,3,6,-7,-2,-7,-2,-10,9,-10,7,5,-2,5,4,8,7,-10,3,8,-8,-3,8,-3,3,-7,-1,6],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n -5,7,4,-10,-7,6,2,3,6,-7,-2,-7,-2,-10,9,-10,7,5,-2,5,4,8,7,-10,3,8,-8,-3,8,-3,3,-7,-1,6\\\"},{\\\"server\\\":\\\"taiyang-digital\\\",\\\"name\\\":\\\"contract-41190-CyberSec.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[6],[4,8],[3,8,9],[4,4,1,8]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[4,8],\\\\n&nbsp;&nbsp;&nbsp;[3,8,9],\\\\n&nbsp;&nbsp;[4,4,1,8]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"fulcrumtech\\\",\\\"name\\\":\\\"contract-551305-NWO.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[4,2,5,6,7,7,9,7,0,8,5],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 4,2,5,6,7,7,9,7,0,8,5\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"kuai-gong\\\",\\\"name\\\":\\\"contract-417173-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":99,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 99 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"4sigma\\\",\\\"name\\\":\\\"contract-931933.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[3,7,1,8,4,0,5,-3,-3,3,-1,5,-7,0,-3,-4,-7],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 3,7,1,8,4,0,5,-3,-3,3,-1,5,-7,0,-3,-4,-7\\\"},{\\\"server\\\":\\\"megacorp\\\",\\\"name\\\":\\\"contract-10960-BladeIndustries.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"pTepTGD8eDoqbMN8AR8qNM8qNGFNM8qNGFNTFNTFNTFj5gFllGqLFllrXLFllFllFllFlllFllFI2sb2R0F2R0\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; pTepTGD8eDoqbMN8AR8qNM8qNGFNM8qNGFNTFNTFNTFj5gFllGqLFllrXLFllFllFllFlllFllFI2sb2R0F2R0\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"fulcrumassets\\\",\\\"name\\\":\\\"contract-408932-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[0,0,1,-5,9,-9,4,-3,3,9,6,7,9,10,-2,-9,1,-9,-9,-8,4],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 0,0,1,-5,9,-9,4,-3,3,9,6,7,9,10,-2,-9,1,-9,-9,-8,4\\\"},{\\\"server\\\":\\\"fulcrumassets\\\",\\\"name\\\":\\\"contract-663748.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[-7,-5,4,0,-4,3],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n -7,-5,4,0,-4,3\\\"},{\\\"server\\\":\\\"blade\\\",\\\"name\\\":\\\"contract-321164.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":94,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 94 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"blade\\\",\\\"name\\\":\\\"contract-824470.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":2206660927995210,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 2206660927995210 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"},{\\\"server\\\":\\\"The-Cave\\\",\\\"name\\\":\\\"contract-193424.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[8,2],\\\"description\\\":\\\"You are in a grid with 8 rows and 2 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [8, 2]\\\"},{\\\"server\\\":\\\"The-Cave\\\",\\\"name\\\":\\\"contract-997451-Chongqing.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[-1,-7,-8,3,-6,-4,-9,3,-9,5,-3,6,1,-3,3,5,8,0,-7,-8,7,9,-6,7,-4,6,-9,2,-3,2,7,10,-9,-9,10,-4,6,-7,-9],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n -1,-7,-8,3,-6,-4,-9,3,-9,5,-3,6,1,-3,3,5,8,0,-7,-8,7,9,-6,7,-4,6,-9,2,-3,2,7,10,-9,-9,10,-4,6,-7,-9\\\"},{\\\"server\\\":\\\"stormtech\\\",\\\"name\\\":\\\"contract-554970-CyberSec.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"nnjjFFOOCCC888JuaaaaaaaaaaDDKKt777700000000QQMLLLLLLQeeMbuuuuuu66jOOOOOOOOOzzzzrrrrrr\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; nnjjFFOOCCC888JuaaaaaaaaaaDDKKt777700000000QQMLLLLLLQeeMbuuuuuu66jOOOOOOOOOzzzzrrrrrr\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-431789-TianDiHui.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":71704917,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 71704917?\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-581142.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"Je2n72bQKwQOK47OK47OkLgOkLgOkLJYorlU86ToStuUMPmslMPmssOXivQiQIQ\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; Je2n72bQKwQOK47OK47OkLgOkLgOkLJYorlU86ToStuUMPmslMPmssOXivQiQIQ\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-583952.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"WWWWWWWWWuiiiiiIIIIIIFUUvvTTTeeeee3333333333X0zrrrrbbbbvpprrSLkkkkkkkkG7\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; WWWWWWWWWuiiiiiIIIIIIFUUvvTTTeeeee3333333333X0zrrrrbbbbvpprrSLkkkkkkkkG7\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"I.I.I.I\\\",\\\"name\\\":\\\"contract-364593-ECorp.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[15,[1,2,4,5,6,9,10,11,12,13,14,15]],\\\"description\\\":\\\"How many different distinct ways can the number 15 be written as a sum of integers contained in the set:\\\\n\\\\n [1,2,4,5,6,9,10,11,12,13,14,15]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"defcomm\\\",\\\"name\\\":\\\"contract-214124.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"(a)(((()\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n (a)(((()\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"infocomm\\\",\\\"name\\\":\\\"contract-121332.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,1,0],[1,0,1,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,1],[1,0,0,1,0,0,0,0,1,0,0],[0,0,0,1,0,0,0,1,0,0,0],[1,0,0,0,0,1,1,0,0,1,0],[0,0,0,1,0,0,0,0,0,1,0],[0,1,0,0,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,1,0,1,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,1,0,\\\\n1,0,1,0,0,0,0,0,0,0,0,\\\\n1,0,0,0,0,0,0,0,0,0,1,\\\\n1,0,0,1,0,0,0,0,1,0,0,\\\\n0,0,0,1,0,0,0,1,0,0,0,\\\\n1,0,0,0,0,1,1,0,0,1,0,\\\\n0,0,0,1,0,0,0,0,0,1,0,\\\\n0,1,0,0,0,0,0,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"microdyne\\\",\\\"name\\\":\\\"contract-909434.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,1,0,1,0,1],[0,0,0,0,0,1,0,0,1],[1,0,0,0,0,0,0,1,0],[0,1,1,0,0,0,0,0,0],[0,0,0,0,1,0,0,1,0],[0,1,0,0,0,0,1,0,0],[0,1,1,1,0,1,0,0,0],[0,0,1,0,0,0,0,0,0],[0,0,0,0,1,0,1,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,0,0,0,1,0,1,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,1,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,0,0,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,1,0,1,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,1,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"neo-net\\\",\\\"name\\\":\\\"contract-570067.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[10,9],\\\"description\\\":\\\"You are in a grid with 10 rows and 9 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [10, 9]\\\"},{\\\"server\\\":\\\"omega-net\\\",\\\"name\\\":\\\"contract-990335-NWO.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"0100100010000000100000001100110001011100011111110100010101110100\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '0100100010000000100000001100110001011100011111110100010101110100' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"}]\"}}],[\"contracts/2023-07-25T12:28:00.619Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-25T12:28:00.619Z.txt\",\"text\":\"[{\\\"server\\\":\\\"foodnstuff\\\",\\\"name\\\":\\\"contract-727697.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[6],[7,2],[5,4,2],[5,1,6,1],[5,7,2,1,6],[5,5,3,1,7,1],[2,7,9,7,2,8,2],[7,7,8,3,4,8,3,7],[1,7,5,4,2,4,3,6,6],[3,3,5,4,3,4,5,8,7,1]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[7,2],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[5,4,2],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[5,1,6,1],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[5,7,2,1,6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[5,5,3,1,7,1],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2,7,9,7,2,8,2],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[7,7,8,3,4,8,3,7],\\\\n&nbsp;&nbsp;&nbsp;[1,7,5,4,2,4,3,6,6],\\\\n&nbsp;&nbsp;[3,3,5,4,3,4,5,8,7,1]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"hong-fang-tea\\\",\\\"name\\\":\\\"contract-346431.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\")))a)a))))()((a())(\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n )))a)a))))()((a())(\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"harakiri-sushi\\\",\\\"name\\\":\\\"contract-46182.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":66,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 66 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"iron-gym\\\",\\\"name\\\":\\\"contract-983199.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[3,2],\\\"description\\\":\\\"You are in a grid with 3 rows and 2 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [3, 2]\\\"},{\\\"server\\\":\\\"darkweb\\\",\\\"name\\\":\\\"contract-813084-CyberSec.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[6,9],[25,27],[7,13],[10,12],[6,14],[12,14],[6,10],[6,11]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[6,9],[25,27],[7,13],[10,12],[6,14],[12,14],[6,10],[6,11]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"silver-helix\\\",\\\"name\\\":\\\"contract-815379.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[1],[3,8],[6,7,6]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[1],\\\\n&nbsp;&nbsp;&nbsp;[3,8],\\\\n&nbsp;&nbsp;[6,7,6]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"computek\\\",\\\"name\\\":\\\"contract-487301.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"afMUfkDBBBBBBBVBBBBB2iR0R0R0RfuR0QBVsoDwfIVsoiDwfsBkbsP3wfsBkbfbfsB\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; afMUfkDBBBBBBBVBBBBB2iR0R0R0RfuR0QBVsoDwfIVsoiDwfsBkbsP3wfsBkbfbfsB\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"johnson-ortho\\\",\\\"name\\\":\\\"contract-51402-NiteSec.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[6,9],\\\"description\\\":\\\"You are in a grid with 6 rows and 9 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [6, 9]\\\"},{\\\"server\\\":\\\"avmnite-02h\\\",\\\"name\\\":\\\"contract-757402-ECorp.cct\\\",\\\"type\\\":\\\"Proper 2-Coloring of a Graph\\\",\\\"attemptsLeft\\\":5,\\\"input\\\":[10,[[1,8],[2,3],[6,8],[0,2],[3,4],[5,9],[3,9],[3,7],[2,6],[0,9],[4,5],[5,7],[0,4]]],\\\"description\\\":\\\"You are given the following data, representing a graph:\\\\n [10,[[1,8],[2,3],[6,8],[0,2],[3,4],[5,9],[3,9],[3,7],[2,6],[0,9],[4,5],[5,7],[0,4]]]\\\\n Note that \\\\\\\"graph\\\\\\\", as used here, refers to the field of graph theory, and has no relation to statistics or plotting. The first element of the data represents the number of vertices in the graph. Each vertex is a unique number between 0 and 9. The next element of the data represents the edges of the graph. Two vertices u,v in a graph are said to be adjacent if there exists an edge [u,v]. Note that an edge [u,v] is the same as an edge [v,u], as order does not matter. You must construct a 2-coloring of the graph, meaning that you have to assign each vertex in the graph a \\\\\\\"color\\\\\\\", either 0 or 1, such that no two adjacent vertices have the same color. Submit your answer in the form of an array, where element i represents the color of vertex i. If it is impossible to construct a 2-coloring of the given graph, instead submit an empty array.\\\\n\\\\n Examples:\\\\n\\\\n Input: [4, [[0, 2], [0, 3], [1, 2], [1, 3]]]\\\\n Output: [0, 0, 1, 1]\\\\n\\\\n Input: [3, [[0, 1], [0, 2], [1, 2]]]\\\\n Output: []\\\"},{\\\"server\\\":\\\"icarus\\\",\\\"name\\\":\\\"contract-988660.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":159120851,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 159120851?\\\"},{\\\"server\\\":\\\"univ-energy\\\",\\\"name\\\":\\\"contract-426113-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[-5,7,4,-10,-7,6,2,3,6,-7,-2,-7,-2,-10,9,-10,7,5,-2,5,4,8,7,-10,3,8,-8,-3,8,-3,3,-7,-1,6],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n -5,7,4,-10,-7,6,2,3,6,-7,-2,-7,-2,-10,9,-10,7,5,-2,5,4,8,7,-10,3,8,-8,-3,8,-3,3,-7,-1,6\\\"},{\\\"server\\\":\\\"taiyang-digital\\\",\\\"name\\\":\\\"contract-41190-CyberSec.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[6],[4,8],[3,8,9],[4,4,1,8]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[4,8],\\\\n&nbsp;&nbsp;&nbsp;[3,8,9],\\\\n&nbsp;&nbsp;[4,4,1,8]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"fulcrumtech\\\",\\\"name\\\":\\\"contract-551305-NWO.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[4,2,5,6,7,7,9,7,0,8,5],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 4,2,5,6,7,7,9,7,0,8,5\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"kuai-gong\\\",\\\"name\\\":\\\"contract-417173-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":99,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 99 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"4sigma\\\",\\\"name\\\":\\\"contract-931933.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[3,7,1,8,4,0,5,-3,-3,3,-1,5,-7,0,-3,-4,-7],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 3,7,1,8,4,0,5,-3,-3,3,-1,5,-7,0,-3,-4,-7\\\"},{\\\"server\\\":\\\"megacorp\\\",\\\"name\\\":\\\"contract-10960-BladeIndustries.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"pTepTGD8eDoqbMN8AR8qNM8qNGFNM8qNGFNTFNTFNTFj5gFllGqLFllrXLFllFllFllFlllFllFI2sb2R0F2R0\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; pTepTGD8eDoqbMN8AR8qNM8qNGFNM8qNGFNTFNTFNTFj5gFllGqLFllrXLFllFllFllFlllFllFI2sb2R0F2R0\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"fulcrumassets\\\",\\\"name\\\":\\\"contract-408932-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[0,0,1,-5,9,-9,4,-3,3,9,6,7,9,10,-2,-9,1,-9,-9,-8,4],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 0,0,1,-5,9,-9,4,-3,3,9,6,7,9,10,-2,-9,1,-9,-9,-8,4\\\"},{\\\"server\\\":\\\"fulcrumassets\\\",\\\"name\\\":\\\"contract-663748.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[-7,-5,4,0,-4,3],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n -7,-5,4,0,-4,3\\\"},{\\\"server\\\":\\\"blade\\\",\\\"name\\\":\\\"contract-321164.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":94,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 94 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"blade\\\",\\\"name\\\":\\\"contract-824470.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":2206660927995210,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 2206660927995210 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"},{\\\"server\\\":\\\"The-Cave\\\",\\\"name\\\":\\\"contract-193424.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[8,2],\\\"description\\\":\\\"You are in a grid with 8 rows and 2 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [8, 2]\\\"},{\\\"server\\\":\\\"The-Cave\\\",\\\"name\\\":\\\"contract-997451-Chongqing.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[-1,-7,-8,3,-6,-4,-9,3,-9,5,-3,6,1,-3,3,5,8,0,-7,-8,7,9,-6,7,-4,6,-9,2,-3,2,7,10,-9,-9,10,-4,6,-7,-9],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n -1,-7,-8,3,-6,-4,-9,3,-9,5,-3,6,1,-3,3,5,8,0,-7,-8,7,9,-6,7,-4,6,-9,2,-3,2,7,10,-9,-9,10,-4,6,-7,-9\\\"},{\\\"server\\\":\\\"stormtech\\\",\\\"name\\\":\\\"contract-554970-CyberSec.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"nnjjFFOOCCC888JuaaaaaaaaaaDDKKt777700000000QQMLLLLLLQeeMbuuuuuu66jOOOOOOOOOzzzzrrrrrr\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; nnjjFFOOCCC888JuaaaaaaaaaaDDKKt777700000000QQMLLLLLLQeeMbuuuuuu66jOOOOOOOOOzzzzrrrrrr\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-431789-TianDiHui.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":71704917,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 71704917?\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-581142.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"Je2n72bQKwQOK47OK47OkLgOkLgOkLJYorlU86ToStuUMPmslMPmssOXivQiQIQ\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; Je2n72bQKwQOK47OK47OkLgOkLgOkLJYorlU86ToStuUMPmslMPmssOXivQiQIQ\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-583952.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"WWWWWWWWWuiiiiiIIIIIIFUUvvTTTeeeee3333333333X0zrrrrbbbbvpprrSLkkkkkkkkG7\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; WWWWWWWWWuiiiiiIIIIIIFUUvvTTTeeeee3333333333X0zrrrrbbbbvpprrSLkkkkkkkkG7\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"I.I.I.I\\\",\\\"name\\\":\\\"contract-364593-ECorp.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[15,[1,2,4,5,6,9,10,11,12,13,14,15]],\\\"description\\\":\\\"How many different distinct ways can the number 15 be written as a sum of integers contained in the set:\\\\n\\\\n [1,2,4,5,6,9,10,11,12,13,14,15]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"defcomm\\\",\\\"name\\\":\\\"contract-214124.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"(a)(((()\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n (a)(((()\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"infocomm\\\",\\\"name\\\":\\\"contract-121332.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,1,0],[1,0,1,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,1],[1,0,0,1,0,0,0,0,1,0,0],[0,0,0,1,0,0,0,1,0,0,0],[1,0,0,0,0,1,1,0,0,1,0],[0,0,0,1,0,0,0,0,0,1,0],[0,1,0,0,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,1,0,1,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,1,0,\\\\n1,0,1,0,0,0,0,0,0,0,0,\\\\n1,0,0,0,0,0,0,0,0,0,1,\\\\n1,0,0,1,0,0,0,0,1,0,0,\\\\n0,0,0,1,0,0,0,1,0,0,0,\\\\n1,0,0,0,0,1,1,0,0,1,0,\\\\n0,0,0,1,0,0,0,0,0,1,0,\\\\n0,1,0,0,0,0,0,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"microdyne\\\",\\\"name\\\":\\\"contract-909434.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,1,0,1,0,1],[0,0,0,0,0,1,0,0,1],[1,0,0,0,0,0,0,1,0],[0,1,1,0,0,0,0,0,0],[0,0,0,0,1,0,0,1,0],[0,1,0,0,0,0,1,0,0],[0,1,1,1,0,1,0,0,0],[0,0,1,0,0,0,0,0,0],[0,0,0,0,1,0,1,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,0,0,0,1,0,1,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,1,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,0,0,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,1,0,1,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,1,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"neo-net\\\",\\\"name\\\":\\\"contract-570067.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[10,9],\\\"description\\\":\\\"You are in a grid with 10 rows and 9 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [10, 9]\\\"},{\\\"server\\\":\\\"omega-net\\\",\\\"name\\\":\\\"contract-990335-NWO.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"0100100010000000100000001100110001011100011111110100010101110100\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '0100100010000000100000001100110001011100011111110100010101110100' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"}]\"}}],[\"contracts/2023-07-25T12:56:46.180Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-25T12:56:46.180Z.txt\",\"text\":\"[{\\\"server\\\":\\\"foodnstuff\\\",\\\"name\\\":\\\"contract-727697.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[6],[7,2],[5,4,2],[5,1,6,1],[5,7,2,1,6],[5,5,3,1,7,1],[2,7,9,7,2,8,2],[7,7,8,3,4,8,3,7],[1,7,5,4,2,4,3,6,6],[3,3,5,4,3,4,5,8,7,1]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[7,2],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[5,4,2],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[5,1,6,1],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[5,7,2,1,6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[5,5,3,1,7,1],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2,7,9,7,2,8,2],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[7,7,8,3,4,8,3,7],\\\\n&nbsp;&nbsp;&nbsp;[1,7,5,4,2,4,3,6,6],\\\\n&nbsp;&nbsp;[3,3,5,4,3,4,5,8,7,1]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"hong-fang-tea\\\",\\\"name\\\":\\\"contract-346431.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\")))a)a))))()((a())(\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n )))a)a))))()((a())(\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"harakiri-sushi\\\",\\\"name\\\":\\\"contract-46182.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":66,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 66 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"iron-gym\\\",\\\"name\\\":\\\"contract-983199.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[3,2],\\\"description\\\":\\\"You are in a grid with 3 rows and 2 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [3, 2]\\\"},{\\\"server\\\":\\\"darkweb\\\",\\\"name\\\":\\\"contract-813084-CyberSec.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[6,9],[25,27],[7,13],[10,12],[6,14],[12,14],[6,10],[6,11]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[6,9],[25,27],[7,13],[10,12],[6,14],[12,14],[6,10],[6,11]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"silver-helix\\\",\\\"name\\\":\\\"contract-815379.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[1],[3,8],[6,7,6]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[1],\\\\n&nbsp;&nbsp;&nbsp;[3,8],\\\\n&nbsp;&nbsp;[6,7,6]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"computek\\\",\\\"name\\\":\\\"contract-487301.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"afMUfkDBBBBBBBVBBBBB2iR0R0R0RfuR0QBVsoDwfIVsoiDwfsBkbsP3wfsBkbfbfsB\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; afMUfkDBBBBBBBVBBBBB2iR0R0R0RfuR0QBVsoDwfIVsoiDwfsBkbsP3wfsBkbfbfsB\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"johnson-ortho\\\",\\\"name\\\":\\\"contract-51402-NiteSec.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[6,9],\\\"description\\\":\\\"You are in a grid with 6 rows and 9 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [6, 9]\\\"},{\\\"server\\\":\\\"avmnite-02h\\\",\\\"name\\\":\\\"contract-757402-ECorp.cct\\\",\\\"type\\\":\\\"Proper 2-Coloring of a Graph\\\",\\\"attemptsLeft\\\":5,\\\"input\\\":[10,[[1,8],[2,3],[6,8],[0,2],[3,4],[5,9],[3,9],[3,7],[2,6],[0,9],[4,5],[5,7],[0,4]]],\\\"description\\\":\\\"You are given the following data, representing a graph:\\\\n [10,[[1,8],[2,3],[6,8],[0,2],[3,4],[5,9],[3,9],[3,7],[2,6],[0,9],[4,5],[5,7],[0,4]]]\\\\n Note that \\\\\\\"graph\\\\\\\", as used here, refers to the field of graph theory, and has no relation to statistics or plotting. The first element of the data represents the number of vertices in the graph. Each vertex is a unique number between 0 and 9. The next element of the data represents the edges of the graph. Two vertices u,v in a graph are said to be adjacent if there exists an edge [u,v]. Note that an edge [u,v] is the same as an edge [v,u], as order does not matter. You must construct a 2-coloring of the graph, meaning that you have to assign each vertex in the graph a \\\\\\\"color\\\\\\\", either 0 or 1, such that no two adjacent vertices have the same color. Submit your answer in the form of an array, where element i represents the color of vertex i. If it is impossible to construct a 2-coloring of the given graph, instead submit an empty array.\\\\n\\\\n Examples:\\\\n\\\\n Input: [4, [[0, 2], [0, 3], [1, 2], [1, 3]]]\\\\n Output: [0, 0, 1, 1]\\\\n\\\\n Input: [3, [[0, 1], [0, 2], [1, 2]]]\\\\n Output: []\\\"},{\\\"server\\\":\\\"icarus\\\",\\\"name\\\":\\\"contract-988660.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":159120851,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 159120851?\\\"},{\\\"server\\\":\\\"univ-energy\\\",\\\"name\\\":\\\"contract-426113-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[-5,7,4,-10,-7,6,2,3,6,-7,-2,-7,-2,-10,9,-10,7,5,-2,5,4,8,7,-10,3,8,-8,-3,8,-3,3,-7,-1,6],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n -5,7,4,-10,-7,6,2,3,6,-7,-2,-7,-2,-10,9,-10,7,5,-2,5,4,8,7,-10,3,8,-8,-3,8,-3,3,-7,-1,6\\\"},{\\\"server\\\":\\\"taiyang-digital\\\",\\\"name\\\":\\\"contract-41190-CyberSec.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[6],[4,8],[3,8,9],[4,4,1,8]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[4,8],\\\\n&nbsp;&nbsp;&nbsp;[3,8,9],\\\\n&nbsp;&nbsp;[4,4,1,8]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"fulcrumtech\\\",\\\"name\\\":\\\"contract-551305-NWO.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[4,2,5,6,7,7,9,7,0,8,5],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 4,2,5,6,7,7,9,7,0,8,5\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"kuai-gong\\\",\\\"name\\\":\\\"contract-417173-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":99,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 99 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"4sigma\\\",\\\"name\\\":\\\"contract-931933.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[3,7,1,8,4,0,5,-3,-3,3,-1,5,-7,0,-3,-4,-7],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 3,7,1,8,4,0,5,-3,-3,3,-1,5,-7,0,-3,-4,-7\\\"},{\\\"server\\\":\\\"megacorp\\\",\\\"name\\\":\\\"contract-10960-BladeIndustries.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"pTepTGD8eDoqbMN8AR8qNM8qNGFNM8qNGFNTFNTFNTFj5gFllGqLFllrXLFllFllFllFlllFllFI2sb2R0F2R0\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; pTepTGD8eDoqbMN8AR8qNM8qNGFNM8qNGFNTFNTFNTFj5gFllGqLFllrXLFllFllFllFlllFllFI2sb2R0F2R0\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"fulcrumassets\\\",\\\"name\\\":\\\"contract-408932-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[0,0,1,-5,9,-9,4,-3,3,9,6,7,9,10,-2,-9,1,-9,-9,-8,4],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 0,0,1,-5,9,-9,4,-3,3,9,6,7,9,10,-2,-9,1,-9,-9,-8,4\\\"},{\\\"server\\\":\\\"fulcrumassets\\\",\\\"name\\\":\\\"contract-663748.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[-7,-5,4,0,-4,3],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n -7,-5,4,0,-4,3\\\"},{\\\"server\\\":\\\"blade\\\",\\\"name\\\":\\\"contract-321164.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":94,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 94 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"blade\\\",\\\"name\\\":\\\"contract-824470.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":2206660927995210,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 2206660927995210 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"},{\\\"server\\\":\\\"The-Cave\\\",\\\"name\\\":\\\"contract-193424.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[8,2],\\\"description\\\":\\\"You are in a grid with 8 rows and 2 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [8, 2]\\\"},{\\\"server\\\":\\\"The-Cave\\\",\\\"name\\\":\\\"contract-997451-Chongqing.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[-1,-7,-8,3,-6,-4,-9,3,-9,5,-3,6,1,-3,3,5,8,0,-7,-8,7,9,-6,7,-4,6,-9,2,-3,2,7,10,-9,-9,10,-4,6,-7,-9],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n -1,-7,-8,3,-6,-4,-9,3,-9,5,-3,6,1,-3,3,5,8,0,-7,-8,7,9,-6,7,-4,6,-9,2,-3,2,7,10,-9,-9,10,-4,6,-7,-9\\\"},{\\\"server\\\":\\\"stormtech\\\",\\\"name\\\":\\\"contract-554970-CyberSec.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"nnjjFFOOCCC888JuaaaaaaaaaaDDKKt777700000000QQMLLLLLLQeeMbuuuuuu66jOOOOOOOOOzzzzrrrrrr\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; nnjjFFOOCCC888JuaaaaaaaaaaDDKKt777700000000QQMLLLLLLQeeMbuuuuuu66jOOOOOOOOOzzzzrrrrrr\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-431789-TianDiHui.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":71704917,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 71704917?\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-581142.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"Je2n72bQKwQOK47OK47OkLgOkLgOkLJYorlU86ToStuUMPmslMPmssOXivQiQIQ\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; Je2n72bQKwQOK47OK47OkLgOkLgOkLJYorlU86ToStuUMPmslMPmssOXivQiQIQ\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-583952.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"WWWWWWWWWuiiiiiIIIIIIFUUvvTTTeeeee3333333333X0zrrrrbbbbvpprrSLkkkkkkkkG7\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; WWWWWWWWWuiiiiiIIIIIIFUUvvTTTeeeee3333333333X0zrrrrbbbbvpprrSLkkkkkkkkG7\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"I.I.I.I\\\",\\\"name\\\":\\\"contract-364593-ECorp.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[15,[1,2,4,5,6,9,10,11,12,13,14,15]],\\\"description\\\":\\\"How many different distinct ways can the number 15 be written as a sum of integers contained in the set:\\\\n\\\\n [1,2,4,5,6,9,10,11,12,13,14,15]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"omnia\\\",\\\"name\\\":\\\"contract-895568.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,1,0,0,0,1,0,0,0,0,1],[0,0,0,1,0,0,1,0,0,0,1],[0,0,0,0,0,1,0,1,1,0,0],[0,0,0,0,1,0,1,1,1,0,0],[0,0,1,1,0,0,1,0,0,0,0],[0,0,1,0,0,1,0,1,0,0,1],[0,1,0,0,0,0,0,0,0,0,1],[1,0,1,0,0,0,0,0,0,0,0],[0,1,1,0,0,0,0,0,1,0,1],[0,1,1,0,0,0,0,1,0,1,0],[0,0,1,0,0,0,0,0,0,1,1],[1,1,1,1,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,1,0,0,0,1,0,0,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,1,0,0,1,0,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,1,0,1,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,1,1,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,1,0,0,1,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,0,1,0,1,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,0,0,0,0,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[1,0,1,0,0,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,0,0,0,0,0,1,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,0,0,0,0,1,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,0,0,0,0,0,1,1],\\\\n&nbsp;&nbsp;&nbsp;[1,1,1,1,0,0,0,0,0,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"defcomm\\\",\\\"name\\\":\\\"contract-214124.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"(a)(((()\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n (a)(((()\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"infocomm\\\",\\\"name\\\":\\\"contract-121332.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,1,0],[1,0,1,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,1],[1,0,0,1,0,0,0,0,1,0,0],[0,0,0,1,0,0,0,1,0,0,0],[1,0,0,0,0,1,1,0,0,1,0],[0,0,0,1,0,0,0,0,0,1,0],[0,1,0,0,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,1,0,1,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,1,0,\\\\n1,0,1,0,0,0,0,0,0,0,0,\\\\n1,0,0,0,0,0,0,0,0,0,1,\\\\n1,0,0,1,0,0,0,0,1,0,0,\\\\n0,0,0,1,0,0,0,1,0,0,0,\\\\n1,0,0,0,0,1,1,0,0,1,0,\\\\n0,0,0,1,0,0,0,0,0,1,0,\\\\n0,1,0,0,0,0,0,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"microdyne\\\",\\\"name\\\":\\\"contract-909434.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,1,0,1,0,1],[0,0,0,0,0,1,0,0,1],[1,0,0,0,0,0,0,1,0],[0,1,1,0,0,0,0,0,0],[0,0,0,0,1,0,0,1,0],[0,1,0,0,0,0,1,0,0],[0,1,1,1,0,1,0,0,0],[0,0,1,0,0,0,0,0,0],[0,0,0,0,1,0,1,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,0,0,0,1,0,1,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,1,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,0,0,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,1,0,1,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,1,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"neo-net\\\",\\\"name\\\":\\\"contract-570067.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[10,9],\\\"description\\\":\\\"You are in a grid with 10 rows and 9 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [10, 9]\\\"},{\\\"server\\\":\\\"omega-net\\\",\\\"name\\\":\\\"contract-990335-NWO.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"0100100010000000100000001100110001011100011111110100010101110100\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '0100100010000000100000001100110001011100011111110100010101110100' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"}]\"}}],[\"contracts/2023-07-25T15:00:05.980Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-25T15:00:05.980Z.txt\",\"text\":\"[{\\\"server\\\":\\\"foodnstuff\\\",\\\"name\\\":\\\"contract-727697.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[6],[7,2],[5,4,2],[5,1,6,1],[5,7,2,1,6],[5,5,3,1,7,1],[2,7,9,7,2,8,2],[7,7,8,3,4,8,3,7],[1,7,5,4,2,4,3,6,6],[3,3,5,4,3,4,5,8,7,1]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[7,2],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[5,4,2],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[5,1,6,1],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[5,7,2,1,6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[5,5,3,1,7,1],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2,7,9,7,2,8,2],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[7,7,8,3,4,8,3,7],\\\\n&nbsp;&nbsp;&nbsp;[1,7,5,4,2,4,3,6,6],\\\\n&nbsp;&nbsp;[3,3,5,4,3,4,5,8,7,1]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"hong-fang-tea\\\",\\\"name\\\":\\\"contract-346431.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\")))a)a))))()((a())(\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n )))a)a))))()((a())(\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"harakiri-sushi\\\",\\\"name\\\":\\\"contract-46182.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":66,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 66 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"iron-gym\\\",\\\"name\\\":\\\"contract-983199.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[3,2],\\\"description\\\":\\\"You are in a grid with 3 rows and 2 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [3, 2]\\\"},{\\\"server\\\":\\\"darkweb\\\",\\\"name\\\":\\\"contract-662450-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[-2,-7,-4,-7,-5,1,-1,-4,5,9,9,3,2],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n -2,-7,-4,-7,-5,1,-1,-4,5,9,9,3,2\\\"},{\\\"server\\\":\\\"darkweb\\\",\\\"name\\\":\\\"contract-813084-CyberSec.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[6,9],[25,27],[7,13],[10,12],[6,14],[12,14],[6,10],[6,11]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[6,9],[25,27],[7,13],[10,12],[6,14],[12,14],[6,10],[6,11]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"silver-helix\\\",\\\"name\\\":\\\"contract-815379.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[1],[3,8],[6,7,6]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[1],\\\\n&nbsp;&nbsp;&nbsp;[3,8],\\\\n&nbsp;&nbsp;[6,7,6]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"computek\\\",\\\"name\\\":\\\"contract-487301.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"afMUfkDBBBBBBBVBBBBB2iR0R0R0RfuR0QBVsoDwfIVsoiDwfsBkbsP3wfsBkbfbfsB\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; afMUfkDBBBBBBBVBBBBB2iR0R0R0RfuR0QBVsoDwfIVsoiDwfsBkbsP3wfsBkbfbfsB\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"johnson-ortho\\\",\\\"name\\\":\\\"contract-51402-NiteSec.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[6,9],\\\"description\\\":\\\"You are in a grid with 6 rows and 9 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [6, 9]\\\"},{\\\"server\\\":\\\"avmnite-02h\\\",\\\"name\\\":\\\"contract-757402-ECorp.cct\\\",\\\"type\\\":\\\"Proper 2-Coloring of a Graph\\\",\\\"attemptsLeft\\\":5,\\\"input\\\":[10,[[1,8],[2,3],[6,8],[0,2],[3,4],[5,9],[3,9],[3,7],[2,6],[0,9],[4,5],[5,7],[0,4]]],\\\"description\\\":\\\"You are given the following data, representing a graph:\\\\n [10,[[1,8],[2,3],[6,8],[0,2],[3,4],[5,9],[3,9],[3,7],[2,6],[0,9],[4,5],[5,7],[0,4]]]\\\\n Note that \\\\\\\"graph\\\\\\\", as used here, refers to the field of graph theory, and has no relation to statistics or plotting. The first element of the data represents the number of vertices in the graph. Each vertex is a unique number between 0 and 9. The next element of the data represents the edges of the graph. Two vertices u,v in a graph are said to be adjacent if there exists an edge [u,v]. Note that an edge [u,v] is the same as an edge [v,u], as order does not matter. You must construct a 2-coloring of the graph, meaning that you have to assign each vertex in the graph a \\\\\\\"color\\\\\\\", either 0 or 1, such that no two adjacent vertices have the same color. Submit your answer in the form of an array, where element i represents the color of vertex i. If it is impossible to construct a 2-coloring of the given graph, instead submit an empty array.\\\\n\\\\n Examples:\\\\n\\\\n Input: [4, [[0, 2], [0, 3], [1, 2], [1, 3]]]\\\\n Output: [0, 0, 1, 1]\\\\n\\\\n Input: [3, [[0, 1], [0, 2], [1, 2]]]\\\\n Output: []\\\"},{\\\"server\\\":\\\"icarus\\\",\\\"name\\\":\\\"contract-988660.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":159120851,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 159120851?\\\"},{\\\"server\\\":\\\"univ-energy\\\",\\\"name\\\":\\\"contract-426113-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[-5,7,4,-10,-7,6,2,3,6,-7,-2,-7,-2,-10,9,-10,7,5,-2,5,4,8,7,-10,3,8,-8,-3,8,-3,3,-7,-1,6],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n -5,7,4,-10,-7,6,2,3,6,-7,-2,-7,-2,-10,9,-10,7,5,-2,5,4,8,7,-10,3,8,-8,-3,8,-3,3,-7,-1,6\\\"},{\\\"server\\\":\\\"taiyang-digital\\\",\\\"name\\\":\\\"contract-41190-CyberSec.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[6],[4,8],[3,8,9],[4,4,1,8]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[4,8],\\\\n&nbsp;&nbsp;&nbsp;[3,8,9],\\\\n&nbsp;&nbsp;[4,4,1,8]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"fulcrumtech\\\",\\\"name\\\":\\\"contract-551305-NWO.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[4,2,5,6,7,7,9,7,0,8,5],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 4,2,5,6,7,7,9,7,0,8,5\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"kuai-gong\\\",\\\"name\\\":\\\"contract-417173-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":99,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 99 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"4sigma\\\",\\\"name\\\":\\\"contract-931933.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[3,7,1,8,4,0,5,-3,-3,3,-1,5,-7,0,-3,-4,-7],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 3,7,1,8,4,0,5,-3,-3,3,-1,5,-7,0,-3,-4,-7\\\"},{\\\"server\\\":\\\"megacorp\\\",\\\"name\\\":\\\"contract-10960-BladeIndustries.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"pTepTGD8eDoqbMN8AR8qNM8qNGFNM8qNGFNTFNTFNTFj5gFllGqLFllrXLFllFllFllFlllFllFI2sb2R0F2R0\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; pTepTGD8eDoqbMN8AR8qNM8qNGFNM8qNGFNTFNTFNTFj5gFllGqLFllrXLFllFllFllFlllFllFI2sb2R0F2R0\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"fulcrumassets\\\",\\\"name\\\":\\\"contract-408932-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[0,0,1,-5,9,-9,4,-3,3,9,6,7,9,10,-2,-9,1,-9,-9,-8,4],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 0,0,1,-5,9,-9,4,-3,3,9,6,7,9,10,-2,-9,1,-9,-9,-8,4\\\"},{\\\"server\\\":\\\"fulcrumassets\\\",\\\"name\\\":\\\"contract-663748.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[-7,-5,4,0,-4,3],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n -7,-5,4,0,-4,3\\\"},{\\\"server\\\":\\\"blade\\\",\\\"name\\\":\\\"contract-321164.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":94,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 94 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"blade\\\",\\\"name\\\":\\\"contract-824470.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":2206660927995210,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 2206660927995210 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"},{\\\"server\\\":\\\"The-Cave\\\",\\\"name\\\":\\\"contract-193424.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[8,2],\\\"description\\\":\\\"You are in a grid with 8 rows and 2 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [8, 2]\\\"},{\\\"server\\\":\\\"The-Cave\\\",\\\"name\\\":\\\"contract-997451-Chongqing.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[-1,-7,-8,3,-6,-4,-9,3,-9,5,-3,6,1,-3,3,5,8,0,-7,-8,7,9,-6,7,-4,6,-9,2,-3,2,7,10,-9,-9,10,-4,6,-7,-9],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n -1,-7,-8,3,-6,-4,-9,3,-9,5,-3,6,1,-3,3,5,8,0,-7,-8,7,9,-6,7,-4,6,-9,2,-3,2,7,10,-9,-9,10,-4,6,-7,-9\\\"},{\\\"server\\\":\\\"stormtech\\\",\\\"name\\\":\\\"contract-554970-CyberSec.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"nnjjFFOOCCC888JuaaaaaaaaaaDDKKt777700000000QQMLLLLLLQeeMbuuuuuu66jOOOOOOOOOzzzzrrrrrr\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; nnjjFFOOCCC888JuaaaaaaaaaaDDKKt777700000000QQMLLLLLLQeeMbuuuuuu66jOOOOOOOOOzzzzrrrrrr\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-431789-TianDiHui.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":71704917,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 71704917?\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-581142.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"Je2n72bQKwQOK47OK47OkLgOkLgOkLJYorlU86ToStuUMPmslMPmssOXivQiQIQ\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; Je2n72bQKwQOK47OK47OkLgOkLgOkLJYorlU86ToStuUMPmslMPmssOXivQiQIQ\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-583952.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"WWWWWWWWWuiiiiiIIIIIIFUUvvTTTeeeee3333333333X0zrrrrbbbbvpprrSLkkkkkkkkG7\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; WWWWWWWWWuiiiiiIIIIIIFUUvvTTTeeeee3333333333X0zrrrrbbbbvpprrSLkkkkkkkkG7\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"I.I.I.I\\\",\\\"name\\\":\\\"contract-364593-ECorp.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[15,[1,2,4,5,6,9,10,11,12,13,14,15]],\\\"description\\\":\\\"How many different distinct ways can the number 15 be written as a sum of integers contained in the set:\\\\n\\\\n [1,2,4,5,6,9,10,11,12,13,14,15]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"omnia\\\",\\\"name\\\":\\\"contract-895568.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,1,0,0,0,1,0,0,0,0,1],[0,0,0,1,0,0,1,0,0,0,1],[0,0,0,0,0,1,0,1,1,0,0],[0,0,0,0,1,0,1,1,1,0,0],[0,0,1,1,0,0,1,0,0,0,0],[0,0,1,0,0,1,0,1,0,0,1],[0,1,0,0,0,0,0,0,0,0,1],[1,0,1,0,0,0,0,0,0,0,0],[0,1,1,0,0,0,0,0,1,0,1],[0,1,1,0,0,0,0,1,0,1,0],[0,0,1,0,0,0,0,0,0,1,1],[1,1,1,1,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,1,0,0,0,1,0,0,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,1,0,0,1,0,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,1,0,1,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,1,1,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,1,0,0,1,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,0,1,0,1,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,0,0,0,0,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[1,0,1,0,0,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,0,0,0,0,0,1,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,0,0,0,0,1,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,0,0,0,0,0,1,1],\\\\n&nbsp;&nbsp;&nbsp;[1,1,1,1,0,0,0,0,0,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"defcomm\\\",\\\"name\\\":\\\"contract-214124.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"(a)(((()\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n (a)(((()\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"infocomm\\\",\\\"name\\\":\\\"contract-121332.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,1,0],[1,0,1,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,1],[1,0,0,1,0,0,0,0,1,0,0],[0,0,0,1,0,0,0,1,0,0,0],[1,0,0,0,0,1,1,0,0,1,0],[0,0,0,1,0,0,0,0,0,1,0],[0,1,0,0,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,1,0,1,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,1,0,\\\\n1,0,1,0,0,0,0,0,0,0,0,\\\\n1,0,0,0,0,0,0,0,0,0,1,\\\\n1,0,0,1,0,0,0,0,1,0,0,\\\\n0,0,0,1,0,0,0,1,0,0,0,\\\\n1,0,0,0,0,1,1,0,0,1,0,\\\\n0,0,0,1,0,0,0,0,0,1,0,\\\\n0,1,0,0,0,0,0,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"microdyne\\\",\\\"name\\\":\\\"contract-909434.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,1,0,1,0,1],[0,0,0,0,0,1,0,0,1],[1,0,0,0,0,0,0,1,0],[0,1,1,0,0,0,0,0,0],[0,0,0,0,1,0,0,1,0],[0,1,0,0,0,0,1,0,0],[0,1,1,1,0,1,0,0,0],[0,0,1,0,0,0,0,0,0],[0,0,0,0,1,0,1,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,0,0,0,1,0,1,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,1,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,0,0,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,1,0,1,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,1,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"neo-net\\\",\\\"name\\\":\\\"contract-570067.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[10,9],\\\"description\\\":\\\"You are in a grid with 10 rows and 9 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [10, 9]\\\"},{\\\"server\\\":\\\"omega-net\\\",\\\"name\\\":\\\"contract-815290.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"H2I2ySI2ySIIIIIIIIIcTLyz7jn7kK7kK7PL7kK7k0eJyxxJyxxJyxxWrgoVEArgoVEAr5FTDh6lAdZ5dLAUpLA\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; H2I2ySI2ySIIIIIIIIIcTLyz7jn7kK7kK7PL7kK7k0eJyxxJyxxJyxxWrgoVEArgoVEAr5FTDh6lAdZ5dLAUpLA\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"omega-net\\\",\\\"name\\\":\\\"contract-990335-NWO.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"0100100010000000100000001100110001011100011111110100010101110100\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '0100100010000000100000001100110001011100011111110100010101110100' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"}]\"}}],[\"contracts/2023-07-25T17:59:18.603Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-25T17:59:18.603Z.txt\",\"text\":\"[{\\\"server\\\":\\\"foodnstuff\\\",\\\"name\\\":\\\"contract-727697.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[6],[7,2],[5,4,2],[5,1,6,1],[5,7,2,1,6],[5,5,3,1,7,1],[2,7,9,7,2,8,2],[7,7,8,3,4,8,3,7],[1,7,5,4,2,4,3,6,6],[3,3,5,4,3,4,5,8,7,1]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[7,2],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[5,4,2],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[5,1,6,1],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[5,7,2,1,6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[5,5,3,1,7,1],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2,7,9,7,2,8,2],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[7,7,8,3,4,8,3,7],\\\\n&nbsp;&nbsp;&nbsp;[1,7,5,4,2,4,3,6,6],\\\\n&nbsp;&nbsp;[3,3,5,4,3,4,5,8,7,1]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"sigma-cosmetics\\\",\\\"name\\\":\\\"contract-233883-NiteSec.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":1017041105,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 1017041105 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"},{\\\"server\\\":\\\"hong-fang-tea\\\",\\\"name\\\":\\\"contract-346431.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\")))a)a))))()((a())(\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n )))a)a))))()((a())(\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"harakiri-sushi\\\",\\\"name\\\":\\\"contract-46182.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":66,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 66 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"iron-gym\\\",\\\"name\\\":\\\"contract-983199.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[3,2],\\\"description\\\":\\\"You are in a grid with 3 rows and 2 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [3, 2]\\\"},{\\\"server\\\":\\\"darkweb\\\",\\\"name\\\":\\\"contract-662450-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[-2,-7,-4,-7,-5,1,-1,-4,5,9,9,3,2],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n -2,-7,-4,-7,-5,1,-1,-4,5,9,9,3,2\\\"},{\\\"server\\\":\\\"darkweb\\\",\\\"name\\\":\\\"contract-813084-CyberSec.cct\\\",\\\"type\\\":\\\"Merge Overlapping Intervals\\\",\\\"attemptsLeft\\\":15,\\\"input\\\":[[6,9],[25,27],[7,13],[10,12],[6,14],[12,14],[6,10],[6,11]],\\\"description\\\":\\\"Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\\\\n\\\\n [[6,9],[25,27],[7,13],[10,12],[6,14],[12,14],[6,10],[6,11]]\\\\n\\\\n Example:\\\\n\\\\n [[1, 3], [8, 10], [2, 6], [10, 16]]\\\\n\\\\n would merge into [[1, 6], [8, 16]].\\\\n\\\\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.\\\"},{\\\"server\\\":\\\"silver-helix\\\",\\\"name\\\":\\\"contract-815379.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[1],[3,8],[6,7,6]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[1],\\\\n&nbsp;&nbsp;&nbsp;[3,8],\\\\n&nbsp;&nbsp;[6,7,6]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"computek\\\",\\\"name\\\":\\\"contract-487301.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"afMUfkDBBBBBBBVBBBBB2iR0R0R0RfuR0QBVsoDwfIVsoiDwfsBkbsP3wfsBkbfbfsB\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; afMUfkDBBBBBBBVBBBBB2iR0R0R0RfuR0QBVsoDwfIVsoiDwfsBkbsP3wfsBkbfbfsB\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"netlink\\\",\\\"name\\\":\\\"contract-194536-NWO.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,0,0,0,1,0,0,1,0],[0,0,0,0,0,0,0,0,0,0,0,0],[0,1,0,0,0,1,0,0,1,0,0,0],[0,0,0,1,0,0,0,0,1,1,0,1],[0,0,0,0,0,0,0,0,1,0,0,0],[0,1,0,0,0,1,0,0,1,0,0,0],[0,0,0,1,0,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,0,0,0,0,1,0,0,1,0,\\\\n0,0,0,0,0,0,0,0,0,0,0,0,\\\\n0,1,0,0,0,1,0,0,1,0,0,0,\\\\n0,0,0,1,0,0,0,0,1,1,0,1,\\\\n0,0,0,0,0,0,0,0,1,0,0,0,\\\\n0,1,0,0,0,1,0,0,1,0,0,0,\\\\n0,0,0,1,0,0,0,0,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"johnson-ortho\\\",\\\"name\\\":\\\"contract-51402-NiteSec.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[6,9],\\\"description\\\":\\\"You are in a grid with 6 rows and 9 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [6, 9]\\\"},{\\\"server\\\":\\\"avmnite-02h\\\",\\\"name\\\":\\\"contract-757402-ECorp.cct\\\",\\\"type\\\":\\\"Proper 2-Coloring of a Graph\\\",\\\"attemptsLeft\\\":5,\\\"input\\\":[10,[[1,8],[2,3],[6,8],[0,2],[3,4],[5,9],[3,9],[3,7],[2,6],[0,9],[4,5],[5,7],[0,4]]],\\\"description\\\":\\\"You are given the following data, representing a graph:\\\\n [10,[[1,8],[2,3],[6,8],[0,2],[3,4],[5,9],[3,9],[3,7],[2,6],[0,9],[4,5],[5,7],[0,4]]]\\\\n Note that \\\\\\\"graph\\\\\\\", as used here, refers to the field of graph theory, and has no relation to statistics or plotting. The first element of the data represents the number of vertices in the graph. Each vertex is a unique number between 0 and 9. The next element of the data represents the edges of the graph. Two vertices u,v in a graph are said to be adjacent if there exists an edge [u,v]. Note that an edge [u,v] is the same as an edge [v,u], as order does not matter. You must construct a 2-coloring of the graph, meaning that you have to assign each vertex in the graph a \\\\\\\"color\\\\\\\", either 0 or 1, such that no two adjacent vertices have the same color. Submit your answer in the form of an array, where element i represents the color of vertex i. If it is impossible to construct a 2-coloring of the given graph, instead submit an empty array.\\\\n\\\\n Examples:\\\\n\\\\n Input: [4, [[0, 2], [0, 3], [1, 2], [1, 3]]]\\\\n Output: [0, 0, 1, 1]\\\\n\\\\n Input: [3, [[0, 1], [0, 2], [1, 2]]]\\\\n Output: []\\\"},{\\\"server\\\":\\\"icarus\\\",\\\"name\\\":\\\"contract-988660.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":159120851,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 159120851?\\\"},{\\\"server\\\":\\\"univ-energy\\\",\\\"name\\\":\\\"contract-426113-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[-5,7,4,-10,-7,6,2,3,6,-7,-2,-7,-2,-10,9,-10,7,5,-2,5,4,8,7,-10,3,8,-8,-3,8,-3,3,-7,-1,6],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n -5,7,4,-10,-7,6,2,3,6,-7,-2,-7,-2,-10,9,-10,7,5,-2,5,4,8,7,-10,3,8,-8,-3,8,-3,3,-7,-1,6\\\"},{\\\"server\\\":\\\"taiyang-digital\\\",\\\"name\\\":\\\"contract-41190-CyberSec.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[6],[4,8],[3,8,9],[4,4,1,8]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[4,8],\\\\n&nbsp;&nbsp;&nbsp;[3,8,9],\\\\n&nbsp;&nbsp;[4,4,1,8]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"fulcrumtech\\\",\\\"name\\\":\\\"contract-551305-NWO.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[4,2,5,6,7,7,9,7,0,8,5],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 4,2,5,6,7,7,9,7,0,8,5\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"kuai-gong\\\",\\\"name\\\":\\\"contract-417173-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":99,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 99 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"4sigma\\\",\\\"name\\\":\\\"contract-931933.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[3,7,1,8,4,0,5,-3,-3,3,-1,5,-7,0,-3,-4,-7],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 3,7,1,8,4,0,5,-3,-3,3,-1,5,-7,0,-3,-4,-7\\\"},{\\\"server\\\":\\\"megacorp\\\",\\\"name\\\":\\\"contract-10960-BladeIndustries.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"pTepTGD8eDoqbMN8AR8qNM8qNGFNM8qNGFNTFNTFNTFj5gFllGqLFllrXLFllFllFllFlllFllFI2sb2R0F2R0\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; pTepTGD8eDoqbMN8AR8qNM8qNGFNM8qNGFNTFNTFNTFj5gFllGqLFllrXLFllFllFllFlllFllFI2sb2R0F2R0\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"fulcrumassets\\\",\\\"name\\\":\\\"contract-408932-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[0,0,1,-5,9,-9,4,-3,3,9,6,7,9,10,-2,-9,1,-9,-9,-8,4],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 0,0,1,-5,9,-9,4,-3,3,9,6,7,9,10,-2,-9,1,-9,-9,-8,4\\\"},{\\\"server\\\":\\\"fulcrumassets\\\",\\\"name\\\":\\\"contract-663748.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[-7,-5,4,0,-4,3],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n -7,-5,4,0,-4,3\\\"},{\\\"server\\\":\\\"blade\\\",\\\"name\\\":\\\"contract-321164.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":94,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 94 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"blade\\\",\\\"name\\\":\\\"contract-824470.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":2206660927995210,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 2206660927995210 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"},{\\\"server\\\":\\\"The-Cave\\\",\\\"name\\\":\\\"contract-193424.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[8,2],\\\"description\\\":\\\"You are in a grid with 8 rows and 2 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [8, 2]\\\"},{\\\"server\\\":\\\"The-Cave\\\",\\\"name\\\":\\\"contract-997451-Chongqing.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[-1,-7,-8,3,-6,-4,-9,3,-9,5,-3,6,1,-3,3,5,8,0,-7,-8,7,9,-6,7,-4,6,-9,2,-3,2,7,10,-9,-9,10,-4,6,-7,-9],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n -1,-7,-8,3,-6,-4,-9,3,-9,5,-3,6,1,-3,3,5,8,0,-7,-8,7,9,-6,7,-4,6,-9,2,-3,2,7,10,-9,-9,10,-4,6,-7,-9\\\"},{\\\"server\\\":\\\"stormtech\\\",\\\"name\\\":\\\"contract-554970-CyberSec.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"nnjjFFOOCCC888JuaaaaaaaaaaDDKKt777700000000QQMLLLLLLQeeMbuuuuuu66jOOOOOOOOOzzzzrrrrrr\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; nnjjFFOOCCC888JuaaaaaaaaaaDDKKt777700000000QQMLLLLLLQeeMbuuuuuu66jOOOOOOOOOzzzzrrrrrr\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-431789-TianDiHui.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":71704917,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 71704917?\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-581142.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"Je2n72bQKwQOK47OK47OkLgOkLgOkLJYorlU86ToStuUMPmslMPmssOXivQiQIQ\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; Je2n72bQKwQOK47OK47OkLgOkLgOkLJYorlU86ToStuUMPmslMPmssOXivQiQIQ\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\".\\\",\\\"name\\\":\\\"contract-583952.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"WWWWWWWWWuiiiiiIIIIIIFUUvvTTTeeeee3333333333X0zrrrrbbbbvpprrSLkkkkkkkkG7\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; WWWWWWWWWuiiiiiIIIIIIFUUvvTTTeeeee3333333333X0zrrrrbbbbvpprrSLkkkkkkkkG7\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"I.I.I.I\\\",\\\"name\\\":\\\"contract-364593-ECorp.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[15,[1,2,4,5,6,9,10,11,12,13,14,15]],\\\"description\\\":\\\"How many different distinct ways can the number 15 be written as a sum of integers contained in the set:\\\\n\\\\n [1,2,4,5,6,9,10,11,12,13,14,15]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"omnia\\\",\\\"name\\\":\\\"contract-895568.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,1,0,0,0,1,0,0,0,0,1],[0,0,0,1,0,0,1,0,0,0,1],[0,0,0,0,0,1,0,1,1,0,0],[0,0,0,0,1,0,1,1,1,0,0],[0,0,1,1,0,0,1,0,0,0,0],[0,0,1,0,0,1,0,1,0,0,1],[0,1,0,0,0,0,0,0,0,0,1],[1,0,1,0,0,0,0,0,0,0,0],[0,1,1,0,0,0,0,0,1,0,1],[0,1,1,0,0,0,0,1,0,1,0],[0,0,1,0,0,0,0,0,0,1,1],[1,1,1,1,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,1,0,0,0,1,0,0,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,1,0,0,1,0,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,1,0,1,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,1,1,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,1,0,0,1,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,0,1,0,1,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,0,0,0,0,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[1,0,1,0,0,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,0,0,0,0,0,1,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,0,0,0,0,1,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,0,0,0,0,0,1,1],\\\\n&nbsp;&nbsp;&nbsp;[1,1,1,1,0,0,0,0,0,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"defcomm\\\",\\\"name\\\":\\\"contract-214124.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"(a)(((()\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n (a)(((()\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"infocomm\\\",\\\"name\\\":\\\"contract-121332.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,1,0],[1,0,1,0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0,0,0,1],[1,0,0,1,0,0,0,0,1,0,0],[0,0,0,1,0,0,0,1,0,0,0],[1,0,0,0,0,1,1,0,0,1,0],[0,0,0,1,0,0,0,0,0,1,0],[0,1,0,0,0,0,0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,1,0,1,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,1,0,\\\\n1,0,1,0,0,0,0,0,0,0,0,\\\\n1,0,0,0,0,0,0,0,0,0,1,\\\\n1,0,0,1,0,0,0,0,1,0,0,\\\\n0,0,0,1,0,0,0,1,0,0,0,\\\\n1,0,0,0,0,1,1,0,0,1,0,\\\\n0,0,0,1,0,0,0,0,0,1,0,\\\\n0,1,0,0,0,0,0,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"microdyne\\\",\\\"name\\\":\\\"contract-909434.cct\\\",\\\"type\\\":\\\"Shortest Path in a Grid\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,1,0,1,0,1],[0,0,0,0,0,1,0,0,1],[1,0,0,0,0,0,0,1,0],[0,1,1,0,0,0,0,0,0],[0,0,0,0,1,0,0,1,0],[0,1,0,0,0,0,1,0,0],[0,1,1,1,0,1,0,0,0],[0,0,1,0,0,0,0,0,0],[0,0,0,0,1,0,1,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n &nbsp;&nbsp;[[0,0,0,0,1,0,1,0,1],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,1,0,0,1],\\\\n&nbsp;&nbsp;&nbsp;[1,0,0,0,0,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,0,1,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,0,0,0,0,1,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,1,1,1,0,1,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,1,0,0,0,0,0,0],\\\\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,1,0,0]]\\\\n\\\\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\\\\n\\\\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\\n\\\\n Examples:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\\\\n \\\\n Answer: 'DRRURRD'\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\\\\n \\\\n Answer: ''\\\\n\\\\n\\\"},{\\\"server\\\":\\\"neo-net\\\",\\\"name\\\":\\\"contract-570067.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[10,9],\\\"description\\\":\\\"You are in a grid with 10 rows and 9 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [10, 9]\\\"},{\\\"server\\\":\\\"omega-net\\\",\\\"name\\\":\\\"contract-815290.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"H2I2ySI2ySIIIIIIIIIcTLyz7jn7kK7kK7PL7kK7k0eJyxxJyxxJyxxWrgoVEArgoVEAr5FTDh6lAdZ5dLAUpLA\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; H2I2ySI2ySIIIIIIIIIcTLyz7jn7kK7kK7PL7kK7k0eJyxxJyxxJyxxWrgoVEArgoVEAr5FTDh6lAdZ5dLAUpLA\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"omega-net\\\",\\\"name\\\":\\\"contract-990335-NWO.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"0100100010000000100000001100110001011100011111110100010101110100\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '0100100010000000100000001100110001011100011111110100010101110100' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"}]\"}}],[\"contracts/2023-07-25T18:57:17.949Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-25T18:57:17.949Z.txt\",\"text\":\"[{\\\"server\\\":\\\"foodnstuff\\\",\\\"name\\\":\\\"contract-803565.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[88,[2,6,8,9,13,14,16,18,20,21,22]],\\\"description\\\":\\\"How many different distinct ways can the number 88 be written as a sum of integers contained in the set:\\\\n\\\\n [2,6,8,9,13,14,16,18,20,21,22]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"darkweb\\\",\\\"name\\\":\\\"contract-709636-Chongqing.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\")()((a(aa)()(a(((\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n )()((a(aa)()(a(((\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"darkweb\\\",\\\"name\\\":\\\"contract-773936.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[8,3],\\\"description\\\":\\\"You are in a grid with 8 rows and 3 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [8, 3]\\\"},{\\\"server\\\":\\\"max-hardware\\\",\\\"name\\\":\\\"contract-591503.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"eYYzOOoooooooowwxlll55U00iSSRRRvvvvvvvvvvvvvv4444444444IIIIIIIII6zzzzzzzzzzzzz00Zn0pp\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; eYYzOOoooooooowwxlll55U00iSSRRRvvvvvvvvvvvvvv4444444444IIIIIIIII6zzzzzzzzzzzzz00Zn0pp\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"max-hardware\\\",\\\"name\\\":\\\"contract-789158.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[10,9,9,1,5,4,6,5,4,8,0,3,9,5],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 10,9,9,1,5,4,6,5,4,8,0,3,9,5\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"}]\"}}],[\"analytics/2023-07-26-16-54-Bachman&Associates-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-26-16-54-Bachman&Associates-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-23T17:03:10.432Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-23T17:03:10.432Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"Illuminati\\\",\\\"firstTime\\\":\\\"2023-07-23T17:03:10.432Z\\\"},{\\\"factionToMax\\\":\\\"CyberSec\\\",\\\"firstTime\\\":\\\"2023-07-24T11:47:54.128Z\\\"},{\\\"factionToMax\\\":\\\"Chongqing\\\",\\\"firstTime\\\":\\\"2023-07-25T18:56:51.521Z\\\"},{\\\"factionToMax\\\":\\\"Bachman & Associates\\\",\\\"firstTime\\\":\\\"2023-07-26T14:19:40.438Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":5625000,\\\"currentFactionRep\\\":0,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-23T17:03:10.432Z\\\"},\\\"augsBought\\\":[\\\"Neuralstimulator\\\",\\\"DataJack\\\",\\\"Neuregen Gene Modification\\\"],\\\"moneySpent\\\":{\\\"augments\\\":15626250000,\\\"homeCores\\\":177978515625000,\\\"homeRam\\\":149725512088606.16,\\\"fluxGovernors\\\":77950442270275.73,\\\"repPurchased\\\":0},\\\"moneyLeft\\\":12506530727421.977,\\\"lastSaved\\\":\\\"2023-07-26T21:54:38.093Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":true,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":true,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":5625000,\\\"currentFactionRep\\\":5625265.904895162,\\\"targetRepForGettingToFavor\\\":0,\\\"time\\\":\\\"2023-07-23T17:03:12.454Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$13,900,414,011,565,530.00\\\",\\\"moneyRightNow\\\":\\\"$228,017,966,566,475.30\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$75,000,285,000,000.00\\\",\\\"time\\\":\\\"2023-07-23T17:03:12.454Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$13,900,414,011,565,530.00\\\",\\\"moneyRightNow\\\":\\\"$231,548,724,433,651.28\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$75,000,285,000,000.00\\\",\\\"time\\\":\\\"2023-07-23T17:03:16.593Z\\\"},\\\"amountOfRamIncrease\\\":null,\\\"amountOfCoresIncrease\\\":null,\\\"shareBoughtBack\\\":0}\"}}],[\"contracts/2023-07-26T21:54:40.655Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-26T21:54:40.655Z.txt\",\"text\":\"[{\\\"server\\\":\\\"darkweb\\\",\\\"name\\\":\\\"contract-773731-BachmanAssociates.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":198,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 198 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"},{\\\"server\\\":\\\"avmnite-02h\\\",\\\"name\\\":\\\"contract-323480-NiteSec.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"aQZo0TGWTGWf2LH68MX86tuBZ8mDzavUs06w0anUs00000XHgTRm0XH\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; aQZo0TGWTGWf2LH68MX86tuBZ8mDzavUs06w0anUs00000XHgTRm0XH\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"aevum-police\\\",\\\"name\\\":\\\"contract-586442-NWO.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[-3,10,5,5,9,0,9,4,-5,6,9,5,-6,-8,10,2],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n -3,10,5,5,9,0,9,4,-5,6,9,5,-6,-8,10,2\\\"},{\\\"server\\\":\\\"aevum-police\\\",\\\"name\\\":\\\"contract-751100-CyberSec.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[103,[2,3,6,10,11,12,13,15,16,17,20,21]],\\\"description\\\":\\\"How many different distinct ways can the number 103 be written as a sum of integers contained in the set:\\\\n\\\\n [2,3,6,10,11,12,13,15,16,17,20,21]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"rothman-uni\\\",\\\"name\\\":\\\"contract-250619-CyberSec.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[4],[9,9],[7,1,5],[4,5,9,5],[8,6,5,9,5],[7,5,8,2,5,5],[5,5,9,3,3,7,5]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[4],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[9,9],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[7,1,5],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[4,5,9,5],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[8,6,5,9,5],\\\\n&nbsp;&nbsp;&nbsp;[7,5,8,2,5,5],\\\\n&nbsp;&nbsp;[5,5,9,3,3,7,5]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"icarus\\\",\\\"name\\\":\\\"contract-427251.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":37,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 37 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"helios\\\",\\\"name\\\":\\\"contract-265488.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":928468217,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 928468217?\\\"},{\\\"server\\\":\\\"4sigma\\\",\\\"name\\\":\\\"contract-634593-TianDiHui.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":20,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 20 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"kuai-gong\\\",\\\"name\\\":\\\"contract-741360-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0],[0,0,0],[1,0,0],[1,0,0],[0,0,0],[0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,\\\\n0,0,0,\\\\n1,0,0,\\\\n1,0,0,\\\\n0,0,0,\\\\n0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"megacorp\\\",\\\"name\\\":\\\"contract-103370.cct\\\",\\\"type\\\":\\\"Proper 2-Coloring of a Graph\\\",\\\"attemptsLeft\\\":5,\\\"input\\\":[9,[[3,4],[4,6],[2,3],[5,7],[1,6],[6,7],[3,5],[1,5],[3,6],[1,2],[0,4]]],\\\"description\\\":\\\"You are given the following data, representing a graph:\\\\n [9,[[3,4],[4,6],[2,3],[5,7],[1,6],[6,7],[3,5],[1,5],[3,6],[1,2],[0,4]]]\\\\n Note that \\\\\\\"graph\\\\\\\", as used here, refers to the field of graph theory, and has no relation to statistics or plotting. The first element of the data represents the number of vertices in the graph. Each vertex is a unique number between 0 and 8. The next element of the data represents the edges of the graph. Two vertices u,v in a graph are said to be adjacent if there exists an edge [u,v]. Note that an edge [u,v] is the same as an edge [v,u], as order does not matter. You must construct a 2-coloring of the graph, meaning that you have to assign each vertex in the graph a \\\\\\\"color\\\\\\\", either 0 or 1, such that no two adjacent vertices have the same color. Submit your answer in the form of an array, where element i represents the color of vertex i. If it is impossible to construct a 2-coloring of the given graph, instead submit an empty array.\\\\n\\\\n Examples:\\\\n\\\\n Input: [4, [[0, 2], [0, 3], [1, 2], [1, 3]]]\\\\n Output: [0, 0, 1, 1]\\\\n\\\\n Input: [3, [[0, 1], [0, 2], [1, 2]]]\\\\n Output: []\\\"},{\\\"server\\\":\\\"nwo\\\",\\\"name\\\":\\\"contract-251686-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"SSSSSSSgjxSbI6X016oiPnyiPnyiPnyiPnGv3yiPgZLDjLDjLDCgjonMuRkg00kg00kg0W\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; SSSSSSSgjxSbI6X016oiPnyiPnyiPnyiPnGv3yiPgZLDjLDjLDCgjonMuRkg00kg00kg0W\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"ecorp\\\",\\\"name\\\":\\\"contract-488944-NiteSec.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":121960648,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 121960648?\\\"},{\\\"server\\\":\\\"omnitek\\\",\\\"name\\\":\\\"contract-648306.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":25,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 25 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"computek\\\",\\\"name\\\":\\\"contract-542172-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"(())a))((())\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n (())a))((())\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"silver-helix\\\",\\\"name\\\":\\\"contract-943776-TheBlackHand.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"LsSUFLsSUF41SUF41S1SUF4L4w4PDHOE22HZDHOEYEZDHOEYE5YAHOEYE5YZaYK5YZaYKKZmIP\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; LsSUFLsSUF41SUF41S1SUF4L4w4PDHOE22HZDHOEYEZDHOEYE5YAHOEYE5YZaYK5YZaYKKZmIP\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"}]\"}}],[\"analytics/2023-07-27-04-17-TheBlackHand-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-27-04-17-TheBlackHand-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-26T22:07:38.104Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-26T22:07:38.104Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"BitRunners\\\",\\\"firstTime\\\":\\\"2023-07-26T22:07:38.104Z\\\"},{\\\"factionToMax\\\":\\\"The Black Hand\\\",\\\"firstTime\\\":\\\"2023-07-26T22:17:04.903Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":3000000,\\\"currentFactionRep\\\":0,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-26T22:07:38.104Z\\\"},\\\"augsBought\\\":[\\\"Enhanced Myelin Sheathing\\\",\\\"The Black Hand\\\"],\\\"moneySpent\\\":{\\\"augments\\\":7260000000,\\\"homeCores\\\":0,\\\"homeRam\\\":0,\\\"fluxGovernors\\\":1163734062156.03,\\\"repPurchased\\\":0},\\\"moneyLeft\\\":434408715107.18396,\\\"lastSaved\\\":\\\"2023-07-27T09:17:22.989Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":true,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":375000,\\\"currentFactionRep\\\":85396.73190700826,\\\"targetRepForGettingToFavor\\\":0,\\\"time\\\":\\\"2023-07-27T01:50:43.959Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$118,046,740,625.23\\\",\\\"moneyRightNow\\\":\\\"$719,150,681,928.34\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$7,260,000,000.00\\\",\\\"time\\\":\\\"2023-07-27T09:17:18.732Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$118,046,740,625.23\\\",\\\"moneyRightNow\\\":\\\"$1,605,402,777,263.21\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$7,260,000,000.00\\\",\\\"time\\\":\\\"2023-07-27T09:17:22.985Z\\\"},\\\"shareBoughtBack\\\":0}\"}}],[\"contracts/2023-07-27T09:17:25.541Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-27T09:17:25.541Z.txt\",\"text\":\"[{\\\"server\\\":\\\"n00dles\\\",\\\"name\\\":\\\"contract-639206.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[3,-1,4,-4,5,-10,10,-2,-4,8,-10,-6,2,7,-2,-8,1,9,3,0,2,5,-10,1,-4,1,-7,8,7,10,-3,9,9],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 3,-1,4,-4,5,-10,10,-2,-4,8,-10,-6,2,7,-2,-8,1,9,3,0,2,5,-10,1,-4,1,-7,8,7,10,-3,9,9\\\"},{\\\"server\\\":\\\"hong-fang-tea\\\",\\\"name\\\":\\\"contract-699472-ECorp.cct\\\",\\\"type\\\":\\\"Compression III: LZ Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"43LZ3LtCRbVxx2D7i7gyyyWNA5vks5333333333H3333H333OKVWdrVWGYduqGYduqNoJZ73UE3Ui7l\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; 43LZ3LtCRbVxx2D7i7gyyyWNA5vks5333333333H3333H333OKVWdrVWGYduqGYduqNoJZ73UE3Ui7l\\\\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\\\\n\\\\n Examples (some have other possible encodings of minimal length):\\\\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\\\\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\\\\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\\\\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\\\\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\\\\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\\\\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\\\\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041\\\"},{\\\"server\\\":\\\"harakiri-sushi\\\",\\\"name\\\":\\\"contract-295482-NWO.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":85,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 85 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"zb-def\\\",\\\"name\\\":\\\"contract-626463.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[2],[9,3],[4,4,9],[5,4,1,2],[9,3,5,7,6],[3,5,4,1,2,3]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[9,3],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[4,4,9],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[5,4,1,2],\\\\n&nbsp;&nbsp;&nbsp;[9,3,5,7,6],\\\\n&nbsp;&nbsp;[3,5,4,1,2,3]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"},{\\\"server\\\":\\\"The-Cave\\\",\\\"name\\\":\\\"contract-834827-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Compression I: RLE Compression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"mbb000000000000uuuuuuuuuuue77JJMxxxxxxkkkkkkkkkkkkkk111111122HHHMMMMMMMMMumw\\\",\\\"description\\\":\\\"Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\\\\n\\\\n You are given the following input string:\\\\n &nbsp; &nbsp; mbb000000000000uuuuuuuuuuue77JJMxxxxxxkkkkkkkkkkkkkk111111122HHHMMMMMMMMMumw\\\\n Encode it using run-length encoding with the minimum possible output length.\\\\n\\\\n Examples:\\\\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\\\\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\\\\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\\\\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\\\\n\\\"},{\\\"server\\\":\\\"fulcrumtech\\\",\\\"name\\\":\\\"contract-935254-BladeIndustries.cct\\\",\\\"type\\\":\\\"Array Jumping Game II\\\",\\\"attemptsLeft\\\":3,\\\"input\\\":[1,5,2,2,3,0,3,5,5,1,2,2,1,1,7,2,2,2,4,3,3,4,0,3],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 1,5,2,2,3,0,3,5,5,1,2,2,1,1,7,2,2,2,4,3,3,4,0,3\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine the minimum number of jumps to reach the end of the array.\\\\n\\\\n If it's impossible to reach the end, then the answer should be 0.\\\"},{\\\"server\\\":\\\"applied-energetics\\\",\\\"name\\\":\\\"contract-345515.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[4,4],\\\"description\\\":\\\"You are in a grid with 4 rows and 4 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [4, 4]\\\"},{\\\"server\\\":\\\"catalyst\\\",\\\"name\\\":\\\"contract-373551.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[-2,9,-4,8,-8,7,-9],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n -2,9,-4,8,-8,7,-9\\\"},{\\\"server\\\":\\\"alpha-ent\\\",\\\"name\\\":\\\"contract-971032.cct\\\",\\\"type\\\":\\\"Find Largest Prime Factor\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":720278783,\\\"description\\\":\\\"A prime factor is a factor that is a prime number. What is the largest prime factor of 720278783?\\\"}]\"}}],[\"analytics/2023-07-27-11-12-BitRunners-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-27-11-12-BitRunners-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-27T09:19:40.636Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-27T09:19:40.636Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"BitRunners\\\",\\\"firstTime\\\":\\\"2023-07-27T09:19:40.636Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":3000000,\\\"currentFactionRep\\\":0.6069547049820495,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-27T09:19:40.636Z\\\"},\\\"augsBought\\\":[\\\"Cranial Signal Processors - Gen IV\\\",\\\"Nanofiber Weave\\\"],\\\"moneySpent\\\":{\\\"augments\\\":4012500000,\\\"homeCores\\\":0,\\\"homeRam\\\":0,\\\"fluxGovernors\\\":1194660958918.9114,\\\"repPurchased\\\":0},\\\"moneyLeft\\\":333027578820.8628,\\\"lastSaved\\\":\\\"2023-07-27T16:12:15.036Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":true,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":3000000,\\\"currentFactionRep\\\":70101.61319890729,\\\"targetRepForGettingToFavor\\\":24.1065,\\\"time\\\":\\\"2023-07-27T10:41:13.489Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$386,555,723,958.96\\\",\\\"moneyRightNow\\\":\\\"$431,651,166,122.93\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$4,012,500,000.00\\\",\\\"time\\\":\\\"2023-07-27T16:12:10.636Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$386,555,723,958.96\\\",\\\"moneyRightNow\\\":\\\"$1,531,701,037,739.77\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$4,012,500,000.00\\\",\\\"time\\\":\\\"2023-07-27T16:12:15.032Z\\\"},\\\"shareBoughtBack\\\":0}\"}}],[\"contracts/2023-07-27T16:12:17.580Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-27T16:12:17.580Z.txt\",\"text\":\"[{\\\"server\\\":\\\"kuai-gong\\\",\\\"name\\\":\\\"contract-799112-CyberSec.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[25,[1,3,5,6,8,9,11,12,13,14,15,17]],\\\"description\\\":\\\"How many different distinct ways can the number 25 be written as a sum of integers contained in the set:\\\\n\\\\n [1,3,5,6,8,9,11,12,13,14,15,17]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"blade\\\",\\\"name\\\":\\\"contract-705338-TheBlackHand.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,1,0,0,0,0,0,0,0],[0,1,0,0,1,1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,1,0,0,0,0],[0,0,0,0,0,1,0,0,0,1,0],[0,1,0,0,1,0,0,1,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,1,1,0,0,0],[0,0,0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,0,1,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,1,0,0,0,0,0,0,0,\\\\n0,1,0,0,1,1,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,1,0,0,0,0,\\\\n0,0,0,0,0,1,0,0,0,1,0,\\\\n0,1,0,0,1,0,0,1,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,1,0,0,\\\\n0,0,0,0,0,0,1,1,0,0,0,\\\\n0,0,0,0,0,0,0,1,0,0,0,\\\\n0,0,0,0,0,0,0,1,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"syscore\\\",\\\"name\\\":\\\"contract-852192-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Proper 2-Coloring of a Graph\\\",\\\"attemptsLeft\\\":5,\\\"input\\\":[6,[[1,4],[2,4],[2,3],[0,2]]],\\\"description\\\":\\\"You are given the following data, representing a graph:\\\\n [6,[[1,4],[2,4],[2,3],[0,2]]]\\\\n Note that \\\\\\\"graph\\\\\\\", as used here, refers to the field of graph theory, and has no relation to statistics or plotting. The first element of the data represents the number of vertices in the graph. Each vertex is a unique number between 0 and 5. The next element of the data represents the edges of the graph. Two vertices u,v in a graph are said to be adjacent if there exists an edge [u,v]. Note that an edge [u,v] is the same as an edge [v,u], as order does not matter. You must construct a 2-coloring of the graph, meaning that you have to assign each vertex in the graph a \\\\\\\"color\\\\\\\", either 0 or 1, such that no two adjacent vertices have the same color. Submit your answer in the form of an array, where element i represents the color of vertex i. If it is impossible to construct a 2-coloring of the given graph, instead submit an empty array.\\\\n\\\\n Examples:\\\\n\\\\n Input: [4, [[0, 2], [0, 3], [1, 2], [1, 3]]]\\\\n Output: [0, 0, 1, 1]\\\\n\\\\n Input: [3, [[0, 1], [0, 2], [1, 2]]]\\\\n Output: []\\\"},{\\\"server\\\":\\\"solaris\\\",\\\"name\\\":\\\"contract-804781.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":3654796,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 3654796 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"},{\\\"server\\\":\\\"crush-fitness\\\",\\\"name\\\":\\\"contract-138069.cct\\\",\\\"type\\\":\\\"Proper 2-Coloring of a Graph\\\",\\\"attemptsLeft\\\":5,\\\"input\\\":[9,[[0,2],[3,4],[0,7],[0,1],[1,5],[1,8],[3,8]]],\\\"description\\\":\\\"You are given the following data, representing a graph:\\\\n [9,[[0,2],[3,4],[0,7],[0,1],[1,5],[1,8],[3,8]]]\\\\n Note that \\\\\\\"graph\\\\\\\", as used here, refers to the field of graph theory, and has no relation to statistics or plotting. The first element of the data represents the number of vertices in the graph. Each vertex is a unique number between 0 and 8. The next element of the data represents the edges of the graph. Two vertices u,v in a graph are said to be adjacent if there exists an edge [u,v]. Note that an edge [u,v] is the same as an edge [v,u], as order does not matter. You must construct a 2-coloring of the graph, meaning that you have to assign each vertex in the graph a \\\\\\\"color\\\\\\\", either 0 or 1, such that no two adjacent vertices have the same color. Submit your answer in the form of an array, where element i represents the color of vertex i. If it is impossible to construct a 2-coloring of the given graph, instead submit an empty array.\\\\n\\\\n Examples:\\\\n\\\\n Input: [4, [[0, 2], [0, 3], [1, 2], [1, 3]]]\\\\n Output: [0, 0, 1, 1]\\\\n\\\\n Input: [3, [[0, 1], [0, 2], [1, 2]]]\\\\n Output: []\\\"}]\"}}],[\"contracts/2023-07-27T23:30:49.299Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-27T23:30:49.299Z.txt\",\"text\":\"[{\\\"server\\\":\\\"omega-net\\\",\\\"name\\\":\\\"contract-470203.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[3,8],\\\"description\\\":\\\"You are in a grid with 3 rows and 8 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [3, 8]\\\"}]\"}}],[\"analytics/2023-07-28-21-32-OmniTekIncorporated-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-28-21-32-OmniTekIncorporated-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-27T20:26:10.127Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-27T20:26:10.128Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"NWO\\\",\\\"firstTime\\\":\\\"2023-07-27T20:26:10.128Z\\\"},{\\\"factionToMax\\\":\\\"OmniTek Incorporated\\\",\\\"firstTime\\\":\\\"2023-07-28T01:31:39.617Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":5250000,\\\"currentFactionRep\\\":0.46352307906017853,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-27T20:26:10.129Z\\\"},\\\"augsBought\\\":[\\\"FocusWire\\\",\\\"Neuroreceptor Management Implant\\\",\\\"CashRoot Starter Kit\\\",\\\"Augmented Targeting II\\\",\\\"Augmented Targeting III\\\",\\\"Combat Rib I\\\",\\\"Combat Rib II\\\"],\\\"moneySpent\\\":{\\\"augments\\\":23497514332.499996,\\\"homeCores\\\":0,\\\"homeRam\\\":0,\\\"fluxGovernors\\\":1261515606995.3489,\\\"repPurchased\\\":379560000000},\\\"moneyLeft\\\":1671647212.4071045,\\\"lastSaved\\\":\\\"2023-07-28T02:32:36.781Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":true,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":5250000,\\\"currentFactionRep\\\":85422.5605125317,\\\"targetRepForGettingToFavor\\\":0,\\\"time\\\":\\\"2023-07-27T21:56:40.420Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$561,341,801,490.32\\\",\\\"moneyRightNow\\\":\\\"$2,763,165,626,913.56\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$4,392,555,000.00\\\",\\\"time\\\":\\\"2023-07-27T21:56:40.421Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$561,341,801,490.32\\\",\\\"moneyRightNow\\\":\\\"$5,835,801,081,839.40\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$4,392,555,000.00\\\",\\\"time\\\":\\\"2023-07-27T21:56:44.971Z\\\"},\\\"shareBoughtBack\\\":845}\"}}],[\"contracts/2023-07-28T02:32:39.327Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-28T02:32:39.327Z.txt\",\"text\":\"[{\\\"server\\\":\\\"iron-gym\\\",\\\"name\\\":\\\"contract-417568.cct\\\",\\\"type\\\":\\\"Compression II: LZ Decompression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"213619xtXOCuyn301i760810797UCBCzC6342z6719UrKqrILFa07s8rRs4o\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following LZ-encoded string:\\\\n &nbsp; &nbsp; 213619xtXOCuyn301i760810797UCBCzC6342z6719UrKqrILFa07s8rRs4o\\\\n Decode it and output the original string.\\\\n\\\\n Example: decoding '5aaabb450723abb' chunk-by-chunk\\\\n &nbsp; &nbsp; 5aaabb &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;aaabb\\\\n &nbsp; &nbsp; 5aaabb45 &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;aaabbaaab\\\\n &nbsp; &nbsp; 5aaabb450 &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;aaabbaaab\\\\n &nbsp; &nbsp; 5aaabb45072 &nbsp; &nbsp; &nbsp;-> &nbsp;aaabbaaababababa\\\\n &nbsp; &nbsp; 5aaabb450723abb &nbsp;-> &nbsp;aaabbaaababababaabb\\\"}]\"}}],[\"contracts/2023-07-28T02:49:19.284Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-28T02:49:19.284Z.txt\",\"text\":\"[{\\\"server\\\":\\\"johnson-ortho\\\",\\\"name\\\":\\\"contract-283263.cct\\\",\\\"type\\\":\\\"Minimum Path Sum in a Triangle\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[6],[4,7],[3,9,3],[1,8,8,9],[6,4,7,8,7],[6,5,3,7,4,9],[1,8,4,7,4,8,1],[2,8,8,4,3,9,7,7]],\\\"description\\\":\\\"Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\\\\n\\\\n [\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[4,7],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[3,9,3],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,8,8,9],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6,4,7,8,7],\\\\n&nbsp;&nbsp;&nbsp;&nbsp;[6,5,3,7,4,9],\\\\n&nbsp;&nbsp;&nbsp;[1,8,4,7,4,8,1],\\\\n&nbsp;&nbsp;[2,8,8,4,3,9,7,7]\\\\n]\\\\n\\\\n Example: If you are given the following triangle:\\\\n\\\\n[\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\\\\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\\\\n &nbsp;&nbsp;&nbsp;[6,5,7],\\\\n &nbsp;&nbsp;[4,1,8,3]\\\\n ]\\\\n\\\\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1).\\\"}]\"}}],[\"analytics/2023-07-28-00-02-BladeIndustries-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-28-00-02-BladeIndustries-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-28T04:17:24.228Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-28T04:17:24.228Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"Blade Industries\\\",\\\"firstTime\\\":\\\"2023-07-28T04:17:24.229Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":3000000,\\\"currentFactionRep\\\":0.9952932242643379,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-28T04:17:24.230Z\\\"},\\\"augsBought\\\":[\\\"Embedded Netburner Module Analyze Engine\\\",\\\"Artificial Bio-neural Network Implant\\\",\\\"HyperSight Corneal Implant\\\",\\\"Embedded Netburner Module Core Implant\\\",\\\"Cranial Signal Processors - Gen V\\\",\\\"Neural Accelerator\\\",\\\"Enhanced Social Interaction Implant\\\",\\\"Synfibril Muscle\\\",\\\"Bionic Legs\\\",\\\"Bionic Spine\\\",\\\"Combat Rib III\\\"],\\\"moneySpent\\\":{\\\"augments\\\":1362824199696.7107,\\\"homeCores\\\":0,\\\"homeRam\\\":0,\\\"fluxGovernors\\\":0,\\\"repPurchased\\\":0},\\\"moneyLeft\\\":15076243261.268799,\\\"lastSaved\\\":\\\"2023-07-28T05:02:39.658Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":true,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":3000000,\\\"currentFactionRep\\\":96240.57031798622,\\\"targetRepForGettingToFavor\\\":0,\\\"time\\\":\\\"2023-07-28T04:18:05.532Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$5,680,501,492,672.24\\\",\\\"moneyRightNow\\\":\\\"$41,904,637,904.98\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$718,227,210,366.69\\\",\\\"time\\\":\\\"2023-07-28T04:18:16.428Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$6,069,344,372,365.74\\\",\\\"moneyRightNow\\\":\\\"$2,855,065,267,106.48\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$1,362,824,199,696.71\\\",\\\"time\\\":\\\"2023-07-28T05:02:39.657Z\\\"},\\\"shareBoughtBack\\\":2297}\"}}],[\"analytics/2023-07-28-00-39-Daedalus-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-28-00-39-Daedalus-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-28T05:25:11.010Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-28T05:25:11.010Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"Daedalus\\\",\\\"firstTime\\\":\\\"2023-07-28T05:25:11.010Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":7500000,\\\"currentFactionRep\\\":0,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-28T05:25:11.011Z\\\"},\\\"augsBought\\\":[\\\"PC Direct-Neural Interface\\\",\\\"PC Direct-Neural Interface Optimization Submodule\\\",\\\"Synthetic Heart\\\"],\\\"moneySpent\\\":{\\\"augments\\\":68036250000,\\\"homeCores\\\":0,\\\"homeRam\\\":0,\\\"fluxGovernors\\\":57785144504.783295,\\\"repPurchased\\\":0},\\\"moneyLeft\\\":18414489851.491455,\\\"lastSaved\\\":\\\"2023-07-28T05:39:17.214Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":true,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":7500000,\\\"currentFactionRep\\\":107503.6556116861,\\\"targetRepForGettingToFavor\\\":0,\\\"time\\\":\\\"2023-07-28T05:25:45.614Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$9,567,924,849,297.92\\\",\\\"moneyRightNow\\\":\\\"$62,607,865,071.54\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$68,036,250,000.00\\\",\\\"time\\\":\\\"2023-07-28T05:39:06.520Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$9,567,924,849,297.92\\\",\\\"moneyRightNow\\\":\\\"$1,959,414,935,817.67\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$68,036,250,000.00\\\",\\\"time\\\":\\\"2023-07-28T05:39:17.213Z\\\"},\\\"shareBoughtBack\\\":2870}\"}}],[\"contracts/2023-07-28T05:02:42.237Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-28T05:02:42.237Z.txt\",\"text\":\"[{\\\"server\\\":\\\"rothman-uni\\\",\\\"name\\\":\\\"contract-76653.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"))((a)(((()(\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n ))((a)(((()(\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"solaris\\\",\\\"name\\\":\\\"contract-920967.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":94,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 94 be written as a sum of at least two positive integers?\\\"}]\"}}],[\"analytics/2023-07-28-01-34-ECorp-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-28-01-34-ECorp-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-28T05:59:04.791Z\\\",\\\"firstAssignFactionToMax\\\":\\\"2023-07-28T05:59:04.791Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"ECorp\\\",\\\"firstTime\\\":\\\"2023-07-28T05:59:04.791Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":false,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":5250000,\\\"currentFactionRep\\\":0,\\\"targetRepForGettingToFavor\\\":700000,\\\"time\\\":\\\"2023-07-28T05:59:04.791Z\\\"},\\\"augsBought\\\":[\\\"Embedded Netburner Module Direct Memory Access Upgrade\\\",\\\"Graphene Bionic Legs Upgrade\\\",\\\"NEMEAN Subdermal Weave\\\"],\\\"moneySpent\\\":{\\\"augments\\\":81847500000,\\\"homeCores\\\":0,\\\"homeRam\\\":0,\\\"fluxGovernors\\\":2080372041703.5125,\\\"repPurchased\\\":190413000000},\\\"moneyLeft\\\":5070025240.08429,\\\"lastSaved\\\":\\\"2023-07-28T06:34:41.663Z\\\",\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":false,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":true,\\\"factionDonationTrigger\\\":false,\\\"maximumAugRepNeeded\\\":5250000,\\\"currentFactionRep\\\":107691.75168459496,\\\"targetRepForGettingToFavor\\\":0,\\\"time\\\":\\\"2023-07-28T05:59:36.654Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$25,970,287,670,018.41\\\",\\\"moneyRightNow\\\":\\\"$360,555,249,018.02\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$81,847,500,000.00\\\",\\\"time\\\":\\\"2023-07-28T06:34:37.401Z\\\"},\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$25,970,287,670,018.41\\\",\\\"moneyRightNow\\\":\\\"$2,805,400,093,907.41\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$81,847,500,000.00\\\",\\\"time\\\":\\\"2023-07-28T06:34:41.615Z\\\"},\\\"shareBoughtBack\\\":693}\"}}],[\"contracts/2023-07-28T06:34:44.226Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-28T06:34:44.226Z.txt\",\"text\":\"[{\\\"server\\\":\\\"omega-net\\\",\\\"name\\\":\\\"contract-834431.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[-9,-3,-5,6,8,-8,9,-1,7,-6,-7,2,-10,-4,8,4,-6,-9,-5,0,-10,6,-2,-7,-6,-2,-1,-4,3,-8,9,9,1,-2,-6,0,-5,-1],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n -9,-3,-5,6,8,-8,9,-1,7,-6,-7,2,-10,-4,8,4,-6,-9,-5,0,-10,6,-2,-7,-6,-2,-1,-4,3,-8,9,9,1,-2,-6,0,-5,-1\\\"},{\\\"server\\\":\\\"icarus\\\",\\\"name\\\":\\\"contract-181002-TheBlackHand.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\")())aaa)(a((\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n )())aaa)(a((\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"}]\"}}],[\"analytics/2023-07-28-03-46-BitRunners-end-round.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"analytics/2023-07-28-03-46-BitRunners-end-round.txt\",\"text\":\"{\\\"firstStarted\\\":\\\"2023-07-28T08:27:15.867Z\\\",\\\"firstAssignFactionToMaxViaDonation\\\":\\\"2023-07-28T08:27:15.867Z\\\",\\\"factionsToMax\\\":[{\\\"factionToMax\\\":\\\"BitRunners\\\",\\\"firstTime\\\":\\\"2023-07-28T08:27:15.868Z\\\"}],\\\"firstEncounterOfRepTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":true,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":true,\\\"factionDonationTrigger\\\":true,\\\"maximumAugRepNeeded\\\":3000000,\\\"currentFactionRep\\\":3000219.8501001988,\\\"targetRepForGettingToFavor\\\":236.4164,\\\"time\\\":\\\"2023-07-28T08:27:15.868Z\\\"},\\\"repTrigger\\\":{\\\"factionRepGreaterThanMaximumAug\\\":true,\\\"factionRepGreaterThanTargetToGetToFavorNeeded\\\":true,\\\"factionDonationTrigger\\\":true,\\\"maximumAugRepNeeded\\\":3000000,\\\"currentFactionRep\\\":3000219.8501001988,\\\"targetRepForGettingToFavor\\\":236.4164,\\\"time\\\":\\\"2023-07-28T08:27:15.868Z\\\"},\\\"firstEncoundedMoneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":false,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$114,335,452,351,227.64\\\",\\\"moneyRightNow\\\":\\\"$8,222,155,058,321.95\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$17,446,799,575,031.10\\\",\\\"time\\\":\\\"2023-07-28T08:27:15.869Z\\\"},\\\"augsBought\\\":[\\\"Hydroflame Left Arm\\\",\\\"Embedded Netburner Module Core V2 Upgrade\\\",\\\"Embedded Netburner Module Core V3 Upgrade\\\",\\\"Graphene Bionic Spine Upgrade\\\",\\\"ECorp HVMind Implant\\\",\\\"BitRunners Neurolink\\\",\\\"Xanipher\\\",\\\"Neotra\\\",\\\"OmniTek InfoLoad\\\",\\\"SmartJaw\\\",\\\"PCMatrix\\\",\\\"The Red Pill\\\"],\\\"moneySpent\\\":{\\\"augments\\\":17446799575031.098,\\\"homeCores\\\":0,\\\"homeRam\\\":0,\\\"fluxGovernors\\\":0,\\\"repPurchased\\\":0},\\\"moneyLeft\\\":6431319862.206421,\\\"lastSaved\\\":\\\"2023-07-28T08:46:29.665Z\\\",\\\"moneyTrigger\\\":{\\\"estimatedIncomeTriggered\\\":true,\\\"moneyIsGreaterThanTriggered\\\":true,\\\"estimatedIncomeForTheNextFourHours\\\":\\\"$110,467,284,000,411.81\\\",\\\"moneyRightNow\\\":\\\"$18,089,620,601,473.21\\\",\\\"buyArgumentsWhenWeHave\\\":\\\"$17,446,799,575,031.10\\\",\\\"time\\\":\\\"2023-07-28T08:46:29.664Z\\\"},\\\"shareBoughtBack\\\":696}\"}}],[\"contracts/2023-07-28T08:46:32.223Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-28T08:46:32.223Z.txt\",\"text\":\"[{\\\"server\\\":\\\"defcomm\\\",\\\"name\\\":\\\"contract-903091.cct\\\",\\\"type\\\":\\\"Encryption II: Vigenère Cipher\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[\\\"TRASHMODEMMOUSECACHEDEBUG\\\",\\\"GIGABYTE\\\"],\\\"description\\\":\\\"Vigenère cipher is a type of polyalphabetic substitution. It uses  the Vigenère square to encrypt and decrypt plaintext with a keyword.\\\\n\\\\n &nbsp;&nbsp;Vigenère square:\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A B C D E F G H I J K L M N O P Q R S T U V W X Y Z \\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; +----------------------------------------------------\\\\n &nbsp;&nbsp;&nbsp;&nbsp; A | A B C D E F G H I J K L M N O P Q R S T U V W X Y Z \\\\n &nbsp;&nbsp;&nbsp;&nbsp; B | B C D E F G H I J K L M N O P Q R S T U V W X Y Z A \\\\n &nbsp;&nbsp;&nbsp;&nbsp; C | C D E F G H I J K L M N O P Q R S T U V W X Y Z A B\\\\n &nbsp;&nbsp;&nbsp;&nbsp; D | D E F G H I J K L M N O P Q R S T U V W X Y Z A B C\\\\n &nbsp;&nbsp;&nbsp;&nbsp; E | E F G H I J K L M N O P Q R S T U V W X Y Z A B C D\\\\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...\\\\n &nbsp;&nbsp;&nbsp;&nbsp; Y | Y Z A B C D E F G H I J K L M N O P Q R S T U V W X\\\\n &nbsp;&nbsp;&nbsp;&nbsp; Z | Z A B C D E F G H I J K L M N O P Q R S T U V W X Y\\\\n\\\\n For encryption each letter of the plaintext is paired with the corresponding letter of a repeating keyword. For example, the plaintext DASHBOARD is encrypted with the keyword LINUX:\\\\n &nbsp;&nbsp; Plaintext: DASHBOARD\\\\n &nbsp;&nbsp; Keyword:&nbsp;&nbsp;&nbsp;LINUXLINU\\\\n So, the first letter D is paired with the first letter of the key L. Therefore, row D and column L of the  Vigenère square are used to get the first cipher letter O. This must be repeated for the whole ciphertext.\\\\n\\\\n You are given an array with two elements:\\\\n &nbsp;&nbsp;[\\\\\\\"TRASHMODEMMOUSECACHEDEBUG\\\\\\\", \\\\\\\"GIGABYTE\\\\\\\"]\\\\n The first element is the plaintext, the second element is the keyword.\\\\n\\\\n Return the ciphertext as uppercase string.\\\"}]\"}}],[\"contracts/2023-07-28T08:59:20.500Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-28T08:59:20.500Z.txt\",\"text\":\"[{\\\"server\\\":\\\"solaris\\\",\\\"name\\\":\\\"contract-586801-TianDiHui.cct\\\",\\\"type\\\":\\\"Compression II: LZ Decompression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"86KGZOD8k168hnnikhnT891t595ughRH1145ruO423WEH483qNT139zVozZh7of08HFAwY6Td738kiZwUEXk\\\",\\\"description\\\":\\\"Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\\\\n\\\\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\\\\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\\\\n\\\\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\\\\n\\\\n You are given the following LZ-encoded string:\\\\n &nbsp; &nbsp; 86KGZOD8k168hnnikhnT891t595ughRH1145ruO423WEH483qNT139zVozZh7of08HFAwY6Td738kiZwUEXk\\\\n Decode it and output the original string.\\\\n\\\\n Example: decoding '5aaabb450723abb' chunk-by-chunk\\\\n &nbsp; &nbsp; 5aaabb &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;aaabb\\\\n &nbsp; &nbsp; 5aaabb45 &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;aaabbaaab\\\\n &nbsp; &nbsp; 5aaabb450 &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;aaabbaaab\\\\n &nbsp; &nbsp; 5aaabb45072 &nbsp; &nbsp; &nbsp;-> &nbsp;aaabbaaababababa\\\\n &nbsp; &nbsp; 5aaabb450723abb &nbsp;-> &nbsp;aaabbaaababababaabb\\\"}]\"}}],[\"contracts/2023-07-28T09:19:20.804Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-28T09:19:20.804Z.txt\",\"text\":\"[{\\\"server\\\":\\\"solaris\\\",\\\"name\\\":\\\"contract-828866.cct\\\",\\\"type\\\":\\\"Array Jumping Game II\\\",\\\"attemptsLeft\\\":3,\\\"input\\\":[2,4,3,6,1,2,3,3,2,3,2,0,1,2,1,2,2,3],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 2,4,3,6,1,2,3,3,2,3,2,0,1,2,1,2,2,3\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine the minimum number of jumps to reach the end of the array.\\\\n\\\\n If it's impossible to reach the end, then the answer should be 0.\\\"},{\\\"server\\\":\\\"I.I.I.I\\\",\\\"name\\\":\\\"contract-897408.cct\\\",\\\"type\\\":\\\"Array Jumping Game II\\\",\\\"attemptsLeft\\\":3,\\\"input\\\":[3,3,0,2,2,3,6,2,0,1,2,5,2,2,4,1,4,1,5,1,3,1,3],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 3,3,0,2,2,3,6,2,0,1,2,5,2,2,4,1,4,1,5,1,3,1,3\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine the minimum number of jumps to reach the end of the array.\\\\n\\\\n If it's impossible to reach the end, then the answer should be 0.\\\"},{\\\"server\\\":\\\"computek\\\",\\\"name\\\":\\\"contract-621936.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,1,0,0,1],[0,0,0,0,1,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,1,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,\\\\n0,1,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,1,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,1,0,0,1,\\\\n0,0,0,0,1,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"}]\"}}],[\"contracts/failure/omnitek-contract-841265.cct-AlgorithmicStockTraderIV.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/failure/omnitek-contract-841265.cct-AlgorithmicStockTraderIV.txt\",\"text\":\"{\\\"contract\\\":{\\\"server\\\":\\\"omnitek\\\",\\\"name\\\":\\\"contract-841265.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader IV\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[7,[35,180,22,171,33,70,66,183,150,192,118,189,99,184,36,97,31,195,58,74,20,156,10,143,74,108]],\\\"description\\\":\\\"You are given the following array with two elements:\\\\n\\\\n [7, [35,73,177,180,173,62,60,22,163,171,126,33,61,70,66,183,150,192,118,125,189,99,184,42,36,97,46,31,78,136,174,195,58,74,55,20,25,156,139,58,32,10,23,106,143,96,74,108]]\\\\n\\\\n The first element is an integer k. The second element is an array of stock prices (which are numbers) where the i-th element represents the stock price on day i.\\\\n\\\\n Determine the maximum possible profit you can earn using at most k transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you can buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0.\\\"},\\\"wrongResult\\\":962}\"}}],[\"contracts/2023-07-28T12:19:25.246Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-28T12:19:25.246Z.txt\",\"text\":\"[{\\\"server\\\":\\\"neo-net\\\",\\\"name\\\":\\\"contract-867240-CyberSec.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[1,2,-3,2,-9,0,-5,7,2,-7,-10,10,-3,2,7,-9,-8,10,-5,8,-6,-10,-8,-6,1,-9,-7,-9,-1,-3,2,9,2,4,4,-5,-2,-5],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 1,2,-3,2,-9,0,-5,7,2,-7,-10,10,-3,2,7,-9,-8,10,-5,8,-6,-10,-8,-6,1,-9,-7,-9,-1,-3,2,9,2,4,4,-5,-2,-5\\\"},{\\\"server\\\":\\\"omega-net\\\",\\\"name\\\":\\\"contract-187004-NWO.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"0010000010000000000000000101101001010110001001000001000011111110\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '0010000010000000000000000101101001010110001001000001000011111110' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"omega-net\\\",\\\"name\\\":\\\"contract-922467.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0],[0,0,0,0],[0,0,1,0],[1,0,0,0],[0,0,0,0],[0,0,0,1],[1,0,0,0],[0,0,1,0],[0,0,1,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,0,\\\\n0,0,0,0,\\\\n0,0,1,0,\\\\n1,0,0,0,\\\\n0,0,0,0,\\\\n0,0,0,1,\\\\n1,0,0,0,\\\\n0,0,1,0,\\\\n0,0,1,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"aevum-police\\\",\\\"name\\\":\\\"contract-290972-NiteSec.cct\\\",\\\"type\\\":\\\"Find All Valid Math Expressions\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[\\\"516883837033\\\",81],\\\"description\\\":\\\"You are given the following string which contains only digits between 0 and 9:\\\\n\\\\n 516883837033\\\\n\\\\n You are also given a target number of 81. Return all possible ways you can add the +(add), -(subtract), and *(multiply) operators to the string such that it evaluates to the target number. (Normal order of operations applies.)\\\\n\\\\n The provided answer should be an array of strings containing the valid expressions. The data provided by this problem is an array with two elements. The first element is the string of digits, while the second element is the target number:\\\\n\\\\n [\\\\\\\"516883837033\\\\\\\", 81]\\\\n\\\\n NOTE: The order of evaluation expects script operator precedence NOTE: Numbers in the expression cannot have leading 0's. In other words, \\\\\\\"1+01\\\\\\\" is not a valid expression Examples:\\\\n\\\\n Input: digits = \\\\\\\"123\\\\\\\", target = 6\\\\n Output: [1+2+3, 1*2*3]\\\\n\\\\n Input: digits = \\\\\\\"105\\\\\\\", target = 5\\\\n Output: [1*0+5, 10-5]\\\"},{\\\"server\\\":\\\"unitalife\\\",\\\"name\\\":\\\"contract-775208-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"1722424137\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 1722424137\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"},{\\\"server\\\":\\\"megacorp\\\",\\\"name\\\":\\\"contract-449584.cct\\\",\\\"type\\\":\\\"Proper 2-Coloring of a Graph\\\",\\\"attemptsLeft\\\":5,\\\"input\\\":[14,[[8,12],[10,11],[6,11],[6,7],[6,8],[5,12],[6,9],[1,5],[0,4],[4,10],[3,11],[0,5],[3,7],[0,7],[4,10],[1,9],[1,7],[7,12],[4,12],[4,6],[10,13],[3,8],[11,12],[2,11],[5,10],[2,8],[3,5],[1,11],[9,12]]],\\\"description\\\":\\\"You are given the following data, representing a graph:\\\\n [14,[[8,12],[10,11],[6,11],[6,7],[6,8],[5,12],[6,9],[1,5],[0,4],[4,10],[3,11],[0,5],[3,7],[0,7],[4,10],[1,9],[1,7],[7,12],[4,12],[4,6],[10,13],[3,8],[11,12],[2,11],[5,10],[2,8],[3,5],[1,11],[9,12]]]\\\\n Note that \\\\\\\"graph\\\\\\\", as used here, refers to the field of graph theory, and has no relation to statistics or plotting. The first element of the data represents the number of vertices in the graph. Each vertex is a unique number between 0 and 13. The next element of the data represents the edges of the graph. Two vertices u,v in a graph are said to be adjacent if there exists an edge [u,v]. Note that an edge [u,v] is the same as an edge [v,u], as order does not matter. You must construct a 2-coloring of the graph, meaning that you have to assign each vertex in the graph a \\\\\\\"color\\\\\\\", either 0 or 1, such that no two adjacent vertices have the same color. Submit your answer in the form of an array, where element i represents the color of vertex i. If it is impossible to construct a 2-coloring of the given graph, instead submit an empty array.\\\\n\\\\n Examples:\\\\n\\\\n Input: [4, [[0, 2], [0, 3], [1, 2], [1, 3]]]\\\\n Output: [0, 0, 1, 1]\\\\n\\\\n Input: [3, [[0, 1], [0, 2], [1, 2]]]\\\\n Output: []\\\"},{\\\"server\\\":\\\"powerhouse-fitness\\\",\\\"name\\\":\\\"contract-150149-NWO.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"()a()((a(\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n ()a()((a(\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"solaris\\\",\\\"name\\\":\\\"contract-828866.cct\\\",\\\"type\\\":\\\"Array Jumping Game II\\\",\\\"attemptsLeft\\\":3,\\\"input\\\":[2,4,3,6,1,2,3,3,2,3,2,0,1,2,1,2,2,3],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 2,4,3,6,1,2,3,3,2,3,2,0,1,2,1,2,2,3\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine the minimum number of jumps to reach the end of the array.\\\\n\\\\n If it's impossible to reach the end, then the answer should be 0.\\\"},{\\\"server\\\":\\\"infocomm\\\",\\\"name\\\":\\\"contract-921158-NiteSec.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"(()((a)(((\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n (()((a)(((\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"I.I.I.I\\\",\\\"name\\\":\\\"contract-897408.cct\\\",\\\"type\\\":\\\"Array Jumping Game II\\\",\\\"attemptsLeft\\\":3,\\\"input\\\":[3,3,0,2,2,3,6,2,0,1,2,5,2,2,4,1,4,1,5,1,3,1,3],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 3,3,0,2,2,3,6,2,0,1,2,5,2,2,4,1,4,1,5,1,3,1,3\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine the minimum number of jumps to reach the end of the array.\\\\n\\\\n If it's impossible to reach the end, then the answer should be 0.\\\"},{\\\"server\\\":\\\"catalyst\\\",\\\"name\\\":\\\"contract-278327-TianDiHui.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":323,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 323 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"},{\\\"server\\\":\\\"summit-uni\\\",\\\"name\\\":\\\"contract-525976-TianDiHui.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"()))()aaaa)((\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n ()))()aaaa)((\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"lexo-corp\\\",\\\"name\\\":\\\"contract-193878.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,0],[0,1,0,0,0],[0,0,0,0,1],[0,0,1,0,0],[0,0,0,1,0],[0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,0,0,\\\\n0,1,0,0,0,\\\\n0,0,0,0,1,\\\\n0,0,1,0,0,\\\\n0,0,0,1,0,\\\\n0,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"lexo-corp\\\",\\\"name\\\":\\\"contract-251954.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"(()((aa((((aa\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n (()((aa((((aa\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"lexo-corp\\\",\\\"name\\\":\\\"contract-388509.cct\\\",\\\"type\\\":\\\"Array Jumping Game II\\\",\\\"attemptsLeft\\\":3,\\\"input\\\":[3,4,0,1,1,0,2,4,5,1,5,5,1],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 3,4,0,1,1,0,2,4,5,1,5,5,1\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine the minimum number of jumps to reach the end of the array.\\\\n\\\\n If it's impossible to reach the end, then the answer should be 0.\\\"},{\\\"server\\\":\\\"snap-fitness\\\",\\\"name\\\":\\\"contract-515843-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Find All Valid Math Expressions\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[\\\"35000\\\",-24],\\\"description\\\":\\\"You are given the following string which contains only digits between 0 and 9:\\\\n\\\\n 35000\\\\n\\\\n You are also given a target number of -24. Return all possible ways you can add the +(add), -(subtract), and *(multiply) operators to the string such that it evaluates to the target number. (Normal order of operations applies.)\\\\n\\\\n The provided answer should be an array of strings containing the valid expressions. The data provided by this problem is an array with two elements. The first element is the string of digits, while the second element is the target number:\\\\n\\\\n [\\\\\\\"35000\\\\\\\", -24]\\\\n\\\\n NOTE: The order of evaluation expects script operator precedence NOTE: Numbers in the expression cannot have leading 0's. In other words, \\\\\\\"1+01\\\\\\\" is not a valid expression Examples:\\\\n\\\\n Input: digits = \\\\\\\"123\\\\\\\", target = 6\\\\n Output: [1+2+3, 1*2*3]\\\\n\\\\n Input: digits = \\\\\\\"105\\\\\\\", target = 5\\\\n Output: [1*0+5, 10-5]\\\"},{\\\"server\\\":\\\"nova-med\\\",\\\"name\\\":\\\"contract-943121-NiteSec.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[55,[1,2,4,6,8,9,11,12]],\\\"description\\\":\\\"How many different distinct ways can the number 55 be written as a sum of integers contained in the set:\\\\n\\\\n [1,2,4,6,8,9,11,12]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"microdyne\\\",\\\"name\\\":\\\"contract-791331-Sector12.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0],[0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,\\\\n0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"fulcrumtech\\\",\\\"name\\\":\\\"contract-542501.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":4655676301747880,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 4655676301747880 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"},{\\\"server\\\":\\\"omnitek\\\",\\\"name\\\":\\\"contract-841265.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader IV\\\",\\\"attemptsLeft\\\":9,\\\"input\\\":[7,[35,73,177,180,173,62,60,22,163,171,126,33,61,70,66,183,150,192,118,125,189,99,184,42,36,97,46,31,78,136,174,195,58,74,55,20,25,156,139,58,32,10,23,106,143,96,74,108]],\\\"description\\\":\\\"You are given the following array with two elements:\\\\n\\\\n [7, [35,73,177,180,173,62,60,22,163,171,126,33,61,70,66,183,150,192,118,125,189,99,184,42,36,97,46,31,78,136,174,195,58,74,55,20,25,156,139,58,32,10,23,106,143,96,74,108]]\\\\n\\\\n The first element is an integer k. The second element is an array of stock prices (which are numbers) where the i-th element represents the stock price on day i.\\\\n\\\\n Determine the maximum possible profit you can earn using at most k transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you can buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0.\\\"},{\\\"server\\\":\\\"phantasy\\\",\\\"name\\\":\\\"contract-645313.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"(((()((())a)))))))\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n (((()((())a)))))))\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"computek\\\",\\\"name\\\":\\\"contract-621936.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,1,0,0,1],[0,0,0,0,1,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,1,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,\\\\n0,1,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,1,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,1,0,0,1,\\\\n0,0,0,0,1,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"}]\"}}],[\"data/factionToMax.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"data/factionToMax.txt\",\"text\":\"CyberSec\"}}],[\"contracts/failure/rho-construction-contract-891710.cct-AlgorithmicStockTraderIV.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/failure/rho-construction-contract-891710.cct-AlgorithmicStockTraderIV.txt\",\"text\":\"{\\\"contract\\\":{\\\"server\\\":\\\"rho-construction\\\",\\\"name\\\":\\\"contract-891710.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader IV\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[5,[188,4,147,9,183,62,140,103,154,81,112,70,158,36,188,19,150,81,105,82,158,96,194,44,133,11,155,104,197,72,137,42,59]],\\\"description\\\":\\\"You are given the following array with two elements:\\\\n\\\\n [5, [188,56,4,32,147,9,102,183,156,62,84,140,103,154,81,112,70,125,125,158,157,109,36,188,22,19,28,150,81,105,82,158,96,194,132,127,44,133,11,155,104,111,197,72,137,42,59,16]]\\\\n\\\\n The first element is an integer k. The second element is an array of stock prices (which are numbers) where the i-th element represents the stock price on day i.\\\\n\\\\n Determine the maximum possible profit you can earn using at most k transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you can buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0.\\\"},\\\"wrongResult\\\":786}\"}}],[\"data/memoryStarvedQueue.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"data/memoryStarvedQueue.txt\",\"text\":\"[[\\\"silver-helix\\\",{\\\"name\\\":\\\"silver-helix\\\",\\\"moneyThreshhold\\\":33750000,\\\"securityThreshholdTarget\\\":15,\\\"hackDifficulty\\\":14.368,\\\"moneyAvailable\\\":32100561.53008452,\\\"minDifficulty\\\":10,\\\"pids\\\":[111703],\\\"runningOn\\\":[{\\\"machineToRunOn\\\":\\\"CLOUD-000\\\",\\\"threads\\\":584}],\\\"isHacking\\\":false,\\\"readyForNextProcess\\\":false}],[\\\"crush-fitness\\\",{\\\"name\\\":\\\"crush-fitness\\\",\\\"moneyThreshhold\\\":33007991.25,\\\"securityThreshholdTarget\\\":17,\\\"hackDifficulty\\\":14.26,\\\"moneyAvailable\\\":18229590.831641704,\\\"minDifficulty\\\":12,\\\"pids\\\":[110077],\\\"runningOn\\\":[{\\\"machineToRunOn\\\":\\\"CLOUD-000\\\",\\\"threads\\\":322}],\\\"isHacking\\\":false,\\\"readyForNextProcess\\\":false}],[\\\"omega-net\\\",{\\\"name\\\":\\\"omega-net\\\",\\\"moneyThreshhold\\\":46001716.5,\\\"securityThreshholdTarget\\\":14,\\\"hackDifficulty\\\":13.486000000000004,\\\"moneyAvailable\\\":43923577.70011612,\\\"minDifficulty\\\":9,\\\"pids\\\":[109958],\\\"runningOn\\\":[{\\\"machineToRunOn\\\":\\\"CLOUD-000\\\",\\\"threads\\\":141}],\\\"isHacking\\\":false,\\\"readyForNextProcess\\\":false}],[\\\"phantasy\\\",{\\\"name\\\":\\\"phantasy\\\",\\\"moneyThreshhold\\\":18000000,\\\"securityThreshholdTarget\\\":12,\\\"hackDifficulty\\\":9.176,\\\"moneyAvailable\\\":2624.6242377813005,\\\"minDifficulty\\\":7,\\\"pids\\\":[111973],\\\"runningOn\\\":[{\\\"machineToRunOn\\\":\\\"CLOUD-000\\\",\\\"threads\\\":141}],\\\"isHacking\\\":false,\\\"readyForNextProcess\\\":false}],[\\\"max-hardware\\\",{\\\"name\\\":\\\"max-hardware\\\",\\\"moneyThreshhold\\\":7500000,\\\"securityThreshholdTarget\\\":10,\\\"hackDifficulty\\\":10.716000000000003,\\\"moneyAvailable\\\":7154.489845312511,\\\"minDifficulty\\\":5,\\\"pids\\\":[111974],\\\"runningOn\\\":[{\\\"machineToRunOn\\\":\\\"home\\\",\\\"threads\\\":1}],\\\"isHacking\\\":false,\\\"readyForNextProcess\\\":false}],[\\\"zer0\\\",{\\\"name\\\":\\\"zer0\\\",\\\"moneyThreshhold\\\":5625000,\\\"securityThreshholdTarget\\\":13,\\\"hackDifficulty\\\":14.63599999999999,\\\"moneyAvailable\\\":6344135.456681891,\\\"minDifficulty\\\":8,\\\"pids\\\":[111551],\\\"runningOn\\\":[{\\\"machineToRunOn\\\":\\\"home\\\",\\\"threads\\\":4}],\\\"isHacking\\\":false,\\\"readyForNextProcess\\\":false}],[\\\"johnson-ortho\\\",{\\\"name\\\":\\\"johnson-ortho\\\",\\\"moneyThreshhold\\\":63681918.75,\\\"securityThreshholdTarget\\\":25,\\\"hackDifficulty\\\":22.692,\\\"moneyAvailable\\\":37738711.87509762,\\\"minDifficulty\\\":20,\\\"pids\\\":[111533,111534,111535,111536,111537,111538,111539,111540,111541,111542,111543,111544,111545,111546,111547,111548,111549,111550],\\\"runningOn\\\":[{\\\"machineToRunOn\\\":\\\"CLOUD-000\\\",\\\"threads\\\":750},{\\\"machineToRunOn\\\":\\\"silver-helix\\\",\\\"threads\\\":36},{\\\"machineToRunOn\\\":\\\"home\\\",\\\"threads\\\":20},{\\\"machineToRunOn\\\":\\\"iron-gym\\\",\\\"threads\\\":18},{\\\"machineToRunOn\\\":\\\"neo-net\\\",\\\"threads\\\":18},{\\\"machineToRunOn\\\":\\\"omega-net\\\",\\\"threads\\\":18},{\\\"machineToRunOn\\\":\\\"zer0\\\",\\\"threads\\\":18},{\\\"machineToRunOn\\\":\\\"phantasy\\\",\\\"threads\\\":18},{\\\"machineToRunOn\\\":\\\"max-hardware\\\",\\\"threads\\\":18},{\\\"machineToRunOn\\\":\\\"foodnstuff\\\",\\\"threads\\\":9},{\\\"machineToRunOn\\\":\\\"sigma-cosmetics\\\",\\\"threads\\\":9},{\\\"machineToRunOn\\\":\\\"joesguns\\\",\\\"threads\\\":9},{\\\"machineToRunOn\\\":\\\"hong-fang-tea\\\",\\\"threads\\\":9},{\\\"machineToRunOn\\\":\\\"harakiri-sushi\\\",\\\"threads\\\":9},{\\\"machineToRunOn\\\":\\\"nectar-net\\\",\\\"threads\\\":9},{\\\"machineToRunOn\\\":\\\"avmnite-02h\\\",\\\"threads\\\":9},{\\\"machineToRunOn\\\":\\\"CSEC\\\",\\\"threads\\\":4},{\\\"machineToRunOn\\\":\\\"n00dles\\\",\\\"threads\\\":2}],\\\"isHacking\\\":false,\\\"readyForNextProcess\\\":false}],[\\\"neo-net\\\",{\\\"name\\\":\\\"neo-net\\\",\\\"moneyThreshhold\\\":3750000,\\\"securityThreshholdTarget\\\":13,\\\"hackDifficulty\\\":9.458,\\\"moneyAvailable\\\":3374197.461978682,\\\"minDifficulty\\\":8,\\\"pids\\\":[112069],\\\"runningOn\\\":[{\\\"machineToRunOn\\\":\\\"CLOUD-000\\\",\\\"threads\\\":221}],\\\"isHacking\\\":false,\\\"readyForNextProcess\\\":false}],[\\\"iron-gym\\\",{\\\"name\\\":\\\"iron-gym\\\",\\\"moneyThreshhold\\\":15000000,\\\"securityThreshholdTarget\\\":15,\\\"hackDifficulty\\\":18.339999999999993,\\\"moneyAvailable\\\":13966961.800450595,\\\"minDifficulty\\\":10,\\\"pids\\\":[110229],\\\"runningOn\\\":[{\\\"machineToRunOn\\\":\\\"CLOUD-000\\\",\\\"threads\\\":181}],\\\"isHacking\\\":false,\\\"readyForNextProcess\\\":false}],[\\\"harakiri-sushi\\\",{\\\"name\\\":\\\"harakiri-sushi\\\",\\\"moneyThreshhold\\\":3000000,\\\"securityThreshholdTarget\\\":10,\\\"hackDifficulty\\\":8.427999999999999,\\\"moneyAvailable\\\":127604.08865012895,\\\"minDifficulty\\\":5,\\\"pids\\\":[111552],\\\"runningOn\\\":[{\\\"machineToRunOn\\\":\\\"home\\\",\\\"threads\\\":7}],\\\"isHacking\\\":false,\\\"readyForNextProcess\\\":true}],[\\\"hong-fang-tea\\\",{\\\"name\\\":\\\"hong-fang-tea\\\",\\\"moneyThreshhold\\\":2250000,\\\"securityThreshholdTarget\\\":10,\\\"hackDifficulty\\\":6.207999999999999,\\\"moneyAvailable\\\":6345.739346677318,\\\"minDifficulty\\\":5,\\\"pids\\\":[111473],\\\"runningOn\\\":[{\\\"machineToRunOn\\\":\\\"home\\\",\\\"threads\\\":3}],\\\"isHacking\\\":false,\\\"readyForNextProcess\\\":true}],[\\\"nectar-net\\\",{\\\"name\\\":\\\"nectar-net\\\",\\\"moneyThreshhold\\\":2062500,\\\"securityThreshholdTarget\\\":12,\\\"hackDifficulty\\\":8.039999999999997,\\\"moneyAvailable\\\":4574.447703044408,\\\"minDifficulty\\\":7,\\\"pids\\\":[112070],\\\"runningOn\\\":[{\\\"machineToRunOn\\\":\\\"home\\\",\\\"threads\\\":7}],\\\"isHacking\\\":false,\\\"readyForNextProcess\\\":false}],[\\\"joesguns\\\",{\\\"name\\\":\\\"joesguns\\\",\\\"moneyThreshhold\\\":1875000,\\\"securityThreshholdTarget\\\":10,\\\"hackDifficulty\\\":9.820000000000002,\\\"moneyAvailable\\\":3866.722183163358,\\\"minDifficulty\\\":5,\\\"pids\\\":[112280],\\\"runningOn\\\":[{\\\"machineToRunOn\\\":\\\"home\\\",\\\"threads\\\":7}],\\\"isHacking\\\":false,\\\"readyForNextProcess\\\":false}],[\\\"sigma-cosmetics\\\",{\\\"name\\\":\\\"sigma-cosmetics\\\",\\\"moneyThreshhold\\\":1725000,\\\"securityThreshholdTarget\\\":8,\\\"hackDifficulty\\\":4.351999999999997,\\\"moneyAvailable\\\":14196.33092199681,\\\"minDifficulty\\\":3,\\\"pids\\\":[112159],\\\"runningOn\\\":[{\\\"machineToRunOn\\\":\\\"home\\\",\\\"threads\\\":4}],\\\"isHacking\\\":false,\\\"readyForNextProcess\\\":false}],[\\\"foodnstuff\\\",{\\\"name\\\":\\\"foodnstuff\\\",\\\"moneyThreshhold\\\":1500000,\\\"securityThreshholdTarget\\\":8,\\\"hackDifficulty\\\":7.8679999999999914,\\\"moneyAvailable\\\":1291285.5655930343,\\\"minDifficulty\\\":3,\\\"pids\\\":[112248],\\\"runningOn\\\":[{\\\"machineToRunOn\\\":\\\"home\\\",\\\"threads\\\":7}],\\\"isHacking\\\":false,\\\"readyForNextProcess\\\":false}],[\\\"n00dles\\\",{\\\"name\\\":\\\"n00dles\\\",\\\"moneyThreshhold\\\":52500,\\\"securityThreshholdTarget\\\":6,\\\"hackDifficulty\\\":5.827999999999989,\\\"moneyAvailable\\\":42404.97489993996,\\\"minDifficulty\\\":1,\\\"pids\\\":[112399],\\\"runningOn\\\":[{\\\"machineToRunOn\\\":\\\"home\\\",\\\"threads\\\":6}],\\\"isHacking\\\":false,\\\"readyForNextProcess\\\":false}]]\"}}],[\"data/stockHistory.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"data/stockHistory.txt\",\"text\":\"[[\\\"ECP\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":23361.570604872504,\\\"ask\\\":23408.340515993368,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:37 AM\\\",\\\"price\\\":23384.955560432936,\\\"maxShares\\\":17600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0042,\\\"forecast\\\":0.3398610161685975,\\\"bias\\\":0.16013898383140251,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":23335.868694463676,\\\"ask\\\":23382.587150308445,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:39 AM\\\",\\\"price\\\":23359.22792238606,\\\"maxShares\\\":17600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0042,\\\"forecast\\\":0.34003739176743564,\\\"bias\\\":0.15996260823256436,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":4,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":23255.204027464846,\\\"ask\\\":23301.760992484793,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:44 AM\\\",\\\"price\\\":23278.48250997482,\\\"maxShares\\\":17600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0042,\\\"forecast\\\":0.34059224953217965,\\\"bias\\\":0.15940775046782035,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":4,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":23214.748084824627,\\\"ask\\\":23261.224056966417,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:48 AM\\\",\\\"price\\\":23237.986070895524,\\\"maxShares\\\":17600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0042,\\\"forecast\\\":0.340314452384187,\\\"bias\\\":0.159685547615813,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":4,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":23268.075458444335,\\\"ask\\\":23314.65819209487,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:52 AM\\\",\\\"price\\\":23291.366825269604,\\\"maxShares\\\":17600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0042,\\\"forecast\\\":0.34068127139201165,\\\"bias\\\":0.15931872860798835,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":4,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":23289.96029581911,\\\"ask\\\":23336.586842957884,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:56 AM\\\",\\\"price\\\":23313.273569388497,\\\"maxShares\\\":17600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0042,\\\"forecast\\\":0.3405314238262958,\\\"bias\\\":0.1594685761737042,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":23362.305574166712,\\\"ask\\\":23409.076956697576,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:00 AM\\\",\\\"price\\\":23385.691265432146,\\\"maxShares\\\":17600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0042,\\\"forecast\\\":0.34003606881561965,\\\"bias\\\":0.15996393118438035,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":23281.775502001165,\\\"ask\\\":23328.38566316633,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:04 AM\\\",\\\"price\\\":23305.08058258375,\\\"maxShares\\\":17600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0042,\\\"forecast\\\":0.3394827644973534,\\\"bias\\\":0.16051723550264663,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":23254.10369416032,\\\"ask\\\":23300.65845631079,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:08 AM\\\",\\\"price\\\":23277.381075235557,\\\"maxShares\\\":17600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0042,\\\"forecast\\\":0.33967377603468857,\\\"bias\\\":0.16032622396531143,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":23172.9598878528,\\\"ask\\\":23219.352199940593,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:13 AM\\\",\\\"price\\\":23196.1560438967,\\\"maxShares\\\":17600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0042,\\\"forecast\\\":0.3402351838188653,\\\"bias\\\":0.1597648161811347,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":23166.66695574219,\\\"ask\\\":23213.046669367293,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:17 AM\\\",\\\"price\\\":23189.856812554743,\\\"maxShares\\\":17600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0042,\\\"forecast\\\":0.34027858191077953,\\\"bias\\\":0.15972141808922047,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":23152.849037594766,\\\"ask\\\":23199.201087720077,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:21 AM\\\",\\\"price\\\":23176.025062657423,\\\"maxShares\\\":17600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0042,\\\"forecast\\\":0.3401832581137832,\\\"bias\\\":0.1598167418862168,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":23063.11883367596,\\\"ask\\\":23109.291243753385,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:25 AM\\\",\\\"price\\\":23086.205038714674,\\\"maxShares\\\":17600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0042,\\\"forecast\\\":0.34080504690750657,\\\"bias\\\":0.15919495309249343,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":4,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":23152.635448908502,\\\"ask\\\":23198.987071428837,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:29 AM\\\",\\\"price\\\":23175.81126016867,\\\"maxShares\\\":17600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0042,\\\"forecast\\\":0.34142294223492153,\\\"bias\\\":0.15857705776507847,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":23083.419085100377,\\\"ask\\\":23129.632136321794,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:33 AM\\\",\\\"price\\\":23106.525610711087,\\\"maxShares\\\":17600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0042,\\\"forecast\\\":0.3409474439007525,\\\"bias\\\":0.1590525560992475,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":23106.871170731964,\\\"ask\\\":23153.13117307577,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:38 AM\\\",\\\"price\\\":23130.001171903867,\\\"maxShares\\\":17600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0042,\\\"forecast\\\":0.3411090366939089,\\\"bias\\\":0.1588909633060911,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":23074.86479686681,\\\"ask\\\":23121.06072238606,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:42 AM\\\",\\\"price\\\":23097.962759626436,\\\"maxShares\\\":17600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0042,\\\"forecast\\\":0.34088864434837896,\\\"bias\\\":0.15911135565162104,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":23169.7168103797,\\\"ask\\\":23216.102629819896,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:46 AM\\\",\\\"price\\\":23192.9097200998,\\\"maxShares\\\":17600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0042,\\\"forecast\\\":0.3402345979394755,\\\"bias\\\":0.15976540206052448,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":23140.85159073093,\\\"ask\\\":23187.1796219436,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:50 AM\\\",\\\"price\\\":23164.015606337267,\\\"maxShares\\\":17600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0042,\\\"forecast\\\":0.34003531126220393,\\\"bias\\\":0.15996468873779607,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":23077.39203509869,\\\"ask\\\":23123.593020153938,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:54 AM\\\",\\\"price\\\":23100.492527626313,\\\"maxShares\\\":17600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0042,\\\"forecast\\\":0.3404751914726156,\\\"bias\\\":0.15952480852738438,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":23144.5686696912,\\\"ask\\\":23190.904142503394,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:58 AM\\\",\\\"price\\\":23167.736406097298,\\\"maxShares\\\":17600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0042,\\\"forecast\\\":0.34093955675941173,\\\"bias\\\":0.15906044324058827,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":23212.711290655196,\\\"ask\\\":23259.18318513098,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:03 AM\\\",\\\"price\\\":23235.947237893088,\\\"maxShares\\\":17600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0042,\\\"forecast\\\":0.3404712483779166,\\\"bias\\\":0.1595287516220834,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":23124.018492088966,\\\"ask\\\":23170.312823404456,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:07 AM\\\",\\\"price\\\":23147.16565774671,\\\"maxShares\\\":17600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0042,\\\"forecast\\\":0.33985937153488505,\\\"bias\\\":0.16014062846511495,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":23116.642640923677,\\\"ask\\\":23162.922205770366,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:11 AM\\\",\\\"price\\\":23139.782423347024,\\\"maxShares\\\":17600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0042,\\\"forecast\\\":0.33980827529831553,\\\"bias\\\":0.16019172470168447,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":23048.723622336318,\\\"ask\\\":23094.867213171823,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:15 AM\\\",\\\"price\\\":23071.79541775407,\\\"maxShares\\\":17600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0042,\\\"forecast\\\":0.340280321599266,\\\"bias\\\":0.15971967840073398,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":23096.220818347992,\\\"ask\\\":23142.459498665005,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:19 AM\\\",\\\"price\\\":23119.3401585065,\\\"maxShares\\\":17600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0042,\\\"forecast\\\":0.33995118246790995,\\\"bias\\\":0.16004881753209005,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":23115.63518894939,\\\"ask\\\":23161.912736875212,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:23 AM\\\",\\\"price\\\":23138.773962912303,\\\"maxShares\\\":17600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0042,\\\"forecast\\\":0.3398166475982305,\\\"bias\\\":0.1601833524017695,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":23020.511196605814,\\\"ask\\\":23066.598306108528,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:28 AM\\\",\\\"price\\\":23043.554751357173,\\\"maxShares\\\":17600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0042,\\\"forecast\\\":0.3391547474407014,\\\"bias\\\":0.1608452525592986,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":22957.338672115307,\\\"ask\\\":23003.299310097518,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:32 AM\\\",\\\"price\\\":22980.318991106415,\\\"maxShares\\\":17600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0042,\\\"forecast\\\":0.3387121438444568,\\\"bias\\\":0.1612878561555432,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":22869.678205741217,\\\"ask\\\":22915.46334729425,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:36 AM\\\",\\\"price\\\":22892.570776517736,\\\"maxShares\\\":17600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0042,\\\"forecast\\\":0.6619060794888091,\\\"bias\\\":0.16190607948880908,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":22907.67563918401,\\\"ask\\\":22953.536851674868,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:40 AM\\\",\\\"price\\\":22930.60624542944,\\\"maxShares\\\":17600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0042,\\\"forecast\\\":0.6616370763386986,\\\"bias\\\":0.16163707633869862,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":22987.37141631641,\\\"ask\\\":23033.392179912636,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:44 AM\\\",\\\"price\\\":23010.381798114526,\\\"maxShares\\\":17600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0042,\\\"forecast\\\":0.6610747411365105,\\\"bias\\\":0.16107474113651055,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":23048.908633234758,\\\"ask\\\":23095.052594462453,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:48 AM\\\",\\\"price\\\":23071.980613848606,\\\"maxShares\\\":17600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0042,\\\"forecast\\\":0.6606435438888622,\\\"bias\\\":0.16064354388886215,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":23056.784696519353,\\\"ask\\\":23102.94442564151,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:53 AM\\\",\\\"price\\\":23079.864561080434,\\\"maxShares\\\":17600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0042,\\\"forecast\\\":0.6605886502390993,\\\"bias\\\":0.1605886502390993,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":23128.01796119248,\\\"ask\\\":23174.320299453124,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:57 AM\\\",\\\"price\\\":23151.169130322804,\\\"maxShares\\\":17600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0042,\\\"forecast\\\":0.6610847841960472,\\\"bias\\\":0.16108478419604721,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":23199.122661047542,\\\"ask\\\":23245.567351059646,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:01 AM\\\",\\\"price\\\":23222.345006053594,\\\"maxShares\\\":17600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0042,\\\"forecast\\\":0.6605895456827127,\\\"bias\\\":0.16058954568271266,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":23208.28133362463,\\\"ask\\\":23254.74435931757,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:05 AM\\\",\\\"price\\\":23231.5128464711,\\\"maxShares\\\":17600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0042,\\\"forecast\\\":0.6606529440745268,\\\"bias\\\":0.1606529440745268,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":23262.083723790915,\\\"ask\\\":23308.65446197668,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:07 AM\\\",\\\"price\\\":23285.369092883797,\\\"maxShares\\\":17600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0042,\\\"forecast\\\":0.6602805118269939,\\\"bias\\\":0.16028051182699388,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":23306.737839276433,\\\"ask\\\":23353.397975090797,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:11 AM\\\",\\\"price\\\":23330.067907183617,\\\"maxShares\\\":17600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0042,\\\"forecast\\\":0.6599728358436132,\\\"bias\\\":0.15997283584361321,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":23330.133055065355,\\\"ask\\\":23376.840028148566,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:16 AM\\\",\\\"price\\\":23353.486541606962,\\\"maxShares\\\":17600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0042,\\\"forecast\\\":0.6598122557126342,\\\"bias\\\":0.15981225571263424,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":23415.995560043346,\\\"ask\\\":23462.87443003342,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:20 AM\\\",\\\"price\\\":23439.434995038384,\\\"maxShares\\\":17600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0042,\\\"forecast\\\":0.6604004169789793,\\\"bias\\\":0.16040041697897933,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":23330.790974838168,\\\"ask\\\":23377.499265078084,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:24 AM\\\",\\\"price\\\":23354.145119958128,\\\"maxShares\\\":17600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0042,\\\"forecast\\\":0.659814630967259,\\\"bias\\\":0.159814630967259,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":23338.05797462555,\\\"ask\\\":23384.780813413585,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:28 AM\\\",\\\"price\\\":23361.41939401957,\\\"maxShares\\\":17600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0042,\\\"forecast\\\":0.6597648524196517,\\\"bias\\\":0.15976485241965166,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":23426.50965771647,\\\"ask\\\":23473.409576951133,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:32 AM\\\",\\\"price\\\":23449.959617333803,\\\"maxShares\\\":17600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0042,\\\"forecast\\\":0.6591593405938325,\\\"bias\\\":0.15915934059383252,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":23397.209687109193,\\\"ask\\\":23444.050947744043,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:36 AM\\\",\\\"price\\\":23420.630317426618,\\\"maxShares\\\":17600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0042,\\\"forecast\\\":0.6589600277670623,\\\"bias\\\":0.1589600277670623,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":23489.11537827073,\\\"ask\\\":23536.14063428328,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:40 AM\\\",\\\"price\\\":23512.628006277006,\\\"maxShares\\\":17600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0042,\\\"forecast\\\":0.6583356229164685,\\\"bias\\\":0.15833562291646852,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":23522.04326778427,\\\"ask\\\":23569.134445497548,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:45 AM\\\",\\\"price\\\":23545.58885664091,\\\"maxShares\\\":17600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0042,\\\"forecast\\\":0.6581136623269149,\\\"bias\\\":0.15811366232691493,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0}],\\\"longTermRecords\\\":[{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":22036.47900244441,\\\"ask\\\":22080.59607752438,\\\"price\\\":22058.537539984398,\\\"maxShares\\\":17600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":113808.3,\\\"averageShortPrice\\\":11429.647740964585,\\\"dateObserved\\\":\\\"7/29/2023, 6:27:23 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":20911.472872905917,\\\"ask\\\":20953.33768346228,\\\"price\\\":20932.405278184102,\\\"maxShares\\\":17600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":7104.78,\\\"averageShortPrice\\\":633.3764351675178,\\\"dateObserved\\\":\\\"7/29/2023, 6:34:14 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":19253.105041292096,\\\"ask\\\":19291.649796129517,\\\"price\\\":19272.377418710792,\\\"maxShares\\\":17600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":101336.41,\\\"averageShortPrice\\\":7509.916330878385,\\\"dateObserved\\\":\\\"7/29/2023, 6:41:02 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":17378.686888361302,\\\"ask\\\":17413.479054303967,\\\"price\\\":17395.94806648,\\\"maxShares\\\":17600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":199878,\\\"averageShortPrice\\\":14071.07070046757,\\\"dateObserved\\\":\\\"7/29/2023, 6:47:54 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":17388.596933909066,\\\"ask\\\":17423.40893978276,\\\"price\\\":17405.836476753935,\\\"maxShares\\\":17600000,\\\"investedShares\\\":45309.76,\\\"averagePrice\\\":2824.99782549317,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:54:48 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":18215.223612988626,\\\"ask\\\":18251.690527128743,\\\"price\\\":18233.45707005869,\\\"maxShares\\\":17600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:01:39 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":17946.286478217997,\\\"ask\\\":17982.21497967589,\\\"price\\\":17964.25072894695,\\\"maxShares\\\":17600000,\\\"investedShares\\\":30068.72,\\\"averagePrice\\\":2012.060252326947,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:08:30 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":19428.880373053133,\\\"ask\\\":19467.777030456633,\\\"price\\\":19449.134952493023,\\\"maxShares\\\":17600000,\\\"investedShares\\\":38025.45,\\\"averagePrice\\\":2958.542503456017,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:15:23 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":18868.107785584038,\\\"ask\\\":18905.881775144757,\\\"price\\\":18887.419061073582,\\\"maxShares\\\":17600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:22:11 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":19768.878812409832,\\\"ask\\\":19808.45614736961,\\\"price\\\":19788.309834715663,\\\"maxShares\\\":17600000,\\\"investedShares\\\":46958.88,\\\"averagePrice\\\":3843.7958346679948,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:29:00 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":20980.97752330757,\\\"ask\\\":21022.98148231318,\\\"price\\\":21001.97950281037,\\\"maxShares\\\":17600000,\\\"investedShares\\\":93814,\\\"averagePrice\\\":8527.498902366135,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:35:51 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":21888.233753543165,\\\"ask\\\":21932.054041338037,\\\"price\\\":21910.691877691876,\\\"maxShares\\\":17600000,\\\"investedShares\\\":2345.35,\\\"averagePrice\\\":213.18747255915346,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:42:40 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":23356.349660346234,\\\"ask\\\":23403.109119125704,\\\"price\\\":23379.729389735974,\\\"maxShares\\\":17600000,\\\"investedShares\\\":33636.32,\\\"averagePrice\\\":3805.4035203166277,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:49:32 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":23417.83336403239,\\\"ask\\\":23464.715913309734,\\\"price\\\":23441.53594976873,\\\"maxShares\\\":17600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":43105.8,\\\"averageShortPrice\\\":4639.757116663048,\\\"dateObserved\\\":\\\"7/29/2023, 7:56:21 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":22183.49588253743,\\\"ask\\\":22227.90728570567,\\\"price\\\":22205.70158412155,\\\"maxShares\\\":17600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:03:13 AM\\\",\\\"bias\\\":null},{\\\"volatility\\\":0.0042,\\\"forecast\\\":0.5769482576628222,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":21590.360288869157,\\\"ask\\\":21633.58423339141,\\\"price\\\":21611.459629657318,\\\"maxShares\\\":17600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:09:58 AM\\\",\\\"bias\\\":0.16295294384598125},{\\\"volatility\\\":0.0042,\\\"forecast\\\":0.6611403619497331,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":23112.293170968667,\\\"ask\\\":23158.564028167802,\\\"price\\\":23134.90310753533,\\\"maxShares\\\":17600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:16:47 AM\\\",\\\"bias\\\":0.1633203330018841},{\\\"volatility\\\":0.0042,\\\"forecast\\\":0.5091310737271066,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":24066.828756668685,\\\"ask\\\":24115.010596021373,\\\"price\\\":24090.416195232316,\\\"maxShares\\\":17600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:35 AM\\\",\\\"bias\\\":0.16227856532911872}],\\\"recentTicksOfPrices\\\":[23043.554751357173,22980.318991106415,22892.570776517736,22930.60624542944,23010.381798114526,23071.980613848606,23079.864561080434,23151.169130322804,23222.345006053594,23231.5128464711,23285.369092883797,23330.067907183617,23353.486541606962,23439.434995038384,23354.145119958128,23361.41939401957,23449.959617333803,23420.630317426618,23512.628006277006,23545.58885664091]}],[\\\"MGCP\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":3070.949810649543,\\\"ask\\\":3083.2582267242906,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:37 AM\\\",\\\"price\\\":3077.104018686917,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0042,\\\"forecast\\\":0.6880928529820772,\\\"bias\\\":0.18809285298207723,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":3067.571216023424,\\\"ask\\\":3079.8660906367445,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:39 AM\\\",\\\"price\\\":3073.718653330084,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0042,\\\"forecast\\\":0.6878856892497482,\\\"bias\\\":0.18788568924974824,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":3078.211613344535,\\\"ask\\\":3090.549134840906,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:44 AM\\\",\\\"price\\\":3084.3803740927206,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0042,\\\"forecast\\\":0.6872339754854108,\\\"bias\\\":0.18723397548541076,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":3072.8565989435933,\\\"ask\\\":3085.172657456393,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:48 AM\\\",\\\"price\\\":3079.0146281999932,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0042,\\\"forecast\\\":0.6875602649176656,\\\"bias\\\":0.18756026491766564,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":3065.8140151156226,\\\"ask\\\":3078.1018468395328,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:52 AM\\\",\\\"price\\\":3071.9579309775777,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0042,\\\"forecast\\\":0.6879911158701258,\\\"bias\\\":0.18799111587012585,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":3068.6975729441133,\\\"ask\\\":3080.9969620140296,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:56 AM\\\",\\\"price\\\":3074.8472674790714,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0042,\\\"forecast\\\":0.687814300430187,\\\"bias\\\":0.187814300430187,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":3059.194838748018,\\\"ask\\\":3071.4561407069277,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:00 AM\\\",\\\"price\\\":3065.325489727473,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0042,\\\"forecast\\\":0.6883977053681818,\\\"bias\\\":0.1883977053681818,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":3069.776384863849,\\\"ask\\\":3082.080097829235,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:04 AM\\\",\\\"price\\\":3075.928241346542,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0042,\\\"forecast\\\":0.6890493601703603,\\\"bias\\\":0.18904936017036034,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":3073.4293427827406,\\\"ask\\\":3085.7476968620304,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:08 AM\\\",\\\"price\\\":3079.5885198223855,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0042,\\\"forecast\\\":0.6892743242298601,\\\"bias\\\":0.18927432422986012,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":3084.191444667763,\\\"ask\\\":3096.5529334239463,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:13 AM\\\",\\\"price\\\":3090.3721890458546,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0042,\\\"forecast\\\":0.6899370983933085,\\\"bias\\\":0.18993709839330852,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":3085.029226270723,\\\"ask\\\":3097.3940728690027,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:17 AM\\\",\\\"price\\\":3091.211649569863,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0042,\\\"forecast\\\":0.6899886924041241,\\\"bias\\\":0.18998869240412408,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":3086.8704113992485,\\\"ask\\\":3099.2426374970414,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:21 AM\\\",\\\"price\\\":3093.056524448145,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0042,\\\"forecast\\\":0.6898753047084537,\\\"bias\\\":0.1898753047084537,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":3074.9070668002305,\\\"ask\\\":3087.2313436210734,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:25 AM\\\",\\\"price\\\":3081.069205210652,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0042,\\\"forecast\\\":0.6906140404333792,\\\"bias\\\":0.19061404043337915,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":3086.8419345325456,\\\"ask\\\":3099.2140464945996,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:29 AM\\\",\\\"price\\\":3093.0279905135726,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0042,\\\"forecast\\\":0.6913538850241499,\\\"bias\\\":0.19135388502414985,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":3096.0979279177145,\\\"ask\\\":3108.5071380496493,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:33 AM\\\",\\\"price\\\":3102.302532983682,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0042,\\\"forecast\\\":0.691927665713791,\\\"bias\\\":0.19192766571379105,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":3092.955574580787,\\\"ask\\\":3105.352190110169,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:38 AM\\\",\\\"price\\\":3099.153882345478,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0042,\\\"forecast\\\":0.6917326727608497,\\\"bias\\\":0.1917326727608497,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":3097.245709900747,\\\"ask\\\":3109.6595203612715,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:42 AM\\\",\\\"price\\\":3103.452615131009,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0042,\\\"forecast\\\":0.6914667267776089,\\\"bias\\\":0.1914667267776089,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":3109.9773117764016,\\\"ask\\\":3122.4421507013567,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:46 AM\\\",\\\"price\\\":3116.209731238879,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0042,\\\"forecast\\\":0.6922537738400925,\\\"bias\\\":0.19225377384009246,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":3113.8566062723344,\\\"ask\\\":3126.3369934718226,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:50 AM\\\",\\\"price\\\":3120.0967998720785,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0042,\\\"forecast\\\":0.6920139621206127,\\\"bias\\\":0.19201396212061272,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":3122.4192703825606,\\\"ask\\\":3134.93397687708,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:54 AM\\\",\\\"price\\\":3128.6766236298204,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0042,\\\"forecast\\\":0.6914859509531104,\\\"bias\\\":0.19148595095311038,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":3131.5084091401854,\\\"ask\\\":3144.059545048563,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:58 AM\\\",\\\"price\\\":3137.783977094374,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0042,\\\"forecast\\\":0.6909285490709042,\\\"bias\\\":0.19092854907090417,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":3140.7282478684415,\\\"ask\\\":3153.316337038255,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:03 AM\\\",\\\"price\\\":3147.022292453348,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0042,\\\"forecast\\\":0.6903664140863977,\\\"bias\\\":0.19036641408639765,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":3152.7745960381926,\\\"ask\\\":3165.4109671645983,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:07 AM\\\",\\\"price\\\":3159.0927816013955,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0042,\\\"forecast\\\":0.6896362585546454,\\\"bias\\\":0.1896362585546454,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":3151.768957844899,\\\"ask\\\":3164.401298357303,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:11 AM\\\",\\\"price\\\":3158.085128101101,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0042,\\\"forecast\\\":0.6896967659925276,\\\"bias\\\":0.1896967659925276,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":3142.508743991354,\\\"ask\\\":3155.1039694181727,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:15 AM\\\",\\\"price\\\":3148.8063567047634,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0042,\\\"forecast\\\":0.6902557565200084,\\\"bias\\\":0.19025575652000837,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":3148.9846060055575,\\\"ask\\\":3161.605786791151,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:19 AM\\\",\\\"price\\\":3155.295196398354,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0042,\\\"forecast\\\":0.6906478222633377,\\\"bias\\\":0.19064782226333765,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":3151.6315998423374,\\\"ask\\\":3164.263389821666,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:23 AM\\\",\\\"price\\\":3157.9474948320017,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0042,\\\"forecast\\\":0.6904875662844535,\\\"bias\\\":0.1904875662844535,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":16,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":3164.6545851971273,\\\"ask\\\":3177.338571510543,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:28 AM\\\",\\\"price\\\":3170.996578353835,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0042,\\\"forecast\\\":0.689700444849919,\\\"bias\\\":0.189700444849919,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":16,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":3173.3628776583173,\\\"ask\\\":3186.081766947529,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:32 AM\\\",\\\"price\\\":3179.722322302923,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0042,\\\"forecast\\\":0.6902224503040049,\\\"bias\\\":0.19022245030400486,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":16,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":3161.2456861230617,\\\"ask\\\":3173.9160095143366,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:36 AM\\\",\\\"price\\\":3167.580847818699,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0042,\\\"forecast\\\":0.6909515811889461,\\\"bias\\\":0.19095158118894606,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":3166.4980216161175,\\\"ask\\\":3179.189396452254,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:40 AM\\\",\\\"price\\\":3172.843709034186,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0042,\\\"forecast\\\":0.6912688427582496,\\\"bias\\\":0.19126884275824962,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":3177.5142645818264,\\\"ask\\\":3190.249792696383,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:44 AM\\\",\\\"price\\\":3183.8820286391046,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0042,\\\"forecast\\\":0.691934266841641,\\\"bias\\\":0.19193426684164105,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":3169.0307659627742,\\\"ask\\\":3181.7322920788574,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:48 AM\\\",\\\"price\\\":3175.381529020816,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0042,\\\"forecast\\\":0.6924480750713334,\\\"bias\\\":0.19244807507133344,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":3170.113658314023,\\\"ask\\\":3182.819524680011,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:53 AM\\\",\\\"price\\\":3176.466591497017,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0042,\\\"forecast\\\":0.6923823134666354,\\\"bias\\\":0.19238231346663537,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":3179.9076321156112,\\\"ask\\\":3192.6527528856136,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:57 AM\\\",\\\"price\\\":3186.2801925006124,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0042,\\\"forecast\\\":0.6929766730199718,\\\"bias\\\":0.1929766730199718,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":3189.6839293377857,\\\"ask\\\":3202.4682336637884,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:01 AM\\\",\\\"price\\\":3196.076081500787,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0042,\\\"forecast\\\":0.6935699598479714,\\\"bias\\\":0.19356995984797143,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":16,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":3190.9431696616557,\\\"ask\\\":3203.7325210430654,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:05 AM\\\",\\\"price\\\":3197.3378453523605,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0042,\\\"forecast\\\":0.6936463784224541,\\\"bias\\\":0.19364637842245414,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":16,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":3198.3405450616096,\\\"ask\\\":3211.1595452422175,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:07 AM\\\",\\\"price\\\":3204.7500451519136,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0042,\\\"forecast\\\":0.6940952974034162,\\\"bias\\\":0.19409529740341624,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":16,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":3204.480109760843,\\\"ask\\\":3217.323717415195,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:11 AM\\\",\\\"price\\\":3210.901913588019,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0042,\\\"forecast\\\":0.6937227102384675,\\\"bias\\\":0.19372271023846754,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":16,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":3207.6967548433145,\\\"ask\\\":3220.5532548627266,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:16 AM\\\",\\\"price\\\":3214.1250048530205,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0042,\\\"forecast\\\":0.6939171683664346,\\\"bias\\\":0.19391716836643458,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":16,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":3219.502125945595,\\\"ask\\\":3232.405942081649,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:20 AM\\\",\\\"price\\\":3225.954034013622,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0042,\\\"forecast\\\":0.6932034898891244,\\\"bias\\\":0.1932034898891244,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":16,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":3231.259821752146,\\\"ask\\\":3244.210762921493,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:24 AM\\\",\\\"price\\\":3237.7352923368194,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0042,\\\"forecast\\\":0.6939090734775226,\\\"bias\\\":0.19390907347752262,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":16,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":3230.2536727202437,\\\"ask\\\":3243.200581228141,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:28 AM\\\",\\\"price\\\":3236.7271269741923,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0042,\\\"forecast\\\":0.6938486753025421,\\\"bias\\\":0.19384867530254213,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":3242.4963955069206,\\\"ask\\\":3255.4923730440223,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:32 AM\\\",\\\"price\\\":3248.9943842754715,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0042,\\\"forecast\\\":0.6945833654645983,\\\"bias\\\":0.1945833654645983,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":16,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":3238.440945059087,\\\"ask\\\":3251.420668285777,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:36 AM\\\",\\\"price\\\":3244.930806672432,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0042,\\\"forecast\\\":0.6948270392601075,\\\"bias\\\":0.19482703926010747,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":16,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":3251.1617419969143,\\\"ask\\\":3264.1924503816717,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:40 AM\\\",\\\"price\\\":3257.677096189293,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0042,\\\"forecast\\\":0.6940617465632599,\\\"bias\\\":0.19406174656325992,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":16,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":3246.610526211263,\\\"ask\\\":3259.622993250186,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:45 AM\\\",\\\"price\\\":3253.1167597307244,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0042,\\\"forecast\\\":0.6943337893220751,\\\"bias\\\":0.19433378932207512,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0}],\\\"longTermRecords\\\":[{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":4132.144337905734,\\\"ask\\\":4148.706038658865,\\\"price\\\":4140.425188282299,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":249947.46,\\\"averageShortPrice\\\":882.1851255701772,\\\"dateObserved\\\":\\\"7/29/2023, 6:27:23 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":4337.829560631953,\\\"ask\\\":4355.215651055329,\\\"price\\\":4346.522605843641,\\\"maxShares\\\":19700000,\\\"investedShares\\\":327306.16,\\\"averagePrice\\\":1662.551975807833,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:34:14 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":4596.011446213759,\\\"ask\\\":4614.432333773738,\\\"price\\\":4605.22188999375,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":87319.52,\\\"averageShortPrice\\\":366.47032835496503,\\\"dateObserved\\\":\\\"7/29/2023, 6:41:02 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":4350.184703149414,\\\"ask\\\":4367.620313182077,\\\"price\\\":4358.8683800817325,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":269327.35,\\\"averageShortPrice\\\":1306.2515532472298,\\\"dateObserved\\\":\\\"7/29/2023, 6:47:54 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":4371.112092777523,\\\"ask\\\":4388.631580123323,\\\"price\\\":4380.185278115782,\\\"maxShares\\\":19700000,\\\"investedShares\\\":317337.44,\\\"averagePrice\\\":1235.2781763071064,\\\"sharesShort\\\":172470.3,\\\"averageShortPrice\\\":652.2861768316088,\\\"dateObserved\\\":\\\"7/29/2023, 6:54:48 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":4172.560914889767,\\\"ask\\\":4189.284605931408,\\\"price\\\":4180.922760410587,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":478591.37,\\\"averageShortPrice\\\":1671.786377910946,\\\"dateObserved\\\":\\\"7/29/2023, 7:01:39 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":3970.1385113693036,\\\"ask\\\":3986.050890172387,\\\"price\\\":3978.094700770846,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":216047.34,\\\"averageShortPrice\\\":749.8357990757636,\\\"dateObserved\\\":\\\"7/29/2023, 7:08:30 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":3856.665927607048,\\\"ask\\\":3872.1235064752123,\\\"price\\\":3864.451567948359,\\\"maxShares\\\":19700000,\\\"investedShares\\\":116755.74,\\\"averagePrice\\\":346.87806485426995,\\\"sharesShort\\\":119977.11,\\\"averageShortPrice\\\":337.5644750788465,\\\"dateObserved\\\":\\\"7/29/2023, 7:15:23 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":4114.75397044406,\\\"ask\\\":4131.245970325598,\\\"price\\\":4123.113017896638,\\\"maxShares\\\":19700000,\\\"investedShares\\\":864554.04,\\\"averagePrice\\\":2759.317126639157,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:22:11 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":4358.324760923477,\\\"ask\\\":4375.792996438201,\\\"price\\\":4366.98293906938,\\\"maxShares\\\":19700000,\\\"investedShares\\\":183927.92,\\\"averagePrice\\\":697.171669990684,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:29:00 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":4528.858655243092,\\\"ask\\\":4547.010393340258,\\\"price\\\":4537.934524291678,\\\"maxShares\\\":19700000,\\\"investedShares\\\":330858.3,\\\"averagePrice\\\":1360.0984527810779,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:35:51 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":4314.772117258975,\\\"ask\\\":4332.065793079652,\\\"price\\\":4323.046926702632,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":408952.6,\\\"averageShortPrice\\\":1497.729085869034,\\\"dateObserved\\\":\\\"7/29/2023, 7:42:40 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":3939.308710661706,\\\"ask\\\":3955.097523129287,\\\"price\\\":3947.2031168954973,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":711124.4,\\\"averageShortPrice\\\":2206.676273342949,\\\"dateObserved\\\":\\\"7/29/2023, 7:49:32 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":3554.4706492350956,\\\"ask\\\":3568.717024582733,\\\"price\\\":3561.635927057931,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":570681.73,\\\"averageShortPrice\\\":1475.4633598412775,\\\"dateObserved\\\":\\\"7/29/2023, 7:56:21 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":3267.6549233378873,\\\"ask\\\":3280.7517366578777,\\\"price\\\":3274.203329997883,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":731285.43,\\\"averageShortPrice\\\":1778.3748532122681,\\\"dateObserved\\\":\\\"7/29/2023, 8:03:13 AM\\\",\\\"bias\\\":null},{\\\"volatility\\\":0.0042,\\\"forecast\\\":0.591404459893576,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":3218.5648207478644,\\\"ask\\\":3231.4648801496583,\\\"price\\\":3224.9366608147643,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:09:58 AM\\\",\\\"bias\\\":0.19210878293373534},{\\\"volatility\\\":0.0042,\\\"forecast\\\":0.3158618107568194,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":3180.3923387429636,\\\"ask\\\":3193.1394022249,\\\"price\\\":3186.6955634708074,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:16:47 AM\\\",\\\"bias\\\":0.19488226233790445},{\\\"volatility\\\":0.0042,\\\"forecast\\\":0.4871440343778521,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":3000.9352058417035,\\\"ask\\\":3012.963002257902,\\\"price\\\":3007.0537648846635,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:35 AM\\\",\\\"bias\\\":0.1948431700745788}],\\\"recentTicksOfPrices\\\":[3170.996578353835,3179.722322302923,3167.580847818699,3172.843709034186,3183.8820286391046,3175.381529020816,3176.466591497017,3186.2801925006124,3196.076081500787,3197.3378453523605,3204.7500451519136,3210.901913588019,3214.1250048530205,3225.954034013622,3237.7352923368194,3236.7271269741923,3248.9943842754715,3244.930806672432,3257.677096189293,3253.1167597307244]}],[\\\"BLD\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":20649.983360895294,\\\"ask\\\":20857.52088211032,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:37 AM\\\",\\\"price\\\":20753.752121502806,\\\"maxShares\\\":18900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.4219311705792178,\\\"bias\\\":0.0780688294207822,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":20688.431046072918,\\\"ask\\\":20896.3549761842,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:39 AM\\\",\\\"price\\\":20792.39301112856,\\\"maxShares\\\":18900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.42207652497119474,\\\"bias\\\":0.07792347502880526,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":20567.827336191083,\\\"ask\\\":20774.539168715615,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:44 AM\\\",\\\"price\\\":20671.18325245335,\\\"maxShares\\\":18900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.4216196045574949,\\\"bias\\\":0.07838039544250508,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":20507.413238881607,\\\"ask\\\":20713.517894548757,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:48 AM\\\",\\\"price\\\":20610.465566715182,\\\"maxShares\\\":18900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.4218505103661535,\\\"bias\\\":0.07814948963384649,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":20428.085887642017,\\\"ask\\\":20633.393283497713,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:52 AM\\\",\\\"price\\\":20530.739585569867,\\\"maxShares\\\":18900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.42154703641135044,\\\"bias\\\":0.07845296358864956,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":20395.65718144276,\\\"ask\\\":20600.638660653236,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:56 AM\\\",\\\"price\\\":20498.147921048,\\\"maxShares\\\":18900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.4216717751282275,\\\"bias\\\":0.07832822487177249,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":20289.116947145747,\\\"ask\\\":20493.027670232637,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:00 AM\\\",\\\"price\\\":20391.072308689192,\\\"maxShares\\\":18900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.4212604655847098,\\\"bias\\\":0.07873953441529019,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":20407.75231872843,\\\"ask\\\":20612.855357107608,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:04 AM\\\",\\\"price\\\":20510.30383791802,\\\"maxShares\\\":18900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.4217208746773254,\\\"bias\\\":0.07827912532267461,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":20448.80505993988,\\\"ask\\\":20654.320688682994,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:08 AM\\\",\\\"price\\\":20551.56287431144,\\\"maxShares\\\":18900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.4215634064454525,\\\"bias\\\":0.07843659355454752,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":20328.47125638294,\\\"ask\\\":20532.777500165685,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:13 AM\\\",\\\"price\\\":20430.624378274315,\\\"maxShares\\\":18900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.42202770961520036,\\\"bias\\\":0.07797229038479964,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":20319.140778476747,\\\"ask\\\":20523.35324861219,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:17 AM\\\",\\\"price\\\":20421.24701354447,\\\"maxShares\\\":18900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.4219919050139792,\\\"bias\\\":0.07800809498602079,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":20298.661500764356,\\\"ask\\\":20502.668149013243,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:21 AM\\\",\\\"price\\\":20400.6648248888,\\\"maxShares\\\":18900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.42207060722008144,\\\"bias\\\":0.07792939277991856,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":20166.02896800433,\\\"ask\\\":20368.702625974223,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:25 AM\\\",\\\"price\\\":20267.365796989277,\\\"maxShares\\\":18900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.42155806343879215,\\\"bias\\\":0.07844193656120785,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":20298.34578980872,\\\"ask\\\":20502.34926508318,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:29 AM\\\",\\\"price\\\":20400.347527445952,\\\"maxShares\\\":18900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.4220727501804619,\\\"bias\\\":0.07792724981953808,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":20195.973481912537,\\\"ask\\\":20398.948089770955,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:33 AM\\\",\\\"price\\\":20297.460785841748,\\\"maxShares\\\":18900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.42246775923606267,\\\"bias\\\":0.07753224076393733,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":20161.346875147654,\\\"ask\\\":20363.97347690793,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:38 AM\\\",\\\"price\\\":20262.66017602779,\\\"maxShares\\\":18900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.4226009189118105,\\\"bias\\\":0.07739908108818949,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":20208.621262450528,\\\"ask\\\":20411.722983681186,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:42 AM\\\",\\\"price\\\":20310.17212306586,\\\"maxShares\\\":18900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.4224194333117209,\\\"bias\\\":0.07758056668827912,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":20069.162534994437,\\\"ask\\\":20270.86266097428,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:46 AM\\\",\\\"price\\\":20170.012597984358,\\\"maxShares\\\":18900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.42295853339060085,\\\"bias\\\":0.07704146660939915,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":20111.481383109713,\\\"ask\\\":20313.60682414599,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:50 AM\\\",\\\"price\\\":20212.544103627853,\\\"maxShares\\\":18900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.42312098691193417,\\\"bias\\\":0.07687901308806583,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":20018.424340124748,\\\"ask\\\":20219.614534497858,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:54 AM\\\",\\\"price\\\":20119.019437311305,\\\"maxShares\\\":18900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.4227636094528483,\\\"bias\\\":0.0772363905471517,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":19920.398944211003,\\\"ask\\\":20120.603958725686,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:58 AM\\\",\\\"price\\\":20020.501451468346,\\\"maxShares\\\":18900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.42314367853597945,\\\"bias\\\":0.07685632146402055,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":20019.54531743498,\\\"ask\\\":20220.74677791171,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:03 AM\\\",\\\"price\\\":20120.146047673345,\\\"maxShares\\\":18900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.4235262022772877,\\\"bias\\\":0.07647379772271229,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":19890.57745536274,\\\"ask\\\":20090.48275642166,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:07 AM\\\",\\\"price\\\":19990.5301058922,\\\"maxShares\\\":18900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.4240220482233884,\\\"bias\\\":0.0759779517766116,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":19901.30607467278,\\\"ask\\\":20101.3192010514,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:11 AM\\\",\\\"price\\\":20001.31263786209,\\\"maxShares\\\":18900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.4239810670843342,\\\"bias\\\":0.0760189329156658,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":19802.660609711922,\\\"ask\\\":20001.682324382393,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:15 AM\\\",\\\"price\\\":19902.17146704716,\\\"maxShares\\\":18900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.42435974968315704,\\\"bias\\\":0.07564025031684296,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":19733.915246865574,\\\"ask\\\":19932.246053366733,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:19 AM\\\",\\\"price\\\":19833.080650116153,\\\"maxShares\\\":18900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.42462325119255195,\\\"bias\\\":0.07537674880744805,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":19761.956970804607,\\\"ask\\\":19960.569603677013,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:23 AM\\\",\\\"price\\\":19861.26328724081,\\\"maxShares\\\":18900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.4247303609046916,\\\"bias\\\":0.07526963909530843,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":19899.99988325926,\\\"ask\\\":20099.999882085987,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:28 AM\\\",\\\"price\\\":19999.999882672626,\\\"maxShares\\\":18900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.4242045809824158,\\\"bias\\\":0.07579541901758419,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":19807.858806877783,\\\"ask\\\":20006.932764735848,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:32 AM\\\",\\\"price\\\":19907.395785806817,\\\"maxShares\\\":18900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.4238520001426009,\\\"bias\\\":0.07614799985739912,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":19936.207163715397,\\\"ask\\\":20136.57105480801,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:36 AM\\\",\\\"price\\\":20036.389109261705,\\\"maxShares\\\":18900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.5766414136460098,\\\"bias\\\":0.07664141364600985,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":19992.201719723133,\\\"ask\\\":20193.12837017261,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:40 AM\\\",\\\"price\\\":20092.665044947873,\\\"maxShares\\\":18900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.5764261519418316,\\\"bias\\\":0.07642615194183155,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":19875.311737587308,\\\"ask\\\":20075.06361434698,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:44 AM\\\",\\\"price\\\":19975.187675967143,\\\"maxShares\\\":18900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.5768756267301085,\\\"bias\\\":0.0768756267301085,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":19965.255602516983,\\\"ask\\\":20165.911437718158,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:48 AM\\\",\\\"price\\\":20065.583520117572,\\\"maxShares\\\":18900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.5765277332692014,\\\"bias\\\":0.07652773326920137,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":19976.78861503974,\\\"ask\\\":20177.560359914507,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:53 AM\\\",\\\"price\\\":20077.174487477125,\\\"maxShares\\\":18900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.576483526707377,\\\"bias\\\":0.07648352670737701,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":20081.12092840884,\\\"ask\\\":20282.941239247117,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:57 AM\\\",\\\"price\\\":20182.03108382798,\\\"maxShares\\\":18900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.5768829754591148,\\\"bias\\\":0.07688297545911482,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":19977.295045318348,\\\"ask\\\":20178.071879944662,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:01 AM\\\",\\\"price\\\":20077.683462631507,\\\"maxShares\\\":18900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.5772825512176727,\\\"bias\\\":0.07728255121767269,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":19963.97158681857,\\\"ask\\\":20164.61451733936,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:05 AM\\\",\\\"price\\\":20064.293052078967,\\\"maxShares\\\":18900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.577334127671758,\\\"bias\\\":0.07733412767175796,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":20042.20901945151,\\\"ask\\\":20243.638255827907,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:07 AM\\\",\\\"price\\\":20142.92363763971,\\\"maxShares\\\":18900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.5770310605401686,\\\"bias\\\":0.07703106054016862,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":20107.2470710318,\\\"ask\\\":20309.329956167796,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:11 AM\\\",\\\"price\\\":20208.2885135998,\\\"maxShares\\\":18900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.5767810905850687,\\\"bias\\\":0.07678109058506866,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":20141.36693075079,\\\"ask\\\":20343.792729049794,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:16 AM\\\",\\\"price\\\":20242.579829900293,\\\"maxShares\\\":18900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.5766508012406061,\\\"bias\\\":0.07665080124060608,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":20266.67652929955,\\\"ask\\\":20470.36172054879,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:20 AM\\\",\\\"price\\\":20368.519124924173,\\\"maxShares\\\":18900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.5761739179602943,\\\"bias\\\":0.07617391796029427,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":20391.796057477128,\\\"ask\\\":20596.73873142162,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:24 AM\\\",\\\"price\\\":20494.267394449376,\\\"maxShares\\\":18900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.5757036462479663,\\\"bias\\\":0.07570364624796633,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":20381.064528389627,\\\"ask\\\":20585.899347770424,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:28 AM\\\",\\\"price\\\":20483.481938080025,\\\"maxShares\\\":18900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.5756637849403977,\\\"bias\\\":0.07566378494039772,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":20251.315627490218,\\\"ask\\\":20454.84643781675,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:32 AM\\\",\\\"price\\\":20353.081032653485,\\\"maxShares\\\":18900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.5751790118464176,\\\"bias\\\":0.07517901184641762,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":20294.18680559947,\\\"ask\\\":20498.148482037654,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:36 AM\\\",\\\"price\\\":20396.167643818564,\\\"maxShares\\\":18900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.5750198610600574,\\\"bias\\\":0.07501986106005742,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":20428.946199867656,\\\"ask\\\":20634.26224207738,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:40 AM\\\",\\\"price\\\":20531.60422097252,\\\"maxShares\\\":18900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.5755180150945786,\\\"bias\\\":0.07551801509457856,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":20380.648739254004,\\\"ask\\\":20585.47937984952,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:45 AM\\\",\\\"price\\\":20483.06405955176,\\\"maxShares\\\":18900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.5756969754606747,\\\"bias\\\":0.07569697546067466,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0}],\\\"longTermRecords\\\":[{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":23320.37789908465,\\\"ask\\\":23554.753556361873,\\\"price\\\":23437.565727723264,\\\"maxShares\\\":18900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:27:23 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":21831.31658441617,\\\"ask\\\":22050.72680134496,\\\"price\\\":21941.021692880564,\\\"maxShares\\\":18900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":57018,\\\"averageShortPrice\\\":5480.731680120341,\\\"dateObserved\\\":\\\"7/29/2023, 6:34:14 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":21802.59624002283,\\\"ask\\\":22021.717810274306,\\\"price\\\":21912.15702514856,\\\"maxShares\\\":18900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:41:02 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":21359.8142147204,\\\"ask\\\":21574.485714365826,\\\"price\\\":21466.399267878984,\\\"maxShares\\\":18900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":54581.3,\\\"averageShortPrice\\\":4845.987190001129,\\\"dateObserved\\\":\\\"7/29/2023, 6:47:54 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":21757.557280685476,\\\"ask\\\":21976.2261980793,\\\"price\\\":21866.562736415985,\\\"maxShares\\\":18900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:54:48 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":21076.087680222514,\\\"ask\\\":21287.90765690817,\\\"price\\\":21181.997668565335,\\\"maxShares\\\":18900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:01:39 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":20436.573259745503,\\\"ask\\\":20641.965955823354,\\\"price\\\":20539.269607784423,\\\"maxShares\\\":18900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":51151.38,\\\"averageShortPrice\\\":4310.725873045061,\\\"dateObserved\\\":\\\"7/29/2023, 7:08:30 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":18923.72761780281,\\\"ask\\\":19113.91583506715,\\\"price\\\":19017.495940991896,\\\"maxShares\\\":18900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:15:23 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":19851.731110786604,\\\"ask\\\":20051.24599632214,\\\"price\\\":19952.241801125627,\\\"maxShares\\\":18900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:22:11 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":19994.821151987075,\\\"ask\\\":20195.774128388963,\\\"price\\\":20095.913021226934,\\\"maxShares\\\":18900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":58932.71,\\\"averageShortPrice\\\":4488.389123249703,\\\"dateObserved\\\":\\\"7/29/2023, 7:29:00 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":19584.461263559588,\\\"ask\\\":19781.290019977274,\\\"price\\\":19682.875641768434,\\\"maxShares\\\":18900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":25807.3,\\\"averageShortPrice\\\":1937.4396577791322,\\\"dateObserved\\\":\\\"7/29/2023, 7:35:51 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":20068.72417139308,\\\"ask\\\":20270.4198917086,\\\"price\\\":20172.444440972504,\\\"maxShares\\\":18900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:42:40 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":19531.49334917732,\\\"ask\\\":19727.78976474694,\\\"price\\\":19629.64155696213,\\\"maxShares\\\":18900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:49:32 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":20883.425160407256,\\\"ask\\\":21093.308830361093,\\\"price\\\":20990.634628899326,\\\"maxShares\\\":18900000,\\\"investedShares\\\":92098.32,\\\"averagePrice\\\":7839.446455203602,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:56:21 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":20836.853777308505,\\\"ask\\\":21046.269393160852,\\\"price\\\":20941.56158523469,\\\"maxShares\\\":18900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:03:13 AM\\\",\\\"bias\\\":null},{\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.5393523020584452,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":21188.841344474054,\\\"ask\\\":21401.794523815493,\\\"price\\\":21295.869324838655,\\\"maxShares\\\":18900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:09:58 AM\\\",\\\"bias\\\":0.08462920611922786},{\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.45676308381069897,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":21467.46604878774,\\\"ask\\\":21683.21947641373,\\\"price\\\":21574.523079287024,\\\"maxShares\\\":18900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:16:47 AM\\\",\\\"bias\\\":0.08853679844964518},{\\\"volatility\\\":0.0070999999999999995,\\\"forecast\\\":0.5071694586630424,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":21622.384070063486,\\\"ask\\\":21839.694462727435,\\\"price\\\":21730.28272667906,\\\"maxShares\\\":18900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:35 AM\\\",\\\"bias\\\":0.08754424274952055}],\\\"recentTicksOfPrices\\\":[19999.999882672626,19907.395785806817,20036.389109261705,20092.665044947873,19975.187675967143,20065.583520117572,20077.174487477125,20182.03108382798,20077.683462631507,20064.293052078967,20142.92363763971,20208.2885135998,20242.579829900293,20368.519124924173,20494.267394449376,20483.481938080025,20353.081032653485,20396.167643818564,20531.60422097252,20483.06405955176]}],[\\\"CLRK\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":8164.124842408156,\\\"ask\\\":8196.8467856643,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:37 AM\\\",\\\"price\\\":8180.4858140362285,\\\"maxShares\\\":15000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6191742156630068,\\\"bias\\\":0.11917421566300679,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":8149.379130113924,\\\"ask\\\":8182.041972318789,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:39 AM\\\",\\\"price\\\":8165.710551216356,\\\"maxShares\\\":15000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6189585785366687,\\\"bias\\\":0.11895857853666869,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":8195.81862788039,\\\"ask\\\":8228.667600336825,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:44 AM\\\",\\\"price\\\":8212.243114108607,\\\"maxShares\\\":15000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6182806892700077,\\\"bias\\\":0.11828068927000768,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":8219.283083822102,\\\"ask\\\":8252.226102194134,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:48 AM\\\",\\\"price\\\":8235.754593008118,\\\"maxShares\\\":15000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6179420541503028,\\\"bias\\\":0.11794205415030279,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":8250.301524281951,\\\"ask\\\":8283.368865060636,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:52 AM\\\",\\\"price\\\":8266.835194671294,\\\"maxShares\\\":15000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6174969571087403,\\\"bias\\\":0.11749695710874031,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":8263.049830345912,\\\"ask\\\":8296.168266539682,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:56 AM\\\",\\\"price\\\":8279.609048442797,\\\"maxShares\\\":15000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6176785125544896,\\\"bias\\\":0.11767851255448958,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":8305.217695643181,\\\"ask\\\":8338.5051413171,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:00 AM\\\",\\\"price\\\":8321.86141848014,\\\"maxShares\\\":15000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6182790476798565,\\\"bias\\\":0.11827904767985653,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":8352.412350251383,\\\"ask\\\":8385.8889528576,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:04 AM\\\",\\\"price\\\":8369.150651554492,\\\"maxShares\\\":15000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6189511720006394,\\\"bias\\\":0.11895117200063943,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":8368.740976771547,\\\"ask\\\":8402.283024774639,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:08 AM\\\",\\\"price\\\":8385.512000773093,\\\"maxShares\\\":15000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6187186272961535,\\\"bias\\\":0.11871862729615346,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":8416.884048028789,\\\"ask\\\":8450.619054233312,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:13 AM\\\",\\\"price\\\":8433.75155113105,\\\"maxShares\\\":15000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6194015829939513,\\\"bias\\\":0.11940158299395132,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":8420.640178211004,\\\"ask\\\":8454.390239045519,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:17 AM\\\",\\\"price\\\":8437.515208628261,\\\"maxShares\\\":15000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6193482986802874,\\\"bias\\\":0.1193482986802874,\\\"countOfNegative\\\":3,\\\"countOfPositive\\\":16,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":8412.392010588508,\\\"ask\\\":8446.109012634955,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:21 AM\\\",\\\"price\\\":8429.250511611732,\\\"maxShares\\\":15000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.619465317094519,\\\"bias\\\":0.11946531709451902,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":8466.161996240158,\\\"ask\\\":8500.094509251141,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:25 AM\\\",\\\"price\\\":8483.12825274565,\\\"maxShares\\\":15000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.620228910657201,\\\"bias\\\":0.12022891065720098,\\\"countOfNegative\\\":3,\\\"countOfPositive\\\":16,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":8412.519190642222,\\\"ask\\\":8446.236702428363,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:29 AM\\\",\\\"price\\\":8429.377946535293,\\\"maxShares\\\":15000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6194622656207404,\\\"bias\\\":0.11946226562074036,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":8453.96059959097,\\\"ask\\\":8487.844209208568,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:33 AM\\\",\\\"price\\\":8470.902404399769,\\\"maxShares\\\":15000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6188737754798751,\\\"bias\\\":0.1188737754798751,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":8468.07106552778,\\\"ask\\\":8502.011230119075,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:38 AM\\\",\\\"price\\\":8485.041147823427,\\\"maxShares\\\":15000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6186753638194552,\\\"bias\\\":0.1186753638194552,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":8487.36770146537,\\\"ask\\\":8521.385207282867,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:42 AM\\\",\\\"price\\\":8504.376454374118,\\\"maxShares\\\":15000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6184049320679188,\\\"bias\\\":0.1184049320679188,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":8430.435601265077,\\\"ask\\\":8464.224922312233,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:46 AM\\\",\\\"price\\\":8447.330261788655,\\\"maxShares\\\":15000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6192045397958621,\\\"bias\\\":0.1192045397958621,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":8447.71168677947,\\\"ask\\\":8481.570250654337,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:50 AM\\\",\\\"price\\\":8464.640968716903,\\\"maxShares\\\":15000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6194488199162046,\\\"bias\\\":0.1194488199162046,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":8485.87527335543,\\\"ask\\\":8519.886797497134,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:54 AM\\\",\\\"price\\\":8502.881035426282,\\\"maxShares\\\":15000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6189091950391622,\\\"bias\\\":0.1189091950391622,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":8526.456760627487,\\\"ask\\\":8560.630936020785,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:58 AM\\\",\\\"price\\\":8543.543848324136,\\\"maxShares\\\":15000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6183405427988725,\\\"bias\\\":0.11834054279887252,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":16,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":8485.413434370681,\\\"ask\\\":8519.42310745433,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:03 AM\\\",\\\"price\\\":8502.418270912505,\\\"maxShares\\\":15000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6189129473782213,\\\"bias\\\":0.11891294737822133,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":16,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":8432.279759039291,\\\"ask\\\":8466.076471500372,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:07 AM\\\",\\\"price\\\":8449.178115269831,\\\"maxShares\\\":15000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6196622443796543,\\\"bias\\\":0.11966224437965434,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":8436.699860032006,\\\"ask\\\":8470.514288328728,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:11 AM\\\",\\\"price\\\":8453.607074180367,\\\"maxShares\\\":15000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6197249699082525,\\\"bias\\\":0.11972496990825254,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":8477.542792942202,\\\"ask\\\":8511.520920368823,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:15 AM\\\",\\\"price\\\":8494.531856655512,\\\"maxShares\\\":15000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6203045708179404,\\\"bias\\\":0.12030457081794044,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":8448.939036699174,\\\"ask\\\":8482.802519812196,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:19 AM\\\",\\\"price\\\":8465.870778255685,\\\"maxShares\\\":15000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6207118601360017,\\\"bias\\\":0.12071186013600166,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":8460.60671293181,\\\"ask\\\":8494.51696027823,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:23 AM\\\",\\\"price\\\":8477.56183660502,\\\"maxShares\\\":15000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6205451614658624,\\\"bias\\\":0.12054516146586236,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":8518.041684944745,\\\"ask\\\":8552.182132579796,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:28 AM\\\",\\\"price\\\":8535.11190876227,\\\"maxShares\\\":15000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6197268385949382,\\\"bias\\\":0.11972683859493816,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":8556.549267287217,\\\"ask\\\":8590.84405392965,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:32 AM\\\",\\\"price\\\":8573.696660608433,\\\"maxShares\\\":15000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6191855884735696,\\\"bias\\\":0.11918558847356964,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":8610.431077607775,\\\"ask\\\":8644.94182340981,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:36 AM\\\",\\\"price\\\":8627.686450508792,\\\"maxShares\\\":15000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6184350598351582,\\\"bias\\\":0.11843505983515823,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":8586.992293293622,\\\"ask\\\":8621.409096072353,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:40 AM\\\",\\\"price\\\":8604.200694682988,\\\"maxShares\\\":15000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6181117832177008,\\\"bias\\\":0.11811178321770077,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":8636.071231478014,\\\"ask\\\":8670.684743427824,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:44 AM\\\",\\\"price\\\":8653.37798745292,\\\"maxShares\\\":15000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6187868508909204,\\\"bias\\\":0.11878685089092045,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":8674.052070480524,\\\"ask\\\":8708.81781024197,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:48 AM\\\",\\\"price\\\":8691.434940361247,\\\"maxShares\\\":15000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6193092671770274,\\\"bias\\\":0.11930926717702739,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":8678.921528835199,\\\"ask\\\":8713.706785463797,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:53 AM\\\",\\\"price\\\":8696.314157149498,\\\"maxShares\\\":15000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6193762452748212,\\\"bias\\\":0.11937624527482116,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":8635.093599329562,\\\"ask\\\":8669.703192914048,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:57 AM\\\",\\\"price\\\":8652.398396121805,\\\"maxShares\\\":15000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.61877034406456,\\\"bias\\\":0.11877034406456,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":8678.707681891092,\\\"ask\\\":8713.492081417711,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:01 AM\\\",\\\"price\\\":8696.099881654402,\\\"maxShares\\\":15000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6181704594735816,\\\"bias\\\":0.11817045947358162,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":8673.08253003081,\\\"ask\\\":8707.844383858588,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:05 AM\\\",\\\"price\\\":8690.463456944699,\\\"maxShares\\\":15000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.618093816967571,\\\"bias\\\":0.11809381696757104,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":8640.176083787073,\\\"ask\\\":8674.80604805075,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:07 AM\\\",\\\"price\\\":8657.491065918912,\\\"maxShares\\\":15000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.61854358185686,\\\"bias\\\":0.11854358185685998,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":8667.42412392877,\\\"ask\\\":8702.163298774176,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:11 AM\\\",\\\"price\\\":8684.793711351473,\\\"maxShares\\\":15000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6189174261217977,\\\"bias\\\":0.11891742612179768,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":8653.15426070191,\\\"ask\\\":8687.836241706727,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:16 AM\\\",\\\"price\\\":8670.495251204318,\\\"maxShares\\\":15000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6187213201291246,\\\"bias\\\":0.11872132012912462,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":8705.473399332372,\\\"ask\\\":8740.365076283604,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:20 AM\\\",\\\"price\\\":8722.919237807988,\\\"maxShares\\\":15000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6194391389751881,\\\"bias\\\":0.1194391389751881,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":8653.554219504953,\\\"ask\\\":8688.237803551066,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:24 AM\\\",\\\"price\\\":8670.89601152801,\\\"maxShares\\\":15000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6201557441963015,\\\"bias\\\":0.12015574419630148,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":8649.12835792225,\\\"ask\\\":8683.794203044185,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:28 AM\\\",\\\"price\\\":8666.461280483218,\\\"maxShares\\\":15000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6200942590766255,\\\"bias\\\":0.12009425907662552,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":8595.608149479653,\\\"ask\\\":8630.059484748108,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:32 AM\\\",\\\"price\\\":8612.83381711388,\\\"maxShares\\\":15000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6208420211507878,\\\"bias\\\":0.12084202115078779,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":8613.292109595555,\\\"ask\\\":8647.814322459666,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:36 AM\\\",\\\"price\\\":8630.55321602761,\\\"maxShares\\\":15000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6210906324701027,\\\"bias\\\":0.12109063247010265,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":8668.875791908777,\\\"ask\\\":8703.620785062718,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:40 AM\\\",\\\"price\\\":8686.248288485747,\\\"maxShares\\\":15000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6203092049786528,\\\"bias\\\":0.12030920497865283,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":8688.840355229673,\\\"ask\\\":8723.665366673478,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:45 AM\\\",\\\"price\\\":8706.252860951576,\\\"maxShares\\\":15000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0069,\\\"forecast\\\":0.620586279053601,\\\"bias\\\":0.12058627905360098,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0}],\\\"longTermRecords\\\":[{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":14827.705261106514,\\\"ask\\\":14887.134941511753,\\\"price\\\":14857.420101309135,\\\"maxShares\\\":15000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:27:23 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":14497.830534224458,\\\"ask\\\":14555.938071435772,\\\"price\\\":14526.884302830105,\\\"maxShares\\\":15000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":81501.36,\\\"averageShortPrice\\\":3533.683359910976,\\\"dateObserved\\\":\\\"7/29/2023, 6:34:14 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":13809.13318025858,\\\"ask\\\":13864.48040743396,\\\"price\\\":13836.806793846265,\\\"maxShares\\\":15000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:41:02 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":14274.932321324144,\\\"ask\\\":14332.14647892465,\\\"price\\\":14303.3661175445,\\\"maxShares\\\":15000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:47:54 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":14834.808893162972,\\\"ask\\\":14894.267045039378,\\\"price\\\":14864.313295870996,\\\"maxShares\\\":15000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":34646.3,\\\"averageShortPrice\\\":1443.1535872898032,\\\"dateObserved\\\":\\\"7/29/2023, 6:54:48 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":13677.883507409773,\\\"ask\\\":13732.704683792179,\\\"price\\\":13705.294095600972,\\\"maxShares\\\":15000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":123055.94,\\\"averageShortPrice\\\":4699.345646170993,\\\"dateObserved\\\":\\\"7/29/2023, 7:01:39 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":12990.809968648684,\\\"ask\\\":13042.877343272523,\\\"price\\\":13016.843655960607,\\\"maxShares\\\":15000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:08:30 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":12148.476145811035,\\\"ask\\\":12197.167432968594,\\\"price\\\":12171.9741460504,\\\"maxShares\\\":15000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":98383.44,\\\"averageShortPrice\\\":2927.322159390337,\\\"dateObserved\\\":\\\"7/29/2023, 7:15:23 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":11514.27038261041,\\\"ask\\\":11560.419762901438,\\\"price\\\":11536.823343129083,\\\"maxShares\\\":15000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:22:11 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":10543.57134933033,\\\"ask\\\":10585.830152333654,\\\"price\\\":10564.415884543743,\\\"maxShares\\\":15000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:29:00 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":10576.685402957073,\\\"ask\\\":10619.076927618225,\\\"price\\\":10597.88116528765,\\\"maxShares\\\":15000000,\\\"investedShares\\\":52296.86,\\\"averagePrice\\\":1156.8572740768132,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:35:51 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":10000.998578740811,\\\"ask\\\":10041.082741381058,\\\"price\\\":10021.45739999567,\\\"maxShares\\\":15000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":159044.16,\\\"averageShortPrice\\\":3423.576857678224,\\\"dateObserved\\\":\\\"7/29/2023, 7:42:40 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":9754.233245188525,\\\"ask\\\":9793.328368415729,\\\"price\\\":9773.780806802124,\\\"maxShares\\\":15000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:49:32 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":8926.847104907603,\\\"ask\\\":8962.626051219851,\\\"price\\\":8944.908494337893,\\\"maxShares\\\":15000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":54699.1,\\\"averageShortPrice\\\":914.0912053288428,\\\"dateObserved\\\":\\\"7/29/2023, 7:56:21 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":8269.20043694361,\\\"ask\\\":8302.34352486723,\\\"price\\\":8285.771980905422,\\\"maxShares\\\":15000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:03:13 AM\\\",\\\"bias\\\":null},{\\\"volatility\\\":0.0069,\\\"forecast\\\":0.3802680016398154,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":7314.9352801398545,\\\"ask\\\":7344.253658016163,\\\"price\\\":7329.762171227572,\\\"maxShares\\\":15000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:09:58 AM\\\",\\\"bias\\\":0.12475394122428918},{\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6139970905193333,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":7167.061582359025,\\\"ask\\\":7195.787280083912,\\\"price\\\":7181.161644426215,\\\"maxShares\\\":15000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:16:47 AM\\\",\\\"bias\\\":0.1224187758920734},{\\\"volatility\\\":0.0069,\\\"forecast\\\":0.6198252676194698,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":7856.629886519941,\\\"ask\\\":7888.119385063107,\\\"price\\\":7871.926483517701,\\\"maxShares\\\":15000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:35 AM\\\",\\\"bias\\\":0.12162273159725145}],\\\"recentTicksOfPrices\\\":[8535.11190876227,8573.696660608433,8627.686450508792,8604.200694682988,8653.37798745292,8691.434940361247,8696.314157149498,8652.398396121805,8696.099881654402,8690.463456944699,8657.491065918912,8684.793711351473,8670.495251204318,8722.919237807988,8670.89601152801,8666.461280483218,8612.83381711388,8630.55321602761,8686.248288485747,8706.252860951576]}],[\\\"OMTK\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":55488.82656759394,\\\"ask\\\":55822.76133129059,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:37 AM\\\",\\\"price\\\":55655.79394944227,\\\"maxShares\\\":10300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5790651517667542,\\\"bias\\\":0.07906515176675422,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":55580.498889790564,\\\"ask\\\":55914.98534248739,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:39 AM\\\",\\\"price\\\":55747.74211613898,\\\"maxShares\\\":10300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5791957742094267,\\\"bias\\\":0.0791957742094267,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":55292.809985857195,\\\"ask\\\":55625.56511114821,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:44 AM\\\",\\\"price\\\":55459.187548502705,\\\"maxShares\\\":10300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5787837180038496,\\\"bias\\\":0.07878371800384965,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":55148.650078364124,\\\"ask\\\":55480.53764152378,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:48 AM\\\",\\\"price\\\":55314.593859943954,\\\"maxShares\\\":10300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5785777754561489,\\\"bias\\\":0.07857777545614886,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":55338.67578895586,\\\"ask\\\":55671.70693713412,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:52 AM\\\",\\\"price\\\":55505.19136304499,\\\"maxShares\\\":10300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5788485309070358,\\\"bias\\\":0.07884853090703581,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":55416.74915103985,\\\"ask\\\":55750.250148939784,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:56 AM\\\",\\\"price\\\":55583.49964998982,\\\"maxShares\\\":10300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5787372891793376,\\\"bias\\\":0.07873728917933764,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":55159.73627358492,\\\"ask\\\":55491.69055406786,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:00 AM\\\",\\\"price\\\":55325.713413826394,\\\"maxShares\\\":10300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5783704183670006,\\\"bias\\\":0.07837041836700065,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":55445.92691714404,\\\"ask\\\":55779.60350842073,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:04 AM\\\",\\\"price\\\":55612.76521278239,\\\"maxShares\\\":10300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5787770352579372,\\\"bias\\\":0.07877703525793722,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":55544.89583820339,\\\"ask\\\":55879.16802980741,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:08 AM\\\",\\\"price\\\":55712.031934005405,\\\"maxShares\\\":10300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5789176493411933,\\\"bias\\\":0.07891764934119327,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":55254.67130274435,\\\"ask\\\":55587.196907374695,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:13 AM\\\",\\\"price\\\":55420.934105059525,\\\"maxShares\\\":10300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5793321634009019,\\\"bias\\\":0.07933216340090188,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":55277.18515179953,\\\"ask\\\":55609.8462459929,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:17 AM\\\",\\\"price\\\":55443.51569889622,\\\"maxShares\\\":10300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5793644877693204,\\\"bias\\\":0.07936448776932037,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":55326.67035458865,\\\"ask\\\":55659.62925341264,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:21 AM\\\",\\\"price\\\":55493.14980400065,\\\"maxShares\\\":10300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5792934391484339,\\\"bias\\\":0.0792934391484339,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":55005.65984144926,\\\"ask\\\":55336.686881618465,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:25 AM\\\",\\\"price\\\":55171.17336153387,\\\"maxShares\\\":10300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5788306862669487,\\\"bias\\\":0.07883068626694867,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":55325.90623937677,\\\"ask\\\":55658.860539714035,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:29 AM\\\",\\\"price\\\":55492.3833895454,\\\"maxShares\\\":10300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5783717290724362,\\\"bias\\\":0.07837172907243617,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":55574.7509646855,\\\"ask\\\":55909.20282605773,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:33 AM\\\",\\\"price\\\":55741.97689537162,\\\"maxShares\\\":10300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5780192289017454,\\\"bias\\\":0.0780192289017454,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":55659.44447220531,\\\"ask\\\":55994.406023692994,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:38 AM\\\",\\\"price\\\":55826.925247949155,\\\"maxShares\\\":10300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5779003309843462,\\\"bias\\\":0.07790033098434623,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":55775.24950538231,\\\"ask\\\":56110.90797783195,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:42 AM\\\",\\\"price\\\":55943.07874160713,\\\"maxShares\\\":10300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5777382515654859,\\\"bias\\\":0.07773825156548586,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":55433.45068275555,\\\"ask\\\":55767.05219137795,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:46 AM\\\",\\\"price\\\":55600.251437066756,\\\"maxShares\\\":10300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5782175802475521,\\\"bias\\\":0.0782175802475521,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":55537.16977387716,\\\"ask\\\":55871.39546960761,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:50 AM\\\",\\\"price\\\":55704.282621742386,\\\"maxShares\\\":10300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5783639297212558,\\\"bias\\\":0.07836392972125583,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":55766.248786113196,\\\"ask\\\":56101.853091746765,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:54 AM\\\",\\\"price\\\":55934.050938929984,\\\"maxShares\\\":10300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5780406951796224,\\\"bias\\\":0.07804069517962242,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":55523.81003746269,\\\"ask\\\":55857.955333575796,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:58 AM\\\",\\\"price\\\":55690.882685519246,\\\"maxShares\\\":10300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5776999388721861,\\\"bias\\\":0.07769993887218607,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":55769.02121395013,\\\"ask\\\":56104.64220420459,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:03 AM\\\",\\\"price\\\":55936.83170907736,\\\"maxShares\\\":10300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5780430870353073,\\\"bias\\\":0.07804308703530727,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":55450.00124392369,\\\"ask\\\":55783.70235471961,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:07 AM\\\",\\\"price\\\":55616.85179932165,\\\"maxShares\\\":10300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5784920915930755,\\\"bias\\\":0.07849209159307546,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":55476.53997811467,\\\"ask\\\":55810.40080045036,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:11 AM\\\",\\\"price\\\":55643.47038928252,\\\"maxShares\\\":10300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5784545247633524,\\\"bias\\\":0.07845452476335235,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":55721.753913494016,\\\"ask\\\":56057.09044657421,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:15 AM\\\",\\\"price\\\":55889.42218003412,\\\"maxShares\\\":10300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5788013045512252,\\\"bias\\\":0.07880130455122525,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":55550.043452717735,\\\"ask\\\":55884.34662294472,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:19 AM\\\",\\\"price\\\":55717.19503783123,\\\"maxShares\\\":10300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5785577222338545,\\\"bias\\\":0.07855772223385449,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":55620.08537466226,\\\"ask\\\":55954.810060969154,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:23 AM\\\",\\\"price\\\":55787.44771781571,\\\"maxShares\\\":10300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5784586703968649,\\\"bias\\\":0.07845867039686494,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":55964.83040639564,\\\"ask\\\":56301.62978697575,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:28 AM\\\",\\\"price\\\":56133.23009668569,\\\"maxShares\\\":10300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5789449738002762,\\\"bias\\\":0.07894497380027621,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":55734.77934754301,\\\"ask\\\":56070.194268390806,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:32 AM\\\",\\\"price\\\":55902.48680796691,\\\"maxShares\\\":10300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5792708273342178,\\\"bias\\\":0.07927082733421775,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":55416.160534887604,\\\"ask\\\":55749.65799046365,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:36 AM\\\",\\\"price\\\":55582.90926267563,\\\"maxShares\\\":10300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5797266001022993,\\\"bias\\\":0.07972660010229926,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":55278.394901794134,\\\"ask\\\":55611.063276328496,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:40 AM\\\",\\\"price\\\":55444.729089061315,\\\"maxShares\\\":10300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5799252959138727,\\\"bias\\\":0.07992529591387265,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":55566.86510997149,\\\"ask\\\":55901.26951384293,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:44 AM\\\",\\\"price\\\":55734.067311907216,\\\"maxShares\\\":10300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5803423859323487,\\\"bias\\\":0.08034238593234866,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":55344.62866819183,\\\"ask\\\":55677.69564111975,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:48 AM\\\",\\\"price\\\":55511.162154655794,\\\"maxShares\\\":10300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5800197709577186,\\\"bias\\\":0.08001977095771862,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":55372.9964623978,\\\"ask\\\":55706.23415424773,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:53 AM\\\",\\\"price\\\":55539.61530832277,\\\"maxShares\\\":10300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5800607863994979,\\\"bias\\\":0.08006078639949787,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":55117.57027074229,\\\"ask\\\":55449.270793936324,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:57 AM\\\",\\\"price\\\":55283.42053233931,\\\"maxShares\\\":10300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5804318046006,\\\"bias\\\":0.08043180460059995,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":55371.75017695503,\\\"ask\\\":55704.98036859166,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:01 AM\\\",\\\"price\\\":55538.36527277335,\\\"maxShares\\\":10300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5800608857003386,\\\"bias\\\":0.08006088570033865,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":55404.54010638258,\\\"ask\\\":55737.967629590494,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:05 AM\\\",\\\"price\\\":55571.25386798654,\\\"maxShares\\\":10300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.580108295991392,\\\"bias\\\":0.08010829599139202,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":55597.20172407859,\\\"ask\\\":55931.788695336836,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:07 AM\\\",\\\"price\\\":55764.49520970772,\\\"maxShares\\\":10300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5798297304827362,\\\"bias\\\":0.07982973048273623,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":55437.573988628144,\\\"ask\\\":55771.200311528606,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:11 AM\\\",\\\"price\\\":55604.38715007838,\\\"maxShares\\\":10300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5795998676265226,\\\"bias\\\":0.0795998676265226,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":55521.046031040656,\\\"ask\\\":55855.17469321341,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:16 AM\\\",\\\"price\\\":55688.11036212704,\\\"maxShares\\\":10300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5794800145548872,\\\"bias\\\":0.07948001455488718,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":55216.22543144634,\\\"ask\\\":55548.5196667409,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:20 AM\\\",\\\"price\\\":55382.37254909363,\\\"maxShares\\\":10300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5790412459591877,\\\"bias\\\":0.07904124595918771,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":54915.39699229362,\\\"ask\\\":55245.88082574774,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:24 AM\\\",\\\"price\\\":55080.63890902069,\\\"maxShares\\\":10300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5786082552871195,\\\"bias\\\":0.07860825528711946,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":54941.05429932817,\\\"ask\\\":55271.69253984569,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:28 AM\\\",\\\"price\\\":55106.37341958693,\\\"maxShares\\\":10300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.578571528317056,\\\"bias\\\":0.07857152831705605,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":55253.3957586421,\\\"ask\\\":55585.91368697896,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:32 AM\\\",\\\"price\\\":55419.654722810534,\\\"maxShares\\\":10300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5790182096945442,\\\"bias\\\":0.0790182096945442,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":55149.80087065438,\\\"ask\\\":55481.69535934437,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:36 AM\\\",\\\"price\\\":55315.74811499938,\\\"maxShares\\\":10300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5791666396517348,\\\"bias\\\":0.07916663965173476,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":55474.74862943977,\\\"ask\\\":55808.59867134211,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:40 AM\\\",\\\"price\\\":55641.67365039094,\\\"maxShares\\\":10300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5787001824439247,\\\"bias\\\":0.07870018244392474,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":55591.39838599157,\\\"ask\\\":55925.95043244687,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:45 AM\\\",\\\"price\\\":55758.674409219224,\\\"maxShares\\\":10300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5785346953105988,\\\"bias\\\":0.07853469531059876,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0}],\\\"longTermRecords\\\":[{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":64994.42241979597,\\\"ask\\\":65385.562374177876,\\\"price\\\":65189.9923969869,\\\"maxShares\\\":10300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":6415.76,\\\"averageShortPrice\\\":4987.735629310337,\\\"dateObserved\\\":\\\"7/29/2023, 6:27:23 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":61052.950820652775,\\\"ask\\\":61420.370785471154,\\\"price\\\":61236.66080306201,\\\"maxShares\\\":10300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":15695.71,\\\"averageShortPrice\\\":11499.974194703174,\\\"dateObserved\\\":\\\"7/29/2023, 6:34:14 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":61755.72779939591,\\\"ask\\\":62127.37711413651,\\\"price\\\":61941.5524567662,\\\"maxShares\\\":10300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:41:02 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":59410.46648745192,\\\"ask\\\":59768.00189259202,\\\"price\\\":59588.53083236184,\\\"maxShares\\\":10300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:47:54 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":54510.946462045526,\\\"ask\\\":54838.99629030254,\\\"price\\\":54675.4801046485,\\\"maxShares\\\":10300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":17012.34,\\\"averageShortPrice\\\":9522.506326031074,\\\"dateObserved\\\":\\\"7/29/2023, 6:54:48 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":53728.95878762762,\\\"ask\\\":54052.30257170561,\\\"price\\\":53890.630679666625,\\\"maxShares\\\":10300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:01:39 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":52494.479047859655,\\\"ask\\\":52810.39366600124,\\\"price\\\":52652.436356930484,\\\"maxShares\\\":10300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":9664.2,\\\"averageShortPrice\\\":5125.445914346177,\\\"dateObserved\\\":\\\"7/29/2023, 7:08:30 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":49168.06412482742,\\\"ask\\\":49463.96019779529,\\\"price\\\":49312.93554282884,\\\"maxShares\\\":10300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:15:23 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":51530.34349365156,\\\"ask\\\":51840.455891807884,\\\"price\\\":51687.49440124674,\\\"maxShares\\\":10300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:22:11 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":51436.70832117607,\\\"ask\\\":51746.257217793005,\\\"price\\\":51590.26945478917,\\\"maxShares\\\":10300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":18181.26,\\\"averageShortPrice\\\":8910.30156539975,\\\"dateObserved\\\":\\\"7/29/2023, 7:29:00 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":50862.91406540021,\\\"ask\\\":51169.00983710777,\\\"price\\\":51015.961951253994,\\\"maxShares\\\":10300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":1010.07,\\\"averageShortPrice\\\":495.0167536333195,\\\"dateObserved\\\":\\\"7/29/2023, 7:35:51 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":52069.888593813375,\\\"ask\\\":52383.248003605615,\\\"price\\\":52233.222780860066,\\\"maxShares\\\":10300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:42:40 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":50493.53655410153,\\\"ask\\\":50797.40939193963,\\\"price\\\":50645.47297302058,\\\"maxShares\\\":10300000,\\\"investedShares\\\":10760.86,\\\"averagePrice\\\":5622.226852676601,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:49:32 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":51755.62119795248,\\\"ask\\\":52067.08932953495,\\\"price\\\":51912.2204866821,\\\"maxShares\\\":10300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:56:21 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":49035.561584008625,\\\"ask\\\":49330.66024950917,\\\"price\\\":49183.11091675889,\\\"maxShares\\\":10300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":11135.63,\\\"averageShortPrice\\\":5433.010881558914,\\\"dateObserved\\\":\\\"7/29/2023, 8:03:13 AM\\\",\\\"bias\\\":null},{\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5759028331393433,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":48548.172134994966,\\\"ask\\\":48840.33766439313,\\\"price\\\":48692.48011584612,\\\"maxShares\\\":10300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:09:58 AM\\\",\\\"bias\\\":0.07714436123904267},{\\\"volatility\\\":0.0063,\\\"forecast\\\":0.5747782903636288,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":50591.10770214647,\\\"ask\\\":50895.567728438255,\\\"price\\\":50745.01991754953,\\\"maxShares\\\":10300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:16:47 AM\\\",\\\"bias\\\":0.07625181233601519},{\\\"volatility\\\":0.0063,\\\"forecast\\\":0.577659336049966,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":52627.88724974143,\\\"ask\\\":52944.60472566767,\\\"price\\\":52784.50845679888,\\\"maxShares\\\":10300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:35 AM\\\",\\\"bias\\\":0.07947646780847639}],\\\"recentTicksOfPrices\\\":[56133.23009668569,55902.48680796691,55582.90926267563,55444.729089061315,55734.067311907216,55511.162154655794,55539.61530832277,55283.42053233931,55538.36527277335,55571.25386798654,55764.49520970772,55604.38715007838,55688.11036212704,55382.37254909363,55080.63890902069,55106.37341958693,55419.654722810534,55315.74811499938,55641.67365039094,55758.674409219224]}],[\\\"FSIG\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":14081.49835844111,\\\"ask\\\":14365.973072753051,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:37 AM\\\",\\\"price\\\":14223.73571559708,\\\"maxShares\\\":6100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0109,\\\"forecast\\\":0.23522955114782496,\\\"bias\\\":0.26477044885217504,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":14041.362929824236,\\\"ask\\\":14325.026827396441,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:39 AM\\\",\\\"price\\\":14183.194878610338,\\\"maxShares\\\":6100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0109,\\\"forecast\\\":0.23598636339624232,\\\"bias\\\":0.26401363660375765,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":13916.08988767456,\\\"ask\\\":14197.22301671849,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:44 AM\\\",\\\"price\\\":14056.656452196525,\\\"maxShares\\\":6100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0109,\\\"forecast\\\":0.23360970503219675,\\\"bias\\\":0.26639029496780325,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":13853.435276788428,\\\"ask\\\":14133.302656117487,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:48 AM\\\",\\\"price\\\":13993.368966452957,\\\"maxShares\\\":6100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0109,\\\"forecast\\\":0.232404907814642,\\\"bias\\\":0.26759509218535804,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":13936.024029532024,\\\"ask\\\":14217.55986851247,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:52 AM\\\",\\\"price\\\":14076.791949022247,\\\"maxShares\\\":6100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0109,\\\"forecast\\\":0.23400020489889126,\\\"bias\\\":0.2659997951011087,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":13902.089631313864,\\\"ask\\\":14182.939926895962,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:56 AM\\\",\\\"price\\\":14042.514779104913,\\\"maxShares\\\":6100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0109,\\\"forecast\\\":0.2333509109285389,\\\"bias\\\":0.2666490890714611,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":14014.162047621925,\\\"ask\\\":14297.276432422368,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:00 AM\\\",\\\"price\\\":14155.719240022147,\\\"maxShares\\\":6100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0109,\\\"forecast\\\":0.23120130547273246,\\\"bias\\\":0.26879869452726757,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":13889.479641645874,\\\"ask\\\":14170.075189961954,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:04 AM\\\",\\\"price\\\":14029.777415803914,\\\"maxShares\\\":6100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0109,\\\"forecast\\\":0.22878836641226596,\\\"bias\\\":0.27121163358773404,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":13846.717252626608,\\\"ask\\\":14126.448914295834,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:08 AM\\\",\\\"price\\\":13986.58308346122,\\\"maxShares\\\":6100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0109,\\\"forecast\\\":0.22795079190486206,\\\"bias\\\":0.27204920809513794,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":13722.01651820326,\\\"ask\\\":13999.228973116458,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:13 AM\\\",\\\"price\\\":13860.622745659859,\\\"maxShares\\\":6100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0109,\\\"forecast\\\":0.22547850687272042,\\\"bias\\\":0.2745214931272796,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":13712.349810593752,\\\"ask\\\":13989.366978484535,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:17 AM\\\",\\\"price\\\":13850.858394539144,\\\"maxShares\\\":6100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0109,\\\"forecast\\\":0.22528497921019416,\\\"bias\\\":0.2747150207898058,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":13733.588478149824,\\\"ask\\\":14011.03471003164,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:21 AM\\\",\\\"price\\\":13872.311594090732,\\\"maxShares\\\":6100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0109,\\\"forecast\\\":0.22485948094915165,\\\"bias\\\":0.27514051905084835,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":13596.304859120213,\\\"ask\\\":13870.977684556987,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:25 AM\\\",\\\"price\\\":13733.6412718386,\\\"maxShares\\\":6100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0109,\\\"forecast\\\":0.22208135214221708,\\\"bias\\\":0.2779186478577829,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":13733.261696012334,\\\"ask\\\":14010.701326234805,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:29 AM\\\",\\\"price\\\":13871.98151112357,\\\"maxShares\\\":6100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0109,\\\"forecast\\\":0.2192818518869397,\\\"bias\\\":0.2807181481130603,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":13627.216013425623,\\\"ask\\\":13902.51330662614,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:33 AM\\\",\\\"price\\\":13764.864660025882,\\\"maxShares\\\":6100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0109,\\\"forecast\\\":0.21709733029413616,\\\"bias\\\":0.28290266970586386,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":13591.379801918123,\\\"ask\\\":13865.953131249804,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:38 AM\\\",\\\"price\\\":13728.666466583963,\\\"maxShares\\\":6100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0109,\\\"forecast\\\":0.21784325602466312,\\\"bias\\\":0.28215674397533685,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":13640.305616502743,\\\"ask\\\":13915.867346129062,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:42 AM\\\",\\\"price\\\":13778.086481315902,\\\"maxShares\\\":6100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0109,\\\"forecast\\\":0.21682755719638158,\\\"bias\\\":0.2831724428036184,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":13496.326280620493,\\\"ask\\\":13768.979336794646,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:46 AM\\\",\\\"price\\\":13632.65280870757,\\\"maxShares\\\":6100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0109,\\\"forecast\\\":0.21380666251680025,\\\"bias\\\":0.28619333748319975,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":13452.77663069255,\\\"ask\\\":13724.549895959068,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:50 AM\\\",\\\"price\\\":13588.663263325809,\\\"maxShares\\\":6100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0109,\\\"forecast\\\":0.2128801906068551,\\\"bias\\\":0.2871198093931449,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":13357.450692975728,\\\"ask\\\":13627.298181722714,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:54 AM\\\",\\\"price\\\":13492.37443734922,\\\"maxShares\\\":6100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0109,\\\"forecast\\\":0.21492923167738437,\\\"bias\\\":0.28507076832261563,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":13257.2977460213,\\\"ask\\\":13525.12194291062,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:58 AM\\\",\\\"price\\\":13391.20984446596,\\\"maxShares\\\":6100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0109,\\\"forecast\\\":0.21277564969672458,\\\"bias\\\":0.2872243503032754,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":13156.767636791828,\\\"ask\\\":13422.560922383582,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:03 AM\\\",\\\"price\\\":13289.664279587705,\\\"maxShares\\\":6100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0109,\\\"forecast\\\":0.21497031453435592,\\\"bias\\\":0.2850296854656441,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":13027.094557597022,\\\"ask\\\":13290.268185023226,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:07 AM\\\",\\\"price\\\":13158.681371310124,\\\"maxShares\\\":6100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0109,\\\"forecast\\\":0.2178075302168584,\\\"bias\\\":0.2821924697831416,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":13016.316197647895,\\\"ask\\\":13279.272080428662,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:11 AM\\\",\\\"price\\\":13147.794139038278,\\\"maxShares\\\":6100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0109,\\\"forecast\\\":0.21757385642098018,\\\"bias\\\":0.28242614357901985,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":13115.858989971895,\\\"ask\\\":13380.825838254155,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:15 AM\\\",\\\"price\\\":13248.342414113025,\\\"maxShares\\\":6100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0109,\\\"forecast\\\":0.21973372151109183,\\\"bias\\\":0.28026627848890817,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":13046.08740592864,\\\"ask\\\":13309.644727260533,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:19 AM\\\",\\\"price\\\":13177.866066594586,\\\"maxShares\\\":6100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0109,\\\"forecast\\\":0.21823483363799723,\\\"bias\\\":0.2817651663620028,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":13017.689030722964,\\\"ask\\\":13280.672647505247,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:23 AM\\\",\\\"price\\\":13149.180839114106,\\\"maxShares\\\":6100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0109,\\\"forecast\\\":0.2176201567245026,\\\"bias\\\":0.28237984327549737,\\\"countOfNegative\\\":16,\\\"countOfPositive\\\":4,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":12879.569951133171,\\\"ask\\\":13139.763283479295,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:28 AM\\\",\\\"price\\\":13009.666617306233,\\\"maxShares\\\":6100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0109,\\\"forecast\\\":0.21459194660600478,\\\"bias\\\":0.2854080533939952,\\\"countOfNegative\\\":16,\\\"countOfPositive\\\":4,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":12788.243872849125,\\\"ask\\\":13046.592233916785,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:32 AM\\\",\\\"price\\\":12917.418053382955,\\\"maxShares\\\":6100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0109,\\\"forecast\\\":0.21663016221139347,\\\"bias\\\":0.2833698377886065,\\\"countOfNegative\\\":16,\\\"countOfPositive\\\":4,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":12662.283779715704,\\\"ask\\\":12918.087492437233,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:36 AM\\\",\\\"price\\\":12790.185636076469,\\\"maxShares\\\":6100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0109,\\\"forecast\\\":0.7805509710043828,\\\"bias\\\":0.28055097100438275,\\\"countOfNegative\\\":16,\\\"countOfPositive\\\":4,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":12716.882625161723,\\\"ask\\\":12973.78934486196,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:40 AM\\\",\\\"price\\\":12845.335985011841,\\\"maxShares\\\":6100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0109,\\\"forecast\\\":0.781760686358428,\\\"bias\\\":0.281760686358428,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":12831.701200845586,\\\"ask\\\":13090.927487731355,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:44 AM\\\",\\\"price\\\":12961.31434428847,\\\"maxShares\\\":6100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0109,\\\"forecast\\\":0.7792167169246477,\\\"bias\\\":0.27921671692464767,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":12920.8488681473,\\\"ask\\\":13181.876118008864,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:48 AM\\\",\\\"price\\\":13051.362493078082,\\\"maxShares\\\":6100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0109,\\\"forecast\\\":0.7811565625145556,\\\"bias\\\":0.28115656251455556,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":12932.307350096564,\\\"ask\\\":13193.566084441949,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:53 AM\\\",\\\"price\\\":13062.936717269256,\\\"maxShares\\\":6100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0109,\\\"forecast\\\":0.7814058980984143,\\\"bias\\\":0.2814058980984143,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":13035.997458796568,\\\"ask\\\":13299.350942812662,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:57 AM\\\",\\\"price\\\":13167.674200804615,\\\"maxShares\\\":6100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0109,\\\"forecast\\\":0.7791496102316998,\\\"bias\\\":0.2791496102316998,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":12932.809274174218,\\\"ask\\\":13194.07814839996,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:01 AM\\\",\\\"price\\\":13063.44371128709,\\\"maxShares\\\":6100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0109,\\\"forecast\\\":0.7769223337825397,\\\"bias\\\":0.2769223337825397,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":12946.059737137473,\\\"ask\\\":13207.596297483686,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:05 AM\\\",\\\"price\\\":13076.82801731058,\\\"maxShares\\\":6100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0109,\\\"forecast\\\":0.7772060578404529,\\\"bias\\\":0.27720605784045294,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":13023.948248479604,\\\"ask\\\":13287.058314105454,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:07 AM\\\",\\\"price\\\":13155.50328129253,\\\"maxShares\\\":6100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0109,\\\"forecast\\\":0.7755382787927263,\\\"bias\\\":0.2755382787927263,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":13088.831520977463,\\\"ask\\\":13353.252359785089,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:11 AM\\\",\\\"price\\\":13221.041940381276,\\\"maxShares\\\":6100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0109,\\\"forecast\\\":0.776910967388029,\\\"bias\\\":0.276910967388029,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":13054.822530224428,\\\"ask\\\":13318.55631871381,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:16 AM\\\",\\\"price\\\":13186.68942446912,\\\"maxShares\\\":6100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0109,\\\"forecast\\\":0.7761895893296518,\\\"bias\\\":0.27618958932965176,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":13179.513361075624,\\\"ask\\\":13445.766156248868,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:20 AM\\\",\\\"price\\\":13312.639758662246,\\\"maxShares\\\":6100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0109,\\\"forecast\\\":0.7735516132647734,\\\"bias\\\":0.2735516132647734,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":13055.77245729652,\\\"ask\\\":13319.525436231805,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:24 AM\\\",\\\"price\\\":13187.648946764162,\\\"maxShares\\\":6100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0109,\\\"forecast\\\":0.7761442996773417,\\\"bias\\\":0.27614429967734166,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":13066.326174790565,\\\"ask\\\":13330.29236013987,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:28 AM\\\",\\\"price\\\":13198.309267465218,\\\"maxShares\\\":6100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0109,\\\"forecast\\\":0.7759210766596368,\\\"bias\\\":0.27592107665963683,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":13194.84658105273,\\\"ask\\\":13461.409138245715,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:32 AM\\\",\\\"price\\\":13328.127859649223,\\\"maxShares\\\":6100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0109,\\\"forecast\\\":0.7732071164848933,\\\"bias\\\":0.27320711648489326,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":13237.729532660365,\\\"ask\\\":13505.15841210805,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:36 AM\\\",\\\"price\\\":13371.443972384208,\\\"maxShares\\\":6100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0109,\\\"forecast\\\":0.7723191995634562,\\\"bias\\\":0.2723191995634562,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":13372.67833956355,\\\"ask\\\":13642.833457534532,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:40 AM\\\",\\\"price\\\":13507.755898549041,\\\"maxShares\\\":6100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0109,\\\"forecast\\\":0.7695431078637995,\\\"bias\\\":0.26954310786379954,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":13421.32945934045,\\\"ask\\\":13692.467428216016,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:45 AM\\\",\\\"price\\\":13556.898443778233,\\\"maxShares\\\":6100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0109,\\\"forecast\\\":0.7685624835122121,\\\"bias\\\":0.2685624835122121,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0}],\\\"longTermRecords\\\":[{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":9976.763622844139,\\\"ask\\\":10178.314403103623,\\\"price\\\":10077.539012973879,\\\"maxShares\\\":6100000,\\\"investedShares\\\":91151.57,\\\"averagePrice\\\":2631.4217581993935,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:27:23 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":9653.573907356304,\\\"ask\\\":9848.595602454416,\\\"price\\\":9751.084754905356,\\\"maxShares\\\":6100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:34:14 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":9098.927929723388,\\\"ask\\\":9282.744655576382,\\\"price\\\":9190.836292649887,\\\"maxShares\\\":6100000,\\\"investedShares\\\":193943.88,\\\"averagePrice\\\":3341.1709676771147,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:41:02 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":8897.632864969019,\\\"ask\\\":9077.383023857288,\\\"price\\\":8987.036233576411,\\\"maxShares\\\":6100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":340144.56,\\\"averageShortPrice\\\":5834.280099767669,\\\"dateObserved\\\":\\\"7/29/2023, 6:47:54 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":7453.380158080439,\\\"ask\\\":7603.953494607316,\\\"price\\\":7530.048249270933,\\\"maxShares\\\":6100000,\\\"investedShares\\\":110034.03,\\\"averagePrice\\\":1313.229392822669,\\\"sharesShort\\\":293028.65,\\\"averageShortPrice\\\":3647.3542137027925,\\\"dateObserved\\\":\\\"7/29/2023, 6:54:48 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":8723.96637212782,\\\"ask\\\":8900.208117019289,\\\"price\\\":8812.087244573555,\\\"maxShares\\\":6100000,\\\"investedShares\\\":290275.01,\\\"averagePrice\\\":4309.5410007903865,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:01:39 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":10941.389465757751,\\\"ask\\\":11162.427636783155,\\\"price\\\":11051.908551270455,\\\"maxShares\\\":6100000,\\\"investedShares\\\":351084,\\\"averagePrice\\\":8010.89761785359,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:08:30 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":13095.630671005922,\\\"ask\\\":13360.188866379778,\\\"price\\\":13229.337818428081,\\\"maxShares\\\":6100000,\\\"investedShares\\\":9362.24,\\\"averagePrice\\\":213.62393647609588,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:15:23 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":15575.860846620979,\\\"ask\\\":15890.524702108269,\\\"price\\\":15736.696523280196,\\\"maxShares\\\":6100000,\\\"investedShares\\\":86653.98,\\\"averagePrice\\\":4541.016471864132,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:22:11 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":20221.54623795618,\\\"ask\\\":20630.062323571452,\\\"price\\\":20428.907953680344,\\\"maxShares\\\":6100000,\\\"investedShares\\\":112902.25,\\\"averagePrice\\\":8266.47719114899,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:29:00 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":24117.838131846314,\\\"ask\\\":24605.067185014937,\\\"price\\\":24361.452658430637,\\\"maxShares\\\":6100000,\\\"investedShares\\\":63620.16,\\\"averagePrice\\\":8047.743802704336,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:35:51 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":21688.066038484885,\\\"ask\\\":22126.208786737127,\\\"price\\\":21901.909556322793,\\\"maxShares\\\":6100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":60243.12,\\\"averageShortPrice\\\":4780.635533209155,\\\"dateObserved\\\":\\\"7/29/2023, 7:42:40 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":18371.93558932212,\\\"ask\\\":18743.085803247817,\\\"price\\\":18557.510696284975,\\\"maxShares\\\":6100000,\\\"investedShares\\\":94945.68,\\\"averagePrice\\\":6824.944089794404,\\\"sharesShort\\\":30121.56,\\\"averageShortPrice\\\":2390.3177666045776,\\\"dateObserved\\\":\\\"7/29/2023, 7:49:32 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":16787.98143578304,\\\"ask\\\":17127.132575899872,\\\"price\\\":16953.75668821862,\\\"maxShares\\\":6100000,\\\"investedShares\\\":2637.38,\\\"averagePrice\\\":189.5817802720668,\\\"sharesShort\\\":194223.43,\\\"averageShortPrice\\\":11562.210972389175,\\\"dateObserved\\\":\\\"7/29/2023, 7:56:21 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":14025.329518280574,\\\"ask\\\":14308.669508548872,\\\"price\\\":14166.999513414716,\\\"maxShares\\\":6100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":2928.97,\\\"averageShortPrice\\\":170.70836896847726,\\\"dateObserved\\\":\\\"7/29/2023, 8:03:13 AM\\\",\\\"bias\\\":null},{\\\"volatility\\\":0.0109,\\\"forecast\\\":0.6188668838645288,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":13009.97588198602,\\\"ask\\\":13272.803677581684,\\\"price\\\":13142.262782355363,\\\"maxShares\\\":6100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:09:58 AM\\\",\\\"bias\\\":0.25670939793083103},{\\\"volatility\\\":0.0109,\\\"forecast\\\":0.37211399858667193,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":13260.646365431303,\\\"ask\\\":13528.53821119759,\\\"price\\\":13393.856854627898,\\\"maxShares\\\":6100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:16:47 AM\\\",\\\"bias\\\":0.26484056173914555},{\\\"volatility\\\":0.0109,\\\"forecast\\\":0.5154061627397539,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":14684.19877243406,\\\"ask\\\":14980.84925268525,\\\"price\\\":14833.30883283611,\\\"maxShares\\\":6100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:35 AM\\\",\\\"bias\\\":0.27464357386014704}],\\\"recentTicksOfPrices\\\":[13009.666617306233,12917.418053382955,12790.185636076469,12845.335985011841,12961.31434428847,13051.362493078082,13062.936717269256,13167.674200804615,13063.44371128709,13076.82801731058,13155.50328129253,13221.041940381276,13186.68942446912,13312.639758662246,13187.648946764162,13198.309267465218,13328.127859649223,13371.443972384208,13507.755898549041,13556.898443778233]}],[\\\"KGI\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":14070.111188229519,\\\"ask\\\":14098.279578996744,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:37 AM\\\",\\\"price\\\":14084.195383613132,\\\"maxShares\\\":18300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.37810575367516874,\\\"bias\\\":0.12189424632483126,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":14041.022912257835,\\\"ask\\\":14069.133068238329,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:39 AM\\\",\\\"price\\\":14055.077990248083,\\\"maxShares\\\":18300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.37835827754744034,\\\"bias\\\":0.12164172245255966,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":13950.007397437288,\\\"ask\\\":13977.9353401749,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:44 AM\\\",\\\"price\\\":13963.971368806095,\\\"maxShares\\\":18300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.3775646375387109,\\\"bias\\\":0.12243536246128911,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":13995.734174088573,\\\"ask\\\":14023.753661924584,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:48 AM\\\",\\\"price\\\":14009.74391800658,\\\"maxShares\\\":18300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.3771633062480541,\\\"bias\\\":0.12283669375194589,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":14056.206922325484,\\\"ask\\\":14084.347476724533,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:52 AM\\\",\\\"price\\\":14070.27719952501,\\\"maxShares\\\":18300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.37663255363707143,\\\"bias\\\":0.12336744636292857,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":14081.074232011644,\\\"ask\\\":14109.264570814468,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:56 AM\\\",\\\"price\\\":14095.169401413057,\\\"maxShares\\\":18300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.37641430012736926,\\\"bias\\\":0.12358569987263074,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":13999.2795757855,\\\"ask\\\":14027.306161522807,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:00 AM\\\",\\\"price\\\":14013.292868654155,\\\"maxShares\\\":18300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.3756922165529377,\\\"bias\\\":0.12430778344706228,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":14090.360091037744,\\\"ask\\\":14118.56902014893,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:04 AM\\\",\\\"price\\\":14104.464555593338,\\\"maxShares\\\":18300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.37650097366825436,\\\"bias\\\":0.12349902633174564,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":14121.898357733206,\\\"ask\\\":14150.170426517456,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:08 AM\\\",\\\"price\\\":14136.034392125332,\\\"maxShares\\\":18300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.3767773999060449,\\\"bias\\\":0.12322260009395508,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":14029.493741755552,\\\"ask\\\":14057.580816313619,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:13 AM\\\",\\\"price\\\":14043.537279034586,\\\"maxShares\\\":18300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.37596579991170154,\\\"bias\\\":0.12403420008829846,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":14036.661928183461,\\\"ask\\\":14064.763353465109,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:17 AM\\\",\\\"price\\\":14050.712640824286,\\\"maxShares\\\":18300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.3759024262585936,\\\"bias\\\":0.1240975737414064,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":14020.922369132564,\\\"ask\\\":14048.992283785481,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:21 AM\\\",\\\"price\\\":14034.957326459024,\\\"maxShares\\\":18300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.3757631172289483,\\\"bias\\\":0.12423688277105172,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":14123.528899826935,\\\"ask\\\":14151.804232959721,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:25 AM\\\",\\\"price\\\":14137.666566393329,\\\"maxShares\\\":18300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.37667229532649527,\\\"bias\\\":0.12332770467350473,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":14021.164837710587,\\\"ask\\\":14049.23523778608,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:29 AM\\\",\\\"price\\\":14035.200037748335,\\\"maxShares\\\":18300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.37577191900484247,\\\"bias\\\":0.12422808099515753,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":14100.245544107902,\\\"ask\\\":14128.474263915923,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:33 AM\\\",\\\"price\\\":14114.359904011913,\\\"maxShares\\\":18300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.37647257722498245,\\\"bias\\\":0.12352742277501755,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":14073.351465520269,\\\"ask\\\":14101.526343329117,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:38 AM\\\",\\\"price\\\":14087.438904424693,\\\"maxShares\\\":18300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.37670863728672244,\\\"bias\\\":0.12329136271327756,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":14110.068926631564,\\\"ask\\\":14138.317312871064,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:42 AM\\\",\\\"price\\\":14124.193119751315,\\\"maxShares\\\":18300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.37638696935802224,\\\"bias\\\":0.12361303064197776,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":14001.808601485971,\\\"ask\\\":14029.840250337795,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:46 AM\\\",\\\"price\\\":14015.824425911884,\\\"maxShares\\\":18300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.3773427306650374,\\\"bias\\\":0.12265726933496263,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":14034.660272660076,\\\"ask\\\":14062.757690623357,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:50 AM\\\",\\\"price\\\":14048.708981641717,\\\"maxShares\\\":18300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.37705494667984013,\\\"bias\\\":0.12294505332015987,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":14107.252480299027,\\\"ask\\\":14135.495228007332,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:54 AM\\\",\\\"price\\\":14121.37385415318,\\\"maxShares\\\":18300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.3776908618117642,\\\"bias\\\":0.1223091381882358,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":14184.494168097732,\\\"ask\\\":14212.891553819647,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:58 AM\\\",\\\"price\\\":14198.69286095869,\\\"maxShares\\\":18300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.3783605431887764,\\\"bias\\\":0.12163945681122362,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":14263.046918578653,\\\"ask\\\":14291.601567064294,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:03 AM\\\",\\\"price\\\":14277.324242821474,\\\"maxShares\\\":18300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.37903417411183155,\\\"bias\\\":0.12096582588816845,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":14365.946868246343,\\\"ask\\\":14394.707522637225,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:07 AM\\\",\\\"price\\\":14380.327195441785,\\\"maxShares\\\":18300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.37816147296554353,\\\"bias\\\":0.12183852703445647,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":14374.568697981711,\\\"ask\\\":14403.346613292984,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:11 AM\\\",\\\"price\\\":14388.957655637349,\\\"maxShares\\\":18300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.37808835066842433,\\\"bias\\\":0.12191164933157567,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":14295.333778219632,\\\"ask\\\":14323.953065062913,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:15 AM\\\",\\\"price\\\":14309.643421641273,\\\"maxShares\\\":18300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.3787640718444887,\\\"bias\\\":0.12123592815551132,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":14240.137084714781,\\\"ask\\\":14268.645867667163,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:19 AM\\\",\\\"price\\\":14254.391476190973,\\\"maxShares\\\":18300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.3782941450222701,\\\"bias\\\":0.1217058549777299,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":14262.652209772305,\\\"ask\\\":14291.206068050125,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:23 AM\\\",\\\"price\\\":14276.929138911215,\\\"maxShares\\\":18300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.37810171551623695,\\\"bias\\\":0.12189828448376305,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":14152.652698365146,\\\"ask\\\":14180.98633740091,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:28 AM\\\",\\\"price\\\":14166.819517883028,\\\"maxShares\\\":18300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.3771542781685987,\\\"bias\\\":0.1228457218314013,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":14079.777410833316,\\\"ask\\\":14107.965153397545,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:32 AM\\\",\\\"price\\\":14093.871282115431,\\\"maxShares\\\":18300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.37651844302438464,\\\"bias\\\":0.12348155697561536,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":14181.289394153915,\\\"ask\\\":14209.68036391198,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:36 AM\\\",\\\"price\\\":14195.484879032949,\\\"maxShares\\\":18300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.6243718308333871,\\\"bias\\\":0.1243718308333871,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":14225.608167318202,\\\"ask\\\":14254.087863348866,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:40 AM\\\",\\\"price\\\":14239.848015333535,\\\"maxShares\\\":18300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.6247605124832379,\\\"bias\\\":0.12476051248323794,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":14133.123394003827,\\\"ask\\\":14161.417935333164,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:44 AM\\\",\\\"price\\\":14147.270664668496,\\\"maxShares\\\":18300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.6255769242128979,\\\"bias\\\":0.1255769242128979,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":14204.28807216567,\\\"ask\\\":14232.725085323158,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:48 AM\\\",\\\"price\\\":14218.506578744415,\\\"maxShares\\\":18300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.62494460528756,\\\"bias\\\":0.12494460528756002,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":14213.417763675963,\\\"ask\\\":14241.873054494132,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:53 AM\\\",\\\"price\\\":14227.645409085048,\\\"maxShares\\\":18300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.6248642981509858,\\\"bias\\\":0.12486429815098576,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":14296.014032039038,\\\"ask\\\":14324.634680751828,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:57 AM\\\",\\\"price\\\":14310.324356395433,\\\"maxShares\\\":18300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.6241386932858842,\\\"bias\\\":0.12413869328588423,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":14213.818453505439,\\\"ask\\\":14242.274546505449,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:01 AM\\\",\\\"price\\\":14228.046500005445,\\\"maxShares\\\":18300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.6248565617282323,\\\"bias\\\":0.12485656172823234,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":14203.271496838126,\\\"ask\\\":14231.706474809771,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:05 AM\\\",\\\"price\\\":14217.48898582395,\\\"maxShares\\\":18300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.6249492767584611,\\\"bias\\\":0.12494927675846113,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":14265.204876354794,\\\"ask\\\":14293.763845076222,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:07 AM\\\",\\\"price\\\":14279.484360715509,\\\"maxShares\\\":18300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.6244044353126338,\\\"bias\\\":0.12440443531263379,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":14213.882895453986,\\\"ask\\\":14242.339117466905,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:11 AM\\\",\\\"price\\\":14228.111006460445,\\\"maxShares\\\":18300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.6248536216539068,\\\"bias\\\":0.12485362165390679,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":14240.720027199024,\\\"ask\\\":14269.229977203424,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:16 AM\\\",\\\"price\\\":14254.975002201225,\\\"maxShares\\\":18300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.6246178864140841,\\\"bias\\\":0.12461788641408411,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":14339.301678392785,\\\"ask\\\":14368.008989060238,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:20 AM\\\",\\\"price\\\":14353.655333726512,\\\"maxShares\\\":18300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.6237552167606176,\\\"bias\\\":0.12375521676061763,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":14437.802376036763,\\\"ask\\\":14466.706885298096,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:24 AM\\\",\\\"price\\\":14452.25463066743,\\\"maxShares\\\":18300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.6246053261635303,\\\"bias\\\":0.12460532616353026,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":14446.26109466018,\\\"ask\\\":14475.182538293131,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:28 AM\\\",\\\"price\\\":14460.721816476656,\\\"maxShares\\\":18300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.624532323266999,\\\"bias\\\":0.12453232326699903,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":14549.246254551872,\\\"ask\\\":14578.373874681103,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:32 AM\\\",\\\"price\\\":14563.810064616488,\\\"maxShares\\\":18300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.6254200949291128,\\\"bias\\\":0.12542009492911277,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":14583.516831269659,\\\"ask\\\":14612.713061162089,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:36 AM\\\",\\\"price\\\":14598.114946215874,\\\"maxShares\\\":18300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.6251246693854097,\\\"bias\\\":0.12512466938540967,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":14691.26711099628,\\\"ask\\\":14720.67905716444,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:40 AM\\\",\\\"price\\\":14705.97308408036,\\\"maxShares\\\":18300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.6260491527101775,\\\"bias\\\":0.12604915271017747,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":14730.004851945545,\\\"ask\\\":14759.494351148636,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:45 AM\\\",\\\"price\\\":14744.749601547092,\\\"maxShares\\\":18300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.6257167879530963,\\\"bias\\\":0.12571678795309627,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0}],\\\"longTermRecords\\\":[{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":6391.774497539299,\\\"ask\\\":6404.570842879721,\\\"price\\\":6398.172670209514,\\\"maxShares\\\":18300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:27:23 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":6516.9862927358945,\\\"ask\\\":6530.033312340966,\\\"price\\\":6523.509802538432,\\\"maxShares\\\":18300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:34:14 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":6683.3856430496935,\\\"ask\\\":6696.765794487231,\\\"price\\\":6690.075718768466,\\\"maxShares\\\":18300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:41:02 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":7002.837704257487,\\\"ask\\\":7016.857399361104,\\\"price\\\":7009.574061334403,\\\"maxShares\\\":18300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:47:54 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":7592.068302983888,\\\"ask\\\":7607.267638925796,\\\"price\\\":7599.798147894442,\\\"maxShares\\\":18300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:54:48 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":8299.30630339469,\\\"ask\\\":8315.92153122931,\\\"price\\\":8307.613917311995,\\\"maxShares\\\":18300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:01:39 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":8817.268394831326,\\\"ask\\\":8834.920583809964,\\\"price\\\":8826.09448932065,\\\"maxShares\\\":18300000,\\\"investedShares\\\":54056.3,\\\"averagePrice\\\":924.9615484284503,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:08:30 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":9503.237679747064,\\\"ask\\\":9522.26318060742,\\\"price\\\":9512.011891691856,\\\"maxShares\\\":18300000,\\\"investedShares\\\":167099.84,\\\"averagePrice\\\":3065.3063481118197,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:15:23 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":9378.048638238548,\\\"ask\\\":9396.823510387174,\\\"price\\\":9386.946892286982,\\\"maxShares\\\":18300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:22:11 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":8955.530206335641,\\\"ask\\\":8973.459195737712,\\\"price\\\":8963.468842029595,\\\"maxShares\\\":18300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:29:00 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":9883.962332253293,\\\"ask\\\":9903.750044630178,\\\"price\\\":9893.856188441736,\\\"maxShares\\\":18300000,\\\"investedShares\\\":55336.6,\\\"averagePrice\\\":1093.308504398148,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:35:51 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":10823.931576656649,\\\"ask\\\":10845.601109342657,\\\"price\\\":10836.454722157345,\\\"maxShares\\\":18300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:42:40 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":11025.31679433631,\\\"ask\\\":11047.389500631274,\\\"price\\\":11036.353147483787,\\\"maxShares\\\":18300000,\\\"investedShares\\\":21226.05,\\\"averagePrice\\\":588.8993272543364,\\\"sharesShort\\\":161064.05,\\\"averageShortPrice\\\":3802.8326752645544,\\\"dateObserved\\\":\\\"7/29/2023, 7:49:32 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":10973.789649863595,\\\"ask\\\":10995.75919871217,\\\"price\\\":10984.931084038168,\\\"maxShares\\\":18300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:56:21 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":12247.79460426381,\\\"ask\\\":12272.314713581654,\\\"price\\\":12260.054658922738,\\\"maxShares\\\":18300000,\\\"investedShares\\\":144988.2,\\\"averagePrice\\\":4224.480316735779,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:03:13 AM\\\",\\\"bias\\\":null},{\\\"volatility\\\":0.0079,\\\"forecast\\\":0.6133184722409922,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":13212.036336726735,\\\"ask\\\":13238.48685992338,\\\"price\\\":13225.660107852935,\\\"maxShares\\\":18300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:09:58 AM\\\",\\\"bias\\\":0.118940908118491},{\\\"volatility\\\":0.0079,\\\"forecast\\\":0.5626346732653442,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":14995.696708552983,\\\"ask\\\":15025.718123384931,\\\"price\\\":15010.078587315347,\\\"maxShares\\\":18300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:16:47 AM\\\",\\\"bias\\\":0.12425482688110845},{\\\"volatility\\\":0.0079,\\\"forecast\\\":0.3789799168385494,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":14624.788607243201,\\\"ask\\\":14654.067463313759,\\\"price\\\":14640.337365929685,\\\"maxShares\\\":18300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:35 AM\\\",\\\"bias\\\":0.12340275590151423}],\\\"recentTicksOfPrices\\\":[14166.819517883028,14093.871282115431,14195.484879032949,14239.848015333535,14147.270664668496,14218.506578744415,14227.645409085048,14310.324356395433,14228.046500005445,14217.48898582395,14279.484360715509,14228.111006460445,14254.975002201225,14353.655333726512,14452.25463066743,14460.721816476656,14563.810064616488,14598.114946215874,14705.97308408036,14744.749601547092]}],[\\\"FLCM\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":2268.485151709999,\\\"ask\\\":2291.2839974558283,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:37 AM\\\",\\\"price\\\":2279.884574582914,\\\"maxShares\\\":11600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012199999999999999,\\\"forecast\\\":0.33168754742047263,\\\"bias\\\":0.16831245257952737,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":2261.2507819364814,\\\"ask\\\":2283.9769204484055,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:39 AM\\\",\\\"price\\\":2272.6138511924437,\\\"maxShares\\\":11600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012199999999999999,\\\"forecast\\\":0.3322260257392752,\\\"bias\\\":0.16777397426072482,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":2238.694446037892,\\\"ask\\\":2261.193887706614,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:44 AM\\\",\\\"price\\\":2249.944166872253,\\\"maxShares\\\":11600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012199999999999999,\\\"forecast\\\":0.33391646014633053,\\\"bias\\\":0.16608353985366947,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":2250.026893431501,\\\"ask\\\":2272.6402290438778,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:48 AM\\\",\\\"price\\\":2261.3335612376895,\\\"maxShares\\\":11600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012199999999999999,\\\"forecast\\\":0.3347571880900958,\\\"bias\\\":0.1652428119099042,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":2235.1128222979623,\\\"ask\\\":2257.576267748193,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:52 AM\\\",\\\"price\\\":2246.344545023078,\\\"maxShares\\\":11600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012199999999999999,\\\"forecast\\\":0.33365458466598924,\\\"bias\\\":0.16634541533401076,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":2229.022953430245,\\\"ask\\\":2251.425194168237,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:56 AM\\\",\\\"price\\\":2240.224073799241,\\\"maxShares\\\":11600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012199999999999999,\\\"forecast\\\":0.33320011569581953,\\\"bias\\\":0.16679988430418047,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":2209.090284670863,\\\"ask\\\":2231.2921970796156,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:00 AM\\\",\\\"price\\\":2220.1912408752396,\\\"maxShares\\\":11600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012199999999999999,\\\"forecast\\\":0.33470515460980566,\\\"bias\\\":0.16529484539019434,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":2231.285839059373,\\\"ask\\\":2253.710822366502,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:04 AM\\\",\\\"price\\\":2242.4983307129373,\\\"maxShares\\\":11600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012199999999999999,\\\"forecast\\\":0.33304437562016603,\\\"bias\\\":0.16695562437983397,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":2223.5997557690202,\\\"ask\\\":2245.9474920079047,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:08 AM\\\",\\\"price\\\":2234.7736238884627,\\\"maxShares\\\":11600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012199999999999999,\\\"forecast\\\":0.33246727768181317,\\\"bias\\\":0.16753272231818683,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":2246.2170695824093,\\\"ask\\\":2268.79211550786,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:13 AM\\\",\\\"price\\\":2257.504592545135,\\\"maxShares\\\":11600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012199999999999999,\\\"forecast\\\":0.33076322094010363,\\\"bias\\\":0.16923677905989637,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":2244.4461077013566,\\\"ask\\\":2267.003355014938,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:17 AM\\\",\\\"price\\\":2255.7247313581474,\\\"maxShares\\\":11600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012199999999999999,\\\"forecast\\\":0.330629686040977,\\\"bias\\\":0.16937031395902302,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":2240.5618712723076,\\\"ask\\\":2263.0800810338383,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:21 AM\\\",\\\"price\\\":2251.820976153073,\\\"maxShares\\\":11600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012199999999999999,\\\"forecast\\\":0.3303360657879885,\\\"bias\\\":0.16966393421201148,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":2265.8832937526113,\\\"ask\\\":2288.6559901722353,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:25 AM\\\",\\\"price\\\":2277.2696419624235,\\\"maxShares\\\":11600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012199999999999999,\\\"forecast\\\":0.3284186306066904,\\\"bias\\\":0.1715813693933096,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":2240.6214729720764,\\\"ask\\\":2263.1402817456647,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:29 AM\\\",\\\"price\\\":2251.8808773588707,\\\"maxShares\\\":11600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012199999999999999,\\\"forecast\\\":0.3303531197005324,\\\"bias\\\":0.16964688029946762,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":2260.137332258087,\\\"ask\\\":2282.852280320982,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:33 AM\\\",\\\"price\\\":2271.4948062895346,\\\"maxShares\\\":11600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012199999999999999,\\\"forecast\\\":0.3318307475302092,\\\"bias\\\":0.1681692524697908,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":2266.807345622289,\\\"ask\\\":2289.5893289953774,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:38 AM\\\",\\\"price\\\":2278.1983373088333,\\\"maxShares\\\":11600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012199999999999999,\\\"forecast\\\":0.3313344541654601,\\\"bias\\\":0.1686655458345399,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":2257.710807142115,\\\"ask\\\":2280.4013680179146,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:42 AM\\\",\\\"price\\\":2269.0560875800147,\\\"maxShares\\\":11600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012199999999999999,\\\"forecast\\\":0.3306548841234911,\\\"bias\\\":0.1693451158765089,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":2284.668718540552,\\\"ask\\\":2307.630213199251,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:46 AM\\\",\\\"price\\\":2296.1494658699016,\\\"maxShares\\\":11600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012199999999999999,\\\"forecast\\\":0.33267692814042865,\\\"bias\\\":0.16732307185957135,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":2276.420530307141,\\\"ask\\\":2299.2991286016845,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:50 AM\\\",\\\"price\\\":2287.8598294544126,\\\"maxShares\\\":11600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012199999999999999,\\\"forecast\\\":0.333283192305646,\\\"bias\\\":0.16671680769435399,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":2258.381295675462,\\\"ask\\\":2281.0785951294865,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:54 AM\\\",\\\"price\\\":2269.729945402474,\\\"maxShares\\\":11600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012199999999999999,\\\"forecast\\\":0.33461487337155005,\\\"bias\\\":0.16538512662844995,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":2277.477160137602,\\\"ask\\\":2300.3663778274267,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:58 AM\\\",\\\"price\\\":2288.9217689825145,\\\"maxShares\\\":11600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012199999999999999,\\\"forecast\\\":0.3332164505418011,\\\"bias\\\":0.1667835494581989,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":2258.164775116866,\\\"ask\\\":2280.8598984848745,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:03 AM\\\",\\\"price\\\":2269.5123368008703,\\\"maxShares\\\":11600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012199999999999999,\\\"forecast\\\":0.33179007627640006,\\\"bias\\\":0.16820992372359994,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":2283.3236502398336,\\\"ask\\\":2306.271626624153,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:07 AM\\\",\\\"price\\\":2294.7976384319936,\\\"maxShares\\\":11600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012199999999999999,\\\"forecast\\\":0.32991600025146206,\\\"bias\\\":0.17008399974853794,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":2285.4398925871765,\\\"ask\\\":2308.4091377388063,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:11 AM\\\",\\\"price\\\":2296.9245151629916,\\\"maxShares\\\":11600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012199999999999999,\\\"forecast\\\":0.32975836208096637,\\\"bias\\\":0.17024163791903363,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":2305.002415590494,\\\"ask\\\":2328.1682690135135,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:15 AM\\\",\\\"price\\\":2316.585342302004,\\\"maxShares\\\":11600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012199999999999999,\\\"forecast\\\":0.33121556774571187,\\\"bias\\\":0.16878443225428813,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":2318.799998636554,\\\"ask\\\":2342.1045212359163,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:19 AM\\\",\\\"price\\\":2330.4522599362354,\\\"maxShares\\\":11600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012199999999999999,\\\"forecast\\\":0.33020523595379747,\\\"bias\\\":0.16979476404620253,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":2313.151967289956,\\\"ask\\\":2336.3997257551814,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:23 AM\\\",\\\"price\\\":2324.775846522569,\\\"maxShares\\\":11600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012199999999999999,\\\"forecast\\\":0.33061982443020654,\\\"bias\\\":0.16938017556979346,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":2285.716771672029,\\\"ask\\\":2308.6887995280294,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:28 AM\\\",\\\"price\\\":2297.2027856000295,\\\"maxShares\\\":11600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012199999999999999,\\\"forecast\\\":0.33265287520366554,\\\"bias\\\":0.16734712479633446,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":2267.591602380561,\\\"ask\\\":2290.3814677311193,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:32 AM\\\",\\\"price\\\":2278.9865350558402,\\\"maxShares\\\":11600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012199999999999999,\\\"forecast\\\":0.33399050362149424,\\\"bias\\\":0.16600949637850576,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":2242.6220730689984,\\\"ask\\\":2265.1609883762244,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:36 AM\\\",\\\"price\\\":2253.8915307226116,\\\"maxShares\\\":11600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012199999999999999,\\\"forecast\\\":0.3321421409233834,\\\"bias\\\":0.1678578590766166,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":2231.8507291148676,\\\"ask\\\":2254.281389708987,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:40 AM\\\",\\\"price\\\":2243.066059411927,\\\"maxShares\\\":11600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012199999999999999,\\\"forecast\\\":0.33295225546730506,\\\"bias\\\":0.16704774453269494,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":2209.5220432542555,\\\"ask\\\":2231.728294945253,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:44 AM\\\",\\\"price\\\":2220.625169099754,\\\"maxShares\\\":11600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012199999999999999,\\\"forecast\\\":0.33464038373141636,\\\"bias\\\":0.16535961626858364,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":2226.703398477413,\\\"ask\\\":2249.0823271053264,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:48 AM\\\",\\\"price\\\":2237.8928627913697,\\\"maxShares\\\":11600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012199999999999999,\\\"forecast\\\":0.33592622847569004,\\\"bias\\\":0.16407377152430996,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":2224.495389265768,\\\"ask\\\":2246.8521268463282,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:53 AM\\\",\\\"price\\\":2235.6737580560484,\\\"maxShares\\\":11600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012199999999999999,\\\"forecast\\\":0.3360890862638712,\\\"bias\\\":0.16391091373612882,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":2204.7099314705583,\\\"ask\\\":2226.867820229056,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:57 AM\\\",\\\"price\\\":2215.7888758498075,\\\"maxShares\\\":11600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012199999999999999,\\\"forecast\\\":0.33756005186329463,\\\"bias\\\":0.16243994813670537,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":2185.1952850589423,\\\"ask\\\":2207.157046717826,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:01 AM\\\",\\\"price\\\":2196.1761658883843,\\\"maxShares\\\":11600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012199999999999999,\\\"forecast\\\":0.3390107039732838,\\\"bias\\\":0.1609892960267162,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":2187.701173697884,\\\"ask\\\":2209.688120167209,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:05 AM\\\",\\\"price\\\":2198.6946469325467,\\\"maxShares\\\":11600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012199999999999999,\\\"forecast\\\":0.3388260883232945,\\\"bias\\\":0.16117391167670547,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":2202.4330183063894,\\\"ask\\\":2224.5680235154987,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:07 AM\\\",\\\"price\\\":2213.500520910944,\\\"maxShares\\\":11600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012199999999999999,\\\"forecast\\\":0.3377407531548937,\\\"bias\\\":0.1622592468451063,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":2190.2203314057924,\\\"ask\\\":2212.232596043036,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:11 AM\\\",\\\"price\\\":2201.2264637244143,\\\"maxShares\\\":11600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012199999999999999,\\\"forecast\\\":0.3368359942363359,\\\"bias\\\":0.16316400576366408,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":2183.852677625866,\\\"ask\\\":2205.8009457427083,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:16 AM\\\",\\\"price\\\":2194.8268116842873,\\\"maxShares\\\":11600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012199999999999999,\\\"forecast\\\":0.33636024241081514,\\\"bias\\\":0.16363975758918486,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":2160.7532060402023,\\\"ask\\\":2182.4693186637214,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:20 AM\\\",\\\"price\\\":2171.611262351962,\\\"maxShares\\\":11600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012199999999999999,\\\"forecast\\\":0.33461085616894837,\\\"bias\\\":0.16538914383105163,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":2183.675031969208,\\\"ask\\\":2205.6215147025664,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:24 AM\\\",\\\"price\\\":2194.648273335887,\\\"maxShares\\\":11600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012199999999999999,\\\"forecast\\\":0.3363653467580842,\\\"bias\\\":0.16363465324191578,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":2185.650746679516,\\\"ask\\\":2207.617085842124,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:28 AM\\\",\\\"price\\\":2196.63391626082,\\\"maxShares\\\":11600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012199999999999999,\\\"forecast\\\":0.33621729570342024,\\\"bias\\\":0.16378270429657976,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":2161.8507099696894,\\\"ask\\\":2183.577852783455,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:32 AM\\\",\\\"price\\\":2172.714281376572,\\\"maxShares\\\":11600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012199999999999999,\\\"forecast\\\":0.3380203963323013,\\\"bias\\\":0.1619796036676987,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":2154.0152871175933,\\\"ask\\\":2175.663681962996,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:36 AM\\\",\\\"price\\\":2164.839484540295,\\\"maxShares\\\":11600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012199999999999999,\\\"forecast\\\":0.33743118106732994,\\\"bias\\\":0.16256881893267006,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":2178.5927845634737,\\\"ask\\\":2200.488189433458,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:40 AM\\\",\\\"price\\\":2189.540486998466,\\\"maxShares\\\":11600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012199999999999999,\\\"forecast\\\":0.3392861051043103,\\\"bias\\\":0.1607138948956897,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":2169.757531779266,\\\"ask\\\":2191.5641401388566,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:45 AM\\\",\\\"price\\\":2180.6608359590614,\\\"maxShares\\\":11600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.012199999999999999,\\\"forecast\\\":0.3386316781157916,\\\"bias\\\":0.1613683218842084,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0}],\\\"longTermRecords\\\":[{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":3038.3627765586634,\\\"ask\\\":3068.8990858708084,\\\"price\\\":3053.630931214737,\\\"maxShares\\\":11600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:27:23 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":3296.205348265239,\\\"ask\\\":3329.3330402076035,\\\"price\\\":3312.769194236421,\\\"maxShares\\\":11600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:34:14 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":3831.7115817488943,\\\"ask\\\":3870.221245887074,\\\"price\\\":3850.9664138179874,\\\"maxShares\\\":11600000,\\\"investedShares\\\":478631.16,\\\"averagePrice\\\":1353.8608209367596,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:41:02 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":3678.4425828315207,\\\"ask\\\":3715.4118550207827,\\\"price\\\":3696.8536070463147,\\\"maxShares\\\":11600000,\\\"investedShares\\\":217129.34,\\\"averagePrice\\\":716.4579760025632,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:47:54 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":3612.6902595444135,\\\"ask\\\":3648.998704363953,\\\"price\\\":3630.7717662798213,\\\"maxShares\\\":11600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":197742.3,\\\"averageShortPrice\\\":638.6441985224658,\\\"dateObserved\\\":\\\"7/29/2023, 6:54:48 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":3054.671642925352,\\\"ask\\\":3085.371860442191,\\\"price\\\":3070.0217516837733,\\\"maxShares\\\":11600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":73507,\\\"averageShortPrice\\\":108.83315407147732,\\\"dateObserved\\\":\\\"7/29/2023, 7:01:39 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":2568.352248849165,\\\"ask\\\":2594.164834264734,\\\"price\\\":2581.2585415569515,\\\"maxShares\\\":11600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":1245210.75,\\\"averageShortPrice\\\":1749.2003333217563,\\\"dateObserved\\\":\\\"7/29/2023, 7:08:30 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":2488.4811933946494,\\\"ask\\\":2513.491054634796,\\\"price\\\":2501.293549797515,\\\"maxShares\\\":11600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:15:23 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":2272.0445654155433,\\\"ask\\\":2294.8791841634384,\\\"price\\\":2283.3265707791543,\\\"maxShares\\\":11600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":461260.2,\\\"averageShortPrice\\\":433.59468897882164,\\\"dateObserved\\\":\\\"7/29/2023, 7:22:11 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":2061.8654587049946,\\\"ask\\\":2082.587724621629,\\\"price\\\":2072.345114332431,\\\"maxShares\\\":11600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:29:00 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":1816.1742272447573,\\\"ask\\\":1834.42723455375,\\\"price\\\":1825.3007308992535,\\\"maxShares\\\":11600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":803010.36,\\\"averageShortPrice\\\":598.37328164027,\\\"dateObserved\\\":\\\"7/29/2023, 7:35:51 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":1646.2150432764483,\\\"ask\\\":1662.7599180832458,\\\"price\\\":1654.348593760305,\\\"maxShares\\\":11600000,\\\"investedShares\\\":358852.78,\\\"averagePrice\\\":235.47264429117976,\\\"sharesShort\\\":105823.12,\\\"averageShortPrice\\\":119.5524596822832,\\\"dateObserved\\\":\\\"7/29/2023, 7:42:40 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":1870.4403457602398,\\\"ask\\\":1889.2387411950172,\\\"price\\\":1879.839543477628,\\\"maxShares\\\":11600000,\\\"investedShares\\\":138020.3,\\\"averagePrice\\\":90.56640165045376,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:49:32 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":1851.6743954792046,\\\"ask\\\":1870.2841883985927,\\\"price\\\":1860.9371740123847,\\\"maxShares\\\":11600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":236449.84,\\\"averageShortPrice\\\":135.335256104295,\\\"dateObserved\\\":\\\"7/29/2023, 7:56:21 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":1740.6807293482345,\\\"ask\\\":1758.1750080351503,\\\"price\\\":1749.4278686916916,\\\"maxShares\\\":11600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":603651.93,\\\"averageShortPrice\\\":365.2766708026226,\\\"dateObserved\\\":\\\"7/29/2023, 8:03:13 AM\\\",\\\"bias\\\":null},{\\\"volatility\\\":0.012199999999999999,\\\"forecast\\\":0.6580723965289695,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":1961.2645688364034,\\\"ask\\\":1980.975770533251,\\\"price\\\":1971.2661890010497,\\\"maxShares\\\":11600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:09:58 AM\\\",\\\"bias\\\":0.16670542523586862},{\\\"volatility\\\":0.012199999999999999,\\\"forecast\\\":0.5848011672845576,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":2564.648679833225,\\\"ask\\\":2590.424043449641,\\\"price\\\":2577.7006280335204,\\\"maxShares\\\":11600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:16:47 AM\\\",\\\"bias\\\":0.16570411921130174},{\\\"volatility\\\":0.012199999999999999,\\\"forecast\\\":0.33160465298760433,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":2436.911424970806,\\\"ask\\\":2461.402997081064,\\\"price\\\":2449.0141087663646,\\\"maxShares\\\":11600000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:35 AM\\\",\\\"bias\\\":0.17488126872195459}],\\\"recentTicksOfPrices\\\":[2297.2027856000295,2278.9865350558402,2253.8915307226116,2243.066059411927,2220.625169099754,2237.8928627913697,2235.6737580560484,2215.7888758498075,2196.1761658883843,2198.6946469325467,2213.500520910944,2201.2264637244143,2194.8268116842873,2171.611262351962,2194.648273335887,2196.63391626082,2172.714281376572,2164.839484540295,2189.540486998466,2180.6608359590614]}],[\\\"STM\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":119018.65765299012,\\\"ask\\\":121180.44961843292,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:37 AM\\\",\\\"price\\\":120099.55363571152,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5754521849057137,\\\"bias\\\":0.0754521849057137,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":119283.95085163017,\\\"ask\\\":121450.56146245694,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:39 AM\\\",\\\"price\\\":120367.25615704356,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0085,\\\"forecast\\\":0.575284001598384,\\\"bias\\\":0.075284001598384,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":120121.31592341096,\\\"ask\\\":122303.1359906374,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:44 AM\\\",\\\"price\\\":121212.22595702419,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5758124900744305,\\\"bias\\\":0.07581249007443047,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":119699.1539941945,\\\"ask\\\":121873.30613536049,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:48 AM\\\",\\\"price\\\":120786.2300647775,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5755451101807507,\\\"bias\\\":0.07554511018075072,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":119145.25242321233,\\\"ask\\\":121309.34378912335,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:52 AM\\\",\\\"price\\\":120227.29810616784,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5758963164131274,\\\"bias\\\":0.07589631641312744,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":118918.89051611857,\\\"ask\\\":121078.87036403999,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:56 AM\\\",\\\"price\\\":119998.88044007929,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5760407849231356,\\\"bias\\\":0.0760407849231356,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":119666.47783813336,\\\"ask\\\":121840.03646687846,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:00 AM\\\",\\\"price\\\":120753.25715250592,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5755627521520773,\\\"bias\\\":0.0755627521520773,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":120504.16938882234,\\\"ask\\\":122692.94340395734,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:04 AM\\\",\\\"price\\\":121598.55639638985,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5760917079646668,\\\"bias\\\":0.0760917079646668,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":120794.37756063006,\\\"ask\\\":122988.42276354764,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:08 AM\\\",\\\"price\\\":121891.40016208886,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5759084575794714,\\\"bias\\\":0.0759084575794714,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":121650.40999791956,\\\"ask\\\":123860.00372139335,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:13 AM\\\",\\\"price\\\":122755.20685965646,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5764463973682669,\\\"bias\\\":0.07644639736826686,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":121717.28636971026,\\\"ask\\\":123928.09480023979,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:17 AM\\\",\\\"price\\\":122822.69058497503,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5764043715527144,\\\"bias\\\":0.0764043715527144,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":121570.44925824495,\\\"ask\\\":123778.59061712325,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:21 AM\\\",\\\"price\\\":122674.5199376841,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5764966554694932,\\\"bias\\\":0.07649665546949325,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":122527.68360870662,\\\"ask\\\":124753.21166618059,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:25 AM\\\",\\\"price\\\":123640.4476374436,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5758943279568649,\\\"bias\\\":0.0758943279568649,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":121572.71004572471,\\\"ask\\\":123780.89246835138,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:29 AM\\\",\\\"price\\\":122676.80125703805,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5764904903419251,\\\"bias\\\":0.07649049034192512,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":120839.40133405145,\\\"ask\\\":123034.26432498275,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:33 AM\\\",\\\"price\\\":121936.83282951711,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5769546695939625,\\\"bias\\\":0.07695466959396247,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":121087.86308145303,\\\"ask\\\":123287.23900018778,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:38 AM\\\",\\\"price\\\":122187.55104082041,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5767964406432483,\\\"bias\\\":0.07679644064324831,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":121427.77591289578,\\\"ask\\\":123633.32582856895,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:42 AM\\\",\\\"price\\\":122530.55087073238,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5765808608574673,\\\"bias\\\":0.07658086085746729,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":122437.94730518517,\\\"ask\\\":124661.84543989085,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:46 AM\\\",\\\"price\\\":123549.89637253802,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5759437760203819,\\\"bias\\\":0.07594377602038194,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":122747.03463646905,\\\"ask\\\":124976.5468700275,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:50 AM\\\",\\\"price\\\":123861.79075324828,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5761354915756849,\\\"bias\\\":0.07613549157568489,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":123430.14510874376,\\\"ask\\\":125672.06499971992,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:54 AM\\\",\\\"price\\\":124551.10505423184,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5765591999916246,\\\"bias\\\":0.07655919999162464,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":124157.29239867289,\\\"ask\\\":126412.41980853776,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:58 AM\\\",\\\"price\\\":125284.85610360533,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5770102228332814,\\\"bias\\\":0.0770102228332814,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":124897.08777141127,\\\"ask\\\":127165.65243325324,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:03 AM\\\",\\\"price\\\":126031.37010233226,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5774690908176336,\\\"bias\\\":0.07746909081763365,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":125866.58595103463,\\\"ask\\\":128152.76006518057,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:07 AM\\\",\\\"price\\\":127009.67300810761,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5780704350432271,\\\"bias\\\":0.07807043504322708,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":125785.36143680643,\\\"ask\\\":128070.06023182409,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:11 AM\\\",\\\"price\\\":126927.71083431526,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0085,\\\"forecast\\\":0.578120848168328,\\\"bias\\\":0.07812084816832798,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":126535.50477861347,\\\"ask\\\":128833.82878064679,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:15 AM\\\",\\\"price\\\":127684.66677963013,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5776549606163871,\\\"bias\\\":0.0776549606163871,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":126009.97702161384,\\\"ask\\\":128298.75561534648,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:19 AM\\\",\\\"price\\\":127154.36631848017,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5779788225695214,\\\"bias\\\":0.07797882256952138,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":126224.34354284407,\\\"ask\\\":128517.01577672013,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:23 AM\\\",\\\"price\\\":127370.67965978211,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5778461660186756,\\\"bias\\\":0.07784616601867556,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":125177.5257296843,\\\"ask\\\":127451.18411831629,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:28 AM\\\",\\\"price\\\":126314.3549240003,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5784971674887838,\\\"bias\\\":0.07849716748878377,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":125874.6379399356,\\\"ask\\\":128160.95830615037,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:32 AM\\\",\\\"price\\\":127017.79812304299,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5780600176601098,\\\"bias\\\":0.07806001766010984,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":124905.70076502314,\\\"ask\\\":127174.42186872687,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:36 AM\\\",\\\"price\\\":126040.06131687501,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5786655564987853,\\\"bias\\\":0.07866555649878526,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":124487.11135771936,\\\"ask\\\":126748.22942476167,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:40 AM\\\",\\\"price\\\":125617.67039124052,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5789300703774585,\\\"bias\\\":0.07893007037745847,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":125363.60407041092,\\\"ask\\\":127640.64228763331,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:44 AM\\\",\\\"price\\\":126502.12317902212,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5783743370911484,\\\"bias\\\":0.07837433709114838,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":124688.07646902793,\\\"ask\\\":126952.84476008998,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:48 AM\\\",\\\"price\\\":125820.46061455896,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5787989488859924,\\\"bias\\\":0.07879894888599237,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":124774.30547729963,\\\"ask\\\":127040.63998647357,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:53 AM\\\",\\\"price\\\":125907.4727318866,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5787444548605194,\\\"bias\\\":0.0787444548605194,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":123999.00164881015,\\\"ask\\\":126251.25394919215,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:57 AM\\\",\\\"price\\\":125125.12779900116,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5782521051116191,\\\"bias\\\":0.07825210511161906,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":123232.25142762321,\\\"ask\\\":125470.57688241352,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:01 AM\\\",\\\"price\\\":124351.41415501837,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5787389891716568,\\\"bias\\\":0.07873898917165678,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":123330.71033011371,\\\"ask\\\":125570.82414034785,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:05 AM\\\",\\\"price\\\":124450.76723523079,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5786760790619474,\\\"bias\\\":0.0786760790619474,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":123909.33834594654,\\\"ask\\\":126159.9620495056,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:07 AM\\\",\\\"price\\\":125034.65019772608,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0085,\\\"forecast\\\":0.57830695621007,\\\"bias\\\":0.07830695621007,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":123429.82288144168,\\\"ask\\\":125671.7369196515,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:11 AM\\\",\\\"price\\\":124550.7799005466,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0085,\\\"forecast\\\":0.578002739647132,\\\"bias\\\":0.078002739647132,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":123179.5844931045,\\\"ask\\\":125416.95333354433,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:16 AM\\\",\\\"price\\\":124298.26891332441,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5781612016190205,\\\"bias\\\":0.07816120161902051,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":124097.06048582685,\\\"ask\\\":126351.09387507496,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:20 AM\\\",\\\"price\\\":125224.07718045091,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5775790351314253,\\\"bias\\\":0.07757903513142528,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":123186.58854235674,\\\"ask\\\":125424.08460064374,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:24 AM\\\",\\\"price\\\":124305.33657150024,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5781524216966711,\\\"bias\\\":0.07815242169667114,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":123108.98437054438,\\\"ask\\\":125345.07086768847,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:28 AM\\\",\\\"price\\\":124227.02761911643,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5782016866141904,\\\"bias\\\":0.07820168661419036,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":124053.26432556497,\\\"ask\\\":126306.50222451569,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:32 AM\\\",\\\"price\\\":125179.88327504034,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5788015151766316,\\\"bias\\\":0.07880151517663159,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":124367.66317605278,\\\"ask\\\":126626.6116494826,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:36 AM\\\",\\\"price\\\":125497.1374127677,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5790012286297432,\\\"bias\\\":0.07900122862974324,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":125356.3424902913,\\\"ask\\\":127633.24881201203,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:40 AM\\\",\\\"price\\\":126494.79565115167,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5783731965629585,\\\"bias\\\":0.07837319656295849,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":125711.9846036234,\\\"ask\\\":127995.35062064177,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:45 AM\\\",\\\"price\\\":126853.66761213259,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5785955451789162,\\\"bias\\\":0.0785955451789162,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0}],\\\"longTermRecords\\\":[{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":93216.45194368588,\\\"ask\\\":94909.5862877689,\\\"price\\\":94063.0191157274,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:27:23 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":92237.84232412332,\\\"ask\\\":93913.20172052522,\\\"price\\\":93075.52202232426,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:34:14 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":90774.59794408649,\\\"ask\\\":92423.37974327273,\\\"price\\\":91598.98884367963,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:41:02 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":94543.70919207549,\\\"ask\\\":96260.95113501925,\\\"price\\\":95406.31268687757,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:47:54 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":96195.86110360053,\\\"ask\\\":97943.11186027538,\\\"price\\\":97055.48413581189,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:54:48 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":98024.46049500158,\\\"ask\\\":99804.92496413374,\\\"price\\\":98914.69272956764,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:01:39 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":100985.57192112613,\\\"ask\\\":102819.82045248862,\\\"price\\\":101902.69618680736,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:08:30 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":103695.67742449426,\\\"ask\\\":105579.1508792277,\\\"price\\\":104634.27613094018,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":520.9,\\\"averageShortPrice\\\":959.8798201009226,\\\"dateObserved\\\":\\\"7/29/2023, 7:15:23 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":94050.59189500824,\\\"ask\\\":95758.87711610823,\\\"price\\\":94909.80847532487,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":8334.4,\\\"averageShortPrice\\\":15358.077121614764,\\\"dateObserved\\\":\\\"7/29/2023, 7:22:11 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":98582.81449398394,\\\"ask\\\":100373.42060991908,\\\"price\\\":99465.93294341382,\\\"maxShares\\\":10500000,\\\"investedShares\\\":9565.6,\\\"averagePrice\\\":20908.245895172513,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:29:00 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":106107.47378421942,\\\"ask\\\":108034.7538327723,\\\"price\\\":107071.11380849587,\\\"maxShares\\\":10500000,\\\"investedShares\\\":5371.66,\\\"averagePrice\\\":13415.641363085697,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:35:51 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":113661.37379130878,\\\"ask\\\":115725.85888539914,\\\"price\\\":114686.66211389679,\\\"maxShares\\\":10500000,\\\"investedShares\\\":3090.57,\\\"averagePrice\\\":7927.371741497913,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:42:40 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":113389.25638804166,\\\"ask\\\":115448.79888550345,\\\"price\\\":114419.02763677253,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:49:32 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":116657.57436089459,\\\"ask\\\":118776.48085786338,\\\"price\\\":117695.42603239119,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:56:21 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":116891.6673474794,\\\"ask\\\":119014.82578567766,\\\"price\\\":117953.2465665786,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:03:13 AM\\\",\\\"bias\\\":null},{\\\"volatility\\\":0.0085,\\\"forecast\\\":0.43414252069756437,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":109012.7883467529,\\\"ask\\\":110992.8389928089,\\\"price\\\":110005.90031794025,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:09:58 AM\\\",\\\"bias\\\":0.06781881840407505},{\\\"volatility\\\":0.0085,\\\"forecast\\\":0.46416962488290814,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":101999.71475772878,\\\"ask\\\":103852.38364333834,\\\"price\\\":102921.27112236086,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:16:47 AM\\\",\\\"bias\\\":0.06839606401519982},{\\\"volatility\\\":0.0085,\\\"forecast\\\":0.5709433959018808,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":113228.3993040129,\\\"ask\\\":115285.02007845505,\\\"price\\\":114264.96139226928,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:35 AM\\\",\\\"bias\\\":0.07581102102394854}],\\\"recentTicksOfPrices\\\":[126314.3549240003,127017.79812304299,126040.06131687501,125617.67039124052,126502.12317902212,125820.46061455896,125907.4727318866,125125.12779900116,124351.41415501837,124450.76723523079,125034.65019772608,124550.7799005466,124298.26891332441,125224.07718045091,124305.33657150024,124227.02761911643,125179.88327504034,125497.1374127677,126494.79565115167,126853.66761213259]}],[\\\"DCOMM\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":9208.505188124995,\\\"ask\\\":9245.413024550346,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:37 AM\\\",\\\"price\\\":9226.95910633767,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.5999284223145023,\\\"bias\\\":0.09992842231450227,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":9223.476952003126,\\\"ask\\\":9260.44479549813,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:39 AM\\\",\\\"price\\\":9241.960873750628,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.5997659524333389,\\\"bias\\\":0.09976595243333886,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":9270.705028406004,\\\"ask\\\":9307.862162788393,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:44 AM\\\",\\\"price\\\":9289.283595597199,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.5992551088492495,\\\"bias\\\":0.09925510884924948,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":9294.554211721728,\\\"ask\\\":9331.806934013197,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:48 AM\\\",\\\"price\\\":9313.180572867463,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.5995104457711681,\\\"bias\\\":0.09951044577116808,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":9326.07210523052,\\\"ask\\\":9363.45115174447,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:52 AM\\\",\\\"price\\\":9344.761628487495,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.5991730052052856,\\\"bias\\\":0.0991730052052856,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":9313.141422462584,\\\"ask\\\":9350.468642592696,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:56 AM\\\",\\\"price\\\":9331.80503252764,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.5993107003836665,\\\"bias\\\":0.09931070038366652,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":9270.631222441936,\\\"ask\\\":9307.788061008838,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:00 AM\\\",\\\"price\\\":9289.209641725387,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.5997660866066974,\\\"bias\\\":0.09976608660669739,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":9223.535462179363,\\\"ask\\\":9260.50354018409,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:04 AM\\\",\\\"price\\\":9242.019501181727,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.5992566767696094,\\\"bias\\\":0.09925667676960936,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":9239.737802476686,\\\"ask\\\":9276.770819721083,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:08 AM\\\",\\\"price\\\":9258.254311098885,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.5994310340386194,\\\"bias\\\":0.09943103403861941,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":9287.49907753165,\\\"ask\\\":9324.723522732178,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:13 AM\\\",\\\"price\\\":9306.111300131914,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.5999450045719007,\\\"bias\\\":0.0999450045719007,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":9291.223257621541,\\\"ask\\\":9328.462629395575,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:17 AM\\\",\\\"price\\\":9309.842943508558,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.5999850813668488,\\\"bias\\\":0.0999850813668488,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":9283.044807271823,\\\"ask\\\":9320.25139968574,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:21 AM\\\",\\\"price\\\":9301.648103478781,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6000731691700047,\\\"bias\\\":0.10007316917000475,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":9336.360304493006,\\\"ask\\\":9373.78058627454,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:25 AM\\\",\\\"price\\\":9355.070445383773,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.5994984169326117,\\\"bias\\\":0.09949841693261174,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":9283.17099345385,\\\"ask\\\":9320.378091624005,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:29 AM\\\",\\\"price\\\":9301.774542538928,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6000685079338295,\\\"bias\\\":0.10006850793382949,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":9324.262058059923,\\\"ask\\\":9361.633849875796,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:33 AM\\\",\\\"price\\\":9342.94795396786,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6005114515710244,\\\"bias\\\":0.10051145157102437,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":9338.24627668137,\\\"ask\\\":9375.674117469673,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:38 AM\\\",\\\"price\\\":9356.960197075521,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6006621953085959,\\\"bias\\\":0.10066219530859588,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":9357.367031441256,\\\"ask\\\":9394.87150852118,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:42 AM\\\",\\\"price\\\":9376.119269981218,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6004560819664264,\\\"bias\\\":0.10045608196642641,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":9414.148085857925,\\\"ask\\\":9451.88014231427,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:46 AM\\\",\\\"price\\\":9433.014114086098,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.5998465085428922,\\\"bias\\\":0.09984650854289223,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":9431.482890599445,\\\"ask\\\":9469.284425231106,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:50 AM\\\",\\\"price\\\":9450.383657915276,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6000303615813115,\\\"bias\\\":0.10003036158131151,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":9393.352319513553,\\\"ask\\\":9431.001026204991,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:54 AM\\\",\\\"price\\\":9412.176672859272,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6004364162765135,\\\"bias\\\":0.10043641627651345,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":9433.716350038521,\\\"ask\\\":9471.52683641142,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:58 AM\\\",\\\"price\\\":9452.62159322497,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6000048324889042,\\\"bias\\\":0.10000483248890424,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":9474.71739781822,\\\"ask\\\":9512.692217047954,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:03 AM\\\",\\\"price\\\":9493.704807433087,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.5995701890501006,\\\"bias\\\":0.09957018905010062,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":9528.362949375358,\\\"ask\\\":9566.55278083578,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:07 AM\\\",\\\"price\\\":9547.457865105569,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6001339523251373,\\\"bias\\\":0.10013395232513733,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":9532.850900060743,\\\"ask\\\":9571.058719299463,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:11 AM\\\",\\\"price\\\":9551.954809680103,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6001811163807421,\\\"bias\\\":0.10018111638074212,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":9574.318578396473,\\\"ask\\\":9612.692600754774,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:15 AM\\\",\\\"price\\\":9593.505589575623,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.5997453308688379,\\\"bias\\\":0.09974533086883786,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":9545.281545709604,\\\"ask\\\":9583.539187175375,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:19 AM\\\",\\\"price\\\":9564.41036644249,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6000487591563044,\\\"bias\\\":0.1000487591563044,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":9533.451812035652,\\\"ask\\\":9571.6620397392,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:23 AM\\\",\\\"price\\\":9552.556925887426,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6001729062332041,\\\"bias\\\":0.10017290623320407,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":9591.604217064198,\\\"ask\\\":9630.047520539405,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:28 AM\\\",\\\"price\\\":9610.825868801801,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6007839436130549,\\\"bias\\\":0.10078394361305487,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":9630.56613617975,\\\"ask\\\":9669.165599651413,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:32 AM\\\",\\\"price\\\":9649.865867915581,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.6011933366374472,\\\"bias\\\":0.10119333663744723,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":9685.05878766982,\\\"ask\\\":9723.876658562283,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:36 AM\\\",\\\"price\\\":9704.467723116051,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.3982340809049353,\\\"bias\\\":0.10176591909506472,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":9708.81290347883,\\\"ask\\\":9747.725981248286,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:40 AM\\\",\\\"price\\\":9728.269442363558,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.397984484131122,\\\"bias\\\":0.10201551586887803,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":9659.206455302661,\\\"ask\\\":9697.92070963253,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:44 AM\\\",\\\"price\\\":9678.563582467596,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.3985084016417925,\\\"bias\\\":0.10149159835820748,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":9621.185805155219,\\\"ask\\\":9659.747672109748,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:48 AM\\\",\\\"price\\\":9640.466738632484,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.39890947242789193,\\\"bias\\\":0.10109052757210807,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":9616.33503367415,\\\"ask\\\":9654.877458658815,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:53 AM\\\",\\\"price\\\":9635.606246166482,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.3989604655605601,\\\"bias\\\":0.10103953443943992,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":9660.19174776032,\\\"ask\\\":9698.909951158155,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:57 AM\\\",\\\"price\\\":9679.550849459238,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.39942127125813537,\\\"bias\\\":0.10057872874186463,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":9616.548054293395,\\\"ask\\\":9655.091333068118,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:01 AM\\\",\\\"price\\\":9635.819693680756,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.39987773725630016,\\\"bias\\\":0.10012226274369984,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":9622.152369806645,\\\"ask\\\":9660.718110767793,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:05 AM\\\",\\\"price\\\":9641.43524028722,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.3999360863382314,\\\"bias\\\":0.10006391366176859,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":9655.080966134028,\\\"ask\\\":9693.77868543717,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:07 AM\\\",\\\"price\\\":9674.429825785599,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.40027852159525834,\\\"bias\\\":0.09972147840474166,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":9682.440657621879,\\\"ask\\\":9721.248035007138,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:11 AM\\\",\\\"price\\\":9701.844346314509,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.40056110326323563,\\\"bias\\\":0.09943889673676437,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":9668.1144992323,\\\"ask\\\":9706.864457145055,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:16 AM\\\",\\\"price\\\":9687.489478188678,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.40070845126835586,\\\"bias\\\":0.09929154873164414,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":9720.64003888958,\\\"ask\\\":9759.600520007372,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:20 AM\\\",\\\"price\\\":9740.120279448476,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.40124788863031,\\\"bias\\\":0.09875211136968998,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":9773.044802239205,\\\"ask\\\":9812.21532248866,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:24 AM\\\",\\\"price\\\":9792.630062363933,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.4017802693177853,\\\"bias\\\":0.09821973068221468,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":9768.553230597096,\\\"ask\\\":9807.7057485554,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:28 AM\\\",\\\"price\\\":9788.129489576248,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.4017351079774503,\\\"bias\\\":0.09826489202254968,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":9823.20623402633,\\\"ask\\\":9862.577802098578,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:32 AM\\\",\\\"price\\\":9842.892018062454,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.4011853365472389,\\\"bias\\\":0.09881466345276108,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":9841.365520439887,\\\"ask\\\":9880.809871223215,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:36 AM\\\",\\\"price\\\":9861.087695831551,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.40100266668031886,\\\"bias\\\":0.09899733331968114,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":9784.628687888562,\\\"ask\\\":9823.845636537415,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:40 AM\\\",\\\"price\\\":9804.237162212989,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.40042862393401213,\\\"bias\\\":0.09957137606598787,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":9804.876774193128,\\\"ask\\\":9844.174877496507,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:45 AM\\\",\\\"price\\\":9824.525825844818,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0062,\\\"forecast\\\":0.40063467465707575,\\\"bias\\\":0.09936532534292425,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0}],\\\"longTermRecords\\\":[{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":6665.301242940343,\\\"ask\\\":6692.015877180586,\\\"price\\\":6678.658560060464,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:27:23 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":6814.989660521027,\\\"ask\\\":6842.304248338748,\\\"price\\\":6828.646954429885,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:34:14 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":7547.076674378817,\\\"ask\\\":7577.325478684946,\\\"price\\\":7562.201076531878,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:41:02 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":8005.416475920147,\\\"ask\\\":8037.502313498982,\\\"price\\\":8021.214334646709,\\\"maxShares\\\":19700000,\\\"investedShares\\\":104353.65,\\\"averagePrice\\\":1384.7142675176885,\\\"sharesShort\\\":51484.32,\\\"averageShortPrice\\\":715.5809122733345,\\\"dateObserved\\\":\\\"7/29/2023, 6:47:54 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":8346.317298055352,\\\"ask\\\":8379.769471594653,\\\"price\\\":8363.906326675722,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:54:48 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":8905.193349831741,\\\"ask\\\":8940.885507546489,\\\"price\\\":8923.039428689113,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:01:39 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":8309.861152810465,\\\"ask\\\":8343.167209535153,\\\"price\\\":8326.514181172812,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:08:30 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":8060.616029254453,\\\"ask\\\":8092.923107528015,\\\"price\\\":8076.261372411005,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":123441,\\\"averageShortPrice\\\":1620.2080567111343,\\\"dateObserved\\\":\\\"7/29/2023, 7:15:23 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":7582.343583484085,\\\"ask\\\":7612.733738127307,\\\"price\\\":7597.843053277989,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":53748.96,\\\"averageShortPrice\\\":595.3601805793827,\\\"dateObserved\\\":\\\"7/29/2023, 7:22:11 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":7420.202690027518,\\\"ask\\\":7449.94298137032,\\\"price\\\":7435.756477943119,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":80805.84,\\\"averageShortPrice\\\":891.0251303306119,\\\"dateObserved\\\":\\\"7/29/2023, 7:29:00 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":6932.155104666925,\\\"ask\\\":6959.939293463185,\\\"price\\\":6946.047199065057,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:35:51 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":7251.30381854446,\\\"ask\\\":7280.367160502558,\\\"price\\\":7266.097616266313,\\\"maxShares\\\":19700000,\\\"investedShares\\\":175812.86,\\\"averagePrice\\\":1923.2251645275983,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:42:40 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":7686.982727941285,\\\"ask\\\":7717.7922779530745,\\\"price\\\":7702.387502947178,\\\"maxShares\\\":19700000,\\\"investedShares\\\":104400.16,\\\"averagePrice\\\":1226.0521956457173,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:49:32 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":7575.648114516074,\\\"ask\\\":7606.011433612331,\\\"price\\\":7590.892869176085,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:56:21 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":7850.477823835166,\\\"ask\\\":7881.94266481246,\\\"price\\\":7866.210244323813,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:03:13 AM\\\",\\\"bias\\\":null},{\\\"volatility\\\":0.0062,\\\"forecast\\\":0.592271840497642,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":8480.370486956366,\\\"ask\\\":8514.359947825933,\\\"price\\\":8497.668639934916,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:09:58 AM\\\",\\\"bias\\\":0.09669351058510456},{\\\"volatility\\\":0.0062,\\\"forecast\\\":0.5994353625804595,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":8529.030300741066,\\\"ask\\\":8563.214790924398,\\\"price\\\":8545.840916408697,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:16:47 AM\\\",\\\"bias\\\":0.10182311960708734},{\\\"volatility\\\":0.0062,\\\"forecast\\\":0.5988146259051529,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":8830.13573737962,\\\"ask\\\":8865.527062980338,\\\"price\\\":8848.287373918873,\\\"maxShares\\\":19700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:35 AM\\\",\\\"bias\\\":0.10094242932209219}],\\\"recentTicksOfPrices\\\":[9610.825868801801,9649.865867915581,9704.467723116051,9728.269442363558,9678.563582467596,9640.466738632484,9635.606246166482,9679.550849459238,9635.819693680756,9641.43524028722,9674.429825785599,9701.844346314509,9687.489478188678,9740.120279448476,9792.630062363933,9788.129489576248,9842.892018062454,9861.087695831551,9804.237162212989,9824.525825844818]}],[\\\"HLS\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":3316.636049230612,\\\"ask\\\":3383.6387976999176,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:37 AM\\\",\\\"price\\\":3350.137423465265,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006500000000000001,\\\"forecast\\\":0.39677051571413086,\\\"bias\\\":0.10322948428586914,\\\"countOfNegative\\\":16,\\\"countOfPositive\\\":3,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":3310.992352391477,\\\"ask\\\":3377.881086783224,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:39 AM\\\",\\\"price\\\":3344.4367195873506,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006500000000000001,\\\"forecast\\\":0.3965945576169311,\\\"bias\\\":0.10340544238306892,\\\"countOfNegative\\\":16,\\\"countOfPositive\\\":3,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":3293.313246446406,\\\"ask\\\":3359.8448271826974,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:44 AM\\\",\\\"price\\\":3326.5790368145517,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006500000000000001,\\\"forecast\\\":0.3971496568845637,\\\"bias\\\":0.10285034311543628,\\\"countOfNegative\\\":16,\\\"countOfPositive\\\":3,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":3284.4550412295534,\\\"ask\\\":3350.8076683250997,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:48 AM\\\",\\\"price\\\":3317.6313547773266,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006500000000000001,\\\"forecast\\\":0.39687226857067187,\\\"bias\\\":0.10312773142932813,\\\"countOfNegative\\\":16,\\\"countOfPositive\\\":3,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":3272.819880402722,\\\"ask\\\":3338.9374537441913,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:52 AM\\\",\\\"price\\\":3305.8786670734567,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006500000000000001,\\\"forecast\\\":0.39650564046868825,\\\"bias\\\":0.10349435953131175,\\\"countOfNegative\\\":16,\\\"countOfPositive\\\":3,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":3277.583850545995,\\\"ask\\\":3343.797665708541,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:56 AM\\\",\\\"price\\\":3310.690758127268,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006500000000000001,\\\"forecast\\\":0.39665628855102125,\\\"bias\\\":0.10334371144897875,\\\"countOfNegative\\\":16,\\\"countOfPositive\\\":3,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":3293.3403348469697,\\\"ask\\\":3359.8724628236764,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:00 AM\\\",\\\"price\\\":3326.606398835323,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006500000000000001,\\\"forecast\\\":0.39615947942536645,\\\"bias\\\":0.10384052057463355,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":4,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":3275.804596956719,\\\"ask\\\":3341.9824676023095,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:04 AM\\\",\\\"price\\\":3308.893532279514,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006500000000000001,\\\"forecast\\\":0.3956036098375175,\\\"bias\\\":0.10439639016248248,\\\"countOfNegative\\\":16,\\\"countOfPositive\\\":3,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":3269.7828720818425,\\\"ask\\\":3335.8390917198594,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:08 AM\\\",\\\"price\\\":3302.810981900851,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006500000000000001,\\\"forecast\\\":0.39541135048450166,\\\"bias\\\":0.10458864951549834,\\\"countOfNegative\\\":16,\\\"countOfPositive\\\":3,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":3287.502591742431,\\\"ask\\\":3353.9167855150054,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:13 AM\\\",\\\"price\\\":3320.709688628718,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006500000000000001,\\\"forecast\\\":0.39597814088667727,\\\"bias\\\":0.10402185911332273,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":4,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":3286.1211355224123,\\\"ask\\\":3352.5074210885214,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:17 AM\\\",\\\"price\\\":3319.314278305467,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006500000000000001,\\\"forecast\\\":0.3960218707549212,\\\"bias\\\":0.10397812924507882,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":4,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":3289.1563250187182,\\\"ask\\\":3355.603927544349,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:21 AM\\\",\\\"price\\\":3322.3801262815336,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006500000000000001,\\\"forecast\\\":0.39592583250413405,\\\"bias\\\":0.10407416749586595,\\\"countOfNegative\\\":15,\\\"countOfPositive\\\":4,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":3308.961067472572,\\\"ask\\\":3375.808765805351,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:25 AM\\\",\\\"price\\\":3342.3849166389614,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006500000000000001,\\\"forecast\\\":0.39529917877300036,\\\"bias\\\":0.10470082122699964,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":3289.2031856175026,\\\"ask\\\":3355.6517348218968,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:29 AM\\\",\\\"price\\\":3322.4274602196997,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006500000000000001,\\\"forecast\\\":0.3959281050932038,\\\"bias\\\":0.10407189490679619,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":3274.0098653010987,\\\"ask\\\":3340.151478741525,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:33 AM\\\",\\\"price\\\":3307.080672021312,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006500000000000001,\\\"forecast\\\":0.3964110595436507,\\\"bias\\\":0.10358894045634931,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":3279.1577093871615,\\\"ask\\\":3345.4033196778114,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:38 AM\\\",\\\"price\\\":3312.2805145324864,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006500000000000001,\\\"forecast\\\":0.39624818290721736,\\\"bias\\\":0.10375181709278264,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":3272.1335816612464,\\\"ask\\\":3338.237290381676,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:42 AM\\\",\\\"price\\\":3305.185436021461,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006500000000000001,\\\"forecast\\\":0.3960254640001593,\\\"bias\\\":0.10397453599984069,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":3251.4489214274763,\\\"ask\\\":3317.1347582239914,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:46 AM\\\",\\\"price\\\":3284.291839825734,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006500000000000001,\\\"forecast\\\":0.39668691617181956,\\\"bias\\\":0.10331308382818044,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":3257.7256960024106,\\\"ask\\\":3323.5383363256915,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:50 AM\\\",\\\"price\\\":3290.632016164051,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006500000000000001,\\\"forecast\\\":0.39648747495238124,\\\"bias\\\":0.10351252504761876,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":3243.9204370005987,\\\"ask\\\":3309.454183202631,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:54 AM\\\",\\\"price\\\":3276.687310101615,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006500000000000001,\\\"forecast\\\":0.39604695329164197,\\\"bias\\\":0.10395304670835803,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":3229.372089411217,\\\"ask\\\":3294.6119296013426,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:58 AM\\\",\\\"price\\\":3261.99200950628,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006500000000000001,\\\"forecast\\\":0.3955786439687716,\\\"bias\\\":0.10442135603122837,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":3244.086805801224,\\\"ask\\\":3309.6239129891273,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:03 AM\\\",\\\"price\\\":3276.8553593951756,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006500000000000001,\\\"forecast\\\":0.39510284539353235,\\\"bias\\\":0.10489715460646765,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":3224.943750194465,\\\"ask\\\":3290.094128986272,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:07 AM\\\",\\\"price\\\":3257.5189395903685,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006500000000000001,\\\"forecast\\\":0.39448018273050095,\\\"bias\\\":0.10551981726949905,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":3226.536228760333,\\\"ask\\\":3291.718778836299,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:11 AM\\\",\\\"price\\\":3259.127503798316,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006500000000000001,\\\"forecast\\\":0.3944280770008225,\\\"bias\\\":0.1055719229991775,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":3211.8885416694047,\\\"ask\\\":3276.7751788748474,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:15 AM\\\",\\\"price\\\":3244.331860272126,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006500000000000001,\\\"forecast\\\":0.393946620538801,\\\"bias\\\":0.10605337946119903,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":3201.677671245317,\\\"ask\\\":3266.358028240172,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:19 AM\\\",\\\"price\\\":3234.0178497427446,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006500000000000001,\\\"forecast\\\":0.39428484862635665,\\\"bias\\\":0.10571515137364335,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":3205.842758136333,\\\"ask\\\":3270.6072583007035,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:23 AM\\\",\\\"price\\\":3238.2250082185183,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006500000000000001,\\\"forecast\\\":0.3941473229799986,\\\"bias\\\":0.1058526770200014,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":3226.3440575866052,\\\"ask\\\":3291.5227254166375,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:28 AM\\\",\\\"price\\\":3258.9333915016214,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006500000000000001,\\\"forecast\\\":0.3948242487037236,\\\"bias\\\":0.10517575129627638,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":3240.08389002282,\\\"ask\\\":3305.5401302253013,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:32 AM\\\",\\\"price\\\":3272.8120101240606,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006500000000000001,\\\"forecast\\\":0.3952721541884985,\\\"bias\\\":0.10472784581150152,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":3259.3043618297843,\\\"ask\\\":3325.148894392002,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:36 AM\\\",\\\"price\\\":3292.226628110893,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006500000000000001,\\\"forecast\\\":0.6053491009012301,\\\"bias\\\":0.10534910090123006,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":3267.685117764177,\\\"ask\\\":3333.69895852709,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:40 AM\\\",\\\"price\\\":3300.6920381456334,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006500000000000001,\\\"forecast\\\":0.6056199884908952,\\\"bias\\\":0.10561998849089516,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":3285.2788732207,\\\"ask\\\":3351.648143386775,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:44 AM\\\",\\\"price\\\":3318.4635083037374,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006500000000000001,\\\"forecast\\\":0.6050513130580245,\\\"bias\\\":0.10505131305802451,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":3298.8897105995443,\\\"ask\\\":3365.5339471773127,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:48 AM\\\",\\\"price\\\":3332.2118288884285,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006500000000000001,\\\"forecast\\\":0.6046160878020738,\\\"bias\\\":0.10461608780207377,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":3300.6342898118223,\\\"ask\\\":3367.3137704140813,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:53 AM\\\",\\\"price\\\":3333.974030112952,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006500000000000001,\\\"forecast\\\":0.604560762808497,\\\"bias\\\":0.10456076280849702,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":3284.927984913274,\\\"ask\\\":3351.2901664266733,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:57 AM\\\",\\\"price\\\":3318.1090756699737,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006500000000000001,\\\"forecast\\\":0.6050607016895433,\\\"bias\\\":0.10506070168954329,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":3300.557654995995,\\\"ask\\\":3367.2355874201567,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:01 AM\\\",\\\"price\\\":3333.896621208076,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006500000000000001,\\\"forecast\\\":0.6045608234232287,\\\"bias\\\":0.1045608234232287,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":3302.5742206305817,\\\"ask\\\":3369.292891754432,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:05 AM\\\",\\\"price\\\":3335.933556192507,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006500000000000001,\\\"forecast\\\":0.6046247077074254,\\\"bias\\\":0.10462470770742538,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":3290.767755503616,\\\"ask\\\":3357.247912180457,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:07 AM\\\",\\\"price\\\":3324.0078338420367,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006500000000000001,\\\"forecast\\\":0.6042493399954679,\\\"bias\\\":0.10424933999546793,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":3281.0204208607647,\\\"ask\\\":3347.3036616862346,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:11 AM\\\",\\\"price\\\":3314.1620412734997,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006500000000000001,\\\"forecast\\\":0.603939633540497,\\\"bias\\\":0.10393963354049696,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":3286.117466987624,\\\"ask\\\":3352.5036784419194,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:16 AM\\\",\\\"price\\\":3319.3105727147718,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006500000000000001,\\\"forecast\\\":0.6041011031562288,\\\"bias\\\":0.10410110315622878,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":3267.5065883492534,\\\"ask\\\":3333.516822457319,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:20 AM\\\",\\\"price\\\":3300.511705403286,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006500000000000001,\\\"forecast\\\":0.6035081699992249,\\\"bias\\\":0.10350816999922485,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":3285.974340693828,\\\"ask\\\":3352.357660707845,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:24 AM\\\",\\\"price\\\":3319.1660007008363,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006500000000000001,\\\"forecast\\\":0.6040931920022414,\\\"bias\\\":0.10409319200224143,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":3287.5583361038493,\\\"ask\\\":3353.973656025139,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:28 AM\\\",\\\"price\\\":3320.765996064494,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006500000000000001,\\\"forecast\\\":0.6040430141489623,\\\"bias\\\":0.10404301414896233,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":3268.387590416992,\\\"ask\\\":3334.415622546628,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:32 AM\\\",\\\"price\\\":3301.40160648181,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006500000000000001,\\\"forecast\\\":0.6034327492677126,\\\"bias\\\":0.10343274926771262,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":3262.065512232229,\\\"ask\\\":3327.965825610658,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:36 AM\\\",\\\"price\\\":3295.0156689214436,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006500000000000001,\\\"forecast\\\":0.6032322904095802,\\\"bias\\\":0.10323229040958015,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":3281.8960770111435,\\\"ask\\\":3348.1970078598533,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:40 AM\\\",\\\"price\\\":3315.0465424354984,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006500000000000001,\\\"forecast\\\":0.6026047264889396,\\\"bias\\\":0.10260472648893959,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":3274.7913901553334,\\\"ask\\\":3340.948791976653,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:45 AM\\\",\\\"price\\\":3307.870091065993,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006500000000000001,\\\"forecast\\\":0.6028273282869722,\\\"bias\\\":0.10282732828697216,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0}],\\\"longTermRecords\\\":[{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":4123.295629750495,\\\"ask\\\":4206.594531361618,\\\"price\\\":4164.945080556056,\\\"maxShares\\\":10500000,\\\"investedShares\\\":68753.7,\\\"averagePrice\\\":261.8040915187188,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:27:23 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":4537.558477821539,\\\"ask\\\":4629.226325858338,\\\"price\\\":4583.392401839938,\\\"maxShares\\\":10500000,\\\"investedShares\\\":401063.25,\\\"averagePrice\\\":1527.1905338591941,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:34:14 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":4336.720381371324,\\\"ask\\\":4424.3308941263,\\\"price\\\":4380.525637748812,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:41:02 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":4282.730813323546,\\\"ask\\\":4369.250627734123,\\\"price\\\":4326.042776023049,\\\"maxShares\\\":10500000,\\\"investedShares\\\":114427.83,\\\"averagePrice\\\":489.3666343818002,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:47:54 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":4110.762592116232,\\\"ask\\\":4193.808301047872,\\\"price\\\":4151.825631446997,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:54:48 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":4071.095803713963,\\\"ask\\\":4153.3401633849535,\\\"price\\\":4112.217983549458,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:01:39 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":4380.207532263986,\\\"ask\\\":4468.696573319825,\\\"price\\\":4424.452052791904,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:08:30 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":4629.922080541742,\\\"ask\\\":4723.455859946626,\\\"price\\\":4676.989665186566,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:15:23 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":4338.36617674525,\\\"ask\\\":4426.0099378916175,\\\"price\\\":4381.683457147685,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":286038.84,\\\"averageShortPrice\\\":1092.8584250028252,\\\"dateObserved\\\":\\\"7/29/2023, 7:22:11 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":4080.1398605984054,\\\"ask\\\":4162.566928489283,\\\"price\\\":4120.967334972218,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:29:00 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":4072.679690996623,\\\"ask\\\":4154.9560483904925,\\\"price\\\":4113.817869693559,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:35:51 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":4002.6673241365897,\\\"ask\\\":4083.5292902807637,\\\"price\\\":4042.9455390098174,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:42:40 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":4004.5432957900193,\\\"ask\\\":4085.443160351433,\\\"price\\\":4044.993228070727,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:49:32 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":3866.2426673228074,\\\"ask\\\":3944.3485797939725,\\\"price\\\":3905.365909894456,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:56:21 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":3756.8094788057483,\\\"ask\\\":3832.7046197917243,\\\"price\\\":3794.757049298735,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:03:13 AM\\\",\\\"bias\\\":null},{\\\"volatility\\\":0.006500000000000001,\\\"forecast\\\":0.4035829082598746,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":3674.59239486305,\\\"ask\\\":3748.826584658263,\\\"price\\\":3711.578137347358,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:09:58 AM\\\",\\\"bias\\\":0.09866971428596144},{\\\"volatility\\\":0.006500000000000001,\\\"forecast\\\":0.5981469995856977,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":3553.5775721454497,\\\"ask\\\":3625.3670180473814,\\\"price\\\":3589.5966099794514,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:16:47 AM\\\",\\\"bias\\\":0.10599621954916671},{\\\"volatility\\\":0.006500000000000001,\\\"forecast\\\":0.506729972794878,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":3464.836758408855,\\\"ask\\\":3534.833460598934,\\\"price\\\":3500.0207323259965,\\\"maxShares\\\":10500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:35 AM\\\",\\\"bias\\\":0.10591586325692115}],\\\"recentTicksOfPrices\\\":[3258.9333915016214,3272.8120101240606,3292.226628110893,3300.6920381456334,3318.4635083037374,3332.2118288884285,3333.974030112952,3318.1090756699737,3333.896621208076,3335.933556192507,3324.0078338420367,3314.1620412734997,3319.3105727147718,3300.511705403286,3319.1660007008363,3320.765996064494,3301.40160648181,3295.0156689214436,3315.0465424354984,3307.870091065993]}],[\\\"VITA\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":18240.069331158596,\\\"ask\\\":18313.175821463843,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:37 AM\\\",\\\"price\\\":18276.62257631122,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5976833884456343,\\\"bias\\\":0.09768338844563429,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":18206.64827386502,\\\"ask\\\":18279.62081203682,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:39 AM\\\",\\\"price\\\":18243.13454295092,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5975040758081424,\\\"bias\\\":0.09750407580814235,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":18311.903081809774,\\\"ask\\\":18385.29748293927,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:44 AM\\\",\\\"price\\\":18348.600282374522,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5969403931017682,\\\"bias\\\":0.09694039310176816,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":18258.87071465477,\\\"ask\\\":18332.052561206492,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:48 AM\\\",\\\"price\\\":18295.46163793063,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5966588325058547,\\\"bias\\\":0.09665883250585472,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":18189.232225993244,\\\"ask\\\":18262.134960365966,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:52 AM\\\",\\\"price\\\":18225.683593179605,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5962887687820063,\\\"bias\\\":0.09628876878200632,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":18217.745427120743,\\\"ask\\\":18290.762442860705,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:56 AM\\\",\\\"price\\\":18254.253934990724,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5961378277749045,\\\"bias\\\":0.09613782777490454,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":18312.061307372045,\\\"ask\\\":18385.456342672136,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:00 AM\\\",\\\"price\\\":18348.75882502209,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5956401084556664,\\\"bias\\\":0.0956401084556664,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":18417.628257399538,\\\"ask\\\":18491.44640672779,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:04 AM\\\",\\\"price\\\":18454.537332063665,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5950887541116364,\\\"bias\\\":0.09508875411163642,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":18381.17302248293,\\\"ask\\\":18454.845058645187,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:08 AM\\\",\\\"price\\\":18418.00904056406,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5952773428847701,\\\"bias\\\":0.09527734288477008,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":18274.521116624663,\\\"ask\\\":18347.765690238386,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:13 AM\\\",\\\"price\\\":18311.143403431524,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5947212949238455,\\\"bias\\\":0.09472129492384551,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":18282.794520891268,\\\"ask\\\":18356.072254441937,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:17 AM\\\",\\\"price\\\":18319.433387666602,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5947641779936979,\\\"bias\\\":0.09476417799369785,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":18264.626913722837,\\\"ask\\\":18337.83183121271,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:21 AM\\\",\\\"price\\\":18301.229372467773,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5948584387945103,\\\"bias\\\":0.09485843879451028,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":18383.0619433538,\\\"ask\\\":18456.74155034119,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:25 AM\\\",\\\"price\\\":18419.901746847496,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5942433393423044,\\\"bias\\\":0.09424333934230444,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":18264.90701776613,\\\"ask\\\":18338.113057917497,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:29 AM\\\",\\\"price\\\":18301.510037841814,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5948529955938415,\\\"bias\\\":0.09485299559384153,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":18356.186855500342,\\\"ask\\\":18429.758746704752,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:33 AM\\\",\\\"price\\\":18392.972801102547,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5953270284502906,\\\"bias\\\":0.09532702845029062,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":18387.26911303027,\\\"ask\\\":18460.965582421173,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:38 AM\\\",\\\"price\\\":18424.11734772572,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5954884442863343,\\\"bias\\\":0.0954884442863343,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":18429.776390593368,\\\"ask\\\":18503.643229834226,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:42 AM\\\",\\\"price\\\":18466.709810213797,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5952676962361265,\\\"bias\\\":0.09526769623612652,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":18556.03941998553,\\\"ask\\\":18630.412323472447,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:46 AM\\\",\\\"price\\\":18593.225871728988,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.595920378486581,\\\"bias\\\":0.09592037848658097,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":18594.61651898648,\\\"ask\\\":18669.14404010466,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:50 AM\\\",\\\"price\\\":18631.88027954557,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5961197922652077,\\\"bias\\\":0.09611979226520773,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":18679.83745004982,\\\"ask\\\":18754.70653802597,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:54 AM\\\",\\\"price\\\":18717.271994037896,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5956792659342618,\\\"bias\\\":0.09567926593426179,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":18770.46356389038,\\\"ask\\\":18845.69588278373,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:58 AM\\\",\\\"price\\\":18808.079723337054,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5952150734556106,\\\"bias\\\":0.09521507345561064,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":18862.570744787903,\\\"ask\\\":18938.172230738957,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:03 AM\\\",\\\"price\\\":18900.37148776343,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5947478504717405,\\\"bias\\\":0.0947478504717405,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":18983.150578845234,\\\"ask\\\":19059.23535070433,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:07 AM\\\",\\\"price\\\":19021.192964774782,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5941421705651282,\\\"bias\\\":0.09414217056512819,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":18993.245534781865,\\\"ask\\\":19069.370767386205,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:11 AM\\\",\\\"price\\\":19031.308151084035,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5941922339652833,\\\"bias\\\":0.09419223396528331,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":19086.526375957597,\\\"ask\\\":19163.025479668853,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:15 AM\\\",\\\"price\\\":19124.775927813225,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5937296310467661,\\\"bias\\\":0.09372963104676613,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":16,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":19021.197123677113,\\\"ask\\\":19097.43438669786,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:19 AM\\\",\\\"price\\\":19059.315755187487,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5934077119439359,\\\"bias\\\":0.09340771194393593,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":19047.845391745566,\\\"ask\\\":19124.18946145196,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:23 AM\\\",\\\"price\\\":19086.017426598763,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5932768498466999,\\\"bias\\\":0.09327684984669993,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":18917.562010368503,\\\"ask\\\":18993.383902193626,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:28 AM\\\",\\\"price\\\":18955.472956281064,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5939192383001152,\\\"bias\\\":0.09391923830011517,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":18831.197883232904,\\\"ask\\\":18906.673626251875,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:32 AM\\\",\\\"price\\\":18868.93575474239,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.594349973141697,\\\"bias\\\":0.09434997314169702,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":18711.66021083549,\\\"ask\\\":18786.656844947054,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:36 AM\\\",\\\"price\\\":18749.15852789127,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5937472272574176,\\\"bias\\\":0.09374722725741758,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":18763.475184434235,\\\"ask\\\":18838.679493790685,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:40 AM\\\",\\\"price\\\":18801.07733911246,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5940068252861636,\\\"bias\\\":0.09400682528616355,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":18872.272031983015,\\\"ask\\\":18947.91240084868,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:44 AM\\\",\\\"price\\\":18910.092216415847,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5945519080141056,\\\"bias\\\":0.09455190801410562,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":18956.473851374878,\\\"ask\\\":19032.451702482595,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:48 AM\\\",\\\"price\\\":18994.462776928736,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5941300487558103,\\\"bias\\\":0.09413004875581032,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":18967.269907570135,\\\"ask\\\":19043.291029444164,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:53 AM\\\",\\\"price\\\":19005.28046850715,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5941836575284121,\\\"bias\\\":0.09418365752841207,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":16,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":19064.934620671298,\\\"ask\\\":19141.347184281203,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:57 AM\\\",\\\"price\\\":19103.14090247625,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5936986947511564,\\\"bias\\\":0.09369869475115644,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":16,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":18967.74400776313,\\\"ask\\\":19043.767029838335,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:01 AM\\\",\\\"price\\\":19005.75551880073,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5941788063325778,\\\"bias\\\":0.0941788063325778,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":18980.22431858,\\\"ask\\\":19056.297361941044,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:05 AM\\\",\\\"price\\\":19018.260840260522,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5942407736796124,\\\"bias\\\":0.09424077367961237,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":18907.17201517458,\\\"ask\\\":18982.952263732393,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:07 AM\\\",\\\"price\\\":18945.062139453486,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5946048950609844,\\\"bias\\\":0.09460489506098435,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":18967.66265828112,\\\"ask\\\":19043.685354306293,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:11 AM\\\",\\\"price\\\":19005.674006293706,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5943022209784367,\\\"bias\\\":0.09430222097843666,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":18935.982877620532,\\\"ask\\\":19011.87860057693,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:16 AM\\\",\\\"price\\\":18973.93073909873,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5941444539538406,\\\"bias\\\":0.09414445395384063,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":19052.133874291896,\\\"ask\\\":19128.495132305092,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:20 AM\\\",\\\"price\\\":19090.314503298494,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5935669834191191,\\\"bias\\\":0.09356698341911907,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":19168.098592746523,\\\"ask\\\":19244.92463921044,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:24 AM\\\",\\\"price\\\":19206.51161597848,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5929974687935952,\\\"bias\\\":0.09299746879359516,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":19178.049288985112,\\\"ask\\\":19254.91521799908,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:28 AM\\\",\\\"price\\\":19216.482253492097,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5929491912057873,\\\"bias\\\":0.09294919120578726,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":19299.191240888715,\\\"ask\\\":19376.542708788067,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:32 AM\\\",\\\"price\\\":19337.86697483839,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5935363232065897,\\\"bias\\\":0.09353632320658967,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":19258.99499563525,\\\"ask\\\":19336.1853563392,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:36 AM\\\",\\\"price\\\":19297.590175987225,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5933410996765679,\\\"bias\\\":0.0933410996765679,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":19133.73085925354,\\\"ask\\\":19210.419159290628,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:40 AM\\\",\\\"price\\\":19172.075009272085,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5927300169595635,\\\"bias\\\":0.09273001695956351,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":19089.131137858167,\\\"ask\\\":19165.64068149688,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:45 AM\\\",\\\"price\\\":19127.385909677523,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5929466707659372,\\\"bias\\\":0.09294667076593721,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0}],\\\"longTermRecords\\\":[{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":17619.417700894264,\\\"ask\\\":17690.036609515075,\\\"price\\\":17654.72715520468,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":86035.8,\\\"averageShortPrice\\\":5230.388181735146,\\\"dateObserved\\\":\\\"7/29/2023, 6:27:23 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":17031.501116966367,\\\"ask\\\":17099.763646493295,\\\"price\\\":17065.63238172983,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:34:14 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":18287.18757210212,\\\"ask\\\":18360.48291307247,\\\"price\\\":18323.83524258729,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:41:02 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":19453.97378239125,\\\"ask\\\":19531.94562119843,\\\"price\\\":19492.279106701717,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:47:54 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":19310.972299112374,\\\"ask\\\":19388.370985681962,\\\"price\\\":19349.900713991607,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:54:48 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":18072.64060847221,\\\"ask\\\":18145.0760417727,\\\"price\\\":18108.85832512245,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:01:39 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":18083.929120309054,\\\"ask\\\":18156.409798145964,\\\"price\\\":18120.1694592275,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:08:30 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":17843.820803729228,\\\"ask\\\":17915.339123583864,\\\"price\\\":17880.826381957188,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:15:23 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":17347.911750015413,\\\"ask\\\":17417.442458432306,\\\"price\\\":17380.34945942377,\\\"maxShares\\\":14900000,\\\"investedShares\\\":51559.02,\\\"averagePrice\\\":3142.029104645499,\\\"sharesShort\\\":27105.3,\\\"averageShortPrice\\\":1494.1726932649115,\\\"dateObserved\\\":\\\"7/29/2023, 7:22:11 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":18507.10585233792,\\\"ask\\\":18581.2826293012,\\\"price\\\":18546.08813222104,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:29:00 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":17642.94652536784,\\\"ask\\\":17713.659737894362,\\\"price\\\":17678.303131631106,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:35:51 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":15735.84041497106,\\\"ask\\\":15798.909915632275,\\\"price\\\":15766.613780892956,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":65340.45,\\\"averageShortPrice\\\":3374.636697404713,\\\"dateObserved\\\":\\\"7/29/2023, 7:42:40 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":14451.821500071266,\\\"ask\\\":14509.744632336078,\\\"price\\\":14480.783066203667,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":44838.56,\\\"averageShortPrice\\\":1884.540020559352,\\\"dateObserved\\\":\\\"7/29/2023, 7:49:32 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":14320.433889694412,\\\"ask\\\":14377.83041831042,\\\"price\\\":14347.599576254224,\\\"maxShares\\\":14900000,\\\"investedShares\\\":133416.66,\\\"averagePrice\\\":5700.181794356527,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:56:21 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":16229.647023969688,\\\"ask\\\":16294.695709436497,\\\"price\\\":16262.171366703087,\\\"maxShares\\\":14900000,\\\"investedShares\\\":3420.94,\\\"averagePrice\\\":146.1585075476033,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:03:13 AM\\\",\\\"bias\\\":null},{\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.6069301984469354,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":18288.287349096663,\\\"ask\\\":18361.587097990836,\\\"price\\\":18325.425189105692,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:09:58 AM\\\",\\\"bias\\\":0.10932901272675133},{\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.4024407527235017,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":19010.868176796786,\\\"ask\\\":19087.064041232854,\\\"price\\\":19048.264504361487,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:16:47 AM\\\",\\\"bias\\\":0.10493991217182042},{\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.49373281846104755,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":18174.77299419372,\\\"ask\\\":18247.61777573358,\\\"price\\\":18212.243377374314,\\\"maxShares\\\":14900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:35 AM\\\",\\\"bias\\\":0.10173486893108408}],\\\"recentTicksOfPrices\\\":[18955.472956281064,18868.93575474239,18749.15852789127,18801.07733911246,18910.092216415847,18994.462776928736,19005.28046850715,19103.14090247625,19005.75551880073,19018.260840260522,18945.062139453486,19005.674006293706,18973.93073909873,19090.314503298494,19206.51161597848,19216.482253492097,19337.86697483839,19297.590175987225,19172.075009272085,19127.385909677523]}],[\\\"ICRS\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":16542.95708390588,\\\"ask\\\":16877.1582371161,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:37 AM\\\",\\\"price\\\":16710.05766051099,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006500000000000001,\\\"forecast\\\":0.5811595443977633,\\\"bias\\\":0.0811595443977633,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":16571.155105727627,\\\"ask\\\":16905.92591594435,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:39 AM\\\",\\\"price\\\":16738.54051083599,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006500000000000001,\\\"forecast\\\":0.5812978835467052,\\\"bias\\\":0.0812978835467052,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":16660.112087594593,\\\"ask\\\":16996.680008556097,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:44 AM\\\",\\\"price\\\":16828.396048075345,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006500000000000001,\\\"forecast\\\":0.5817343054078455,\\\"bias\\\":0.08173430540784554,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":16615.300470610713,\\\"ask\\\":16950.963106380626,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:48 AM\\\",\\\"price\\\":16783.13178849567,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006500000000000001,\\\"forecast\\\":0.581513867240335,\\\"bias\\\":0.08151386724033505,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":16674.36931650696,\\\"ask\\\":17011.225262294978,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:52 AM\\\",\\\"price\\\":16842.79728940097,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006500000000000001,\\\"forecast\\\":0.5818036561653649,\\\"bias\\\":0.08180365616536489,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":16698.640801185174,\\\"ask\\\":17035.987079996994,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:56 AM\\\",\\\"price\\\":16867.313940591084,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006500000000000001,\\\"forecast\\\":0.5819227309051377,\\\"bias\\\":0.08192273090513769,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":16778.9169691275,\\\"ask\\\":17117.884988705835,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:00 AM\\\",\\\"price\\\":16948.400978916667,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006500000000000001,\\\"forecast\\\":0.5815288998752512,\\\"bias\\\":0.08152889987525125,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":16868.73633452135,\\\"ask\\\":17209.5188867339,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:04 AM\\\",\\\"price\\\":17039.127610627624,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006500000000000001,\\\"forecast\\\":0.5810924668169359,\\\"bias\\\":0.08109246681693594,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":16837.727498009033,\\\"ask\\\":17177.88360907992,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:08 AM\\\",\\\"price\\\":17007.805553544476,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006500000000000001,\\\"forecast\\\":0.5812418090037723,\\\"bias\\\":0.08124180900377231,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":16928.97508925846,\\\"ask\\\":17270.974586011154,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:13 AM\\\",\\\"price\\\":17099.974837634807,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006500000000000001,\\\"forecast\\\":0.5816820774058603,\\\"bias\\\":0.08168207740586031,\\\"countOfNegative\\\":3,\\\"countOfPositive\\\":16,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":16936.091880445125,\\\"ask\\\":17278.235150757147,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:17 AM\\\",\\\"price\\\":17107.163515601136,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006500000000000001,\\\"forecast\\\":0.581716415827739,\\\"bias\\\":0.08171641582773903,\\\"countOfNegative\\\":3,\\\"countOfPositive\\\":16,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":16951.734714675527,\\\"ask\\\":17294.19400184069,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:21 AM\\\",\\\"price\\\":17122.96435825811,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006500000000000001,\\\"forecast\\\":0.5817918922927771,\\\"bias\\\":0.08179189229277706,\\\"countOfNegative\\\":3,\\\"countOfPositive\\\":16,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":17053.804883130742,\\\"ask\\\":17398.32619390106,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:25 AM\\\",\\\"price\\\":17226.0655385159,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006500000000000001,\\\"forecast\\\":0.5812994051010464,\\\"bias\\\":0.08129940510104638,\\\"countOfNegative\\\":3,\\\"countOfPositive\\\":16,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":17156.24521382653,\\\"ask\\\":17502.836026227065,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:29 AM\\\",\\\"price\\\":17329.540620026797,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006500000000000001,\\\"forecast\\\":0.5808110485142908,\\\"bias\\\":0.08081104851429077,\\\"countOfNegative\\\":3,\\\"countOfPositive\\\":16,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":17076.997957196043,\\\"ask\\\":17421.98781491718,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:33 AM\\\",\\\"price\\\":17249.49288605661,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006500000000000001,\\\"forecast\\\":0.5804360379933408,\\\"bias\\\":0.08043603799334076,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":17050.18932805021,\\\"ask\\\":17394.63759730375,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:38 AM\\\",\\\"price\\\":17222.41346267698,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006500000000000001,\\\"forecast\\\":0.5803095655025646,\\\"bias\\\":0.08030956550256463,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":17013.666928640017,\\\"ask\\\":17357.377371642844,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:42 AM\\\",\\\"price\\\":17185.52215014143,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006500000000000001,\\\"forecast\\\":0.5804819620846797,\\\"bias\\\":0.08048196208467973,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":17121.902342528956,\\\"ask\\\":17467.799359549746,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:46 AM\\\",\\\"price\\\":17294.85085103935,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006500000000000001,\\\"forecast\\\":0.579969962025353,\\\"bias\\\":0.079969962025353,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":17154.95539791908,\\\"ask\\\":17501.520153432593,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:50 AM\\\",\\\"price\\\":17328.237775675836,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006500000000000001,\\\"forecast\\\":0.5801243404075848,\\\"bias\\\":0.08012434040758476,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":17082.25787070756,\\\"ask\\\":17427.35398930771,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:54 AM\\\",\\\"price\\\":17254.805930007635,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006500000000000001,\\\"forecast\\\":0.5804653282009533,\\\"bias\\\":0.08046532820095331,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":17005.647291027533,\\\"ask\\\":17349.1957211493,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:58 AM\\\",\\\"price\\\":17177.421506088416,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006500000000000001,\\\"forecast\\\":0.5808278251604705,\\\"bias\\\":0.08082782516047049,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":17083.133957161936,\\\"ask\\\":17428.247774478335,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:03 AM\\\",\\\"price\\\":17255.690865820136,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006500000000000001,\\\"forecast\\\":0.5811961192098175,\\\"bias\\\":0.08119611920981751,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":17184.53832530322,\\\"ask\\\":17531.700715713385,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:07 AM\\\",\\\"price\\\":17358.119520508302,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006500000000000001,\\\"forecast\\\":0.5807141443459171,\\\"bias\\\":0.08071414434591706,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":17193.024057479397,\\\"ask\\\":17540.357876822414,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:11 AM\\\",\\\"price\\\":17366.690967150906,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006500000000000001,\\\"forecast\\\":0.5806742876678508,\\\"bias\\\":0.08067428766785079,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":17271.432144582523,\\\"ask\\\":17620.349965685204,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:15 AM\\\",\\\"price\\\":17445.891055133863,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006500000000000001,\\\"forecast\\\":0.5810421994763434,\\\"bias\\\":0.08104219947634339,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":17326.514627510343,\\\"ask\\\":17676.54522604591,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:19 AM\\\",\\\"price\\\":17501.529926778127,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006500000000000001,\\\"forecast\\\":0.5807837376689079,\\\"bias\\\":0.0807837376689079,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":17349.05482248068,\\\"ask\\\":17699.54077849039,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:23 AM\\\",\\\"price\\\":17524.297800485536,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006500000000000001,\\\"forecast\\\":0.5808888298491088,\\\"bias\\\":0.08088882984910883,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":17460.00167637492,\\\"ask\\\":17812.728982968354,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:28 AM\\\",\\\"price\\\":17636.365329671637,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006500000000000001,\\\"forecast\\\":0.5803715474219812,\\\"bias\\\":0.08037154742198116,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":17534.357508576173,\\\"ask\\\":17888.586953193877,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:32 AM\\\",\\\"price\\\":17711.472230885025,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006500000000000001,\\\"forecast\\\":0.5800292740703152,\\\"bias\\\":0.08002927407031524,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":17638.372909283727,\\\"ask\\\":17994.703675127847,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:36 AM\\\",\\\"price\\\":17816.538292205787,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006500000000000001,\\\"forecast\\\":0.42044546684942974,\\\"bias\\\":0.07955453315057026,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":17593.13510542408,\\\"ask\\\":17948.551976240728,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:40 AM\\\",\\\"price\\\":17770.843540832404,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006500000000000001,\\\"forecast\\\":0.42065002802316287,\\\"bias\\\":0.07934997197683713,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":17498.91804541086,\\\"ask\\\":17852.431541277747,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:44 AM\\\",\\\"price\\\":17675.674793344304,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006500000000000001,\\\"forecast\\\":0.42022279469065693,\\\"bias\\\":0.07977720530934307,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":17426.719533573214,\\\"ask\\\":17778.7744736454,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:48 AM\\\",\\\"price\\\":17602.747003609307,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006500000000000001,\\\"forecast\\\":0.4205533098797494,\\\"bias\\\":0.07944669012025057,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":17417.50848806893,\\\"ask\\\":17769.377346413752,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:53 AM\\\",\\\"price\\\":17593.44291724134,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006500000000000001,\\\"forecast\\\":0.4205953243319522,\\\"bias\\\":0.07940467566804782,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":17334.626025225014,\\\"ask\\\":17684.820490381077,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:57 AM\\\",\\\"price\\\":17509.723257803045,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006500000000000001,\\\"forecast\\\":0.42021566485322365,\\\"bias\\\":0.07978433514677635,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":17252.538537563192,\\\"ask\\\":17601.074669635174,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:01 AM\\\",\\\"price\\\":17426.806603599183,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006500000000000001,\\\"forecast\\\":0.41983605140603686,\\\"bias\\\":0.08016394859396314,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":17263.079446088625,\\\"ask\\\":17611.828525807585,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:05 AM\\\",\\\"price\\\":17437.453985948105,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006500000000000001,\\\"forecast\\\":0.4198850297547782,\\\"bias\\\":0.0801149702452218,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":17325.01512815656,\\\"ask\\\":17675.015433775883,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:07 AM\\\",\\\"price\\\":17500.01528096622,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006500000000000001,\\\"forecast\\\":0.42017246255849583,\\\"bias\\\":0.07982753744150417,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":17376.484701181133,\\\"ask\\\":17727.524796154492,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:11 AM\\\",\\\"price\\\":17552.004748667812,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006500000000000001,\\\"forecast\\\":0.4204096161331003,\\\"bias\\\":0.0795903838668997,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":17349.53230372902,\\\"ask\\\":17700.027905824558,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:16 AM\\\",\\\"price\\\":17524.78010477679,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006500000000000001,\\\"forecast\\\":0.4205332593311873,\\\"bias\\\":0.07946674066881271,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":17448.35078546935,\\\"ask\\\":17800.842720529337,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:20 AM\\\",\\\"price\\\":17624.596752999343,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006500000000000001,\\\"forecast\\\":0.4200806371783667,\\\"bias\\\":0.07991936282163331,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":17546.96782338942,\\\"ask\\\":17901.452021841727,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:24 AM\\\",\\\"price\\\":17724.209922615573,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006500000000000001,\\\"forecast\\\":0.4196289377065466,\\\"bias\\\":0.08037106229345342,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":17538.513428470607,\\\"ask\\\":17892.826831065977,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:28 AM\\\",\\\"price\\\":17715.670129768292,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006500000000000001,\\\"forecast\\\":0.41959019504437944,\\\"bias\\\":0.08040980495562056,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":17641.385677052316,\\\"ask\\\":17997.777306891756,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:32 AM\\\",\\\"price\\\":17819.581491972036,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006500000000000001,\\\"forecast\\\":0.42006183920495993,\\\"bias\\\":0.07993816079504007,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":17607.26175005391,\\\"ask\\\":17962.96400763076,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:36 AM\\\",\\\"price\\\":17785.112878842334,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006500000000000001,\\\"forecast\\\":0.42021676414457176,\\\"bias\\\":0.07978323585542824,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":17500.871438928723,\\\"ask\\\":17854.42439729092,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:40 AM\\\",\\\"price\\\":17677.647918109822,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006500000000000001,\\\"forecast\\\":0.41973175039455063,\\\"bias\\\":0.08026824960544937,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":17462.98534858347,\\\"ask\\\":17815.772931383137,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:45 AM\\\",\\\"price\\\":17639.379139983303,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006500000000000001,\\\"forecast\\\":0.4199058930222689,\\\"bias\\\":0.08009410697773112,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0}],\\\"longTermRecords\\\":[{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":16118.400631874294,\\\"ask\\\":16444.024887063675,\\\"price\\\":16281.212759468986,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":22715.88,\\\"averageShortPrice\\\":1917.4362926639442,\\\"dateObserved\\\":\\\"7/29/2023, 6:27:23 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":14970.766454635022,\\\"ask\\\":15273.206180991287,\\\"price\\\":15121.986317813156,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:34:14 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":14675.470457438183,\\\"ask\\\":14971.944608093494,\\\"price\\\":14823.707532765842,\\\"maxShares\\\":7000000,\\\"investedShares\\\":41848.43,\\\"averagePrice\\\":2019.193937732922,\\\"sharesShort\\\":84190.08,\\\"averageShortPrice\\\":3420.8332725160294,\\\"dateObserved\\\":\\\"7/29/2023, 6:41:02 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":14348.473115628283,\\\"ask\\\":14638.34125937834,\\\"price\\\":14493.567208519275,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":3507.92,\\\"averageShortPrice\\\":142.5347196881679,\\\"dateObserved\\\":\\\"7/29/2023, 6:47:54 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":15146.984329202043,\\\"ask\\\":15452.984012620263,\\\"price\\\":15299.753509890112,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:54:48 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":15335.961837373723,\\\"ask\\\":15645.779248229757,\\\"price\\\":15490.870542801747,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:01:39 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":15951.779552116086,\\\"ask\\\":16274.037724886113,\\\"price\\\":16112.908638501105,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:08:30 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":17811.84798954645,\\\"ask\\\":18171.683302466594,\\\"price\\\":17992.926529573288,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:15:23 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":18209.965240877133,\\\"ask\\\":18577.84332655142,\\\"price\\\":18391.715932784475,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:22:11 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":18415.929685782165,\\\"ask\\\":18787.96866933332,\\\"price\\\":18603.72908228173,\\\"maxShares\\\":7000000,\\\"investedShares\\\":47916.36,\\\"averagePrice\\\":3380.889856194228,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:29:00 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":18693.779769069577,\\\"ask\\\":19071.431885616432,\\\"price\\\":18882.605827343006,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:35:51 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":19150.01860601496,\\\"ask\\\":19536.887668762738,\\\"price\\\":19344.302799557867,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:42:40 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":19630.081604066585,\\\"ask\\\":20026.648909199248,\\\"price\\\":19828.3652566329,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:49:32 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":18803.38639761956,\\\"ask\\\":19183.252789490678,\\\"price\\\":18993.618957543633,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:56:21 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":18800.211025430606,\\\"ask\\\":19180.013268368595,\\\"price\\\":18990.1121468996,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:03:13 AM\\\",\\\"bias\\\":null},{\\\"volatility\\\":0.006500000000000001,\\\"forecast\\\":0.5358956006249849,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":18308.440573821616,\\\"ask\\\":18678.308060161442,\\\"price\\\":18492.95005181279,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:09:58 AM\\\",\\\"bias\\\":0.07800436461964899},{\\\"volatility\\\":0.006500000000000001,\\\"forecast\\\":0.4256780002341043,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":18040.2778900918,\\\"ask\\\":18404.72794847749,\\\"price\\\":18221.868590174607,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:16:47 AM\\\",\\\"bias\\\":0.07927593832508484},{\\\"volatility\\\":0.006500000000000001,\\\"forecast\\\":0.4967691169122554,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":16842.15837982077,\\\"ask\\\":17182.404003655534,\\\"price\\\":17011.72895664169,\\\"maxShares\\\":7000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:35 AM\\\",\\\"bias\\\":0.08248531634739886}],\\\"recentTicksOfPrices\\\":[17636.365329671637,17711.472230885025,17816.538292205787,17770.843540832404,17675.674793344304,17602.747003609307,17593.44291724134,17509.723257803045,17426.806603599183,17437.453985948105,17500.01528096622,17552.004748667812,17524.78010477679,17624.596752999343,17724.209922615573,17715.670129768292,17819.581491972036,17785.112878842334,17677.647918109822,17639.379139983303]}],[\\\"UNV\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":18698.59046228015,\\\"ask\\\":18811.11959244432,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:37 AM\\\",\\\"price\\\":18754.855027362235,\\\"maxShares\\\":6700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0058,\\\"forecast\\\":0.5788626530733169,\\\"bias\\\":0.07886265307331686,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":18670.193691251556,\\\"ask\\\":18782.55192810964,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:39 AM\\\",\\\"price\\\":18726.372809680597,\\\"maxShares\\\":6700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0058,\\\"forecast\\\":0.578982600661385,\\\"bias\\\":0.07898260066138496,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":18759.625233007126,\\\"ask\\\":18872.521673727326,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:44 AM\\\",\\\"price\\\":18816.073453367226,\\\"maxShares\\\":6700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0058,\\\"forecast\\\":0.5793609328772056,\\\"bias\\\":0.07936093287720558,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":18804.771434010683,\\\"ask\\\":18917.939567013756,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:48 AM\\\",\\\"price\\\":18861.35550051222,\\\"maxShares\\\":6700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0058,\\\"forecast\\\":0.5795519198816368,\\\"bias\\\":0.07955191988163679,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":18745.306973943105,\\\"ask\\\":18858.117246604746,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:52 AM\\\",\\\"price\\\":18801.712110273926,\\\"maxShares\\\":6700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0058,\\\"forecast\\\":0.5792995627466122,\\\"bias\\\":0.0792995627466122,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":18769.654459686022,\\\"ask\\\":18882.611256835586,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:56 AM\\\",\\\"price\\\":18826.132858260804,\\\"maxShares\\\":6700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0058,\\\"forecast\\\":0.5791965639012971,\\\"bias\\\":0.07919656390129715,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":18689.48343308831,\\\"ask\\\":18801.957756657546,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:00 AM\\\",\\\"price\\\":18745.720594872928,\\\"maxShares\\\":6700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0058,\\\"forecast\\\":0.5788568397000526,\\\"bias\\\":0.07885683970005264,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":18778.75599376309,\\\"ask\\\":18891.76756443769,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:04 AM\\\",\\\"price\\\":18835.26177910039,\\\"maxShares\\\":6700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0058,\\\"forecast\\\":0.5784801705410603,\\\"bias\\\":0.07848017054106027,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":18809.615107597117,\\\"ask\\\":18922.812390090177,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:08 AM\\\",\\\"price\\\":18866.21374884365,\\\"maxShares\\\":6700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0058,\\\"forecast\\\":0.5786091369389007,\\\"bias\\\":0.0786091369389007,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":18900.57134320533,\\\"ask\\\":19014.316005250697,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:13 AM\\\",\\\"price\\\":18957.443674228016,\\\"maxShares\\\":6700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0058,\\\"forecast\\\":0.5789892612072323,\\\"bias\\\":0.07898926120723226,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":18907.66129246346,\\\"ask\\\":19021.448622207474,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:17 AM\\\",\\\"price\\\":18964.55495733547,\\\"maxShares\\\":6700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0058,\\\"forecast\\\":0.5789596308937497,\\\"bias\\\":0.07895963089374969,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":18923.244422426375,\\\"ask\\\":19037.125532290524,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:21 AM\\\",\\\"price\\\":18980.18497735845,\\\"maxShares\\\":6700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0058,\\\"forecast\\\":0.5788945547232489,\\\"bias\\\":0.07889455472324891,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":18822.117265901514,\\\"ask\\\":18935.389787060398,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:25 AM\\\",\\\"price\\\":18878.753526480956,\\\"maxShares\\\":6700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0058,\\\"forecast\\\":0.5793184380660071,\\\"bias\\\":0.07931843806600714,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":18721.768694481983,\\\"ask\\\":18834.437312502938,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:29 AM\\\",\\\"price\\\":18778.103003492462,\\\"maxShares\\\":6700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0058,\\\"forecast\\\":0.5788932916988534,\\\"bias\\\":0.0788932916988534,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":18799.292346335482,\\\"ask\\\":18912.427505892163,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:33 AM\\\",\\\"price\\\":18855.859926113822,\\\"maxShares\\\":6700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0058,\\\"forecast\\\":0.578566608030283,\\\"bias\\\":0.07856660803028304,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":18825.66789725227,\\\"ask\\\":18938.961786302934,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:38 AM\\\",\\\"price\\\":18882.314841777603,\\\"maxShares\\\":6700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0058,\\\"forecast\\\":0.5784563784784315,\\\"bias\\\":0.07845637847843145,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":18789.676780575108,\\\"ask\\\":18902.75407313624,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:42 AM\\\",\\\"price\\\":18846.215426855673,\\\"maxShares\\\":6700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0058,\\\"forecast\\\":0.5783060974116063,\\\"bias\\\":0.07830609741160632,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":18896.337719417763,\\\"ask\\\":19010.056903285873,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:46 AM\\\",\\\"price\\\":18953.197311351818,\\\"maxShares\\\":6700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0058,\\\"forecast\\\":0.5778615872710349,\\\"bias\\\":0.07786158727103487,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":18863.8436263279,\\\"ask\\\":18977.367258983835,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:50 AM\\\",\\\"price\\\":18920.60544265587,\\\"maxShares\\\":6700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0058,\\\"forecast\\\":0.5779957084880586,\\\"bias\\\":0.07799570848805859,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":18935.47762419297,\\\"ask\\\":19049.43235412793,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:54 AM\\\",\\\"price\\\":18992.45498916045,\\\"maxShares\\\":6700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0058,\\\"forecast\\\":0.5776995257733377,\\\"bias\\\":0.07769952577333772,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":18859.664537050066,\\\"ask\\\":18973.163019720378,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:58 AM\\\",\\\"price\\\":18916.413778385224,\\\"maxShares\\\":6700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0058,\\\"forecast\\\":0.5780118664783828,\\\"bias\\\":0.07801186647838276,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":18936.344590857203,\\\"ask\\\":19050.304538244505,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:03 AM\\\",\\\"price\\\":18993.324564550854,\\\"maxShares\\\":6700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0058,\\\"forecast\\\":0.5776946840540927,\\\"bias\\\":0.07769468405409274,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":18836.573285722618,\\\"ask\\\":18949.93280399176,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:07 AM\\\",\\\"price\\\":18893.25304485719,\\\"maxShares\\\":6700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0058,\\\"forecast\\\":0.5781062079503192,\\\"bias\\\":0.0781062079503192,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":18828.27713429375,\\\"ask\\\":18941.58672587425,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:11 AM\\\",\\\"price\\\":18884.931930084,\\\"maxShares\\\":6700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0058,\\\"forecast\\\":0.578071792643806,\\\"bias\\\":0.07807179264380604,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":18751.969128491954,\\\"ask\\\":18864.81949436051,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:15 AM\\\",\\\"price\\\":18808.394311426233,\\\"maxShares\\\":6700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0058,\\\"forecast\\\":0.577754092525744,\\\"bias\\\":0.07775409252574395,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":18698.756767690043,\\\"ask\\\":18811.28689868918,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:19 AM\\\",\\\"price\\\":18755.021833189614,\\\"maxShares\\\":6700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0058,\\\"forecast\\\":0.5775328222628753,\\\"bias\\\":0.07753282226287528,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":18677.076233077187,\\\"ask\\\":18789.47588944475,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:23 AM\\\",\\\"price\\\":18733.27606126097,\\\"maxShares\\\":6700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0058,\\\"forecast\\\":0.577622823128949,\\\"bias\\\":0.07762282312894897,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":18571.104134624944,\\\"ask\\\":18682.866045164308,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:28 AM\\\",\\\"price\\\":18626.985089894628,\\\"maxShares\\\":6700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0058,\\\"forecast\\\":0.5771798848203201,\\\"bias\\\":0.07717988482032012,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":18641.674622486647,\\\"ask\\\":18753.86123004424,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:32 AM\\\",\\\"price\\\":18697.767926265446,\\\"maxShares\\\":6700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0058,\\\"forecast\\\":0.5774731695967877,\\\"bias\\\":0.07747316959678774,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":18543.51913528947,\\\"ask\\\":18655.115037808762,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:36 AM\\\",\\\"price\\\":18599.317086549116,\\\"maxShares\\\":6700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0058,\\\"forecast\\\":0.4221167455293001,\\\"bias\\\":0.07788325447069988,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":18586.06575574553,\\\"ask\\\":18697.91770613116,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:40 AM\\\",\\\"price\\\":18641.991730938345,\\\"maxShares\\\":6700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0058,\\\"forecast\\\":0.42229544242300576,\\\"bias\\\":0.07770455757699424,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":18675.359381393715,\\\"ask\\\":18787.74870565486,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:44 AM\\\",\\\"price\\\":18731.554043524287,\\\"maxShares\\\":6700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0058,\\\"forecast\\\":0.422668760895383,\\\"bias\\\":0.07733123910461698,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":18744.398654333876,\\\"ask\\\":18857.203460678913,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:48 AM\\\",\\\"price\\\":18800.801057506396,\\\"maxShares\\\":6700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0058,\\\"forecast\\\":0.422382881924365,\\\"bias\\\":0.07761711807563498,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":18753.243882620452,\\\"ask\\\":18866.101920028395,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:53 AM\\\",\\\"price\\\":18809.672901324426,\\\"maxShares\\\":6700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0058,\\\"forecast\\\":0.4223462554557871,\\\"bias\\\":0.07765374454421292,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":18673.57471649786,\\\"ask\\\":18785.953300548998,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:57 AM\\\",\\\"price\\\":18729.76400852343,\\\"maxShares\\\":6700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0058,\\\"forecast\\\":0.4220149525762871,\\\"bias\\\":0.07798504742371293,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":18594.62944495437,\\\"ask\\\":18706.53293208549,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:01 AM\\\",\\\"price\\\":18650.581188519933,\\\"maxShares\\\":6700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0058,\\\"forecast\\\":0.4216838596247754,\\\"bias\\\":0.07831614037522461,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":18604.766859432002,\\\"ask\\\":18716.731354072515,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:05 AM\\\",\\\"price\\\":18660.74910675226,\\\"maxShares\\\":6700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0058,\\\"forecast\\\":0.4217265559945859,\\\"bias\\\":0.07827344400541408,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":18664.327796862875,\\\"ask\\\":18776.650732450813,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:07 AM\\\",\\\"price\\\":18720.489264656844,\\\"maxShares\\\":6700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0058,\\\"forecast\\\":0.42197713907020995,\\\"bias\\\":0.07802286092979005,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":18713.80486231514,\\\"ask\\\":18826.42555356277,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:11 AM\\\",\\\"price\\\":18770.115207938958,\\\"maxShares\\\":6700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0058,\\\"forecast\\\":0.42218396903156785,\\\"bias\\\":0.07781603096843215,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":18739.745841423002,\\\"ask\\\":18852.522646887934,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:16 AM\\\",\\\"price\\\":18796.13424415547,\\\"maxShares\\\":6700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0058,\\\"forecast\\\":0.4222918372095499,\\\"bias\\\":0.07770816279045012,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":18834.98789227942,\\\"ask\\\":18948.33786956495,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:20 AM\\\",\\\"price\\\":18891.662880922187,\\\"maxShares\\\":6700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0058,\\\"forecast\\\":0.4218968966988794,\\\"bias\\\":0.07810310330112058,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":18929.977818928128,\\\"ask\\\":19043.89945073712,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:24 AM\\\",\\\"price\\\":18986.938634832626,\\\"maxShares\\\":6700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0058,\\\"forecast\\\":0.4215030016724509,\\\"bias\\\":0.07849699832754908,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":18921.838881155258,\\\"ask\\\":19035.711532395908,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:28 AM\\\",\\\"price\\\":18978.775206775583,\\\"maxShares\\\":6700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0058,\\\"forecast\\\":0.4214692373967503,\\\"bias\\\":0.0785307626032497,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":19020.872678109732,\\\"ask\\\":19135.341320104373,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:32 AM\\\",\\\"price\\\":19078.106999107054,\\\"maxShares\\\":6700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0058,\\\"forecast\\\":0.42188025451021255,\\\"bias\\\":0.07811974548978745,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":19053.766342654602,\\\"ask\\\":19168.432940504077,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:36 AM\\\",\\\"price\\\":19111.09964157934,\\\"maxShares\\\":6700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0058,\\\"forecast\\\":0.4220153505568534,\\\"bias\\\":0.07798464944314659,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":19157.122862233802,\\\"ask\\\":19272.411465216148,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:40 AM\\\",\\\"price\\\":19214.767163724977,\\\"maxShares\\\":6700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0058,\\\"forecast\\\":0.42159232542879754,\\\"bias\\\":0.07840767457120246,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":19194.20854016741,\\\"ask\\\":19309.720326768213,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:45 AM\\\",\\\"price\\\":19251.964433467812,\\\"maxShares\\\":6700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0058,\\\"forecast\\\":0.42144053845182916,\\\"bias\\\":0.07855946154817084,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0}],\\\"longTermRecords\\\":[{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":18622.67505575874,\\\"ask\\\":18734.747322894713,\\\"price\\\":18678.711189326736,\\\"maxShares\\\":6700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:27:23 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":18665.66738635002,\\\"ask\\\":18777.99838366006,\\\"price\\\":18721.832885005035,\\\"maxShares\\\":6700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":49259.88,\\\"averageShortPrice\\\":3288.676308587289,\\\"dateObserved\\\":\\\"7/29/2023, 6:34:14 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":18958.8902077214,\\\"ask\\\":19072.985835852127,\\\"price\\\":19015.93802178676,\\\"maxShares\\\":6700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:41:02 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":17658.485243376726,\\\"ask\\\":17764.754963998847,\\\"price\\\":17711.42541106026,\\\"maxShares\\\":6700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:47:54 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":17427.44678131903,\\\"ask\\\":17532.326099962873,\\\"price\\\":17481.587190619026,\\\"maxShares\\\":6700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:54:48 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":17947.463682373724,\\\"ask\\\":18055.472490893528,\\\"price\\\":18001.46808663362,\\\"maxShares\\\":6700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:01:39 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":17267.13724944757,\\\"ask\\\":17371.051816645846,\\\"price\\\":17319.094533046715,\\\"maxShares\\\":6700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:08:30 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":17602.912373980053,\\\"ask\\\":17708.847654064175,\\\"price\\\":17656.23813128896,\\\"maxShares\\\":6700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:15:23 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":17212.102678269926,\\\"ask\\\":17315.686044438033,\\\"price\\\":17263.26693337503,\\\"maxShares\\\":6700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:22:11 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":16561.748682958936,\\\"ask\\\":16661.41818355849,\\\"price\\\":16611.996344461233,\\\"maxShares\\\":6700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:29:00 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":15549.177180408285,\\\"ask\\\":15642.7529708621,\\\"price\\\":15595.965075635204,\\\"maxShares\\\":6700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":140611.05,\\\"averageShortPrice\\\":7200.7112163245565,\\\"dateObserved\\\":\\\"7/29/2023, 7:35:51 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":15725.061327699346,\\\"ask\\\":15819.695598477882,\\\"price\\\":15772.92614802307,\\\"maxShares\\\":6700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:42:40 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":15271.828013220727,\\\"ask\\\":15363.734701364476,\\\"price\\\":15317.781357292595,\\\"maxShares\\\":6700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":53325.6,\\\"averageShortPrice\\\":2400.346804643017,\\\"dateObserved\\\":\\\"7/29/2023, 7:49:32 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":15965.429943257812,\\\"ask\\\":16061.51076538373,\\\"price\\\":16013.846410526021,\\\"maxShares\\\":6700000,\\\"investedShares\\\":44966.74,\\\"averagePrice\\\":2179.389499712025,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:56:21 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":16344.74665515332,\\\"ask\\\":16443.110225796165,\\\"price\\\":16393.928440474727,\\\"maxShares\\\":6700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:03:13 AM\\\",\\\"bias\\\":null},{\\\"volatility\\\":0.0058,\\\"forecast\\\":0.5748428876544619,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":16636.99871201835,\\\"ask\\\":16737.121071368503,\\\"price\\\":16687.60852446119,\\\"maxShares\\\":6700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:09:58 AM\\\",\\\"bias\\\":0.07762533802742022},{\\\"volatility\\\":0.0058,\\\"forecast\\\":0.5753343939653189,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":17160.141924716907,\\\"ask\\\":17263.412588255822,\\\"price\\\":17212.31090479005,\\\"maxShares\\\":6700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:16:47 AM\\\",\\\"bias\\\":0.07707112643685321},{\\\"volatility\\\":0.0058,\\\"forecast\\\":0.5775330392500169,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":17992.59372521419,\\\"ask\\\":18100.87412877616,\\\"price\\\":18047.602728362497,\\\"maxShares\\\":6700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:35 AM\\\",\\\"bias\\\":0.07951515838205392}],\\\"recentTicksOfPrices\\\":[18626.985089894628,18697.767926265446,18599.317086549116,18641.991730938345,18731.554043524287,18800.801057506396,18809.672901324426,18729.76400852343,18650.581188519933,18660.74910675226,18720.489264656844,18770.115207938958,18796.13424415547,18891.662880922187,18986.938634832626,18978.775206775583,19078.106999107054,19111.09964157934,19214.767163724977,19251.964433467812]}],[\\\"AERO\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":17723.21008328256,\\\"ask\\\":18009.06831043228,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:37 AM\\\",\\\"price\\\":17866.13919685742,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.5631988743726105,\\\"bias\\\":0.06319887437261051,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":17751.096054732254,\\\"ask\\\":18037.404055615036,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:39 AM\\\",\\\"price\\\":17894.250055173645,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.56309943629124,\\\"bias\\\":0.06309943629124004,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":17839.057088586265,\\\"ask\\\":18126.783815821527,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:44 AM\\\",\\\"price\\\":17982.920452203896,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.5634121094712324,\\\"bias\\\":0.06341210947123244,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":17794.756208704373,\\\"ask\\\":18081.768405618957,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:48 AM\\\",\\\"price\\\":17938.262307161665,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.5632542420516513,\\\"bias\\\":0.06325424205165131,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":17853.15182178286,\\\"ask\\\":18141.105883424516,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:52 AM\\\",\\\"price\\\":17997.128852603688,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.5630466657184272,\\\"bias\\\":0.06304666571842721,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":17877.14013541791,\\\"ask\\\":18165.481105344006,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:56 AM\\\",\\\"price\\\":18021.31062038096,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.5631313781101659,\\\"bias\\\":0.06313137811016589,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":17956.47086497622,\\\"ask\\\":18246.091362798416,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:00 AM\\\",\\\"price\\\":18101.28111388732,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.5634115268501525,\\\"bias\\\":0.0634115268501525,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":18045.199732047797,\\\"ask\\\":18336.251340629213,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:04 AM\\\",\\\"price\\\":18190.725536338505,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.5637248641968394,\\\"bias\\\":0.06372486419683943,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":18075.87593354768,\\\"ask\\\":18367.422319572644,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:08 AM\\\",\\\"price\\\":18221.64912656016,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.5638331942127818,\\\"bias\\\":0.06383319421278177,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":17985.903784971037,\\\"ask\\\":18275.999007309278,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:13 AM\\\",\\\"price\\\":18130.951396140157,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.563513876946188,\\\"bias\\\":0.06351387694618804,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":17992.883275416327,\\\"ask\\\":18283.091070181104,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:17 AM\\\",\\\"price\\\":18137.987172798716,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.5634892301726597,\\\"bias\\\":0.06348923017265973,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":17977.55579461026,\\\"ask\\\":18267.516371942682,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:21 AM\\\",\\\"price\\\":18122.53608327647,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.5634350999022281,\\\"bias\\\":0.06343509990222806,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":18077.475978187806,\\\"ask\\\":18369.04817138438,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:25 AM\\\",\\\"price\\\":18223.262074786093,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.5630825243407943,\\\"bias\\\":0.06308252434079431,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":18177.712357019376,\\\"ask\\\":18470.901266003562,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:29 AM\\\",\\\"price\\\":18324.30681151147,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.5634323056827861,\\\"bias\\\":0.06343230568278613,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":18100.17813151417,\\\"ask\\\":18392.11648847408,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:33 AM\\\",\\\"price\\\":18246.147309994125,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.5631605859981847,\\\"bias\\\":0.06316058599818475,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":18073.945837495252,\\\"ask\\\":18365.461092938727,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:38 AM\\\",\\\"price\\\":18219.70346521699,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.5630689155308055,\\\"bias\\\":0.06306891553080551,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":18109.759789341988,\\\"ask\\\":18401.852689170082,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:42 AM\\\",\\\"price\\\":18255.806239256035,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.5631938880810252,\\\"bias\\\":0.06319388808102522,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":18004.034426531758,\\\"ask\\\":18294.422078572596,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:46 AM\\\",\\\"price\\\":18149.228252552177,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.5635649825027794,\\\"bias\\\":0.06356498250277942,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":18036.116861617127,\\\"ask\\\":18327.02197228837,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:50 AM\\\",\\\"price\\\":18181.56941695275,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.5636782526386019,\\\"bias\\\":0.06367825263860194,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":18106.969381299514,\\\"ask\\\":18399.01727454628,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:54 AM\\\",\\\"price\\\":18252.993327922897,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.5634281009744143,\\\"bias\\\":0.06342810097441431,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":18031.98393395489,\\\"ask\\\":18322.822384502546,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:58 AM\\\",\\\"price\\\":18177.403159228717,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.5631643371787495,\\\"bias\\\":0.06316433717874947,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":18107.826883422178,\\\"ask\\\":18399.88860734834,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:03 AM\\\",\\\"price\\\":18253.85774538526,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.5634300078698021,\\\"bias\\\":0.06343000786980213,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":18207.0455404706,\\\"ask\\\":18500.7075653169,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:07 AM\\\",\\\"price\\\":18353.87655289375,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.5630824542821778,\\\"bias\\\":0.06308245428217785,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":18198.750263129255,\\\"ask\\\":18492.278493179725,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:11 AM\\\",\\\"price\\\":18345.51437815449,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.563053700304785,\\\"bias\\\":0.06305370030478497,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":18122.460958853593,\\\"ask\\\":18414.758716254455,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:15 AM\\\",\\\"price\\\":18268.609837554024,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.5633191346152343,\\\"bias\\\":0.06331913461523431,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":18175.811671424846,\\\"ask\\\":18468.96992418976,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:19 AM\\\",\\\"price\\\":18322.390797807304,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.5635055398147703,\\\"bias\\\":0.06350553981477025,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":18154.01164789926,\\\"ask\\\":18446.818287381506,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:23 AM\\\",\\\"price\\\":18300.414967640383,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.5634292799616415,\\\"bias\\\":0.0634292799616415,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":18047.47634448152,\\\"ask\\\":18338.564672618322,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:28 AM\\\",\\\"price\\\":18193.020508549922,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.563803706693518,\\\"bias\\\":0.06380370669351798,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":18118.421890021258,\\\"ask\\\":18410.65450115063,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:32 AM\\\",\\\"price\\\":18264.538195585945,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.5640545223029931,\\\"bias\\\":0.06405452230299313,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":18019.749774606767,\\\"ask\\\":18310.39090000365,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:36 AM\\\",\\\"price\\\":18165.07033730521,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.5644052705262791,\\\"bias\\\":0.06440527052627909,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":18062.520333482436,\\\"ask\\\":18353.85130660312,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:40 AM\\\",\\\"price\\\":18208.185820042778,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.5642524021763073,\\\"bias\\\":0.06425240217630734,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":18152.291029784035,\\\"ask\\\":18445.0699173612,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:44 AM\\\",\\\"price\\\":18298.68047357262,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.5645717365092756,\\\"bias\\\":0.06457173650927561,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":18221.71060371533,\\\"ask\\\":18515.609161839773,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:48 AM\\\",\\\"price\\\":18368.659882777552,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.5648186773736064,\\\"bias\\\":0.06481867737360636,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":18230.60568529736,\\\"ask\\\":18524.647712479575,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:53 AM\\\",\\\"price\\\":18377.626698888467,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.564787035590032,\\\"bias\\\":0.06478703559003196,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":18311.06700701893,\\\"ask\\\":18606.40679745472,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:57 AM\\\",\\\"price\\\":18458.736902236826,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.5650729751031772,\\\"bias\\\":0.06507297510317722,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":18391.489124453958,\\\"ask\\\":18688.126045816116,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:01 AM\\\",\\\"price\\\":18539.807585135037,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.5647871749123097,\\\"bias\\\":0.06478717491230968,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":18381.12255736052,\\\"ask\\\":18677.592276027623,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:05 AM\\\",\\\"price\\\":18529.35741669407,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.5648237135183402,\\\"bias\\\":0.06482371351834015,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":18441.996661079233,\\\"ask\\\":18739.4482201289,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:07 AM\\\",\\\"price\\\":18590.722440604066,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.5650383949366178,\\\"bias\\\":0.06503839493661778,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":18391.561496727947,\\\"ask\\\":18688.19958538485,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:11 AM\\\",\\\"price\\\":18539.8805410564,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.5648600401983126,\\\"bias\\\":0.0648600401983126,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":18417.934897101833,\\\"ask\\\":18714.998363184124,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:16 AM\\\",\\\"price\\\":18566.46663014298,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.5647670312491421,\\\"bias\\\":0.06476703124914207,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":18321.607047948477,\\\"ask\\\":18617.11683904442,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:20 AM\\\",\\\"price\\\":18469.36194349645,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.5644265115119841,\\\"bias\\\":0.06442651151198409,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":18417.194091237343,\\\"ask\\\":18714.245608837944,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:24 AM\\\",\\\"price\\\":18565.719850037643,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.5640903870809377,\\\"bias\\\":0.06409038708093773,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":18425.389131840828,\\\"ask\\\":18722.57282751568,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:28 AM\\\",\\\"price\\\":18573.980979678254,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.5640618689841083,\\\"bias\\\":0.06406186898410826,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":18525.149953052038,\\\"ask\\\":18823.942694230296,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:32 AM\\\",\\\"price\\\":18674.546323641167,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.5637150179834347,\\\"bias\\\":0.06371501798343471,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":18558.291044683938,\\\"ask\\\":18857.618319598194,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:36 AM\\\",\\\"price\\\":18707.954682141066,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.563829002769235,\\\"bias\\\":0.06382900276923498,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":18454.73199871073,\\\"ask\\\":18752.388966431874,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:40 AM\\\",\\\"price\\\":18603.5604825713,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.5634708252225404,\\\"bias\\\":0.06347082522254044,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":18491.689869042795,\\\"ask\\\":18789.94293144671,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:45 AM\\\",\\\"price\\\":18640.816400244752,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006,\\\"forecast\\\":0.5635979333554902,\\\"bias\\\":0.06359793335549024,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0}],\\\"longTermRecords\\\":[{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":19296.005626230744,\\\"ask\\\":19607.23152342803,\\\"price\\\":19451.618574829376,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:27:23 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":18378.938411459105,\\\"ask\\\":18675.37290196651,\\\"price\\\":18527.155656712814,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:34:14 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":18949.402483904116,\\\"ask\\\":19255.038007838066,\\\"price\\\":19102.220245871096,\\\"maxShares\\\":9100000,\\\"investedShares\\\":47515.31,\\\"averagePrice\\\":4088.038877341511,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:41:02 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":18922.594255020795,\\\"ask\\\":19227.797388166284,\\\"price\\\":19075.759042574537,\\\"maxShares\\\":9100000,\\\"investedShares\\\":10067.92,\\\"averagePrice\\\":794.6029326089476,\\\"sharesShort\\\":40856.4,\\\"averageShortPrice\\\":2753.545927538969,\\\"dateObserved\\\":\\\"7/29/2023, 6:47:54 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":18722.76982445159,\\\"ask\\\":19024.749982910478,\\\"price\\\":18873.516396303752,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:54:48 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":20488.620043610885,\\\"ask\\\":20819.08165721751,\\\"price\\\":20653.850850414197,\\\"maxShares\\\":9100000,\\\"investedShares\\\":43291.98,\\\"averagePrice\\\":3742.025699710372,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:01:39 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":20584.458758594206,\\\"ask\\\":20916.466157926363,\\\"price\\\":20750.462458260277,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:08:30 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":20052.0906199193,\\\"ask\\\":20375.51143636961,\\\"price\\\":20214.993964355308,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:15:23 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":19969.192153815824,\\\"ask\\\":20291.275898232205,\\\"price\\\":20128.08349707336,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":18291.28,\\\"averageShortPrice\\\":1339.4347241056844,\\\"dateObserved\\\":\\\"7/29/2023, 7:22:11 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":19592.624343892956,\\\"ask\\\":19908.634413955762,\\\"price\\\":19751.09891542122,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":23517.36,\\\"averageShortPrice\\\":1722.1303595644515,\\\"dateObserved\\\":\\\"7/29/2023, 7:29:00 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":20487.14258121085,\\\"ask\\\":20817.58036477877,\\\"price\\\":20652.36147299481,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:35:51 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":20803.80521384242,\\\"ask\\\":21139.35045922698,\\\"price\\\":20972.333495695595,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:42:40 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":20213.893143033445,\\\"ask\\\":20539.923677598497,\\\"price\\\":20376.90841031597,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:49:32 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":19665.509767608582,\\\"ask\\\":19982.695409021635,\\\"price\\\":19823.69570455495,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:56:21 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":19131.47573710645,\\\"ask\\\":19440.047926414623,\\\"price\\\":19285.761831760545,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:03:13 AM\\\",\\\"bias\\\":null},{\\\"volatility\\\":0.006,\\\"forecast\\\":0.43776870923936656,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":18116.818422513737,\\\"ask\\\":18409.025171263962,\\\"price\\\":18262.318445710527,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:09:58 AM\\\",\\\"bias\\\":0.06348641750779604},{\\\"volatility\\\":0.006,\\\"forecast\\\":0.5569357688859107,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":16760.553431567838,\\\"ask\\\":17030.88493852861,\\\"price\\\":16895.183486239544,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:16:47 AM\\\",\\\"bias\\\":0.06048358169721929},{\\\"volatility\\\":0.006,\\\"forecast\\\":0.5620262329528961,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":17202.157519808094,\\\"ask\\\":17479.611673353393,\\\"price\\\":17340.02507631256,\\\"maxShares\\\":9100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:35 AM\\\",\\\"bias\\\":0.0648246060252966}],\\\"recentTicksOfPrices\\\":[18193.020508549922,18264.538195585945,18165.07033730521,18208.185820042778,18298.68047357262,18368.659882777552,18377.626698888467,18458.736902236826,18539.807585135037,18529.35741669407,18590.722440604066,18539.8805410564,18566.46663014298,18469.36194349645,18565.719850037643,18573.980979678254,18674.546323641167,18707.954682141066,18603.5604825713,18640.816400244752]}],[\\\"OMN\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":17980.39874354099,\\\"ask\\\":18233.8988265315,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:37 AM\\\",\\\"price\\\":18107.148785036246,\\\"maxShares\\\":8700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5514965322154803,\\\"bias\\\":0.05149653221548034,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":18013.404485593575,\\\"ask\\\":18267.369906337088,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:39 AM\\\",\\\"price\\\":18140.387195965333,\\\"maxShares\\\":8700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.551591061890998,\\\"bias\\\":0.05159106189099805,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":17909.86541479947,\\\"ask\\\":18162.371070194426,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:44 AM\\\",\\\"price\\\":18036.11824249695,\\\"maxShares\\\":8700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5512928078011007,\\\"bias\\\":0.05129280780110068,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":17857.99737278707,\\\"ask\\\":18109.771756693433,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:48 AM\\\",\\\"price\\\":17983.884564740252,\\\"maxShares\\\":8700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5514417862926093,\\\"bias\\\":0.051441786292609315,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":17926.36771036433,\\\"ask\\\":18179.10602652254,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:52 AM\\\",\\\"price\\\":18052.736868443437,\\\"maxShares\\\":8700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5516387340365799,\\\"bias\\\":0.051638734036579925,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":17898.310554221942,\\\"ask\\\":18150.653301209964,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:56 AM\\\",\\\"price\\\":18024.481927715955,\\\"maxShares\\\":8700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5515577858364985,\\\"bias\\\":0.051557785836498504,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":17990.97267433367,\\\"ask\\\":18244.62183590534,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:00 AM\\\",\\\"price\\\":18117.797255119505,\\\"maxShares\\\":8700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5518247078864542,\\\"bias\\\":0.05182470788645421,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":17887.85124704054,\\\"ask\\\":18140.046531490254,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:04 AM\\\",\\\"price\\\":18013.948889265397,\\\"maxShares\\\":8700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5515259443417169,\\\"bias\\\":0.05152594434171687,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":17852.44463494855,\\\"ask\\\":18104.140732520835,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:08 AM\\\",\\\"price\\\":17978.292683734693,\\\"maxShares\\\":8700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5514237533442773,\\\"bias\\\":0.05142375334427729,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":17956.633260871797,\\\"ask\\\":18209.798281669584,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:13 AM\\\",\\\"price\\\":18083.21577127069,\\\"maxShares\\\":8700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5511236392528845,\\\"bias\\\":0.051123639252884545,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":17948.50745242032,\\\"ask\\\":18201.55790995696,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:17 AM\\\",\\\"price\\\":18075.03268118864,\\\"maxShares\\\":8700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5511467844030321,\\\"bias\\\":0.05114678440303211,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":17966.36061932023,\\\"ask\\\":18219.66278313743,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:21 AM\\\",\\\"price\\\":18093.011701228832,\\\"maxShares\\\":8700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5510959093048792,\\\"bias\\\":0.05109590930487917,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":17850.610236774242,\\\"ask\\\":18102.280471733797,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:25 AM\\\",\\\"price\\\":17976.44535425402,\\\"maxShares\\\":8700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5507645833182532,\\\"bias\\\":0.050764583318253176,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":17735.877580662887,\\\"ask\\\":17985.930235375152,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:29 AM\\\",\\\"price\\\":17860.90390801902,\\\"maxShares\\\":8700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5504361893352658,\\\"bias\\\":0.050436189335265835,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":17824.513565837187,\\\"ask\\\":18075.815871901355,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:33 AM\\\",\\\"price\\\":17950.164718869273,\\\"maxShares\\\":8700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.55018413181458,\\\"bias\\\":0.050184131814580035,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":17854.69554891245,\\\"ask\\\":18106.423381424807,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:38 AM\\\",\\\"price\\\":17980.55946516863,\\\"maxShares\\\":8700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5500991557723739,\\\"bias\\\":0.05009915577237389,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":17813.514664054313,\\\"ask\\\":18064.66190000271,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:42 AM\\\",\\\"price\\\":17939.08828202851,\\\"maxShares\\\":8700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5502149738803813,\\\"bias\\\":0.05021497388038132,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":17692.304082706723,\\\"ask\\\":17941.74240814267,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:46 AM\\\",\\\"price\\\":17817.023245424698,\\\"maxShares\\\":8700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.549870949374136,\\\"bias\\\":0.04987094937413605,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":17655.59895542128,\\\"ask\\\":17904.519786615536,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:50 AM\\\",\\\"price\\\":17780.059371018408,\\\"maxShares\\\":8700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5488341567117938,\\\"bias\\\":0.04883415671179381,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":17575.05079297151,\\\"ask\\\":17822.83600052599,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:54 AM\\\",\\\"price\\\":17698.94339674875,\\\"maxShares\\\":8700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5465960399437375,\\\"bias\\\":0.04659603994373751,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":17660.316982154178,\\\"ask\\\":17909.304331348696,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:58 AM\\\",\\\"price\\\":17784.810656751437,\\\"maxShares\\\":8700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5443354110534957,\\\"bias\\\":0.0443354110534957,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":17574.0804859209,\\\"ask\\\":17821.852013416257,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:03 AM\\\",\\\"price\\\":17697.966249668578,\\\"maxShares\\\":8700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.542159860240821,\\\"bias\\\":0.04215986024082097,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":17686.423587896435,\\\"ask\\\":17935.779006054086,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:07 AM\\\",\\\"price\\\":17811.101296975263,\\\"maxShares\\\":8700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5394647721637501,\\\"bias\\\":0.039464772163750106,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":17695.828963787804,\\\"ask\\\":17945.316985432342,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:11 AM\\\",\\\"price\\\":17820.572974610073,\\\"maxShares\\\":8700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5392549044000258,\\\"bias\\\":0.03925490440002577,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":17782.73784979263,\\\"ask\\\":18033.451172951838,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:15 AM\\\",\\\"price\\\":17908.094511372234,\\\"maxShares\\\":8700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5411828163495669,\\\"bias\\\":0.041182816349566886,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":17843.81355179357,\\\"ask\\\":18095.387962392873,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:19 AM\\\",\\\"price\\\":17969.600757093223,\\\"maxShares\\\":8700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.539768371937142,\\\"bias\\\":0.039768371937142,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":17868.812332038575,\\\"ask\\\":18120.739192711826,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:23 AM\\\",\\\"price\\\":17994.7757623752,\\\"maxShares\\\":8700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5403255178565793,\\\"bias\\\":0.04032551785657934,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":17991.873077949393,\\\"ask\\\":18245.53493403327,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:28 AM\\\",\\\"price\\\":18118.70400599133,\\\"maxShares\\\":8700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5375483392649316,\\\"bias\\\":0.03754833926493162,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":17909.73498779486,\\\"ask\\\":18162.238804339802,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:32 AM\\\",\\\"price\\\":18035.986896067334,\\\"maxShares\\\":8700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5358262876110141,\\\"bias\\\":0.03582628761101414,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":18024.149636712857,\\\"ask\\\":18278.266550019984,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:36 AM\\\",\\\"price\\\":18151.208093366422,\\\"maxShares\\\":8700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5381150161275682,\\\"bias\\\":0.03811501612756818,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":17974.376296306233,\\\"ask\\\":18227.7914706751,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:40 AM\\\",\\\"price\\\":18101.083883490668,\\\"maxShares\\\":8700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5391704695358243,\\\"bias\\\":0.03917046953582426,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":18078.59768698529,\\\"ask\\\":18333.482246519823,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:44 AM\\\",\\\"price\\\":18206.039966752556,\\\"maxShares\\\":8700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5414417031749097,\\\"bias\\\":0.041441703174909694,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":17998.29526211278,\\\"ask\\\":18252.047662585668,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:48 AM\\\",\\\"price\\\":18125.171462349226,\\\"maxShares\\\":8700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5432906945417739,\\\"bias\\\":0.04329069454177392,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":18008.545618196516,\\\"ask\\\":18262.442535270784,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:53 AM\\\",\\\"price\\\":18135.494076733652,\\\"maxShares\\\":8700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.543537242910774,\\\"bias\\\":0.04353724291077399,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":18101.27374669056,\\\"ask\\\":18356.478008980255,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:57 AM\\\",\\\"price\\\":18228.87587783541,\\\"maxShares\\\":8700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.541295458848641,\\\"bias\\\":0.04129545884864105,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":18194.024570886595,\\\"ask\\\":18450.5364983714,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:01 AM\\\",\\\"price\\\":18322.280534628997,\\\"maxShares\\\":8700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5434114358220653,\\\"bias\\\":0.0434114358220653,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":18182.061220093517,\\\"ask\\\":18438.40447999413,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:05 AM\\\",\\\"price\\\":18310.232850043823,\\\"maxShares\\\":8700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5431257992108561,\\\"bias\\\":0.04312579921085613,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":18252.311887497406,\\\"ask\\\":18509.645589838758,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:07 AM\\\",\\\"price\\\":18380.978738668084,\\\"maxShares\\\":8700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5414595325867284,\\\"bias\\\":0.04145953258672841,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":18194.10260234999,\\\"ask\\\":18450.615629976273,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:11 AM\\\",\\\"price\\\":18322.359116163134,\\\"maxShares\\\":8700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5401330974186055,\\\"bias\\\":0.04013309741860549,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":18163.714821306923,\\\"ask\\\":18419.799421003092,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:16 AM\\\",\\\"price\\\":18291.75712115501,\\\"maxShares\\\":8700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5408045216228141,\\\"bias\\\":0.040804521622814116,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":18052.980055654454,\\\"ask\\\":18307.503440124907,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:20 AM\\\",\\\"price\\\":18180.241747889682,\\\"maxShares\\\":8700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5433074209366857,\\\"bias\\\":0.043307420936685714,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":17943.76167182304,\\\"ask\\\":18196.745220066263,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:24 AM\\\",\\\"price\\\":18070.25344594465,\\\"maxShares\\\":8700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5459434158908759,\\\"bias\\\":0.045943415890875916,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":17934.451396357406,\\\"ask\\\":18187.303681905243,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:28 AM\\\",\\\"price\\\":18060.877539131325,\\\"maxShares\\\":8700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5457049107655599,\\\"bias\\\":0.045704910765559936,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":18047.737915530284,\\\"ask\\\":18302.18739268781,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:32 AM\\\",\\\"price\\\":18174.962654109047,\\\"maxShares\\\":8700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5428178694308086,\\\"bias\\\":0.042817869430808564,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":18085.406096018793,\\\"ask\\\":18340.386645207374,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:36 AM\\\",\\\"price\\\":18212.896370613085,\\\"maxShares\\\":8700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5419241999629772,\\\"bias\\\":0.04192419996297725,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":18203.80709122432,\\\"ask\\\":18460.456939438962,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:40 AM\\\",\\\"price\\\":18332.13201533164,\\\"maxShares\\\":8700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5446688809352804,\\\"bias\\\":0.04466888093528043,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":18161.374973276394,\\\"ask\\\":18417.426584178575,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:45 AM\\\",\\\"price\\\":18289.400778727486,\\\"maxShares\\\":8700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5436252401166548,\\\"bias\\\":0.043625240116654806,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0}],\\\"longTermRecords\\\":[{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":19273.842857406384,\\\"ask\\\":19545.578809071725,\\\"price\\\":19409.710833239056,\\\"maxShares\\\":8700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:27:23 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":19648.21659600979,\\\"ask\\\":19925.23072727277,\\\"price\\\":19786.723661641296,\\\"maxShares\\\":8700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:34:14 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":18757.975426851703,\\\"ask\\\":19022.43832310138,\\\"price\\\":18890.206874976553,\\\"maxShares\\\":8700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:41:02 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":19149.130256380708,\\\"ask\\\":19419.107923640862,\\\"price\\\":19284.356436171893,\\\"maxShares\\\":8700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:47:54 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":19752.713281713048,\\\"ask\\\":20031.20067944112,\\\"price\\\":19894.362782112396,\\\"maxShares\\\":8700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:54:48 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":18825.89227679208,\\\"ask\\\":19091.312711711606,\\\"price\\\":18958.602494251852,\\\"maxShares\\\":8700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:01:39 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":18592.07993754116,\\\"ask\\\":18854.203924575973,\\\"price\\\":18723.141931058566,\\\"maxShares\\\":8700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":5721.96,\\\"averageShortPrice\\\":349.5309456881265,\\\"dateObserved\\\":\\\"7/29/2023, 7:08:30 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":17600.924645322095,\\\"ask\\\":17849.07464032159,\\\"price\\\":17725.45494786824,\\\"maxShares\\\":8700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":34331.76,\\\"averageShortPrice\\\":2097.1856741287584,\\\"dateObserved\\\":\\\"7/29/2023, 7:15:23 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":16678.014229368895,\\\"ask\\\":16913.1523957447,\\\"price\\\":16794.797163218595,\\\"maxShares\\\":8700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:22:11 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":16334.43039706856,\\\"ask\\\":16564.72448121655,\\\"price\\\":16447.890327281937,\\\"maxShares\\\":8700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:29:00 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":16456.66338465415,\\\"ask\\\":16688.680793904055,\\\"price\\\":16572.672089279105,\\\"maxShares\\\":8700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:35:51 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":16584.259357579245,\\\"ask\\\":16818.075703003313,\\\"price\\\":16701.97147636016,\\\"maxShares\\\":8700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:42:40 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":16934.846231274783,\\\"ask\\\":17173.6053926422,\\\"price\\\":17054.22581195849,\\\"maxShares\\\":8700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":18055.38,\\\"averageShortPrice\\\":996.9323034616016,\\\"dateObserved\\\":\\\"7/29/2023, 7:49:32 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":17993.17164935152,\\\"ask\\\":18246.851813592137,\\\"price\\\":18120.640804031245,\\\"maxShares\\\":8700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:56:21 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":18191.430789254384,\\\"ask\\\":18447.906147813857,\\\"price\\\":18319.66846853411,\\\"maxShares\\\":8700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:03:13 AM\\\",\\\"bias\\\":null},{\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.4482269364804016,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":17333.834433029442,\\\"ask\\\":17578.21880570055,\\\"price\\\":17455.608642200103,\\\"maxShares\\\":8700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:09:58 AM\\\",\\\"bias\\\":0.05387000889364579},{\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.47086162153088545,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":17290.55007320839,\\\"ask\\\":17534.324193072353,\\\"price\\\":17411.792681287963,\\\"maxShares\\\":8700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:16:47 AM\\\",\\\"bias\\\":0.05460323015825902},{\\\"volatility\\\":0.006999999999999999,\\\"forecast\\\":0.5521441288118137,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":18232.93383018533,\\\"ask\\\":18489.994327287626,\\\"price\\\":18360.83550802332,\\\"maxShares\\\":8700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:35 AM\\\",\\\"bias\\\":0.053386072341650936}],\\\"recentTicksOfPrices\\\":[18118.70400599133,18035.986896067334,18151.208093366422,18101.083883490668,18206.039966752556,18125.171462349226,18135.494076733652,18228.87587783541,18322.280534628997,18310.232850043823,18380.978738668084,18322.359116163134,18291.75712115501,18180.241747889682,18070.25344594465,18060.877539131325,18174.962654109047,18212.896370613085,18332.13201533164,18289.400778727486]}],[\\\"SLRS\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":22610.475987540773,\\\"ask\\\":22975.16108411401,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:37 AM\\\",\\\"price\\\":22792.81853582739,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.3888701626306201,\\\"bias\\\":0.11112983736937992,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":22655.538503916774,\\\"ask\\\":23020.950415270272,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:39 AM\\\",\\\"price\\\":22838.244459593523,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.38909164359895876,\\\"bias\\\":0.11090835640104124,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":22514.224731604947,\\\"ask\\\":22877.35738856632,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:44 AM\\\",\\\"price\\\":22695.791060085634,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.38839551133543326,\\\"bias\\\":0.11160448866456674,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":22443.450968582365,\\\"ask\\\":22805.442113236917,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:48 AM\\\",\\\"price\\\":22624.44654090964,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.388043574833152,\\\"bias\\\":0.111956425166848,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":22536.74205653803,\\\"ask\\\":22900.23789615961,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:52 AM\\\",\\\"price\\\":22718.48997634882,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.3875782035886824,\\\"bias\\\":0.11242179641131761,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":22498.450786052483,\\\"ask\\\":22861.329024537197,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:56 AM\\\",\\\"price\\\":22679.88990529484,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.387769540025835,\\\"bias\\\":0.11223045997416498,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":22372.69613117393,\\\"ask\\\":22733.54606877351,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:00 AM\\\",\\\"price\\\":22553.12109997372,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.3871387039979301,\\\"bias\\\":0.1128612960020699,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":22233.535999519016,\\\"ask\\\":22592.1414188661,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:04 AM\\\",\\\"price\\\":22412.838709192558,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.38784510503151887,\\\"bias\\\":0.11215489496848113,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":22185.763648761822,\\\"ask\\\":22543.598546322493,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:08 AM\\\",\\\"price\\\":22364.681097542158,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.38760360318076464,\\\"bias\\\":0.11239639681923536,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":22326.340091647246,\\\"ask\\\":22686.442351189944,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:13 AM\\\",\\\"price\\\":22506.391221418595,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.38831578446549,\\\"bias\\\":0.11168421553451002,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":22337.314252690277,\\\"ask\\\":22697.593514830445,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:17 AM\\\",\\\"price\\\":22517.45388376036,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.38837068108366424,\\\"bias\\\":0.11162931891633576,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":22313.21715880655,\\\"ask\\\":22673.107758142138,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:21 AM\\\",\\\"price\\\":22493.162458474344,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.3882501273258193,\\\"bias\\\":0.11174987267418068,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":22157.225884790012,\\\"ask\\\":22514.600495835013,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:25 AM\\\",\\\"price\\\":22335.913190312513,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.3874633860117093,\\\"bias\\\":0.11253661398829068,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":22002.6912881214,\\\"ask\\\":22357.57340567175,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:29 AM\\\",\\\"price\\\":22180.132346896575,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.38667299178104897,\\\"bias\\\":0.11332700821895103,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":22122.07600981687,\\\"ask\\\":22478.883687394562,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:33 AM\\\",\\\"price\\\":22300.479848605715,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.38605808912393164,\\\"bias\\\":0.11394191087606836,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":22162.74576114808,\\\"ask\\\":22520.209402456916,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:38 AM\\\",\\\"price\\\":22341.477581802497,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.386267562646194,\\\"bias\\\":0.113732437353806,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":22218.372701775712,\\\"ask\\\":22576.733551804355,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:42 AM\\\",\\\"price\\\":22397.553126790033,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.3859821021888888,\\\"bias\\\":0.11401789781111121,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":22383.638862780314,\\\"ask\\\":22744.665296050964,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:46 AM\\\",\\\"price\\\":22564.15207941564,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.38683019761468707,\\\"bias\\\":0.11316980238531293,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":22333.229482324667,\\\"ask\\\":22693.442861071842,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:50 AM\\\",\\\"price\\\":22513.336171698254,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.38708563848717914,\\\"bias\\\":0.11291436151282086,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":22222.651040140605,\\\"ask\\\":22581.080895626743,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:54 AM\\\",\\\"price\\\":22401.865967883674,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.387647492884017,\\\"bias\\\":0.11235250711598299,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":22339.706502165212,\\\"ask\\\":22700.024348974326,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:58 AM\\\",\\\"price\\\":22519.86542556977,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.38705568794560846,\\\"bias\\\":0.11294431205439154,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":22221.31953673393,\\\"ask\\\":22579.72791635867,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:03 AM\\\",\\\"price\\\":22400.5237265463,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.38645396245650154,\\\"bias\\\":0.11354603754349846,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":22375.546105657173,\\\"ask\\\":22736.442010587125,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:07 AM\\\",\\\"price\\\":22555.99405812215,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.3872420261786498,\\\"bias\\\":0.11275797382135022,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":22362.634666409165,\\\"ask\\\":22723.32232231899,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:11 AM\\\",\\\"price\\\":22542.978494364077,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.38730712887117413,\\\"bias\\\":0.11269287112882587,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":22244.0244258528,\\\"ask\\\":22602.799013366555,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:15 AM\\\",\\\"price\\\":22423.411719609678,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.3867062246329086,\\\"bias\\\":0.1132937753670914,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":22161.385947717215,\\\"ask\\\":22518.827656551366,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:19 AM\\\",\\\"price\\\":22340.10680213429,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.38628375894413536,\\\"bias\\\":0.11371624105586464,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":22127.728318252284,\\\"ask\\\":22484.62716209506,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:23 AM\\\",\\\"price\\\":22306.177740173673,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.38645672830866107,\\\"bias\\\":0.11354327169133893,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":21963.50266094225,\\\"ask\\\":22317.75270386067,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:28 AM\\\",\\\"price\\\":22140.62768240146,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.3873057148621492,\\\"bias\\\":0.11269428513785079,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":true,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":22072.866209697506,\\\"ask\\\":22428.880180821656,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:32 AM\\\",\\\"price\\\":22250.87319525958,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.3878668570049746,\\\"bias\\\":0.11213314299502541,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":21920.82374710916,\\\"ask\\\":22274.385420449627,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:36 AM\\\",\\\"price\\\":22097.604583779394,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.6113553894126135,\\\"bias\\\":0.11135538941261347,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":21986.728294411296,\\\"ask\\\":22341.35294432116,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:40 AM\\\",\\\"price\\\":22164.040619366227,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.611020601513511,\\\"bias\\\":0.11102060151351101,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":22125.142032054802,\\\"ask\\\":22481.999161604075,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:44 AM\\\",\\\"price\\\":22303.57059682944,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.6103216900517806,\\\"bias\\\":0.11032169005178061,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":22232.318368381628,\\\"ask\\\":22590.904148516816,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:48 AM\\\",\\\"price\\\":22411.611258449222,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.609787281073072,\\\"bias\\\":0.10978728107307201,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":22246.06536688965,\\\"ask\\\":22604.872872807224,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:53 AM\\\",\\\"price\\\":22425.469119848436,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.6097193958636169,\\\"bias\\\":0.1097193958636169,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":22122.390780614427,\\\"ask\\\":22479.203535140463,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:57 AM\\\",\\\"price\\\":22300.797157877445,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.6103327789750702,\\\"bias\\\":0.11033277897507021,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":22245.461929021672,\\\"ask\\\":22604.259702070412,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:01 AM\\\",\\\"price\\\":22424.860815546042,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.6097189763372773,\\\"bias\\\":0.10971897633727734,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":22229.581707195746,\\\"ask\\\":22588.123347634388,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:05 AM\\\",\\\"price\\\":22408.852527415067,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.6096405960192984,\\\"bias\\\":0.10964059601929843,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":22136.72010660679,\\\"ask\\\":22493.763979294,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:07 AM\\\",\\\"price\\\":22315.242042950395,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.6091806633288706,\\\"bias\\\":0.10918066332887055,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":22060.092632437292,\\\"ask\\\":22415.900578121764,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:11 AM\\\",\\\"price\\\":22237.996605279528,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.6088014156711913,\\\"bias\\\":0.10880141567119128,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":22020.095480861968,\\\"ask\\\":22375.258311198453,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:16 AM\\\",\\\"price\\\":22197.67689603021,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.6089990418221765,\\\"bias\\\":0.10899904182217646,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":21874.419757754178,\\\"ask\\\":22227.23297965344,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:20 AM\\\",\\\"price\\\":22050.82636870381,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.6097249360132612,\\\"bias\\\":0.10972493601326117,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":22018.975166945067,\\\"ask\\\":22374.119927702242,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:24 AM\\\",\\\"price\\\":22196.547547323655,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.6089998272698296,\\\"bias\\\":0.1089998272698296,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":22031.385604344956,\\\"ask\\\":22386.73053344729,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:28 AM\\\",\\\"price\\\":22209.058068896124,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.6089383922792055,\\\"bias\\\":0.10893839227920554,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":21881.32067104203,\\\"ask\\\":22234.245197994325,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:32 AM\\\",\\\"price\\\":22057.782934518178,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.6081912786649373,\\\"bias\\\":0.10819127866493727,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":21930.90460153383,\\\"ask\\\":22284.628869300504,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:36 AM\\\",\\\"price\\\":22107.766735417168,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.6079461129858729,\\\"bias\\\":0.10794611298587287,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":22086.787756063644,\\\"ask\\\":22443.02626825822,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:40 AM\\\",\\\"price\\\":22264.907012160933,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.6087133855137143,\\\"bias\\\":0.10871338551371434,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":22142.814333680526,\\\"ask\\\":22499.956500352793,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:45 AM\\\",\\\"price\\\":22321.38541701666,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0076,\\\"forecast\\\":0.6084376170770025,\\\"bias\\\":0.1084376170770025,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0}],\\\"longTermRecords\\\":[{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":19228.984233673968,\\\"ask\\\":19539.1291406687,\\\"price\\\":19384.05668717134,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:27:23 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":18916.236982782324,\\\"ask\\\":19221.337579278814,\\\"price\\\":19068.787281030578,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:34:14 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":20761.095916712973,\\\"ask\\\":21095.95230246641,\\\"price\\\":20928.52410958969,\\\"maxShares\\\":6200000,\\\"investedShares\\\":58674.5,\\\"averagePrice\\\":5325.997609126104,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:41:02 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":21773.585869786413,\\\"ask\\\":22124.772738653937,\\\"price\\\":21949.482179151866,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:47:54 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":23035.633192440775,\\\"ask\\\":23407.175663286605,\\\"price\\\":23224.361186110047,\\\"maxShares\\\":6200000,\\\"investedShares\\\":81869.9,\\\"averagePrice\\\":8360.81813654713,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:54:48 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":22481.837580623767,\\\"ask\\\":22844.447864182228,\\\"price\\\":22663.142722403,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":81834.38,\\\"averageShortPrice\\\":8364.449653834125,\\\"dateObserved\\\":\\\"7/29/2023, 7:01:39 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":22405.97430476629,\\\"ask\\\":22767.36098710123,\\\"price\\\":22586.66764593376,\\\"maxShares\\\":6200000,\\\"investedShares\\\":21707.7,\\\"averagePrice\\\":2303.3314053121258,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:08:30 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":23275.093276560743,\\\"ask\\\":23650.49800682785,\\\"price\\\":23462.15341278329,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":13001.82,\\\"averageShortPrice\\\":1384.422553821125,\\\"dateObserved\\\":\\\"7/29/2023, 7:15:23 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":24759.76694667025,\\\"ask\\\":25159.118026455268,\\\"price\\\":24958.174425647063,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:22:11 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":23827.535010760264,\\\"ask\\\":24211.850091578966,\\\"price\\\":24017.048290647883,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":25810.44,\\\"averageShortPrice\\\":2789.571431852673,\\\"dateObserved\\\":\\\"7/29/2023, 7:29:00 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":23408.79166677576,\\\"ask\\\":23786.352822691504,\\\"price\\\":23597.572244733637,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:35:51 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":23770.869029548554,\\\"ask\\\":24154.270142928362,\\\"price\\\":23966.318303478696,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:42:40 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":22740.893057218804,\\\"ask\\\":23107.681654915876,\\\"price\\\":22924.287356067336,\\\"maxShares\\\":6200000,\\\"investedShares\\\":35338.75,\\\"averagePrice\\\":4088.9949473894026,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:49:32 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":23710.46298420872,\\\"ask\\\":24092.889806534648,\\\"price\\\":23901.530927224765,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:56:21 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":20696.369075295934,\\\"ask\\\":21030.18147973618,\\\"price\\\":20863.27527751605,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":121326,\\\"averageShortPrice\\\":10302.820034018088,\\\"dateObserved\\\":\\\"7/29/2023, 8:03:13 AM\\\",\\\"bias\\\":null},{\\\"volatility\\\":0.0076,\\\"forecast\\\":0.5588061838504234,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":19963.73874751484,\\\"ask\\\":20285.734533765084,\\\"price\\\":20123.84132104503,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":65516.04,\\\"averageShortPrice\\\":5563.522818369774,\\\"dateObserved\\\":\\\"7/29/2023, 8:09:58 AM\\\",\\\"bias\\\":0.12523028243688583},{\\\"volatility\\\":0.0076,\\\"forecast\\\":0.5655933276486546,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":22916.264994129502,\\\"ask\\\":23285.88217145417,\\\"price\\\":23100.10088787975,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:16:47 AM\\\",\\\"bias\\\":0.12422014211411547},{\\\"volatility\\\":0.0076,\\\"forecast\\\":0.3851845820123581,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":22681.34930214203,\\\"ask\\\":23047.177516692715,\\\"price\\\":22862.85182562146,\\\"maxShares\\\":6200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:35 AM\\\",\\\"bias\\\":0.11867309796474612}],\\\"recentTicksOfPrices\\\":[22140.62768240146,22250.87319525958,22097.604583779394,22164.040619366227,22303.57059682944,22411.611258449222,22425.469119848436,22300.797157877445,22424.860815546042,22408.852527415067,22315.242042950395,22237.996605279528,22197.67689603021,22050.82636870381,22196.547547323655,22209.058068896124,22057.782934518178,22107.766735417168,22264.907012160933,22321.38541701666]}],[\\\"GPH\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":13593.440031076114,\\\"ask\\\":13730.057518825623,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:37 AM\\\",\\\"price\\\":13661.74877495087,\\\"maxShares\\\":11400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0055000000000000005,\\\"forecast\\\":0.5664694000101173,\\\"bias\\\":0.06646940001011725,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":13613.045814806004,\\\"ask\\\":13749.860345608075,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:39 AM\\\",\\\"price\\\":13681.45308020704,\\\"maxShares\\\":11400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0055000000000000005,\\\"forecast\\\":0.5663735313647799,\\\"bias\\\":0.06637353136477986,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":13551.490768288359,\\\"ask\\\":13687.686655406833,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:44 AM\\\",\\\"price\\\":13619.588711847597,\\\"maxShares\\\":11400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0055000000000000005,\\\"forecast\\\":0.5666750203950687,\\\"bias\\\":0.06667502039506867,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":13582.416417277122,\\\"ask\\\":13718.923114938196,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:48 AM\\\",\\\"price\\\":13650.66976610766,\\\"maxShares\\\":11400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0055000000000000005,\\\"forecast\\\":0.5665228623548713,\\\"bias\\\":0.06652286235487126,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":13623.274375511133,\\\"ask\\\":13760.19170591828,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:52 AM\\\",\\\"price\\\":13691.733040714707,\\\"maxShares\\\":11400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0055000000000000005,\\\"forecast\\\":0.5663227515462934,\\\"bias\\\":0.06632275154629341,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":13640.053827112088,\\\"ask\\\":13777.139795223766,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:56 AM\\\",\\\"price\\\":13708.596811167927,\\\"maxShares\\\":11400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0055000000000000005,\\\"forecast\\\":0.5662410634462861,\\\"bias\\\":0.06624106344628611,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":13695.538231330504,\\\"ask\\\":13833.181831645383,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:00 AM\\\",\\\"price\\\":13764.360031487944,\\\"maxShares\\\":11400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0055000000000000005,\\\"forecast\\\":0.5665105158976251,\\\"bias\\\":0.06651051589762513,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":13633.783281036429,\\\"ask\\\":13770.806228584534,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:04 AM\\\",\\\"price\\\":13702.294754810482,\\\"maxShares\\\":11400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0055000000000000005,\\\"forecast\\\":0.5668117788353311,\\\"bias\\\":0.06681177883533107,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":13612.570799412859,\\\"ask\\\":13749.380556190878,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:08 AM\\\",\\\"price\\\":13680.97567780187,\\\"maxShares\\\":11400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0055000000000000005,\\\"forecast\\\":0.5669158916918713,\\\"bias\\\":0.06691589169187129,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":13674.991324343058,\\\"ask\\\":13812.428423080173,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:13 AM\\\",\\\"price\\\":13743.709873711616,\\\"maxShares\\\":11400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0055000000000000005,\\\"forecast\\\":0.5666090484697403,\\\"bias\\\":0.06660904846974025,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":13679.85573184757,\\\"ask\\\":13817.341719102318,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:17 AM\\\",\\\"price\\\":13748.598725474945,\\\"maxShares\\\":11400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0055000000000000005,\\\"forecast\\\":0.5665853545932645,\\\"bias\\\":0.06658535459326453,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":13669.172717642528,\\\"ask\\\":13806.55133792034,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:21 AM\\\",\\\"price\\\":13737.862027781435,\\\"maxShares\\\":11400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0055000000000000005,\\\"forecast\\\":0.5666373937549359,\\\"bias\\\":0.06663739375493594,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":13738.81552157329,\\\"ask\\\":13876.894069528798,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:25 AM\\\",\\\"price\\\":13807.854795551044,\\\"maxShares\\\":11400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0055000000000000005,\\\"forecast\\\":0.5669769033246513,\\\"bias\\\":0.06697690332465134,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":13669.337653095401,\\\"ask\\\":13806.717931015957,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:29 AM\\\",\\\"price\\\":13738.02779205568,\\\"maxShares\\\":11400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0055000000000000005,\\\"forecast\\\":0.5673173303883717,\\\"bias\\\":0.06731733038837173,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":13723.012339353614,\\\"ask\\\":13860.932061357165,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:33 AM\\\",\\\"price\\\":13791.97220035539,\\\"maxShares\\\":11400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0055000000000000005,\\\"forecast\\\":0.5670529988838005,\\\"bias\\\":0.06705299888380045,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":13741.269960366139,\\\"ask\\\":13879.37317604821,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:38 AM\\\",\\\"price\\\":13810.321568207175,\\\"maxShares\\\":11400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0055000000000000005,\\\"forecast\\\":0.5669637890069089,\\\"bias\\\":0.06696378900690891,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":13766.229557992105,\\\"ask\\\":13904.583623901572,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:42 AM\\\",\\\"price\\\":13835.406590946839,\\\"maxShares\\\":11400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0055000000000000005,\\\"forecast\\\":0.5670854218133339,\\\"bias\\\":0.06708542181333388,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":13840.332558930377,\\\"ask\\\":13979.43137861812,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:46 AM\\\",\\\"price\\\":13909.881968774249,\\\"maxShares\\\":11400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0055000000000000005,\\\"forecast\\\":0.5667243039738677,\\\"bias\\\":0.06672430397386775,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":13817.761775712144,\\\"ask\\\":13956.63375335749,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:50 AM\\\",\\\"price\\\":13887.197764534818,\\\"maxShares\\\":11400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0055000000000000005,\\\"forecast\\\":0.5666153123857345,\\\"bias\\\":0.06661531238573448,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":13867.519601923706,\\\"ask\\\":14006.891658224446,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:54 AM\\\",\\\"price\\\":13937.205630074077,\\\"maxShares\\\":11400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0055000000000000005,\\\"forecast\\\":0.5663754303273721,\\\"bias\\\":0.06637543032737214,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":13814.85832935815,\\\"ask\\\":13953.70112663813,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:58 AM\\\",\\\"price\\\":13884.27972799814,\\\"maxShares\\\":11400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0055000000000000005,\\\"forecast\\\":0.5666284488198382,\\\"bias\\\":0.0666284488198382,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":13761.799414361896,\\\"ask\\\":13900.108956214777,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:03 AM\\\",\\\"price\\\":13830.954185288338,\\\"maxShares\\\":11400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0055000000000000005,\\\"forecast\\\":0.5668853362439183,\\\"bias\\\":0.06688533624391835,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":13830.920996968996,\\\"ask\\\":13969.925228094311,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:07 AM\\\",\\\"price\\\":13900.423112531655,\\\"maxShares\\\":11400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0055000000000000005,\\\"forecast\\\":0.5665493903290577,\\\"bias\\\":0.06654939032905771,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":13836.699986198431,\\\"ask\\\":13975.76229761751,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:11 AM\\\",\\\"price\\\":13906.23114190797,\\\"maxShares\\\":11400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0055000000000000005,\\\"forecast\\\":0.5665215839226715,\\\"bias\\\":0.06652158392267149,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":13890.093738827482,\\\"ask\\\":14029.692670875997,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:15 AM\\\",\\\"price\\\":13959.89320485174,\\\"maxShares\\\":11400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0055000000000000005,\\\"forecast\\\":0.5667782807506725,\\\"bias\\\":0.06677828075067249,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":13927.577198366243,\\\"ask\\\":14067.552848601077,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:19 AM\\\",\\\"price\\\":13997.565023483661,\\\"maxShares\\\":11400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0055000000000000005,\\\"forecast\\\":0.56695848694882,\\\"bias\\\":0.06695848694882,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":13942.908229513992,\\\"ask\\\":14083.03796046388,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:23 AM\\\",\\\"price\\\":14012.973094988936,\\\"maxShares\\\":11400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0055000000000000005,\\\"forecast\\\":0.5670321927078618,\\\"bias\\\":0.06703219270786176,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":14018.355211843846,\\\"ask\\\":14159.243203922677,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:28 AM\\\",\\\"price\\\":14088.799207883261,\\\"maxShares\\\":11400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0055000000000000005,\\\"forecast\\\":0.5673949130654452,\\\"bias\\\":0.0673949130654452,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":14068.869838884573,\\\"ask\\\":14210.265515657282,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:32 AM\\\",\\\"price\\\":14139.567677270928,\\\"maxShares\\\":11400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0055000000000000005,\\\"forecast\\\":0.5676377681541126,\\\"bias\\\":0.0676377681541126,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":14139.48798852795,\\\"ask\\\":14281.593395447828,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:36 AM\\\",\\\"price\\\":14210.54069198789,\\\"maxShares\\\":11400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0055000000000000005,\\\"forecast\\\":0.5672982629850584,\\\"bias\\\":0.06729826298505837,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":14108.790884581098,\\\"ask\\\":14250.58777789347,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:40 AM\\\",\\\"price\\\":14179.689331237285,\\\"maxShares\\\":11400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0055000000000000005,\\\"forecast\\\":0.56744468671415,\\\"bias\\\":0.06744468671415005,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":14173.068163080463,\\\"ask\\\":14315.511059191824,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:44 AM\\\",\\\"price\\\":14244.289611136144,\\\"maxShares\\\":11400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0055000000000000005,\\\"forecast\\\":0.5677519533641906,\\\"bias\\\":0.0677519533641906,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":14222.753222426529,\\\"ask\\\":14365.695465868,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:48 AM\\\",\\\"price\\\":14294.224344147266,\\\"maxShares\\\":11400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0055000000000000005,\\\"forecast\\\":0.5679894643805053,\\\"bias\\\":0.06798946438050535,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":14229.117599527948,\\\"ask\\\":14372.123806558378,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:53 AM\\\",\\\"price\\\":14300.620703043163,\\\"maxShares\\\":11400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0055000000000000005,\\\"forecast\\\":0.5680198882079792,\\\"bias\\\":0.06801988820797922,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":16,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":14171.782314411032,\\\"ask\\\":14314.212287420185,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:57 AM\\\",\\\"price\\\":14242.99730091561,\\\"maxShares\\\":11400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0055000000000000005,\\\"forecast\\\":0.5682950786954918,\\\"bias\\\":0.06829507869549178,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":14228.837846967193,\\\"ask\\\":14371.841242414099,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:01 AM\\\",\\\"price\\\":14300.339544690647,\\\"maxShares\\\":11400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0055000000000000005,\\\"forecast\\\":0.5680201230124671,\\\"bias\\\":0.06802012301246707,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":14236.193882210964,\\\"ask\\\":14379.27120766032,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:05 AM\\\",\\\"price\\\":14307.732544935643,\\\"maxShares\\\":11400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0055000000000000005,\\\"forecast\\\":0.5680552881065912,\\\"bias\\\":0.06805528810659123,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":14279.412003332476,\\\"ask\\\":14422.923681757928,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:07 AM\\\",\\\"price\\\":14351.167842545203,\\\"maxShares\\\":11400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0055000000000000005,\\\"forecast\\\":0.5682618897944218,\\\"bias\\\":0.06826188979442183,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":14243.606791136237,\\\"ask\\\":14386.758618182832,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:11 AM\\\",\\\"price\\\":14315.182704659535,\\\"maxShares\\\":11400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0055000000000000005,\\\"forecast\\\":0.5680902948125577,\\\"bias\\\":0.06809029481255768,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":14262.329942113725,\\\"ask\\\":14405.669941531953,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:16 AM\\\",\\\"price\\\":14333.99994182284,\\\"maxShares\\\":11400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0055000000000000005,\\\"forecast\\\":0.5681797991697455,\\\"bias\\\":0.06817979916974548,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":14331.066885694798,\\\"ask\\\":14475.097708666603,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:20 AM\\\",\\\"price\\\":14403.082297180701,\\\"maxShares\\\":11400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0055000000000000005,\\\"forecast\\\":0.5678512083274413,\\\"bias\\\":0.06785120832744129,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":16,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":14399.603938599641,\\\"ask\\\":14544.323576173507,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:24 AM\\\",\\\"price\\\":14471.963757386575,\\\"maxShares\\\":11400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0055000000000000005,\\\"forecast\\\":0.5681757006971921,\\\"bias\\\":0.06817570069719214,\\\"countOfNegative\\\":3,\\\"countOfPositive\\\":17,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":14405.477339301677,\\\"ask\\\":14550.256006028327,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:28 AM\\\",\\\"price\\\":14477.866672665003,\\\"maxShares\\\":11400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0055000000000000005,\\\"forecast\\\":0.5682035086292744,\\\"bias\\\":0.06820350862927438,\\\"countOfNegative\\\":3,\\\"countOfPositive\\\":17,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":14476.973453663573,\\\"ask\\\":14622.470674303406,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:32 AM\\\",\\\"price\\\":14549.72206398349,\\\"maxShares\\\":11400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0055000000000000005,\\\"forecast\\\":0.5685420108349276,\\\"bias\\\":0.06854201083492761,\\\"countOfNegative\\\":3,\\\"countOfPositive\\\":17,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":14453.271579952769,\\\"ask\\\":14598.530590806564,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:36 AM\\\",\\\"price\\\":14525.901085379666,\\\"maxShares\\\":11400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0055000000000000005,\\\"forecast\\\":0.5686544126586743,\\\"bias\\\":0.06865441265867434,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":16,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":14527.617630138691,\\\"ask\\\":14673.623837476767,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:40 AM\\\",\\\"price\\\":14600.62073380773,\\\"maxShares\\\":11400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0055000000000000005,\\\"forecast\\\":0.5683012618595096,\\\"bias\\\":0.06830126185950958,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":16,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":14554.286525931493,\\\"ask\\\":14700.560762373016,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:45 AM\\\",\\\"price\\\":14627.423644152255,\\\"maxShares\\\":11400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0055000000000000005,\\\"forecast\\\":0.5684266450628277,\\\"bias\\\":0.0684266450628277,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":16,\\\"magnitudeOfSignal\\\":0}],\\\"longTermRecords\\\":[{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":14216.039195790707,\\\"ask\\\":14358.913961577551,\\\"price\\\":14287.476578684133,\\\"maxShares\\\":11400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:27:23 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":14856.047393381545,\\\"ask\\\":15005.354402360259,\\\"price\\\":14930.700897870898,\\\"maxShares\\\":11400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:34:14 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":15002.955156157772,\\\"ask\\\":15153.738625063863,\\\"price\\\":15078.346890610816,\\\"maxShares\\\":11400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:41:02 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":14762.663367979336,\\\"ask\\\":14911.031844039437,\\\"price\\\":14836.999286760683,\\\"maxShares\\\":11400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:47:54 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":14860.696534555473,\\\"ask\\\":15010.050268571104,\\\"price\\\":14935.1863504983,\\\"maxShares\\\":11400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:54:48 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":14756.110513455362,\\\"ask\\\":14904.413131681044,\\\"price\\\":14830.261822568205,\\\"maxShares\\\":11400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:01:39 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":15147.105647863562,\\\"ask\\\":15299.337865430029,\\\"price\\\":15223.221756646792,\\\"maxShares\\\":11400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:08:30 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":15927.089352137502,\\\"ask\\\":16087.160601907726,\\\"price\\\":16007.996244475056,\\\"maxShares\\\":11400000,\\\"investedShares\\\":72731.75,\\\"averagePrice\\\":3636.6495992133387,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:15:23 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":15900.439674653984,\\\"ask\\\":16060.243088469597,\\\"price\\\":15980.89188525502,\\\"maxShares\\\":11400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:22:11 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":15448.864719567022,\\\"ask\\\":15604.12969162297,\\\"price\\\":15526.142637843986,\\\"maxShares\\\":11400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:29:00 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":14974.455076861443,\\\"ask\\\":15124.952112809797,\\\"price\\\":15049.703594835615,\\\"maxShares\\\":11400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:35:51 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":14937.843716583731,\\\"ask\\\":15087.972799162466,\\\"price\\\":15012.413202432888,\\\"maxShares\\\":11400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:42:40 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":14672.89135423677,\\\"ask\\\":14820.357599002973,\\\"price\\\":14746.624476619885,\\\"maxShares\\\":11400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:49:32 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":14369.880433749675,\\\"ask\\\":14514.301342631568,\\\"price\\\":14442.299334559515,\\\"maxShares\\\":11400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":42733.08,\\\"averageShortPrice\\\":1684.877947089613,\\\"dateObserved\\\":\\\"7/29/2023, 7:56:21 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":14517.891356238195,\\\"ask\\\":14663.799812079787,\\\"price\\\":14590.845584158993,\\\"maxShares\\\":11400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:03:13 AM\\\",\\\"bias\\\":null},{\\\"volatility\\\":0.0055000000000000005,\\\"forecast\\\":0.4650101447822879,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":14537.621644465644,\\\"ask\\\":14683.728394661272,\\\"price\\\":14610.941815069553,\\\"maxShares\\\":11400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:09:58 AM\\\",\\\"bias\\\":0.07437537496012853},{\\\"volatility\\\":0.0055000000000000005,\\\"forecast\\\":0.4615116355072708,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":13508.0742025893,\\\"ask\\\":13643.833742313818,\\\"price\\\":13575.557679257112,\\\"maxShares\\\":11400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:16:47 AM\\\",\\\"bias\\\":0.07225394200472107},{\\\"volatility\\\":0.0055000000000000005,\\\"forecast\\\":0.5682930441630876,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":13601.744283003782,\\\"ask\\\":13738.445230571662,\\\"price\\\":13669.718785685047,\\\"maxShares\\\":11400000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:35 AM\\\",\\\"bias\\\":0.07050153222342337}],\\\"recentTicksOfPrices\\\":[14088.799207883261,14139.567677270928,14210.54069198789,14179.689331237285,14244.289611136144,14294.224344147266,14300.620703043163,14242.99730091561,14300.339544690647,14307.732544935643,14351.167842545203,14315.182704659535,14333.99994182284,14403.082297180701,14471.963757386575,14477.866672665003,14549.72206398349,14525.901085379666,14600.62073380773,14627.423644152255]}],[\\\"NVMD\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":6705.828168047829,\\\"ask\\\":6800.371566187476,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:37 AM\\\",\\\"price\\\":6753.099867117653,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008,\\\"forecast\\\":0.4452497222751127,\\\"bias\\\":0.054750277724887275,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":6691.78954852607,\\\"ask\\\":6786.135020509317,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:39 AM\\\",\\\"price\\\":6738.962284517694,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008,\\\"forecast\\\":0.44536458218098945,\\\"bias\\\":0.054635417819010546,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":6647.867132759468,\\\"ask\\\":6741.593356182058,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:44 AM\\\",\\\"price\\\":6694.730244470764,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008,\\\"forecast\\\":0.44500360632375496,\\\"bias\\\":0.05499639367624504,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":6669.934035305745,\\\"ask\\\":6763.97137316504,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:48 AM\\\",\\\"price\\\":6716.952704235393,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008,\\\"forecast\\\":0.44518616112447745,\\\"bias\\\":0.05481383887552255,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":6640.876929931267,\\\"ask\\\":6734.504600645303,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:52 AM\\\",\\\"price\\\":6687.690765288286,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008,\\\"forecast\\\":0.44494632359865205,\\\"bias\\\":0.05505367640134795,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":6629.000890411106,\\\"ask\\\":6722.461124515592,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:56 AM\\\",\\\"price\\\":6675.73100746335,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008,\\\"forecast\\\":0.4448476934057344,\\\"bias\\\":0.05515230659426562,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":6668.222933974038,\\\"ask\\\":6762.236147544669,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:00 AM\\\",\\\"price\\\":6715.229540759354,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008,\\\"forecast\\\":0.4451740150049614,\\\"bias\\\":0.0548259849950386,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":6624.577294649752,\\\"ask\\\":6717.975161845216,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:04 AM\\\",\\\"price\\\":6671.276228247484,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008,\\\"forecast\\\":0.4448127972154694,\\\"bias\\\":0.0551872027845306,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":6609.595855647589,\\\"ask\\\":6702.782504166285,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:08 AM\\\",\\\"price\\\":6656.189179906937,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008,\\\"forecast\\\":0.4449378856066923,\\\"bias\\\":0.055062114393307715,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":6565.803085649514,\\\"ask\\\":6658.372313443162,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:13 AM\\\",\\\"price\\\":6612.087699546339,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008,\\\"forecast\\\":0.44530514037808566,\\\"bias\\\":0.05469485962191434,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":6562.407666499493,\\\"ask\\\":6654.929023328286,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:17 AM\\\",\\\"price\\\":6608.66834491389,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008,\\\"forecast\\\":0.4453334397436852,\\\"bias\\\":0.05466656025631478,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":6569.867722337933,\\\"ask\\\":6662.494256187611,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:21 AM\\\",\\\"price\\\":6616.1809892627725,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008,\\\"forecast\\\":0.4452712955410187,\\\"bias\\\":0.054728704458981314,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":6521.538326562969,\\\"ask\\\":6613.4834792033325,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:25 AM\\\",\\\"price\\\":6567.510902883151,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008,\\\"forecast\\\":0.4448657155864739,\\\"bias\\\":0.05513428441352608,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":6473.6778087155335,\\\"ask\\\":6564.948190711522,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:29 AM\\\",\\\"price\\\":6519.312999713528,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008,\\\"forecast\\\":0.44527332861281677,\\\"bias\\\":0.054726671387183234,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":6436.9134486992825,\\\"ask\\\":6527.665501349625,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:33 AM\\\",\\\"price\\\":6482.289475024454,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008,\\\"forecast\\\":0.4449607578340725,\\\"bias\\\":0.05503924216592748,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":6449.370053927516,\\\"ask\\\":6540.297728403834,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:38 AM\\\",\\\"price\\\":6494.833891165676,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008,\\\"forecast\\\":0.4450672688377059,\\\"bias\\\":0.05493273116229408,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":6466.409493323123,\\\"ask\\\":6557.577401587497,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:42 AM\\\",\\\"price\\\":6511.99344745531,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008,\\\"forecast\\\":0.4449221348268415,\\\"bias\\\":0.05507786517315849,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":6517.039885272281,\\\"ask\\\":6608.9216157796445,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:46 AM\\\",\\\"price\\\":6562.980750525963,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008,\\\"forecast\\\":0.4444908887227525,\\\"bias\\\":0.0555091112772475,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":6501.592464747143,\\\"ask\\\":6593.25640684831,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:50 AM\\\",\\\"price\\\":6547.424435797727,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008,\\\"forecast\\\":0.44462277527047533,\\\"bias\\\":0.055377224729524666,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":6467.715700880311,\\\"ask\\\":6558.9020249612,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:54 AM\\\",\\\"price\\\":6513.308862920756,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008,\\\"forecast\\\":0.4443327190508571,\\\"bias\\\":0.05566728094914292,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":6432.052379764729,\\\"ask\\\":6522.735897707032,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:58 AM\\\",\\\"price\\\":6477.394138735881,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008,\\\"forecast\\\":0.4446413732717659,\\\"bias\\\":0.055358626728234106,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":6396.182387909769,\\\"ask\\\":6486.360185926624,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:03 AM\\\",\\\"price\\\":6441.271286918197,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008,\\\"forecast\\\":0.44433092035322547,\\\"bias\\\":0.05566907964677453,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":6442.911398582031,\\\"ask\\\":6533.748014473419,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:07 AM\\\",\\\"price\\\":6488.329706527726,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008,\\\"forecast\\\":0.4447376256125761,\\\"bias\\\":0.055262374387423874,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":6446.827106064814,\\\"ask\\\":6537.718928305405,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:11 AM\\\",\\\"price\\\":6492.27301718511,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008,\\\"forecast\\\":0.4447712115614614,\\\"bias\\\":0.05522878843853862,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":6410.843853494906,\\\"ask\\\":6501.2283589822455,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:15 AM\\\",\\\"price\\\":6456.036106238576,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008,\\\"forecast\\\":0.4444612193843113,\\\"bias\\\":0.055538780615688677,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":6436.007697672842,\\\"ask\\\":6526.746980419488,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:19 AM\\\",\\\"price\\\":6481.377339046166,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008,\\\"forecast\\\":0.4446792202049808,\\\"bias\\\":0.055320779795019204,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":6425.719368670767,\\\"ask\\\":6516.313599447595,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:23 AM\\\",\\\"price\\\":6471.0164840591815,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008,\\\"forecast\\\":0.4445906451598337,\\\"bias\\\":0.05540935484016629,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":6375.539130521334,\\\"ask\\\":6465.425885634424,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:28 AM\\\",\\\"price\\\":6420.482508077879,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008,\\\"forecast\\\":0.44415453229711516,\\\"bias\\\":0.05584546770288484,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":6342.296610667585,\\\"ask\\\":6431.7146897706525,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:32 AM\\\",\\\"price\\\":6387.005650219119,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008,\\\"forecast\\\":0.443861823806356,\\\"bias\\\":0.056138176193643974,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":6388.601939061035,\\\"ask\\\":6478.672862673175,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:36 AM\\\",\\\"price\\\":6433.6374008671055,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008,\\\"forecast\\\":0.5557283094145211,\\\"bias\\\":0.055728309414521116,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":6408.820057424542,\\\"ask\\\":6499.1760300367705,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:40 AM\\\",\\\"price\\\":6453.998043730657,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008,\\\"forecast\\\":0.5559046737531805,\\\"bias\\\":0.055904673753180534,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":6366.6305330763535,\\\"ask\\\":6456.391688628285,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:44 AM\\\",\\\"price\\\":6411.51111085232,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008,\\\"forecast\\\":0.5562751352684567,\\\"bias\\\":0.05627513526845673,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":6399.094297806946,\\\"ask\\\":6489.313149941183,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:48 AM\\\",\\\"price\\\":6444.203723874065,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008,\\\"forecast\\\":0.5565620849731783,\\\"bias\\\":0.05656208497317827,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":6403.259326880815,\\\"ask\\\":6493.536900472286,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:53 AM\\\",\\\"price\\\":6448.398113676551,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008,\\\"forecast\\\":0.5565252699619552,\\\"bias\\\":0.05652526996195517,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":6365.798471753111,\\\"ask\\\":6455.547896329689,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:57 AM\\\",\\\"price\\\":6410.6731840414,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008,\\\"forecast\\\":0.5568579045809263,\\\"bias\\\":0.05685790458092632,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":6328.737426333896,\\\"ask\\\":6417.964338689057,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:01 AM\\\",\\\"price\\\":6373.350882511477,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008,\\\"forecast\\\":0.5565249450595933,\\\"bias\\\":0.05652494505959327,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":6333.4964596622185,\\\"ask\\\":6422.790468156953,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:05 AM\\\",\\\"price\\\":6378.143463909586,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008,\\\"forecast\\\":0.5564824398837108,\\\"bias\\\":0.05648243988371082,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":6361.463262319634,\\\"ask\\\":6451.151566118701,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:07 AM\\\",\\\"price\\\":6406.307414219168,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008,\\\"forecast\\\":0.5562330305314047,\\\"bias\\\":0.056233030531404715,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":6384.7233097935305,\\\"ask\\\":6474.73954981076,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:11 AM\\\",\\\"price\\\":6429.731429802146,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008,\\\"forecast\\\":0.5560274201386656,\\\"bias\\\":0.05602742013866557,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":6396.930855024216,\\\"ask\\\":6487.119205447518,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:16 AM\\\",\\\"price\\\":6442.025030235867,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008,\\\"forecast\\\":0.5561345441646123,\\\"bias\\\":0.05613454416461228,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":6352.399609141702,\\\"ask\\\":6441.96012729677,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:20 AM\\\",\\\"price\\\":6397.179868219237,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008,\\\"forecast\\\":0.5565280554898602,\\\"bias\\\":0.056528055489860174,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":6396.588389077007,\\\"ask\\\":6486.771911178797,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:24 AM\\\",\\\"price\\\":6441.680150127902,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008,\\\"forecast\\\":0.5561348330923558,\\\"bias\\\":0.056134833092355785,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":6400.38341534884,\\\"ask\\\":6490.620442352751,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:28 AM\\\",\\\"price\\\":6445.501928850796,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008,\\\"forecast\\\":0.5561681372778673,\\\"bias\\\":0.05616813727786729,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":6354.509677447963,\\\"ask\\\":6444.099944803725,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:32 AM\\\",\\\"price\\\":6399.304811125844,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008,\\\"forecast\\\":0.5565736197680443,\\\"bias\\\":0.056573619768044314,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":6339.388306462243,\\\"ask\\\":6428.765382283463,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:36 AM\\\",\\\"price\\\":6384.076844372853,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008,\\\"forecast\\\":0.5564386744624151,\\\"bias\\\":0.05643867446241513,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":6386.819755127498,\\\"ask\\\":6476.865552279345,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:40 AM\\\",\\\"price\\\":6431.842653703422,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008,\\\"forecast\\\":0.5568609499188295,\\\"bias\\\":0.056860949918829506,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":6369.811314465509,\\\"ask\\\":6459.617314870863,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:45 AM\\\",\\\"price\\\":6414.7143146681865,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.008,\\\"forecast\\\":0.5570127779785528,\\\"bias\\\":0.05701277797855275,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0}],\\\"longTermRecords\\\":[{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":6677.665855965056,\\\"ask\\\":6771.812202373425,\\\"price\\\":6724.739029169245,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:27:23 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":6457.662792162038,\\\"ask\\\":6548.707383390913,\\\"price\\\":6503.1850877764755,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:34:14 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":5971.299551635428,\\\"ask\\\":6055.487057902192,\\\"price\\\":6013.3933047688115,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:41:02 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":5990.465608539518,\\\"ask\\\":6074.923331117115,\\\"price\\\":6032.600987760733,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":187390.75,\\\"averageShortPrice\\\":1511.3743218302525,\\\"dateObserved\\\":\\\"7/29/2023, 6:47:54 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":6097.401128074976,\\\"ask\\\":6183.366501481873,\\\"price\\\":6140.496890424047,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:54:48 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":6932.9761179502775,\\\"ask\\\":7030.722004809597,\\\"price\\\":6981.849061379934,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:01:39 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":7372.72463323654,\\\"ask\\\":7476.670398458405,\\\"price\\\":7424.697515847473,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:08:30 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":6932.821568333507,\\\"ask\\\":7030.565276245563,\\\"price\\\":6981.139028562103,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:15:23 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":7128.720846240915,\\\"ask\\\":7229.226477507155,\\\"price\\\":7179.355729177415,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:22:11 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":7399.044551423617,\\\"ask\\\":7503.361393034821,\\\"price\\\":7452.051496615248,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:29:00 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":6982.745919157608,\\\"ask\\\":7081.193495057113,\\\"price\\\":7031.969707107363,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:35:51 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":6623.405088123505,\\\"ask\\\":6716.786428741559,\\\"price\\\":6670.42741247087,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:42:40 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":5949.957037416473,\\\"ask\\\":6033.843642173605,\\\"price\\\":5991.900339795036,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:49:32 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":5779.842434386519,\\\"ask\\\":5861.330645948865,\\\"price\\\":5821.194223906395,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:56:21 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":6017.68031145995,\\\"ask\\\":6102.5217257202075,\\\"price\\\":6060.101018590082,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:03:13 AM\\\",\\\"bias\\\":null},{\\\"volatility\\\":0.008,\\\"forecast\\\":0.5278678398484898,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":6248.891746877433,\\\"ask\\\":6336.992939683362,\\\"price\\\":6292.655200196655,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:09:58 AM\\\",\\\"bias\\\":0.05912798074289072},{\\\"volatility\\\":0.008,\\\"forecast\\\":0.5315104075050364,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":6705.947564052177,\\\"ask\\\":6800.4926455191735,\\\"price\\\":6752.927321627232,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:16:47 AM\\\",\\\"bias\\\":0.05919854375293243},{\\\"volatility\\\":0.008,\\\"forecast\\\":0.4420315753532016,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":6768.1434302209345,\\\"ask\\\":6863.56539197632,\\\"price\\\":6815.583113147787,\\\"maxShares\\\":5800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:35 AM\\\",\\\"bias\\\":0.05993858746535713}],\\\"recentTicksOfPrices\\\":[6420.482508077879,6387.005650219119,6433.6374008671055,6453.998043730657,6411.51111085232,6444.203723874065,6448.398113676551,6410.6731840414,6373.350882511477,6378.143463909586,6406.307414219168,6429.731429802146,6442.025030235867,6397.179868219237,6441.680150127902,6445.501928850796,6399.304811125844,6384.076844372853,6431.842653703422,6414.7143146681865]}],[\\\"WDS\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":689.2417188250539,\\\"ask\\\":704.5736883034676,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:37 AM\\\",\\\"price\\\":696.9077035642608,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.024,\\\"forecast\\\":0.5611356406524973,\\\"bias\\\":0.061135640652497325,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":684.9309949594119,\\\"ask\\\":700.1670737148285,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:39 AM\\\",\\\"price\\\":692.5490343371202,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.024,\\\"forecast\\\":0.5607508736217431,\\\"bias\\\":0.06075087362174314,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":698.5069991113863,\\\"ask\\\":714.0450718924283,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:44 AM\\\",\\\"price\\\":706.2760355019074,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.024,\\\"forecast\\\":0.5619550155259561,\\\"bias\\\":0.06195501552595606,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":705.4628628054693,\\\"ask\\\":721.1556666292512,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:48 AM\\\",\\\"price\\\":713.3092647173603,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.024,\\\"forecast\\\":0.5613380558623999,\\\"bias\\\":0.06133805586239993,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":714.7231046192857,\\\"ask\\\":730.6218996664285,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:52 AM\\\",\\\"price\\\":722.6725021428571,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.024,\\\"forecast\\\":0.5605329033028217,\\\"bias\\\":0.06053290330282168,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":718.5644435978531,\\\"ask\\\":734.5486880459347,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:56 AM\\\",\\\"price\\\":726.556565821894,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.024,\\\"forecast\\\":0.5608582424438684,\\\"bias\\\":0.06085824244386839,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":731.3191104211762,\\\"ask\\\":747.5870784993014,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:00 AM\\\",\\\"price\\\":739.4530944602388,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.024,\\\"forecast\\\":0.5597779961100281,\\\"bias\\\":0.0597779961100281,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":745.7738697385048,\\\"ask\\\":762.3633794799073,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:04 AM\\\",\\\"price\\\":754.068624609206,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.024,\\\"forecast\\\":0.5585964646363804,\\\"bias\\\":0.05859646463638035,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":750.8450265760358,\\\"ask\\\":767.5473426373833,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:08 AM\\\",\\\"price\\\":759.1961846067096,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.024,\\\"forecast\\\":0.5581980169642996,\\\"bias\\\":0.058198016964299604,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":765.8690456293526,\\\"ask\\\":782.9055663612492,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:13 AM\\\",\\\"price\\\":774.387305995301,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.024,\\\"forecast\\\":0.5593625290603897,\\\"bias\\\":0.059362529060389746,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":767.057837863587,\\\"ask\\\":784.1208029121196,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:17 AM\\\",\\\"price\\\":775.5893203878534,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.024,\\\"forecast\\\":0.5592703857443042,\\\"bias\\\":0.05927038574430421,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":769.6737806360794,\\\"ask\\\":786.7949365248496,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:21 AM\\\",\\\"price\\\":778.2343585804646,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.024,\\\"forecast\\\":0.5590682524375872,\\\"bias\\\":0.059068252437587176,\\\"countOfNegative\\\":3,\\\"countOfPositive\\\":16,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":786.7853271298551,\\\"ask\\\":804.2871240933098,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:25 AM\\\",\\\"price\\\":795.5362256115825,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.024,\\\"forecast\\\":0.5577550348468092,\\\"bias\\\":0.05775503484680922,\\\"countOfNegative\\\":3,\\\"countOfPositive\\\":16,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":804.2356641579823,\\\"ask\\\":822.1256384870779,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:29 AM\\\",\\\"price\\\":813.1806513225301,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.024,\\\"forecast\\\":0.559036000300022,\\\"bias\\\":0.059036000300021985,\\\"countOfNegative\\\":3,\\\"countOfPositive\\\":16,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":790.6876527892315,\\\"ask\\\":808.2762557835318,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:33 AM\\\",\\\"price\\\":799.4819542863817,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.024,\\\"forecast\\\":0.5580244499104228,\\\"bias\\\":0.05802444991042277,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":795.2780286090077,\\\"ask\\\":812.9687430977824,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:38 AM\\\",\\\"price\\\":804.1233858533951,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.024,\\\"forecast\\\":0.5583613136908107,\\\"bias\\\":0.05836131369081066,\\\"countOfNegative\\\":3,\\\"countOfPositive\\\":16,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":789.0241484408933,\\\"ask\\\":806.5757472939767,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:42 AM\\\",\\\"price\\\":797.7999478674351,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.024,\\\"forecast\\\":0.5578987363882056,\\\"bias\\\":0.05789873638820564,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":807.5577420530032,\\\"ask\\\":825.5216149803703,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:46 AM\\\",\\\"price\\\":816.5396785166868,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.024,\\\"forecast\\\":0.5565387378976726,\\\"bias\\\":0.05653873789767261,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":813.3138783107572,\\\"ask\\\":831.4057947140299,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:50 AM\\\",\\\"price\\\":822.3598365123936,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.024,\\\"forecast\\\":0.5561357392484948,\\\"bias\\\":0.0561357392484948,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":800.731601976087,\\\"ask\\\":818.5436295225721,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:54 AM\\\",\\\"price\\\":809.6376157493296,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.024,\\\"forecast\\\":0.5552536516904011,\\\"bias\\\":0.055253651690401084,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":787.6302577347165,\\\"ask\\\":805.1508499189061,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:58 AM\\\",\\\"price\\\":796.3905538268114,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.024,\\\"forecast\\\":0.5561727340952222,\\\"bias\\\":0.056172734095222165,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":800.8814234533804,\\\"ask\\\":818.6967837324243,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:03 AM\\\",\\\"price\\\":809.7891035929024,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.024,\\\"forecast\\\":0.5571177894699447,\\\"bias\\\":0.057117789469944724,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":16,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":818.4345798429686,\\\"ask\\\":836.6404046726401,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:07 AM\\\",\\\"price\\\":827.5374922578044,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.024,\\\"forecast\\\":0.5558659218877622,\\\"bias\\\":0.05586592188776218,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":16,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":819.9268013916758,\\\"ask\\\":838.1658202295088,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:11 AM\\\",\\\"price\\\":829.0463108105923,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.024,\\\"forecast\\\":0.5559677801602894,\\\"bias\\\":0.05596778016028936,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":16,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":833.7332364839433,\\\"ask\\\":852.2793752126053,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:15 AM\\\",\\\"price\\\":843.0063058482743,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.024,\\\"forecast\\\":0.5550253600287242,\\\"bias\\\":0.05502536002872416,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":16,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":824.0297913179542,\\\"ask\\\":842.3600799013666,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:19 AM\\\",\\\"price\\\":833.1949356096604,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.024,\\\"forecast\\\":0.5543774034021518,\\\"bias\\\":0.0543774034021518,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":827.9878958261864,\\\"ask\\\":846.4062312237355,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:23 AM\\\",\\\"price\\\":837.197063524961,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.024,\\\"forecast\\\":0.5541162096348636,\\\"bias\\\":0.05411620963486363,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":847.5385388134605,\\\"ask\\\":866.3917722349935,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:28 AM\\\",\\\"price\\\":856.965155524227,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.024,\\\"forecast\\\":0.552838405092395,\\\"bias\\\":0.05283840509239501,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":860.8654068706572,\\\"ask\\\":880.0150923622189,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:32 AM\\\",\\\"price\\\":870.4402496164381,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.024,\\\"forecast\\\":0.5520075632831188,\\\"bias\\\":0.05200756328311884,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":879.7210318034265,\\\"ask\\\":899.2901548566878,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:36 AM\\\",\\\"price\\\":889.5055933300572,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.024,\\\"forecast\\\":0.5508684361918137,\\\"bias\\\":0.05086843619181369,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":888.0732366132701,\\\"ask\\\":907.8281518867705,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:40 AM\\\",\\\"price\\\":897.9506942500203,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.024,\\\"forecast\\\":0.5513513888348346,\\\"bias\\\":0.05135138883483459,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":905.7281267051719,\\\"ask\\\":925.8757695641342,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:44 AM\\\",\\\"price\\\":915.8019481346531,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.024,\\\"forecast\\\":0.5503305235631788,\\\"bias\\\":0.0503305235631788,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":919.5831845709363,\\\"ask\\\":940.0390289193291,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:48 AM\\\",\\\"price\\\":929.8111067451327,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.024,\\\"forecast\\\":0.5511004370679286,\\\"bias\\\":0.05110043706792855,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":917.791074782127,\\\"ask\\\":938.2070542009407,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:53 AM\\\",\\\"price\\\":927.9990644915339,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.024,\\\"forecast\\\":0.5510006566320558,\\\"bias\\\":0.051000656632055774,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":901.8693654506855,\\\"ask\\\":921.9311713555539,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:57 AM\\\",\\\"price\\\":911.9002684031198,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.024,\\\"forecast\\\":0.5501002849577141,\\\"bias\\\":0.050100284957714125,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":917.7133889565844,\\\"ask\\\":938.1276402781665,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:01 AM\\\",\\\"price\\\":927.9205146173755,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.024,\\\"forecast\\\":0.5492201241240822,\\\"bias\\\":0.049220124124082165,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":915.6477645192904,\\\"ask\\\":936.0160666622877,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:05 AM\\\",\\\"price\\\":925.8319155907891,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.024,\\\"forecast\\\":0.550330488776703,\\\"bias\\\":0.050330488776702986,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":927.7774343614269,\\\"ask\\\":948.4155572693655,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:07 AM\\\",\\\"price\\\":938.0964958153962,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.024,\\\"forecast\\\":0.5496637561798344,\\\"bias\\\":0.04966375617983443,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":937.9544076198979,\\\"ask\\\":958.8189141594709,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:11 AM\\\",\\\"price\\\":948.3866608896844,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.024,\\\"forecast\\\":0.5442160410292146,\\\"bias\\\":0.044216041029214614,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":932.605005351644,\\\"ask\\\":953.3505160874741,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:16 AM\\\",\\\"price\\\":942.9777607195591,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.024,\\\"forecast\\\":0.5467522636402622,\\\"bias\\\":0.04675226364026219,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":952.2180958496716,\\\"ask\\\":973.3998937351041,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:20 AM\\\",\\\"price\\\":962.8089947923879,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.024,\\\"forecast\\\":0.5369200584461846,\\\"bias\\\":0.03692005844618462,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":972.0896523370955,\\\"ask\\\":993.7134868683553,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:24 AM\\\",\\\"price\\\":982.9015696027254,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.024,\\\"forecast\\\":0.5292153211582664,\\\"bias\\\":0.029215321158266416,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":973.8198429691028,\\\"ask\\\":995.4821650573941,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:28 AM\\\",\\\"price\\\":984.6510040132484,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.024,\\\"forecast\\\":0.5286953271962117,\\\"bias\\\":0.028695327196211706,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":953.1766564770078,\\\"ask\\\":974.3797772479826,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:32 AM\\\",\\\"price\\\":963.7782168624952,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.024,\\\"forecast\\\":0.5224807080410124,\\\"bias\\\":0.02248070804101243,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":959.9975059694541,\\\"ask\\\":981.3523544338908,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:36 AM\\\",\\\"price\\\":970.6749302016725,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.024,\\\"forecast\\\":0.5208720080692977,\\\"bias\\\":0.020872008069297676,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":938.9223894304353,\\\"ask\\\":959.8084284268655,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:40 AM\\\",\\\"price\\\":949.3654089286504,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.024,\\\"forecast\\\":0.5255569533578068,\\\"bias\\\":0.025556953357806833,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":931.4609291950917,\\\"ask\\\":952.1809903096438,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:45 AM\\\",\\\"price\\\":941.8209597523678,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.024,\\\"forecast\\\":0.5276041910383029,\\\"bias\\\":0.027604191038302917,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0}],\\\"longTermRecords\\\":[{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":727.2681957057416,\\\"ask\\\":743.4460524352927,\\\"price\\\":735.3571240705172,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:27:23 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":827.8622464828221,\\\"ask\\\":846.277786849477,\\\"price\\\":837.0700166661488,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:34:14 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":949.3727967718419,\\\"ask\\\":970.4913018567561,\\\"price\\\":959.9320493142992,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:41:02 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":943.999621707612,\\\"ask\\\":964.9986021702686,\\\"price\\\":954.6123388946475,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:47:54 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":957.9145549397481,\\\"ask\\\":979.2230688008951,\\\"price\\\":968.6366432988993,\\\"maxShares\\\":16900000,\\\"investedShares\\\":906847.96,\\\"averagePrice\\\":199.04107020809,\\\"sharesShort\\\":545823.63,\\\"averageShortPrice\\\":74.19978802400172,\\\"dateObserved\\\":\\\"7/29/2023, 6:54:48 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":1121.1034130680064,\\\"ask\\\":1146.0420127520263,\\\"price\\\":1133.5727129100162,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:01:39 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":1282.6668760370826,\\\"ask\\\":1311.1994051299191,\\\"price\\\":1296.9331405835012,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:08:30 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":1277.8032648222106,\\\"ask\\\":1306.2276043834736,\\\"price\\\":1292.3400540864122,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":958764.84,\\\"averageShortPrice\\\":252.4080614483914,\\\"dateObserved\\\":\\\"7/29/2023, 7:15:23 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":1029.8021487970927,\\\"ask\\\":1052.7097800140148,\\\"price\\\":1041.714390096341,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:22:11 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":992.6065402314755,\\\"ask\\\":1014.6867666066956,\\\"price\\\":1003.2893401088672,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":817653.9,\\\"averageShortPrice\\\":137.58876838108117,\\\"dateObserved\\\":\\\"7/29/2023, 7:29:00 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":840.8817215797955,\\\"ask\\\":859.5868761548763,\\\"price\\\":850.2342988673355,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":504511.47,\\\"averageShortPrice\\\":80.27567036120534,\\\"dateObserved\\\":\\\"7/29/2023, 7:35:51 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":741.818364891606,\\\"ask\\\":758.3198856475365,\\\"price\\\":749.9274070135372,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":1109229.6,\\\"averageShortPrice\\\":115.39539798755492,\\\"dateObserved\\\":\\\"7/29/2023, 7:42:40 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":842.6461532544877,\\\"ask\\\":861.3905570680353,\\\"price\\\":852.0183551612613,\\\"maxShares\\\":16900000,\\\"investedShares\\\":516904.2,\\\"averagePrice\\\":96.72972106798586,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:49:32 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":829.2131875685892,\\\"ask\\\":847.6587792030774,\\\"price\\\":838.0649281430404,\\\"maxShares\\\":16900000,\\\"investedShares\\\":315925.8,\\\"averagePrice\\\":54.385185310568765,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:56:21 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":731.5215995051217,\\\"ask\\\":747.794071890473,\\\"price\\\":739.6578356977973,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:03:13 AM\\\",\\\"bias\\\":null},{\\\"volatility\\\":0.024,\\\"forecast\\\":0.4742327720475361,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":778.0967845435554,\\\"ask\\\":795.4053075566575,\\\"price\\\":786.6457193158527,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:09:58 AM\\\",\\\"bias\\\":0.0591748185858772},{\\\"volatility\\\":0.024,\\\"forecast\\\":0.4367711417628163,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":680.0559837123932,\\\"ask\\\":695.1836193460354,\\\"price\\\":687.5263028104767,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:16:47 AM\\\",\\\"bias\\\":0.07022271245059103},{\\\"volatility\\\":0.024,\\\"forecast\\\":0.49455153735935087,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":595.4113539130152,\\\"ask\\\":608.6560958605237,\\\"price\\\":602.1648411735583,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:35 AM\\\",\\\"bias\\\":0.07860805102525875}],\\\"recentTicksOfPrices\\\":[856.965155524227,870.4402496164381,889.5055933300572,897.9506942500203,915.8019481346531,929.8111067451327,927.9990644915339,911.9002684031198,927.9205146173755,925.8319155907891,938.0964958153962,948.3866608896844,942.9777607195591,962.8089947923879,982.9015696027254,984.6510040132484,963.7782168624952,970.6749302016725,949.3654089286504,941.8209597523678]}],[\\\"LXO\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":4740.963091578946,\\\"ask\\\":4846.424353474534,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:37 AM\\\",\\\"price\\\":4793.69372252674,\\\"maxShares\\\":13000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.013500000000000002,\\\"forecast\\\":0.4446497430363611,\\\"bias\\\":0.05535025696363888,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":4724.238415397426,\\\"ask\\\":4829.327642029118,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:39 AM\\\",\\\"price\\\":4776.783028713272,\\\"maxShares\\\":13000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.013500000000000002,\\\"forecast\\\":0.44445379290792064,\\\"bias\\\":0.05554620709207936,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":4672.147236077742,\\\"ask\\\":4776.077710489986,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:44 AM\\\",\\\"price\\\":4724.112473283864,\\\"maxShares\\\":13000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.013500000000000002,\\\"forecast\\\":0.4438344914844084,\\\"bias\\\":0.0561655085155916,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":4646.122073924694,\\\"ask\\\":4749.473626630804,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:48 AM\\\",\\\"price\\\":4697.797850277749,\\\"maxShares\\\":13000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.013500000000000002,\\\"forecast\\\":0.44351988148422555,\\\"bias\\\":0.05648011851577445,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":4680.427381255967,\\\"ask\\\":4784.542044944168,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:52 AM\\\",\\\"price\\\":4732.484713100068,\\\"maxShares\\\":13000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.013500000000000002,\\\"forecast\\\":0.443936910523274,\\\"bias\\\":0.056063089476726,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":5,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":4694.577264282166,\\\"ask\\\":4799.00668775457,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:56 AM\\\",\\\"price\\\":4746.791976018368,\\\"maxShares\\\":13000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.013500000000000002,\\\"forecast\\\":0.44376742041188805,\\\"bias\\\":0.05623257958811195,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":4741.450227864433,\\\"ask\\\":4846.922325956462,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:00 AM\\\",\\\"price\\\":4794.186276910448,\\\"maxShares\\\":13000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.013500000000000002,\\\"forecast\\\":0.4432059667374061,\\\"bias\\\":0.05679403326259391,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":4689.314453835685,\\\"ask\\\":4793.626807712717,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:04 AM\\\",\\\"price\\\":4741.470630774201,\\\"maxShares\\\":13000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.013500000000000002,\\\"forecast\\\":0.44257453096710114,\\\"bias\\\":0.05742546903289886,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":4707.250708559432,\\\"ask\\\":4811.962048891391,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:08 AM\\\",\\\"price\\\":4759.606378725412,\\\"maxShares\\\":13000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.013500000000000002,\\\"forecast\\\":0.4423548831165796,\\\"bias\\\":0.05764511688342039,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":4760.232382246956,\\\"ask\\\":4866.122283570952,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:13 AM\\\",\\\"price\\\":4813.177332908955,\\\"maxShares\\\":13000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.013500000000000002,\\\"forecast\\\":0.4417060681369901,\\\"bias\\\":0.05829393186300991,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":4756.079753578055,\\\"ask\\\":4861.8772809579505,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:17 AM\\\",\\\"price\\\":4808.978517268003,\\\"maxShares\\\":13000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.013500000000000002,\\\"forecast\\\":0.44175696573863255,\\\"bias\\\":0.058243034261367455,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":4765.203470084785,\\\"ask\\\":4871.203951724689,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:21 AM\\\",\\\"price\\\":4818.203710904738,\\\"maxShares\\\":13000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.013500000000000002,\\\"forecast\\\":0.44164523654975746,\\\"bias\\\":0.05835476345024254,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":4706.347692125508,\\\"ask\\\":4811.038945135378,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:25 AM\\\",\\\"price\\\":4758.693318630443,\\\"maxShares\\\":13000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.013500000000000002,\\\"forecast\\\":0.44237499882512865,\\\"bias\\\":0.05762500117487135,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":4648.355512767148,\\\"ask\\\":4751.7567476315335,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:29 AM\\\",\\\"price\\\":4700.056130199341,\\\"maxShares\\\":13000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.013500000000000002,\\\"forecast\\\":0.4416560780380933,\\\"bias\\\":0.058343921961906686,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":4693.157002805383,\\\"ask\\\":4797.554832999233,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:33 AM\\\",\\\"price\\\":4745.355917902309,\\\"maxShares\\\":13000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.013500000000000002,\\\"forecast\\\":0.44109375129019535,\\\"bias\\\":0.058906248709804654,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":4677.880815822682,\\\"ask\\\":4781.938831948161,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:38 AM\\\",\\\"price\\\":4729.909823885422,\\\"maxShares\\\":13000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.013500000000000002,\\\"forecast\\\":0.44128611678755825,\\\"bias\\\":0.05871388321244175,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":4657.117391836038,\\\"ask\\\":4760.713531998214,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:42 AM\\\",\\\"price\\\":4708.915461917127,\\\"maxShares\\\":13000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.013500000000000002,\\\"forecast\\\":0.4415478884262074,\\\"bias\\\":0.0584521115737926,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":4596.386672631577,\\\"ask\\\":4698.631876673938,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:46 AM\\\",\\\"price\\\":4647.509274652758,\\\"maxShares\\\":13000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.013500000000000002,\\\"forecast\\\":0.44077557769003006,\\\"bias\\\":0.05922442230996994,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":4578.031486917863,\\\"ask\\\":4679.86838551462,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:50 AM\\\",\\\"price\\\":4628.949936216241,\\\"maxShares\\\":13000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.013500000000000002,\\\"forecast\\\":0.44101303242868645,\\\"bias\\\":0.05898696757131355,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":4537.921569988478,\\\"ask\\\":4638.866235852731,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:54 AM\\\",\\\"price\\\":4588.393902920605,\\\"maxShares\\\":13000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.013500000000000002,\\\"forecast\\\":0.44049165665506157,\\\"bias\\\":0.05950834334493843,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":4495.855845728559,\\\"ask\\\":4595.864772529396,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:58 AM\\\",\\\"price\\\":4545.860309128978,\\\"maxShares\\\":13000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.013500000000000002,\\\"forecast\\\":0.4410484497659197,\\\"bias\\\":0.058951550234080274,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":4538.402615966352,\\\"ask\\\":4639.357982550032,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:03 AM\\\",\\\"price\\\":4588.880299258192,\\\"maxShares\\\":13000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.013500000000000002,\\\"forecast\\\":0.4416063408881082,\\\"bias\\\":0.058393659111891816,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":4483.132408526886,\\\"ask\\\":4582.858306390982,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:07 AM\\\",\\\"price\\\":4532.995357458934,\\\"maxShares\\\":13000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.013500000000000002,\\\"forecast\\\":0.44088643583999376,\\\"bias\\\":0.05911356416000624,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":4487.730244028517,\\\"ask\\\":4587.558419325409,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:11 AM\\\",\\\"price\\\":4537.644331676963,\\\"maxShares\\\":13000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.013500000000000002,\\\"forecast\\\":0.4408258098269397,\\\"bias\\\":0.059174190173060304,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":4530.236782873324,\\\"ask\\\":4631.010503018129,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:15 AM\\\",\\\"price\\\":4580.623642945727,\\\"maxShares\\\":13000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.013500000000000002,\\\"forecast\\\":0.44026532827470105,\\\"bias\\\":0.05973467172529895,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":4500.426967374684,\\\"ask\\\":4600.53757736684,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:19 AM\\\",\\\"price\\\":4550.482272370762,\\\"maxShares\\\":13000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.013500000000000002,\\\"forecast\\\":0.4406609972980875,\\\"bias\\\":0.0593390027019125,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":4512.586603781791,\\\"ask\\\":4612.967701135885,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:23 AM\\\",\\\"price\\\":4562.777152458839,\\\"maxShares\\\":13000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.013500000000000002,\\\"forecast\\\":0.44050067013294375,\\\"bias\\\":0.05949932986705625,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":4453.436589080021,\\\"ask\\\":4552.501912598484,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:28 AM\\\",\\\"price\\\":4502.969250839253,\\\"maxShares\\\":13000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.013500000000000002,\\\"forecast\\\":0.44129093315027546,\\\"bias\\\":0.058709066849724545,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":4414.391892256485,\\\"ask\\\":4512.588678535193,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:32 AM\\\",\\\"price\\\":4463.490285395839,\\\"maxShares\\\":13000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.013500000000000002,\\\"forecast\\\":0.44181020687401557,\\\"bias\\\":0.058189793125984435,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":4360.666319185078,\\\"ask\\\":4457.667996659366,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:36 AM\\\",\\\"price\\\":4409.167157922222,\\\"maxShares\\\":13000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.013500000000000002,\\\"forecast\\\":0.4410932797455064,\\\"bias\\\":0.058906720254493616,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":4337.502061819414,\\\"ask\\\":4433.988457532282,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:40 AM\\\",\\\"price\\\":4385.7452596758485,\\\"maxShares\\\":13000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.013500000000000002,\\\"forecast\\\":0.4407786907472547,\\\"bias\\\":0.059221309252745324,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":4386.00616254832,\\\"ask\\\":4483.571517023611,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:44 AM\\\",\\\"price\\\":4434.788839785966,\\\"maxShares\\\":13000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.013500000000000002,\\\"forecast\\\":0.44144093281846375,\\\"bias\\\":0.05855906718153625,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":4348.588100636984,\\\"ask\\\":4445.3211018645,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:48 AM\\\",\\\"price\\\":4396.954601250742,\\\"maxShares\\\":13000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.013500000000000002,\\\"forecast\\\":0.44093705276577544,\\\"bias\\\":0.05906294723422456,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":4343.8170411274405,\\\"ask\\\":4440.443911607525,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:53 AM\\\",\\\"price\\\":4392.1304763674825,\\\"maxShares\\\":13000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.013500000000000002,\\\"forecast\\\":0.44100192493543533,\\\"bias\\\":0.05899807506456467,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":4386.953064668187,\\\"ask\\\":4484.539482689117,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:57 AM\\\",\\\"price\\\":4435.746273678652,\\\"maxShares\\\":13000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.013500000000000002,\\\"forecast\\\":0.44158780190280017,\\\"bias\\\":0.05841219809719983,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":4344.025452577287,\\\"ask\\\":4440.6569591058005,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:01 AM\\\",\\\"price\\\":4392.341205841544,\\\"maxShares\\\":13000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.013500000000000002,\\\"forecast\\\":0.4421650306066066,\\\"bias\\\":0.05783496939339339,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":4338.520075609869,\\\"ask\\\":4435.029116725559,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:05 AM\\\",\\\"price\\\":4386.774596167715,\\\"maxShares\\\":13000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.013500000000000002,\\\"forecast\\\":0.44223842044988515,\\\"bias\\\":0.05776157955011485,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":4306.430754024113,\\\"ask\\\":4402.225978077227,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:07 AM\\\",\\\"price\\\":4354.32836605067,\\\"maxShares\\\":13000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.013500000000000002,\\\"forecast\\\":0.4426688302271126,\\\"bias\\\":0.05733116977288738,\\\"countOfNegative\\\":14,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":4333.002177635526,\\\"ask\\\":4429.388474812454,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:11 AM\\\",\\\"price\\\":4381.19532622399,\\\"maxShares\\\":13000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.013500000000000002,\\\"forecast\\\":0.44302257347417395,\\\"bias\\\":0.05697742652582605,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":4346.982556781805,\\\"ask\\\":4443.6798431814,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:16 AM\\\",\\\"price\\\":4395.331199981603,\\\"maxShares\\\":13000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.013500000000000002,\\\"forecast\\\":0.44320641045208303,\\\"bias\\\":0.05679358954791697,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":4398.405711286688,\\\"ask\\\":4496.246889899738,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:20 AM\\\",\\\"price\\\":4447.326300593213,\\\"maxShares\\\":13000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.013500000000000002,\\\"forecast\\\":0.4438782570702971,\\\"bias\\\":0.0561217429297029,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":4347.373436308625,\\\"ask\\\":4444.07941770275,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:24 AM\\\",\\\"price\\\":4395.726427005688,\\\"maxShares\\\":13000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.013500000000000002,\\\"forecast\\\":0.4445370503070402,\\\"bias\\\":0.055462949692959784,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":4343.025306281927,\\\"ask\\\":4439.634564864538,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:28 AM\\\",\\\"price\\\":4391.329935573233,\\\"maxShares\\\":13000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.013500000000000002,\\\"forecast\\\":0.44459257844697075,\\\"bias\\\":0.055407421553029246,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":4395.932926196496,\\\"ask\\\":4493.719098467803,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:32 AM\\\",\\\"price\\\":4444.82601233215,\\\"maxShares\\\":13000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.013500000000000002,\\\"forecast\\\":0.4439175939388829,\\\"bias\\\":0.056082406061117085,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":4413.62744076933,\\\"ask\\\":4511.807222060457,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:36 AM\\\",\\\"price\\\":4462.717331414894,\\\"maxShares\\\":13000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.013500000000000002,\\\"forecast\\\":0.4441433369081203,\\\"bias\\\":0.0558566630918797,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":4469.353519908713,\\\"ask\\\":4568.772910644801,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:40 AM\\\",\\\"price\\\":4519.063215276758,\\\"maxShares\\\":13000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.013500000000000002,\\\"forecast\\\":0.44484857831548685,\\\"bias\\\":0.05515142168451315,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":4449.305387210042,\\\"ask\\\":4548.278813416938,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:45 AM\\\",\\\"price\\\":4498.79210031349,\\\"maxShares\\\":13000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.013500000000000002,\\\"forecast\\\":0.44460007143087743,\\\"bias\\\":0.05539992856912257,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0}],\\\"longTermRecords\\\":[{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":5277.617240676675,\\\"ask\\\":5395.016208618926,\\\"price\\\":5336.3167246478015,\\\"maxShares\\\":13000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:27:23 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":5025.1264679039705,\\\"ask\\\":5136.90885647211,\\\"price\\\":5081.017662188038,\\\"maxShares\\\":13000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:34:14 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":4703.561207728121,\\\"ask\\\":4808.190476251898,\\\"price\\\":4755.87584199001,\\\"maxShares\\\":13000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:41:02 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":5082.973643233691,\\\"ask\\\":5196.042824377414,\\\"price\\\":5139.39038684674,\\\"maxShares\\\":13000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:47:54 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":4953.695024561255,\\\"ask\\\":5063.888442701137,\\\"price\\\":5007.622354679505,\\\"maxShares\\\":13000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":97090.65,\\\"averageShortPrice\\\":417.13586397258723,\\\"dateObserved\\\":\\\"7/29/2023, 6:54:48 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":4573.41992920657,\\\"ask\\\":4675.154245124206,\\\"price\\\":4624.287087165385,\\\"maxShares\\\":13000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:01:39 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":4679.092496546055,\\\"ask\\\":4783.1774661355485,\\\"price\\\":4731.134981340804,\\\"maxShares\\\":13000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:08:30 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":4279.450358545947,\\\"ask\\\":4374.645412022195,\\\"price\\\":4326.83944410715,\\\"maxShares\\\":13000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:15:23 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":4836.811497868549,\\\"ask\\\":4944.404878003137,\\\"price\\\":4890.198525478423,\\\"maxShares\\\":13000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:22:11 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":4952.522294238226,\\\"ask\\\":5062.689625353739,\\\"price\\\":5007.332371543861,\\\"maxShares\\\":13000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:29:00 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":5283.184555120985,\\\"ask\\\":5400.707366256133,\\\"price\\\":5341.9459606885575,\\\"maxShares\\\":13000000,\\\"investedShares\\\":127665.72,\\\"averagePrice\\\":767.6298190618895,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:35:51 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":5229.054991815062,\\\"ask\\\":5345.3737075076115,\\\"price\\\":5285.814098360754,\\\"maxShares\\\":13000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:42:40 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":5993.776686904838,\\\"ask\\\":6127.106400870364,\\\"price\\\":6060.441543887603,\\\"maxShares\\\":13000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:49:32 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":5852.5295020968715,\\\"ask\\\":5982.717215995892,\\\"price\\\":5917.873357071292,\\\"maxShares\\\":13000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:56:21 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":5550.432931366588,\\\"ask\\\":5673.900600213976,\\\"price\\\":5612.166765790282,\\\"maxShares\\\":13000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:03:13 AM\\\",\\\"bias\\\":null},{\\\"volatility\\\":0.013500000000000002,\\\"forecast\\\":0.5539343414969179,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":5647.027808955875,\\\"ask\\\":5772.644201066113,\\\"price\\\":5709.415361352369,\\\"maxShares\\\":13000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:09:58 AM\\\",\\\"bias\\\":0.05640322551948895},{\\\"volatility\\\":0.013500000000000002,\\\"forecast\\\":0.5575082046977654,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":5085.91016693955,\\\"ask\\\":5199.044670147508,\\\"price\\\":5142.8386475642965,\\\"maxShares\\\":13000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:16:47 AM\\\",\\\"bias\\\":0.06339439384430723},{\\\"volatility\\\":0.013500000000000002,\\\"forecast\\\":0.5051750039484378,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":5145.052509721051,\\\"ask\\\":5259.502616105139,\\\"price\\\":5201.932312101536,\\\"maxShares\\\":13000000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:35 AM\\\",\\\"bias\\\":0.06339439384430723}],\\\"recentTicksOfPrices\\\":[4502.969250839253,4463.490285395839,4409.167157922222,4385.7452596758485,4434.788839785966,4396.954601250742,4392.1304763674825,4435.746273678652,4392.341205841544,4386.774596167715,4354.32836605067,4381.19532622399,4395.331199981603,4447.326300593213,4395.726427005688,4391.329935573233,4444.82601233215,4462.717331414894,4519.063215276758,4498.79210031349]}],[\\\"RHOC\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":1080.9470300664964,\\\"ask\\\":1093.996692401303,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:37 AM\\\",\\\"price\\\":1087.4718612338997,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.4461491345135951,\\\"bias\\\":0.053850865486404886,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":1082.8462329364306,\\\"ask\\\":1095.9188232736915,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:39 AM\\\",\\\"price\\\":1089.382528105061,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.44605451959220166,\\\"bias\\\":0.05394548040779834,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":1088.838007893727,\\\"ask\\\":1101.9829335423437,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:44 AM\\\",\\\"price\\\":1095.4104707180354,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.44575601998188286,\\\"bias\\\":0.054243980018117144,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":1085.8194363526127,\\\"ask\\\":1098.9279204936906,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:48 AM\\\",\\\"price\\\":1092.3736784231517,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.44560522204174874,\\\"bias\\\":0.05439477795825126,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":1081.855006012376,\\\"ask\\\":1094.915629827415,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:52 AM\\\",\\\"price\\\":1088.3853179198954,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.4454058937520152,\\\"bias\\\":0.054594106247984775,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":1080.2342176770735,\\\"ask\\\":1093.2752746309216,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:56 AM\\\",\\\"price\\\":1086.7547461539975,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.4454878069974346,\\\"bias\\\":0.05451219300256538,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":1085.5870653655304,\\\"ask\\\":1098.692744223062,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:00 AM\\\",\\\"price\\\":1092.1399047942962,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.4457579294037901,\\\"bias\\\":0.05424207059620989,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":1079.6298624688268,\\\"ask\\\":1092.6636233839433,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:04 AM\\\",\\\"price\\\":1086.146742926385,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.44605722736813136,\\\"bias\\\":0.05394277263186864,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":1081.6793171971176,\\\"ask\\\":1094.737820020423,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:08 AM\\\",\\\"price\\\":1088.2085686087703,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.44615962660167485,\\\"bias\\\":0.05384037339832515,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":1075.670642476589,\\\"ask\\\":1088.6566059672518,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:13 AM\\\",\\\"price\\\":1082.1636242219204,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.4464603778519251,\\\"bias\\\":0.053539622148074895,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":1076.1367588077453,\\\"ask\\\":1089.1283494573356,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:17 AM\\\",\\\"price\\\":1082.6325541325405,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.4464371777279637,\\\"bias\\\":0.05356282227203629,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":1077.1613040816346,\\\"ask\\\":1090.1652634870466,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:21 AM\\\",\\\"price\\\":1083.6632837843406,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.44638618278148884,\\\"bias\\\":0.05361381721851116,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":1070.5171490256798,\\\"ask\\\":1083.4408973036557,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:25 AM\\\",\\\"price\\\":1076.9790231646678,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.4467189364557907,\\\"bias\\\":0.053281063544209306,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":1063.9295975964196,\\\"ask\\\":1076.7738180905412,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:29 AM\\\",\\\"price\\\":1070.3517078434804,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.44638903516617895,\\\"bias\\\":0.05361096483382105,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":1069.018768636373,\\\"ask\\\":1081.9244278150818,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:33 AM\\\",\\\"price\\\":1075.4715982257273,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.44664547635389723,\\\"bias\\\":0.05335452364610277,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":1067.2889965712252,\\\"ask\\\":1080.1737731897915,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:38 AM\\\",\\\"price\\\":1073.7313848805084,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.4465590038381599,\\\"bias\\\":0.053440996161840115,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":1064.9326186179094,\\\"ask\\\":1077.788948017723,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:42 AM\\\",\\\"price\\\":1071.3607833178162,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.446440754868265,\\\"bias\\\":0.05355924513173499,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":1071.9158274753413,\\\"ask\\\":1084.8564612074379,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:46 AM\\\",\\\"price\\\":1078.3861443413896,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.44679196525328146,\\\"bias\\\":0.053208034746718536,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":1074.048782634349,\\\"ask\\\":1087.0151663281238,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:50 AM\\\",\\\"price\\\":1080.5319744812364,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.4466860890741033,\\\"bias\\\":0.05331391092589671,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":1078.760289391768,\\\"ask\\\":1091.7835524427753,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:54 AM\\\",\\\"price\\\":1085.2719209172717,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.44691996006362733,\\\"bias\\\":0.05308003993637267,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":1073.7740865010942,\\\"ask\\\":1086.7371539437631,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:58 AM\\\",\\\"price\\\":1080.2556202224287,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.4471664437997271,\\\"bias\\\":0.05283355620027291,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":1078.8173095165284,\\\"ask\\\":1091.841260939263,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:03 AM\\\",\\\"price\\\":1085.3292852278958,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.44741458855379235,\\\"bias\\\":0.05258541144620765,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":1072.2566227959271,\\\"ask\\\":1085.2013707572462,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:07 AM\\\",\\\"price\\\":1078.7289967765867,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.447092840566195,\\\"bias\\\":0.05290715943380497,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":1072.8023952783644,\\\"ask\\\":1085.7537320422882,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:11 AM\\\",\\\"price\\\":1079.2780636603263,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.44706591112493155,\\\"bias\\\":0.05293408887506845,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":1067.7829811540744,\\\"ask\\\":1080.6737213692143,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:15 AM\\\",\\\"price\\\":1074.2283512616443,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.4468170795570518,\\\"bias\\\":0.0531829204429482,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":1064.2843008523466,\\\"ask\\\":1077.1328034783307,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:19 AM\\\",\\\"price\\\":1070.7085521653387,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.44699191069567995,\\\"bias\\\":0.05300808930432005,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":1062.8590753330197,\\\"ask\\\":1075.6903720171206,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:23 AM\\\",\\\"price\\\":1069.2747236750702,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.4470629911270943,\\\"bias\\\":0.0529370088729057,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":1055.898855808019,\\\"ask\\\":1068.6461256970497,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:28 AM\\\",\\\"price\\\":1062.2724907525344,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.4474119385672071,\\\"bias\\\":0.052588061432792876,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":1051.2840621823032,\\\"ask\\\":1063.9756202770593,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:32 AM\\\",\\\"price\\\":1057.6298412296812,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.4471810941556738,\\\"bias\\\":0.05281890584432619,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":1044.8949302321005,\\\"ask\\\":1057.5093559491881,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:36 AM\\\",\\\"price\\\":1051.2021430906443,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.44750406151740635,\\\"bias\\\":0.05249593848259365,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":1042.1328086573162,\\\"ask\\\":1054.7138888423142,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:40 AM\\\",\\\"price\\\":1048.4233487498152,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.4476431994114125,\\\"bias\\\":0.05235680058858749,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":1047.9164701394843,\\\"ask\\\":1060.5673731995184,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:44 AM\\\",\\\"price\\\":1054.2419216695014,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.44735262799059344,\\\"bias\\\":0.05264737200940656,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":1043.4604203911958,\\\"ask\\\":1056.0575280820353,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:48 AM\\\",\\\"price\\\":1049.7589742366156,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.44757745617209993,\\\"bias\\\":0.05242254382790007,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":1042.8919293179047,\\\"ask\\\":1055.4821739374365,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:53 AM\\\",\\\"price\\\":1049.1870516276706,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.4476060322377186,\\\"bias\\\":0.05239396776228139,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":1048.0317613135346,\\\"ask\\\":1060.6840562187283,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:57 AM\\\",\\\"price\\\":1054.3579087661315,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.4473478116260597,\\\"bias\\\":0.05265218837394031,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":1053.1717226044875,\\\"ask\\\":1065.886069356252,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:01 AM\\\",\\\"price\\\":1059.5288959803697,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.4470895845187182,\\\"bias\\\":0.05291041548128178,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":1053.8349854568855,\\\"ask\\\":1066.5573394060634,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:05 AM\\\",\\\"price\\\":1060.1961624314745,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.44712290625755763,\\\"bias\\\":0.05287709374244237,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":1057.7322215301665,\\\"ask\\\":1070.5016246069895,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:07 AM\\\",\\\"price\\\":1064.116923068578,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.44692735902290787,\\\"bias\\\":0.053072640977092134,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":1060.971245212862,\\\"ask\\\":1073.7797511912868,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:11 AM\\\",\\\"price\\\":1067.3754982020744,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.44676483817166696,\\\"bias\\\":0.053235161828333044,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":1062.6701721025036,\\\"ask\\\":1075.4991882647066,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:16 AM\\\",\\\"price\\\":1069.084680183605,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.4468500833169173,\\\"bias\\\":0.05314991668308272,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":1068.909105390944,\\\"ask\\\":1081.8134406672932,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:20 AM\\\",\\\"price\\\":1075.3612730291186,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.44653804032072036,\\\"bias\\\":0.053461959679279636,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":1075.1364054528497,\\\"ask\\\":1088.1159194019785,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:24 AM\\\",\\\"price\\\":1081.626162427414,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.4468495014759686,\\\"bias\\\":0.05315049852403142,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":1075.6706188373391,\\\"ask\\\":1088.656582042619,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:28 AM\\\",\\\"price\\\":1082.163600439979,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.44682309207567306,\\\"bias\\\":0.053176907924326944,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":1082.174104775365,\\\"ask\\\":1095.2385808893534,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:32 AM\\\",\\\"price\\\":1088.7063428323593,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.4465015854110332,\\\"bias\\\":0.053498414588966814,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":1080.0165638325784,\\\"ask\\\":1093.0549931746218,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:36 AM\\\",\\\"price\\\":1086.5357785036,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.44639471203175807,\\\"bias\\\":0.05360528796824193,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":1073.291113280303,\\\"ask\\\":1086.2483500603469,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:40 AM\\\",\\\"price\\\":1079.769731670325,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.446058810887036,\\\"bias\\\":0.05394118911296403,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":1075.6912737597652,\\\"ask\\\":1088.6774863202452,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:45 AM\\\",\\\"price\\\":1082.1843800400052,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0067,\\\"forecast\\\":0.4461794375359686,\\\"bias\\\":0.053820562464031385,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0}],\\\"longTermRecords\\\":[{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":1401.3377137622033,\\\"ask\\\":1418.2552716748269,\\\"price\\\":1409.7964927185149,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:27:23 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":1362.3743165817882,\\\"ask\\\":1378.8214914298585,\\\"price\\\":1370.5979040058237,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:34:14 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":1343.996932210327,\\\"ask\\\":1360.2222472873132,\\\"price\\\":1352.1095897488203,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:41:02 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":1388.6003495470907,\\\"ask\\\":1405.3641364631526,\\\"price\\\":1396.9997471554877,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:47:54 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":1349.75234911335,\\\"ask\\\":1366.0471460845363,\\\"price\\\":1357.7452345078461,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:54:48 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":1338.3307086586144,\\\"ask\\\":1354.4876186223,\\\"price\\\":1346.4091636404573,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:01:39 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":1310.5577594107883,\\\"ask\\\":1326.3793822608181,\\\"price\\\":1318.4685708358031,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:08:30 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":1277.6549738623107,\\\"ask\\\":1293.079379985397,\\\"price\\\":1285.3980468047534,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:15:23 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":1228.452997780244,\\\"ask\\\":1243.2834162645124,\\\"price\\\":1235.8237241549657,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:22:11 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":1240.9680136527425,\\\"ask\\\":1255.9495188477451,\\\"price\\\":1248.3353926958607,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":862986.39,\\\"averageShortPrice\\\":255.50811439170116,\\\"dateObserved\\\":\\\"7/29/2023, 7:29:00 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":1176.4692206936231,\\\"ask\\\":1190.6720684283544,\\\"price\\\":1183.570644560989,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:35:51 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":1106.4691146612415,\\\"ask\\\":1119.8268906933693,\\\"price\\\":1112.9936006954104,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":847100.37,\\\"averageShortPrice\\\":213.07983950579762,\\\"dateObserved\\\":\\\"7/29/2023, 7:42:40 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":1000.6357042781889,\\\"ask\\\":1012.7158133841633,\\\"price\\\":1006.6757588311765,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:49:32 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":911.433835089979,\\\"ask\\\":922.4370604632988,\\\"price\\\":916.8137973195927,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":2154028.89,\\\"averageShortPrice\\\":353.0593315790345,\\\"dateObserved\\\":\\\"7/29/2023, 7:56:21 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":901.7815191869578,\\\"ask\\\":912.6682176077255,\\\"price\\\":907.2248683973413,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:03:13 AM\\\",\\\"bias\\\":null},{\\\"volatility\\\":0.0067,\\\"forecast\\\":0.47511759146912214,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":960.590345802587,\\\"ask\\\":972.1870099370251,\\\"price\\\":966.3659335388508,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:09:58 AM\\\",\\\"bias\\\":0.05283573392920582},{\\\"volatility\\\":0.0067,\\\"forecast\\\":0.5524765021569675,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":1004.9957065278666,\\\"ask\\\":1017.1284514758895,\\\"price\\\":1011.0981445003354,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:16:47 AM\\\",\\\"bias\\\":0.05625531694736463},{\\\"volatility\\\":0.0067,\\\"forecast\\\":0.5036400773539864,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":1070.375698193791,\\\"ask\\\":1083.2977388158497,\\\"price\\\":1076.873462449082,\\\"maxShares\\\":16900000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:35 AM\\\",\\\"bias\\\":0.054315613748633695}],\\\"recentTicksOfPrices\\\":[1062.2724907525344,1057.6298412296812,1051.2021430906443,1048.4233487498152,1054.2419216695014,1049.7589742366156,1049.1870516276706,1054.3579087661315,1059.5288959803697,1060.1961624314745,1064.116923068578,1067.3754982020744,1069.084680183605,1075.3612730291186,1081.626162427414,1082.163600439979,1088.7063428323593,1086.5357785036,1079.769731670325,1082.1843800400052]}],[\\\"APHE\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":263.7256804179923,\\\"ask\\\":271.757934643921,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:37 AM\\\",\\\"price\\\":267.74180753095663,\\\"maxShares\\\":9700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.020099999999999996,\\\"forecast\\\":0.55753248375185,\\\"bias\\\":0.05753248375185005,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":262.34288639877525,\\\"ask\\\":270.33302507081913,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:39 AM\\\",\\\"price\\\":266.3379557347972,\\\"maxShares\\\":9700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.020099999999999996,\\\"forecast\\\":0.5578357341107023,\\\"bias\\\":0.05783573411070231,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":266.697797066063,\\\"ask\\\":274.82057261122225,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:44 AM\\\",\\\"price\\\":270.7591848386426,\\\"maxShares\\\":9700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.020099999999999996,\\\"forecast\\\":0.5587958114312144,\\\"bias\\\":0.05879581143121437,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":268.92205190995986,\\\"ask\\\":277.1125712574713,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:48 AM\\\",\\\"price\\\":273.0173115837156,\\\"maxShares\\\":9700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.020099999999999996,\\\"forecast\\\":0.5583054554184711,\\\"bias\\\":0.0583054554184711,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":271.8784261074972,\\\"ask\\\":280.15898730874073,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:52 AM\\\",\\\"price\\\":276.018706708119,\\\"maxShares\\\":9700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.020099999999999996,\\\"forecast\\\":0.5589464320239618,\\\"bias\\\":0.05894643202396177,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":273.1022089902585,\\\"ask\\\":281.4200427666115,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:56 AM\\\",\\\"price\\\":277.261125878435,\\\"maxShares\\\":9700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.020099999999999996,\\\"forecast\\\":0.5592117625084123,\\\"bias\\\":0.05921176250841231,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":269.1017961978326,\\\"ask\\\":277.29778999065996,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:00 AM\\\",\\\"price\\\":273.1997930942463,\\\"maxShares\\\":9700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.020099999999999996,\\\"forecast\\\":0.5583315324410271,\\\"bias\\\":0.05833153244102707,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":264.7197683592958,\\\"ask\\\":272.78229937531495,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:04 AM\\\",\\\"price\\\":268.7510338673054,\\\"maxShares\\\":9700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.020099999999999996,\\\"forecast\\\":0.5573659438089225,\\\"bias\\\":0.05736594380892246,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":266.2273160841116,\\\"ask\\\":274.33576225926214,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:08 AM\\\",\\\"price\\\":270.28153917168686,\\\"maxShares\\\":9700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.020099999999999996,\\\"forecast\\\":0.5570392515539123,\\\"bias\\\":0.05703925155391232,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":270.6887374920227,\\\"ask\\\":278.9330645222366,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:13 AM\\\",\\\"price\\\":274.81090100712964,\\\"maxShares\\\":9700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.020099999999999996,\\\"forecast\\\":0.5579951119130855,\\\"bias\\\":0.057995111913085484,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":270.33730473644897,\\\"ask\\\":278.5709282309601,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:17 AM\\\",\\\"price\\\":274.4541164837045,\\\"maxShares\\\":9700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.020099999999999996,\\\"forecast\\\":0.5579197194991184,\\\"bias\\\":0.05791971949911845,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":271.10943561755715,\\\"ask\\\":279.36657578865027,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:21 AM\\\",\\\"price\\\":275.23800570310374,\\\"maxShares\\\":9700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.020099999999999996,\\\"forecast\\\":0.5577542905950535,\\\"bias\\\":0.05775429059505355,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":276.15735043802005,\\\"ask\\\":284.5682342077059,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:25 AM\\\",\\\"price\\\":280.362792322863,\\\"maxShares\\\":9700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.020099999999999996,\\\"forecast\\\":0.5566789361398462,\\\"bias\\\":0.0566789361398462,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":271.12123226309825,\\\"ask\\\":279.378731722888,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:29 AM\\\",\\\"price\\\":275.2499819929931,\\\"maxShares\\\":9700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.020099999999999996,\\\"forecast\\\":0.5556261162701279,\\\"bias\\\":0.05562611627012792,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":275.0118533906625,\\\"ask\\\":283.3878489254035,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:33 AM\\\",\\\"price\\\":279.199851158033,\\\"maxShares\\\":9700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.020099999999999996,\\\"forecast\\\":0.5548278750501452,\\\"bias\\\":0.05482787505014519,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":276.3490015008029,\\\"ask\\\":284.76572235869537,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:38 AM\\\",\\\"price\\\":280.55736192974916,\\\"maxShares\\\":9700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.020099999999999996,\\\"forecast\\\":0.5545612938515444,\\\"bias\\\":0.0545612938515444,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":278.18343501285705,\\\"ask\\\":286.6560269421826,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:42 AM\\\",\\\"price\\\":282.41973097751986,\\\"maxShares\\\":9700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.020099999999999996,\\\"forecast\\\":0.5549234774142087,\\\"bias\\\":0.054923477414208666,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":272.81651874920897,\\\"ask\\\":281.1256512999463,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:46 AM\\\",\\\"price\\\":276.97108502457763,\\\"maxShares\\\":9700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.020099999999999996,\\\"forecast\\\":0.556003946095291,\\\"bias\\\":0.056003946095291024,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":274.44511323269325,\\\"ask\\\":282.8038476458717,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:50 AM\\\",\\\"price\\\":278.6244804392825,\\\"maxShares\\\":9700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.020099999999999996,\\\"forecast\\\":0.5563382649924103,\\\"bias\\\":0.05633826499241035,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":278.0568207075576,\\\"ask\\\":286.52555636362536,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:54 AM\\\",\\\"price\\\":282.2911885355915,\\\"maxShares\\\":9700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.020099999999999996,\\\"forecast\\\":0.5555968514164963,\\\"bias\\\":0.055596851416496285,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":274.23646775224415,\\\"ask\\\":282.5888474807389,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:58 AM\\\",\\\"price\\\":278.4126576164915,\\\"maxShares\\\":9700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.020099999999999996,\\\"forecast\\\":0.5548223388312225,\\\"bias\\\":0.05482233883122245,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":278.10050866148083,\\\"ask\\\":286.57057491512995,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:03 AM\\\",\\\"price\\\":282.3355417883054,\\\"maxShares\\\":9700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.020099999999999996,\\\"forecast\\\":0.5555947953966099,\\\"bias\\\":0.05559479539660994,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":273.0877812730918,\\\"ask\\\":281.405175626587,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:07 AM\\\",\\\"price\\\":277.2464784498394,\\\"maxShares\\\":9700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.020099999999999996,\\\"forecast\\\":0.5566152788185971,\\\"bias\\\":0.05661527881859707,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":273.5047816248919,\\\"ask\\\":281.834876496716,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:11 AM\\\",\\\"price\\\":277.669829060804,\\\"maxShares\\\":9700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.020099999999999996,\\\"forecast\\\":0.5567017293770021,\\\"bias\\\":0.05670172937700213,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":277.3618400014874,\\\"ask\\\":285.80940873249716,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:15 AM\\\",\\\"price\\\":281.5856243669923,\\\"maxShares\\\":9700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.020099999999999996,\\\"forecast\\\":0.5575013566411461,\\\"bias\\\":0.057501356641146084,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":280.09720048351375,\\\"ask\\\":288.6280796860573,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:19 AM\\\",\\\"price\\\":284.36264008478554,\\\"maxShares\\\":9700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.020099999999999996,\\\"forecast\\\":0.5569342745269725,\\\"bias\\\":0.05693427452697253,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":278.9749382463021,\\\"ask\\\":287.47163687309296,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:23 AM\\\",\\\"price\\\":283.22328755969755,\\\"maxShares\\\":9700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.020099999999999996,\\\"forecast\\\":0.5567052389487005,\\\"bias\\\":0.0567052389487005,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":284.49173600061494,\\\"ask\\\":293.1564589244915,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:28 AM\\\",\\\"price\\\":288.82409746255325,\\\"maxShares\\\":9700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.020099999999999996,\\\"forecast\\\":0.5578265989420264,\\\"bias\\\":0.05782659894202635,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":288.238213371743,\\\"ask\\\":297.0170422054001,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:32 AM\\\",\\\"price\\\":292.62762778857154,\\\"maxShares\\\":9700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.020099999999999996,\\\"forecast\\\":0.5585881185820384,\\\"bias\\\":0.058588118582038384,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":293.5256119178734,\\\"ask\\\":302.46547827070196,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:36 AM\\\",\\\"price\\\":297.9955450942877,\\\"maxShares\\\":9700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.020099999999999996,\\\"forecast\\\":0.55966285024023,\\\"bias\\\":0.05966285024022999,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":291.21009794219077,\\\"ask\\\":300.07944102672445,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:40 AM\\\",\\\"price\\\":295.64476948445764,\\\"maxShares\\\":9700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.020099999999999996,\\\"forecast\\\":0.5591884499205415,\\\"bias\\\":0.05918844992054151,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":286.44100009194676,\\\"ask\\\":295.1650914653055,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:44 AM\\\",\\\"price\\\":290.80304577862614,\\\"maxShares\\\":9700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.020099999999999996,\\\"forecast\\\":0.5601739076908492,\\\"bias\\\":0.06017390769084918,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":290.1106994540386,\\\"ask\\\":298.946558320659,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:48 AM\\\",\\\"price\\\":294.5286288873488,\\\"maxShares\\\":9700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.020099999999999996,\\\"forecast\\\":0.5609448174090698,\\\"bias\\\":0.06094481740906976,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":289.63704709044293,\\\"ask\\\":298.45847999675084,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:53 AM\\\",\\\"price\\\":294.0477635435969,\\\"maxShares\\\":9700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.020099999999999996,\\\"forecast\\\":0.5608451524763386,\\\"bias\\\":0.06084515247633859,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":293.91942492818004,\\\"ask\\\":302.8712855858911,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:57 AM\\\",\\\"price\\\":298.3953552570356,\\\"maxShares\\\":9700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.020099999999999996,\\\"forecast\\\":0.5617447678229107,\\\"bias\\\":0.06174476782291072,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":298.2439154328281,\\\"ask\\\":307.32748646123906,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:01 AM\\\",\\\"price\\\":302.7857009470336,\\\"maxShares\\\":9700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.020099999999999996,\\\"forecast\\\":0.5608363057087543,\\\"bias\\\":0.06083630570875431,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":298.80739650381,\\\"ask\\\":307.9081293922509,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:05 AM\\\",\\\"price\\\":303.3577629480305,\\\"maxShares\\\":9700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.020099999999999996,\\\"forecast\\\":0.5609512455446454,\\\"bias\\\":0.06095124554464537,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":295.5286716116176,\\\"ask\\\":304.5295448586719,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:07 AM\\\",\\\"price\\\":300.02910823514475,\\\"maxShares\\\":9700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.020099999999999996,\\\"forecast\\\":0.5602750256540758,\\\"bias\\\":0.06027502565407583,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":298.2436055432343,\\\"ask\\\":307.32716713338357,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:11 AM\\\",\\\"price\\\":302.78538633830897,\\\"maxShares\\\":9700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.020099999999999996,\\\"forecast\\\":0.5597212969363683,\\\"bias\\\":0.059721296936368296,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":296.8177282010207,\\\"ask\\\":305.8578620548589,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:16 AM\\\",\\\"price\\\":301.33779512793984,\\\"maxShares\\\":9700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.020099999999999996,\\\"forecast\\\":0.5600081909998237,\\\"bias\\\":0.060008190999823685,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":302.04557608935113,\\\"ask\\\":311.2449337367425,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:20 AM\\\",\\\"price\\\":306.6452549130468,\\\"maxShares\\\":9700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.020099999999999996,\\\"forecast\\\":0.5610651147102178,\\\"bias\\\":0.061065114710217805,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":296.85724217052956,\\\"ask\\\":305.89857949552027,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:24 AM\\\",\\\"price\\\":301.37791083302494,\\\"maxShares\\\":9700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.020099999999999996,\\\"forecast\\\":0.5599978468086796,\\\"bias\\\":0.05999784680867959,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":297.299749124752,\\\"ask\\\":306.35456381890685,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:28 AM\\\",\\\"price\\\":301.8271564718294,\\\"maxShares\\\":9700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.020099999999999996,\\\"forecast\\\":0.5599084116840483,\\\"bias\\\":0.05990841168404826,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":302.69215653261057,\\\"ask\\\":311.91120698538043,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:32 AM\\\",\\\"price\\\":307.3016817589955,\\\"maxShares\\\":9700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.020099999999999996,\\\"forecast\\\":0.5609950273435272,\\\"bias\\\":0.06099502734352724,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":300.8889060388256,\\\"ask\\\":310.05303515675934,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:36 AM\\\",\\\"price\\\":305.4709705977925,\\\"maxShares\\\":9700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.020099999999999996,\\\"forecast\\\":0.5606294794254479,\\\"bias\\\":0.06062947942544794,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":306.54519099521804,\\\"ask\\\":315.88159275141754,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:40 AM\\\",\\\"price\\\":311.2133918733178,\\\"maxShares\\\":9700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.020099999999999996,\\\"forecast\\\":0.5594897311479099,\\\"bias\\\":0.0594897311479099,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":308.6017373790241,\\\"ask\\\":318.0007750656948,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:45 AM\\\",\\\"price\\\":313.3012562223595,\\\"maxShares\\\":9700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.020099999999999996,\\\"forecast\\\":0.5590906272145921,\\\"bias\\\":0.05909062721459213,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0}],\\\"longTermRecords\\\":[{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":225.35621839942374,\\\"ask\\\":232.21985956894935,\\\"price\\\":228.78803898418653,\\\"maxShares\\\":9700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:27:23 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":227.3552450320262,\\\"ask\\\":234.2797702614281,\\\"price\\\":230.81750764672705,\\\"maxShares\\\":9700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:34:14 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":277.5846082162268,\\\"ask\\\":286.03896176595936,\\\"price\\\":281.8117849910931,\\\"maxShares\\\":9700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:41:02 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":270.7796504840544,\\\"ask\\\":279.0267464378832,\\\"price\\\":274.93081221441923,\\\"maxShares\\\":9700000,\\\"investedShares\\\":1261000,\\\"averagePrice\\\":39.879630674317724,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:47:54 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":258.75639381027884,\\\"ask\\\":266.6372992055156,\\\"price\\\":262.6040654261263,\\\"maxShares\\\":9700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:54:48 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":255.4326867932255,\\\"ask\\\":263.2123625331206,\\\"price\\\":259.3225246631731,\\\"maxShares\\\":9700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:01:39 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":256.65236845677356,\\\"ask\\\":264.46919186154827,\\\"price\\\":260.5607801591609,\\\"maxShares\\\":9700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:08:30 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":242.22143613694442,\\\"ask\\\":249.59873876040464,\\\"price\\\":245.92806104690393,\\\"maxShares\\\":9700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:15:23 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":227.87191462110601,\\\"ask\\\":234.81217598012424,\\\"price\\\":231.37007009749544,\\\"maxShares\\\":9700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:22:11 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":238.53900139454535,\\\"ask\\\":245.8041486451408,\\\"price\\\":242.14973553505908,\\\"maxShares\\\":9700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:29:00 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":245.84779200225645,\\\"ask\\\":253.3355420124775,\\\"price\\\":249.59166700736696,\\\"maxShares\\\":9700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:35:51 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":267.1261184537323,\\\"ask\\\":275.26193932034346,\\\"price\\\":271.1628169739077,\\\"maxShares\\\":9700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:42:40 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":327.7549881686687,\\\"ask\\\":337.7373735951255,\\\"price\\\":332.74618088189715,\\\"maxShares\\\":9700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:49:32 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":390.86765714116,\\\"ask\\\":402.7722558358145,\\\"price\\\":396.8343772721606,\\\"maxShares\\\":9700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:56:21 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":353.65189006922895,\\\"ask\\\":364.4230136246367,\\\"price\\\":359.037451846933,\\\"maxShares\\\":9700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":1843000,\\\"averageShortPrice\\\":70.17722604376034,\\\"dateObserved\\\":\\\"7/29/2023, 8:03:13 AM\\\",\\\"bias\\\":null},{\\\"volatility\\\":0.020099999999999996,\\\"forecast\\\":0.522111539011634,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":372.5282089564409,\\\"ask\\\":383.87424577744935,\\\"price\\\":378.24553715901726,\\\"maxShares\\\":9700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:09:58 AM\\\",\\\"bias\\\":0.05677665414127808},{\\\"volatility\\\":0.020099999999999996,\\\"forecast\\\":0.4498809913793987,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":333.41288757347115,\\\"ask\\\":343.5675948092114,\\\"price\\\":338.5264942133584,\\\"maxShares\\\":9700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:16:47 AM\\\",\\\"bias\\\":0.05926048776843501},{\\\"volatility\\\":0.020099999999999996,\\\"forecast\\\":0.5076816435867887,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":274.9355713762885,\\\"ask\\\":283.30924360094696,\\\"price\\\":279.0959599099832,\\\"maxShares\\\":9700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:35 AM\\\",\\\"bias\\\":0.05966371531146841}],\\\"recentTicksOfPrices\\\":[288.82409746255325,292.62762778857154,297.9955450942877,295.64476948445764,290.80304577862614,294.5286288873488,294.0477635435969,298.3953552570356,302.7857009470336,303.3577629480305,300.02910823514475,302.78538633830897,301.33779512793984,306.6452549130468,301.37791083302494,301.8271564718294,307.3016817589955,305.4709705977925,311.2133918733178,313.3012562223595]}],[\\\"SYSC\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":5616.846822742919,\\\"ask\\\":5730.318475727624,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:37 AM\\\",\\\"price\\\":5673.582649235272,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.44112875904497445,\\\"bias\\\":0.05887124095502555,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":5594.547038547331,\\\"ask\\\":5707.568190841217,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:39 AM\\\",\\\"price\\\":5651.057614694274,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.44089409912352273,\\\"bias\\\":0.05910590087647727,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":5525.187765888672,\\\"ask\\\":5636.80772075511,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:44 AM\\\",\\\"price\\\":5580.997743321891,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.4401521257339599,\\\"bias\\\":0.0598478742660401,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":5490.559618387019,\\\"ask\\\":5601.4800147180695,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:48 AM\\\",\\\"price\\\":5546.019816552544,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.4405295774259158,\\\"bias\\\":0.05947042257408419,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":5445.290548119712,\\\"ask\\\":5555.296417778696,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:52 AM\\\",\\\"price\\\":5500.293482949204,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.44102398093194395,\\\"bias\\\":0.05897601906805605,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":5426.818186176318,\\\"ask\\\":5536.450876806143,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:56 AM\\\",\\\"price\\\":5481.6345314912305,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.4412247295719078,\\\"bias\\\":0.05877527042809222,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":5487.82537494695,\\\"ask\\\":5598.6905340367875,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:00 AM\\\",\\\"price\\\":5543.257954491869,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.440563989909174,\\\"bias\\\":0.059436010090826,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":5419.977882251488,\\\"ask\\\":5529.472384923235,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:04 AM\\\",\\\"price\\\":5474.725133587362,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.44130801218160615,\\\"bias\\\":0.058691987818393854,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":5396.736420806164,\\\"ask\\\":5505.761399004267,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:08 AM\\\",\\\"price\\\":5451.248909905215,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.44156077375187147,\\\"bias\\\":0.05843922624812853,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":5329.201206700475,\\\"ask\\\":5436.861837138868,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:13 AM\\\",\\\"price\\\":5383.031521919672,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.44082019265842803,\\\"bias\\\":0.059179807341571966,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":5334.440176637598,\\\"ask\\\":5442.206644852498,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:17 AM\\\",\\\"price\\\":5388.323410745048,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.4408783704639793,\\\"bias\\\":0.05912162953602068,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":5322.943182663353,\\\"ask\\\":5430.477388373724,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:21 AM\\\",\\\"price\\\":5376.7102855185385,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.4410060669272324,\\\"bias\\\":0.058993933072767624,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":5249.034687750079,\\\"ask\\\":5355.075792553112,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:25 AM\\\",\\\"price\\\":5302.055240151595,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.4418367249551929,\\\"bias\\\":0.05816327504480712,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":5322.767255075507,\\\"ask\\\":5430.297906693195,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:29 AM\\\",\\\"price\\\":5376.532580884351,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.44265373757717397,\\\"bias\\\":0.05734626242282603,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":5380.52901513256,\\\"ask\\\":5489.226570993823,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:33 AM\\\",\\\"price\\\":5434.877793063191,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.443276049410756,\\\"bias\\\":0.05672395058924401,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":5400.312400469332,\\\"ask\\\":5509.409620680834,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:38 AM\\\",\\\"price\\\":5454.861010575083,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.4430674840876855,\\\"bias\\\":0.05693251591231452,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":5373.338990925075,\\\"ask\\\":5481.891293772046,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:42 AM\\\",\\\"price\\\":5427.615142348561,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.4427816908275392,\\\"bias\\\":0.05721830917246079,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":5294.574092508074,\\\"ask\\\":5401.535185286015,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:46 AM\\\",\\\"price\\\":5348.054638897044,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.4436329008079489,\\\"bias\\\":0.05636709919205107,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":5318.475355869118,\\\"ask\\\":5425.919302452333,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:50 AM\\\",\\\"price\\\":5372.1973291607255,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.4433784431576926,\\\"bias\\\":0.05662155684230741,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":5371.404119281194,\\\"ask\\\":5479.917333812126,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:54 AM\\\",\\\"price\\\":5425.66072654666,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.44281495291178546,\\\"bias\\\":0.057185047088214536,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":5427.990724521732,\\\"ask\\\":5537.647102794898,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:58 AM\\\",\\\"price\\\":5482.818913658315,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.44221252054710325,\\\"bias\\\":0.05778747945289675,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":5485.827375419352,\\\"ask\\\":5596.652170882369,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:03 AM\\\",\\\"price\\\":5541.239773150861,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.44159677994528684,\\\"bias\\\":0.058403220054713156,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":5561.9758986803145,\\\"ask\\\":5674.339048148603,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:07 AM\\\",\\\"price\\\":5618.157473414459,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.4424074724181814,\\\"bias\\\":0.0575925275818186,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":5568.3984973576125,\\\"ask\\\":5680.891396294131,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:11 AM\\\",\\\"price\\\":5624.644946825872,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.4424739764265065,\\\"bias\\\":0.05752602357349351,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":5627.782453483615,\\\"ask\\\":5741.475028301466,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:15 AM\\\",\\\"price\\\":5684.628740892541,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.44186049252056603,\\\"bias\\\":0.05813950747943397,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":5586.121827421047,\\\"ask\\\":5698.972773429553,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:19 AM\\\",\\\"price\\\":5642.5473004253,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.4422940899886114,\\\"bias\\\":0.057705910011388584,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":5569.179700863871,\\\"ask\\\":5681.688381689404,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:23 AM\\\",\\\"price\\\":5625.434041276638,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.4424696384325515,\\\"bias\\\":0.05753036156744851,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":5487.122991249747,\\\"ask\\\":5597.973960769945,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:28 AM\\\",\\\"price\\\":5542.548476009846,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.4416093055804059,\\\"bias\\\":0.0583906944195941,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":5541.7673940158675,\\\"ask\\\":5653.722290864673,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:32 AM\\\",\\\"price\\\":5597.74484244027,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.4421907987652217,\\\"bias\\\":0.057809201234778285,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":5465.94400377367,\\\"ask\\\":5576.367114961017,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:36 AM\\\",\\\"price\\\":5521.155559367344,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.4413888714820684,\\\"bias\\\":0.0586111285179316,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":5433.273930523627,\\\"ask\\\":5543.0370402311755,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:40 AM\\\",\\\"price\\\":5488.155485377401,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.4410364449549995,\\\"bias\\\":0.058963555045000504,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":5501.682448816542,\\\"ask\\\":5612.827548792635,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:44 AM\\\",\\\"price\\\":5557.2549988045885,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.4417788351759767,\\\"bias\\\":0.058221164824023286,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":5448.892519922272,\\\"ask\\\":5558.971156688378,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:48 AM\\\",\\\"price\\\":5503.931838305325,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.4423428931271961,\\\"bias\\\":0.0576571068728039,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":5442.162371786956,\\\"ask\\\":5552.105045964471,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:53 AM\\\",\\\"price\\\":5497.133708875714,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.4422715904273135,\\\"bias\\\":0.05772840957268649,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":5503.0108746859405,\\\"ask\\\":5614.182811548282,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:57 AM\\\",\\\"price\\\":5558.596843117111,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.4429170484377999,\\\"bias\\\":0.05708295156220011,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":5442.455999164972,\\\"ask\\\":5552.40460520871,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:01 AM\\\",\\\"price\\\":5497.430302186841,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.4422819213873012,\\\"bias\\\":0.05771807861269879,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":5450.231890738913,\\\"ask\\\":5560.337585501315,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:05 AM\\\",\\\"price\\\":5505.284738120114,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.4421994568673827,\\\"bias\\\":0.05780054313261729,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":5495.958380888997,\\\"ask\\\":5606.987843129179,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:07 AM\\\",\\\"price\\\":5551.473112009088,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.4426843932919621,\\\"bias\\\":0.057315606708037925,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":5458.040511253475,\\\"ask\\\":5568.303955925263,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:11 AM\\\",\\\"price\\\":5513.172233589369,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.4430825738658796,\\\"bias\\\":0.056917426134120375,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":5477.868406534184,\\\"ask\\\":5588.532414746996,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:16 AM\\\",\\\"price\\\":5533.20041064059,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.4432893427168451,\\\"bias\\\":0.056710657283154886,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":5405.866179869651,\\\"ask\\\":5515.075597644795,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:20 AM\\\",\\\"price\\\":5460.470888757223,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.44404468764476834,\\\"bias\\\":0.05595531235523166,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":5477.314675995835,\\\"ask\\\":5587.967497733124,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:24 AM\\\",\\\"price\\\":5532.64108686448,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.44478424034271336,\\\"bias\\\":0.055215759657286645,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":5483.488975243694,\\\"ask\\\":5594.266530299123,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:28 AM\\\",\\\"price\\\":5538.877752771408,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.44484648227027973,\\\"bias\\\":0.05515351772972027,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":5409.2937005982785,\\\"ask\\\":5518.572361216426,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:32 AM\\\",\\\"price\\\":5463.933030907352,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.44408998232368513,\\\"bias\\\":0.05591001767631487,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":5433.809043789162,\\\"ask\\\":5543.582963865711,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:36 AM\\\",\\\"price\\\":5488.6960038274365,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.443836593739702,\\\"bias\\\":0.05616340626029798,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":5357.645592172831,\\\"ask\\\":5465.880856661171,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:40 AM\\\",\\\"price\\\":5411.763224417001,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.4446350039371895,\\\"bias\\\":0.05536499606281048,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":5384.8265973899615,\\\"ask\\\":5493.61097309481,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:45 AM\\\",\\\"price\\\":5439.218785242386,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0152,\\\"forecast\\\":0.44435412006367836,\\\"bias\\\":0.05564587993632164,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0}],\\\"longTermRecords\\\":[{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":8615.030203646396,\\\"ask\\\":8789.071217861474,\\\"price\\\":8702.050710753929,\\\"maxShares\\\":5300000,\\\"investedShares\\\":313468.92,\\\"averagePrice\\\":4651.178496985429,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:27:23 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":8736.804491359402,\\\"ask\\\":8913.305592194945,\\\"price\\\":8825.055041777176,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:34:14 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":8260.901954424313,\\\"ask\\\":8427.788862594502,\\\"price\\\":8344.345408509405,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:41:02 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":7880.740204308627,\\\"ask\\\":8039.947077122945,\\\"price\\\":7960.5874491768855,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:47:54 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":6908.808493362961,\\\"ask\\\":7048.380382117766,\\\"price\\\":6980.347485671773,\\\"maxShares\\\":5300000,\\\"investedShares\\\":91777.42,\\\"averagePrice\\\":1067.8011095817292,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:54:48 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":6935.585300547423,\\\"ask\\\":7075.698134901917,\\\"price\\\":7005.6417177246685,\\\"maxShares\\\":5300000,\\\"investedShares\\\":6555.53,\\\"averagePrice\\\":76.27150782726639,\\\"sharesShort\\\":258812.76,\\\"averageShortPrice\\\":2233.275204277094,\\\"dateObserved\\\":\\\"7/29/2023, 7:01:39 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":5673.0626812371265,\\\"ask\\\":5787.670008130805,\\\"price\\\":5730.3663446839655,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":83733.54,\\\"averageShortPrice\\\":722.5302131484723,\\\"dateObserved\\\":\\\"7/29/2023, 7:08:30 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":5810.020491820169,\\\"ask\\\":5927.394643170069,\\\"price\\\":5869.011676728726,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:15:23 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":5704.123582070995,\\\"ask\\\":5819.358401910809,\\\"price\\\":5762.310888814751,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":131647.88,\\\"averageShortPrice\\\":744.4103710570038,\\\"dateObserved\\\":\\\"7/29/2023, 7:22:11 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":5190.595827488016,\\\"ask\\\":5295.456349255451,\\\"price\\\":5244.140351214196,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:29:00 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":5919.263655147216,\\\"ask\\\":6038.844739089585,\\\"price\\\":5979.0541971184,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:35:51 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":5198.555979136218,\\\"ask\\\":5303.57731204806,\\\"price\\\":5250.572902871079,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:42:40 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":5200.2085607454055,\\\"ask\\\":5305.263279144307,\\\"price\\\":5252.735919944858,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:49:32 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":5620.545299984914,\\\"ask\\\":5734.091669681582,\\\"price\\\":5679.177169699443,\\\"maxShares\\\":5300000,\\\"investedShares\\\":101991.6,\\\"averagePrice\\\":705.9400996605128,\\\"sharesShort\\\":134967.28,\\\"averageShortPrice\\\":726.102038944047,\\\"dateObserved\\\":\\\"7/29/2023, 7:56:21 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":5274.826763806066,\\\"ask\\\":5381.38892065063,\\\"price\\\":5328.107842228349,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:03:13 AM\\\",\\\"bias\\\":null},{\\\"volatility\\\":0.0152,\\\"forecast\\\":0.44309391740231485,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":4851.268626979116,\\\"ask\\\":4949.274053786773,\\\"price\\\":4900.527381329706,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:09:58 AM\\\",\\\"bias\\\":0.05980972977004939},{\\\"volatility\\\":0.0152,\\\"forecast\\\":0.5541734035893524,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":5069.222995566409,\\\"ask\\\":5171.631540931384,\\\"price\\\":5120.012196693915,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:16:47 AM\\\",\\\"bias\\\":0.061644533378685584},{\\\"volatility\\\":0.0152,\\\"forecast\\\":0.5017953209863768,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":5537.711769256062,\\\"ask\\\":5649.584734291534,\\\"price\\\":5593.232777234396,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:35 AM\\\",\\\"bias\\\":0.06108496213271819}],\\\"recentTicksOfPrices\\\":[5542.548476009846,5597.74484244027,5521.155559367344,5488.155485377401,5557.2549988045885,5503.931838305325,5497.133708875714,5558.596843117111,5497.430302186841,5505.284738120114,5551.473112009088,5513.172233589369,5533.20041064059,5460.470888757223,5532.64108686448,5538.877752771408,5463.933030907352,5488.6960038274365,5411.763224417001,5439.218785242386]}],[\\\"CTK\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":3017.332396449953,\\\"ask\\\":3072.137626657924,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:37 AM\\\",\\\"price\\\":3044.735011553939,\\\"maxShares\\\":8200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0083,\\\"forecast\\\":0.5611391978559577,\\\"bias\\\":0.06113919785595767,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":3010.779260908415,\\\"ask\\\":3065.4654634274375,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:39 AM\\\",\\\"price\\\":3038.1223621679264,\\\"maxShares\\\":8200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0083,\\\"forecast\\\":0.5610061248486956,\\\"bias\\\":0.06100612484869561,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":3031.417417768673,\\\"ask\\\":3086.4784808562977,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:44 AM\\\",\\\"price\\\":3058.9479493124854,\\\"maxShares\\\":8200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0083,\\\"forecast\\\":0.560587942755305,\\\"bias\\\":0.06058794275530499,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":3041.857234942597,\\\"ask\\\":3097.107921349223,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:48 AM\\\",\\\"price\\\":3069.4825781459103,\\\"maxShares\\\":8200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0083,\\\"forecast\\\":0.5603792855635894,\\\"bias\\\":0.0603792855635894,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":3028.110903886658,\\\"ask\\\":3083.111909204478,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:52 AM\\\",\\\"price\\\":3055.611406545568,\\\"maxShares\\\":8200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0083,\\\"forecast\\\":0.5606533817491726,\\\"bias\\\":0.060653381749172564,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":3033.739284250686,\\\"ask\\\":3088.8425204933824,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:56 AM\\\",\\\"price\\\":3061.2909023720345,\\\"maxShares\\\":8200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0083,\\\"forecast\\\":0.5607661188032913,\\\"bias\\\":0.0607661188032913,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":3015.2299548369,\\\"ask\\\":3069.996997407096,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:00 AM\\\",\\\"price\\\":3042.6134761219982,\\\"maxShares\\\":8200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0083,\\\"forecast\\\":0.5611391384823784,\\\"bias\\\":0.0611391384823784,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":3035.8405831806426,\\\"ask\\\":3090.981986306022,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:04 AM\\\",\\\"price\\\":3063.4112847433325,\\\"maxShares\\\":8200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0083,\\\"forecast\\\":0.561557055549863,\\\"bias\\\":0.061557055549863016,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":3042.9797197961275,\\\"ask\\\":3098.2507944241092,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:08 AM\\\",\\\"price\\\":3070.6152571101184,\\\"maxShares\\\":8200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0083,\\\"forecast\\\":0.5614122968851122,\\\"bias\\\":0.06141229688511218,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":3064.0369733165207,\\\"ask\\\":3119.6905207632385,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:13 AM\\\",\\\"price\\\":3091.86374703988,\\\"maxShares\\\":8200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0083,\\\"forecast\\\":0.5618372666265689,\\\"bias\\\":0.061837266626568854,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":3062.3930588210437,\\\"ask\\\":3118.0167470741,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:17 AM\\\",\\\"price\\\":3090.204902947572,\\\"maxShares\\\":8200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0083,\\\"forecast\\\":0.5618704613135392,\\\"bias\\\":0.06187046131353924,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":3066.0048938811747,\\\"ask\\\":3121.6941855964733,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:21 AM\\\",\\\"price\\\":3093.849539738824,\\\"maxShares\\\":8200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0083,\\\"forecast\\\":0.5617974903078367,\\\"bias\\\":0.061797490307836656,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":3042.611356252135,\\\"ask\\\":3097.8757401194794,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:25 AM\\\",\\\"price\\\":3070.2435481858074,\\\"maxShares\\\":8200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0083,\\\"forecast\\\":0.5613223517687242,\\\"bias\\\":0.06132235176872425,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":3065.949209231513,\\\"ask\\\":3121.637489520279,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:29 AM\\\",\\\"price\\\":3093.793349375896,\\\"maxShares\\\":8200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0083,\\\"forecast\\\":0.5617927148425317,\\\"bias\\\":0.06179271484253168,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":3047.888428867509,\\\"ask\\\":3103.24866269154,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:33 AM\\\",\\\"price\\\":3075.568545779525,\\\"maxShares\\\":8200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0083,\\\"forecast\\\":0.5621588780656656,\\\"bias\\\":0.06215887806566556,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":3041.7812854281296,\\\"ask\\\":3097.030592327934,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:38 AM\\\",\\\"price\\\":3069.405938878032,\\\"maxShares\\\":8200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0083,\\\"forecast\\\":0.5620340784338851,\\\"bias\\\":0.06203407843388509,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":3033.4662275786163,\\\"ask\\\":3088.564504164302,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:42 AM\\\",\\\"price\\\":3061.0153658714594,\\\"maxShares\\\":8200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0083,\\\"forecast\\\":0.5622041205283478,\\\"bias\\\":0.062204120528347784,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":3058.1081936702903,\\\"ask\\\":3113.6540538984086,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:46 AM\\\",\\\"price\\\":3085.8811237843497,\\\"maxShares\\\":8200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0083,\\\"forecast\\\":0.5627094275645317,\\\"bias\\\":0.06270942756453168,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":3065.646558950444,\\\"ask\\\":3121.3293420595337,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:50 AM\\\",\\\"price\\\":3093.487950504989,\\\"maxShares\\\":8200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0083,\\\"forecast\\\":0.562554846188873,\\\"bias\\\":0.06255484618887297,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":3049.077131131765,\\\"ask\\\":3104.458955915187,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:54 AM\\\",\\\"price\\\":3076.768043523476,\\\"maxShares\\\":8200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0083,\\\"forecast\\\":0.5622149079176983,\\\"bias\\\":0.06221490791769835,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":3066.6170963409913,\\\"ask\\\":3122.3175077780625,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:58 AM\\\",\\\"price\\\":3094.467302059527,\\\"maxShares\\\":8200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0083,\\\"forecast\\\":0.5625728022160189,\\\"bias\\\":0.06257280221601891,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":3084.4596945865956,\\\"ask\\\":3140.4841895437685,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:03 AM\\\",\\\"price\\\":3112.4719420651822,\\\"maxShares\\\":8200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0083,\\\"forecast\\\":0.5622087328405582,\\\"bias\\\":0.06220873284055817,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":3107.839072556438,\\\"ask\\\":3164.288218173003,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:07 AM\\\",\\\"price\\\":3136.0636453647207,\\\"maxShares\\\":8200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0083,\\\"forecast\\\":0.5617372073151453,\\\"bias\\\":0.061737207315145315,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":3109.798705400553,\\\"ask\\\":3166.283444751925,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:11 AM\\\",\\\"price\\\":3138.041075076239,\\\"maxShares\\\":8200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0083,\\\"forecast\\\":0.5617761354115925,\\\"bias\\\":0.06177613541159255,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":3127.9081696334683,\\\"ask\\\":3184.721839717628,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:15 AM\\\",\\\"price\\\":3156.315004675548,\\\"maxShares\\\":8200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0083,\\\"forecast\\\":0.5614163909970292,\\\"bias\\\":0.061416390997029224,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":3140.646247165323,\\\"ask\\\":3197.6912849544,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:19 AM\\\",\\\"price\\\":3169.168766059862,\\\"maxShares\\\":8200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0083,\\\"forecast\\\":0.5616665027994926,\\\"bias\\\":0.061666502799492595,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":3145.8633598365577,\\\"ask\\\":3203.003158501601,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:23 AM\\\",\\\"price\\\":3174.4332591690795,\\\"maxShares\\\":8200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0083,\\\"forecast\\\":0.5617689406634948,\\\"bias\\\":0.06176894066349481,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":3120.3826360326643,\\\"ask\\\":3177.059616303691,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:28 AM\\\",\\\"price\\\":3148.7211261681778,\\\"maxShares\\\":8200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0083,\\\"forecast\\\":0.562273339482579,\\\"bias\\\":0.06227333948257896,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":3137.351131855369,\\\"ask\\\":3194.336318912278,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:32 AM\\\",\\\"price\\\":3165.8437253838238,\\\"maxShares\\\":8200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0083,\\\"forecast\\\":0.5619346999552741,\\\"bias\\\":0.06193469995527412,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":3161.1160133313224,\\\"ask\\\":3218.5328531294695,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:36 AM\\\",\\\"price\\\":3189.824433230396,\\\"maxShares\\\":8200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0083,\\\"forecast\\\":0.43853444447320283,\\\"bias\\\":0.061465555526797166,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":3171.495202943579,\\\"ask\\\":3229.1005648537543,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:40 AM\\\",\\\"price\\\":3200.297883898667,\\\"maxShares\\\":8200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0083,\\\"forecast\\\":0.43833262883190877,\\\"bias\\\":0.061667371168091234,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":3193.2997538189147,\\\"ask\\\":3251.3011620618413,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:44 AM\\\",\\\"price\\\":3222.3004579403782,\\\"maxShares\\\":8200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0083,\\\"forecast\\\":0.43790865551776503,\\\"bias\\\":0.06209134448223497,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":3176.49525552324,\\\"ask\\\":3234.1914357446503,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:48 AM\\\",\\\"price\\\":3205.3433456339453,\\\"maxShares\\\":8200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0083,\\\"forecast\\\":0.4382371351182662,\\\"bias\\\":0.061762864881733825,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":3174.3516608470773,\\\"ask\\\":3232.0089059482348,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:53 AM\\\",\\\"price\\\":3203.1802833976562,\\\"maxShares\\\":8200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0083,\\\"forecast\\\":0.43819542753117746,\\\"bias\\\":0.06180457246882254,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":3155.088636607065,\\\"ask\\\":3212.395998321421,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:57 AM\\\",\\\"price\\\":3183.742317464243,\\\"maxShares\\\":8200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0083,\\\"forecast\\\":0.43781808695069513,\\\"bias\\\":0.06218191304930487,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":3136.0353612187414,\\\"ask\\\":3192.9966493135316,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:01 AM\\\",\\\"price\\\":3164.5160052661367,\\\"maxShares\\\":8200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0083,\\\"forecast\\\":0.43819587896418843,\\\"bias\\\":0.061804121035811566,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":3138.4820048997562,\\\"ask\\\":3195.487732536684,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:05 AM\\\",\\\"price\\\":3166.9848687182202,\\\"maxShares\\\":8200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0083,\\\"forecast\\\":0.43824409674389303,\\\"bias\\\":0.06175590325610697,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":3152.8602881217766,\\\"ask\\\":3210.127175292505,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:07 AM\\\",\\\"price\\\":3181.493731707141,\\\"maxShares\\\":8200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0083,\\\"forecast\\\":0.4379611752977092,\\\"bias\\\":0.062038824702290774,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":3140.945069369528,\\\"ask\\\":3197.9955348071176,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:11 AM\\\",\\\"price\\\":3169.470302088323,\\\"maxShares\\\":8200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0083,\\\"forecast\\\":0.43819652044101304,\\\"bias\\\":0.06180347955898696,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":3134.7267352428703,\\\"ask\\\":3191.664254147382,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:16 AM\\\",\\\"price\\\":3163.1954946951264,\\\"maxShares\\\":8200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0083,\\\"forecast\\\":0.4383191195440759,\\\"bias\\\":0.061680880455924125,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":3112.0924062171766,\\\"ask\\\":3168.618807137367,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:20 AM\\\",\\\"price\\\":3140.355606677272,\\\"maxShares\\\":8200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0083,\\\"forecast\\\":0.437870512896007,\\\"bias\\\":0.06212948710399302,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":3134.552666748365,\\\"ask\\\":3191.487023964783,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:24 AM\\\",\\\"price\\\":3163.019845356574,\\\"maxShares\\\":8200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0083,\\\"forecast\\\":0.4374221186053242,\\\"bias\\\":0.0625778813946758,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":3132.6244190765083,\\\"ask\\\":3189.523752621793,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:28 AM\\\",\\\"price\\\":3161.074085849151,\\\"maxShares\\\":8200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0083,\\\"forecast\\\":0.43738359957528217,\\\"bias\\\":0.06261640042471783,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":3109.3361151586723,\\\"ask\\\":3165.8124522654894,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:32 AM\\\",\\\"price\\\":3137.574283712081,\\\"maxShares\\\":8200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0083,\\\"forecast\\\":0.4378525838565963,\\\"bias\\\":0.06214741614340369,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":3101.6602710371585,\\\"ask\\\":3157.997188170023,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:36 AM\\\",\\\"price\\\":3129.828729603591,\\\"maxShares\\\":8200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0083,\\\"forecast\\\":0.43800638338239417,\\\"bias\\\":0.06199361661760583,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":3077.768786780339,\\\"ask\\\":3133.6717516259955,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:40 AM\\\",\\\"price\\\":3105.7202692031674,\\\"maxShares\\\":8200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0083,\\\"forecast\\\":0.43752515180911794,\\\"bias\\\":0.06247484819088206,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":3069.266014125675,\\\"ask\\\":3125.0145391047486,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:45 AM\\\",\\\"price\\\":3097.140276615212,\\\"maxShares\\\":8200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0083,\\\"forecast\\\":0.43769822557605664,\\\"bias\\\":0.06230177442394336,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0}],\\\"longTermRecords\\\":[{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":3066.4762458719597,\\\"ask\\\":3122.174098975589,\\\"price\\\":3094.3251724237743,\\\"maxShares\\\":8200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:27:23 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":2813.857954772089,\\\"ask\\\":2864.9673828103305,\\\"price\\\":2839.4126687912108,\\\"maxShares\\\":8200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":286127.24,\\\"averageShortPrice\\\":805.8447145274278,\\\"dateObserved\\\":\\\"7/29/2023, 6:34:14 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":2722.4651149957485,\\\"ask\\\":2771.9145318170627,\\\"price\\\":2747.189823406405,\\\"maxShares\\\":8200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:41:02 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":2547.1456271965717,\\\"ask\\\":2593.4106335432293,\\\"price\\\":2570.2389194497387,\\\"maxShares\\\":8200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":237315.48,\\\"averageShortPrice\\\":303.3936285406814,\\\"dateObserved\\\":\\\"7/29/2023, 6:47:54 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":2709.713104131935,\\\"ask\\\":2758.9309001706556,\\\"price\\\":2734.3767869518033,\\\"maxShares\\\":8200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:54:48 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":2757.7585790094204,\\\"ask\\\":2807.84904764935,\\\"price\\\":2782.8038133293862,\\\"maxShares\\\":8200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:01:39 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":2873.660351349253,\\\"ask\\\":2925.8559984978788,\\\"price\\\":2899.7581749235665,\\\"maxShares\\\":8200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:08:30 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":2863.4880009651733,\\\"ask\\\":2915.498882920141,\\\"price\\\":2889.2490387733574,\\\"maxShares\\\":8200000,\\\"investedShares\\\":178524.61,\\\"averagePrice\\\":338.8888274820191,\\\"sharesShort\\\":130590.18,\\\"averageShortPrice\\\":187.6097861565249,\\\"dateObserved\\\":\\\"7/29/2023, 7:15:23 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":2883.467303516195,\\\"ask\\\":2935.8410789584655,\\\"price\\\":2909.4765044295473,\\\"maxShares\\\":8200000,\\\"investedShares\\\":194952.84,\\\"averagePrice\\\":369.32018687752753,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:22:11 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":3304.8160599770263,\\\"ask\\\":3364.8429914397766,\\\"price\\\":3334.9636444175503,\\\"maxShares\\\":8200000,\\\"investedShares\\\":146214.63,\\\"averagePrice\\\":276.99014015814566,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:29:00 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":3398.8953101519287,\\\"ask\\\":3460.631047369621,\\\"price\\\":3429.7631787607743,\\\"maxShares\\\":8200000,\\\"investedShares\\\":183086.28,\\\"averagePrice\\\":461.53089317575024,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:35:51 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":3348.4561018114746,\\\"ask\\\":3409.2756879190465,\\\"price\\\":3378.6667498454626,\\\"maxShares\\\":8200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:42:40 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":3269.21557325695,\\\"ask\\\":3328.5958763029903,\\\"price\\\":3298.905724779971,\\\"maxShares\\\":8200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:49:32 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":2994.154739117383,\\\"ask\\\":3048.5389826129576,\\\"price\\\":3020.947540164777,\\\"maxShares\\\":8200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:56:21 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":3018.1456974916096,\\\"ask\\\":3072.9657000696593,\\\"price\\\":3045.5556987806353,\\\"maxShares\\\":8200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:03:13 AM\\\",\\\"bias\\\":null},{\\\"volatility\\\":0.0083,\\\"forecast\\\":0.4721416476629707,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":2967.5016775731197,\\\"ask\\\":3021.4018089518445,\\\"price\\\":2994.587181195958,\\\"maxShares\\\":8200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:09:58 AM\\\",\\\"bias\\\":0.05923082392618512},{\\\"volatility\\\":0.0083,\\\"forecast\\\":0.5568809508297009,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":2810.558669130599,\\\"ask\\\":2861.608170688975,\\\"price\\\":2835.9584339683897,\\\"maxShares\\\":8200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:16:47 AM\\\",\\\"bias\\\":0.06057121853983927},{\\\"volatility\\\":0.0083,\\\"forecast\\\":0.5603727244975594,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":2860.541424817511,\\\"ask\\\":2912.49878672136,\\\"price\\\":2886.7246203937375,\\\"maxShares\\\":8200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:35 AM\\\",\\\"bias\\\":0.06153504795795117}],\\\"recentTicksOfPrices\\\":[3148.7211261681778,3165.8437253838238,3189.824433230396,3200.297883898667,3222.3004579403782,3205.3433456339453,3203.1802833976562,3183.742317464243,3164.5160052661367,3166.9848687182202,3181.493731707141,3169.470302088323,3163.1954946951264,3140.355606677272,3163.019845356574,3161.074085849151,3137.574283712081,3129.828729603591,3105.7202692031674,3097.140276615212]}],[\\\"NTLK\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":3456397.5845641494,\\\"ask\\\":3554550.8628276344,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:37 AM\\\",\\\"price\\\":3505474.223695892,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0358,\\\"forecast\\\":0.43623704569565086,\\\"bias\\\":0.06376295430434914,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":3424250.5656773085,\\\"ask\\\":3521490.9468527287,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:39 AM\\\",\\\"price\\\":3472870.7562650186,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0358,\\\"forecast\\\":0.436835655189024,\\\"bias\\\":0.06316434481097599,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":3525492.9730975195,\\\"ask\\\":3625608.392211851,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:44 AM\\\",\\\"price\\\":3575550.6826546853,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0358,\\\"forecast\\\":0.43496811944386493,\\\"bias\\\":0.06503188055613507,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":3473890.769900089,\\\"ask\\\":3572540.812047353,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:48 AM\\\",\\\"price\\\":3523215.790973721,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0358,\\\"forecast\\\":0.43593412227384604,\\\"bias\\\":0.06406587772615396,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":3541910.6895935144,\\\"ask\\\":3642492.3318943447,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:52 AM\\\",\\\"price\\\":3592201.5107439295,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0358,\\\"forecast\\\":0.4346796913931229,\\\"bias\\\":0.0653203086068771,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":3513740.7245142944,\\\"ask\\\":3613522.4083747407,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:56 AM\\\",\\\"price\\\":3563631.5664445176,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0358,\\\"forecast\\\":0.4352033699900046,\\\"bias\\\":0.06479663000999542,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":3423105.815253281,\\\"ask\\\":3520313.68830307,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:00 AM\\\",\\\"price\\\":3471709.7517781756,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0358,\\\"forecast\\\":0.4334877243166496,\\\"bias\\\":0.06651227568335039,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":3325071.80782524,\\\"ask\\\":3419495.7536864034,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:04 AM\\\",\\\"price\\\":3372283.7807558216,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0358,\\\"forecast\\\":0.43544872404996426,\\\"bias\\\":0.06455127595003574,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":3358798.418038211,\\\"ask\\\":3454180.1175362533,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:08 AM\\\",\\\"price\\\":3406489.267787232,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0358,\\\"forecast\\\":0.4347939725593068,\\\"bias\\\":0.0652060274406932,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":3261452.3008874855,\\\"ask\\\":3354069.6076064003,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:13 AM\\\",\\\"price\\\":3307760.954246943,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0358,\\\"forecast\\\":0.43284773726270354,\\\"bias\\\":0.06715226273729646,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":3269003.81883263,\\\"ask\\\":3361835.5702802096,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:17 AM\\\",\\\"price\\\":3315419.6945564197,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0358,\\\"forecast\\\":0.4330032206088741,\\\"bias\\\":0.06699677939112592,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":3252458.176475902,\\\"ask\\\":3344820.0719539197,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:21 AM\\\",\\\"price\\\":3298639.124214911,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0358,\\\"forecast\\\":0.4326624000077437,\\\"bias\\\":0.0673375999922563,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":3360319.5819221404,\\\"ask\\\":3455744.4787718565,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:25 AM\\\",\\\"price\\\":3408032.0303469985,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0358,\\\"forecast\\\":0.43042928038546124,\\\"bias\\\":0.06957071961453876,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":3252706.701420903,\\\"ask\\\":3345075.65440243,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:29 AM\\\",\\\"price\\\":3298891.1779116667,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0358,\\\"forecast\\\":0.43273096517400794,\\\"bias\\\":0.06726903482599206,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":3171642.9549457487,\\\"ask\\\":3261709.8948427886,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:33 AM\\\",\\\"price\\\":3216676.4248942686,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0358,\\\"forecast\\\":0.4310116417626954,\\\"bias\\\":0.06898835823730459,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":3144412.519397555,\\\"ask\\\":3233706.1812060047,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:38 AM\\\",\\\"price\\\":3189059.35030178,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0358,\\\"forecast\\\":0.4304142064608806,\\\"bias\\\":0.06958579353911942,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":3107670.250145465,\\\"ask\\\":3195920.5209406707,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:42 AM\\\",\\\"price\\\":3151795.385543068,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0358,\\\"forecast\\\":0.4312369256545322,\\\"bias\\\":0.0687630743454678,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":3002469.290890409,\\\"ask\\\":3087732.1105100154,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:46 AM\\\",\\\"price\\\":3045100.7007002123,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0358,\\\"forecast\\\":0.43364625633592097,\\\"bias\\\":0.06635374366407903,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":2970881.83531392,\\\"ask\\\":3055247.6480814554,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:50 AM\\\",\\\"price\\\":3013064.7416976877,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0358,\\\"forecast\\\":0.4329407601073571,\\\"bias\\\":0.0670592398926429,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":3040517.129306323,\\\"ask\\\":3126860.4149255697,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:54 AM\\\",\\\"price\\\":3083688.7721159463,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0358,\\\"forecast\\\":0.4313689406464401,\\\"bias\\\":0.0686310593535599,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":3115959.0446096775,\\\"ask\\\":3204444.6969921025,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:58 AM\\\",\\\"price\\\":3160201.87080089,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0358,\\\"forecast\\\":0.4296660531616023,\\\"bias\\\":0.07033394683839772,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":3194156.9678402743,\\\"ask\\\":3284863.2509026756,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:03 AM\\\",\\\"price\\\":3239510.109371475,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0358,\\\"forecast\\\":0.42790095660653416,\\\"bias\\\":0.07209904339346584,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":3298584.506376774,\\\"ask\\\":3392256.2773489337,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:07 AM\\\",\\\"price\\\":3345420.391862854,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0358,\\\"forecast\\\":0.42554380080354093,\\\"bias\\\":0.07445619919645907,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":3289637.6763097756,\\\"ask\\\":3383055.379085307,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:11 AM\\\",\\\"price\\\":3336346.5276975413,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0358,\\\"forecast\\\":0.4253413022224837,\\\"bias\\\":0.07465869777751633,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":3372265.5020198957,\\\"ask\\\":3468029.633923098,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:15 AM\\\",\\\"price\\\":3420147.567971497,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0358,\\\"forecast\\\":0.4234660544065524,\\\"bias\\\":0.07653394559344762,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":3314053.2619472994,\\\"ask\\\":3408164.3079255186,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:19 AM\\\",\\\"price\\\":3361108.784936409,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0358,\\\"forecast\\\":0.42212171499422474,\\\"bias\\\":0.07787828500577526,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":3337798.4499629163,\\\"ask\\\":3432583.8014831613,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:23 AM\\\",\\\"price\\\":3385191.125723039,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0358,\\\"forecast\\\":0.4215637171669027,\\\"bias\\\":0.07843628283309728,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":3455360.9872857216,\\\"ask\\\":3553484.828709657,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:28 AM\\\",\\\"price\\\":3504422.907997689,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0358,\\\"forecast\\\":0.4243263670291587,\\\"bias\\\":0.07567363297084129,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":3376171.9639433743,\\\"ask\\\":3472047.029856574,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:32 AM\\\",\\\"price\\\":3424109.496899974,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0358,\\\"forecast\\\":0.42255142157266934,\\\"bias\\\":0.07744857842733066,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":3269355.1643188815,\\\"ask\\\":3362196.8931230684,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:36 AM\\\",\\\"price\\\":3315776.028720975,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0358,\\\"forecast\\\":0.5799789885135036,\\\"bias\\\":0.0799789885135036,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":3223700.7614111146,\\\"ask\\\":3315246.016299057,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:40 AM\\\",\\\"price\\\":3269473.3888550857,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0358,\\\"forecast\\\":0.5788463173271889,\\\"bias\\\":0.07884631732718894,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":3130857.3060137928,\\\"ask\\\":3219766.032756578,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:44 AM\\\",\\\"price\\\":3175311.6693851855,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0358,\\\"forecast\\\":0.5811844515283066,\\\"bias\\\":0.08118445152830656,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":3202297.980905485,\\\"ask\\\":3293235.4489230854,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:48 AM\\\",\\\"price\\\":3247766.714914285,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0358,\\\"forecast\\\":0.5830369383844637,\\\"bias\\\":0.08303693838446369,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":3211625.245747807,\\\"ask\\\":3302827.5853836476,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:53 AM\\\",\\\"price\\\":3257226.4155657273,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0358,\\\"forecast\\\":0.5832787982990081,\\\"bias\\\":0.08327879829900808,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":3296200.3815987236,\\\"ask\\\":3389804.4492303305,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:57 AM\\\",\\\"price\\\":3343002.415414527,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0358,\\\"forecast\\\":0.5854718672720973,\\\"bias\\\":0.08547186727209732,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":3382579.194877285,\\\"ask\\\":3478636.210553313,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:01 AM\\\",\\\"price\\\":3430607.702715299,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0358,\\\"forecast\\\":0.5832320281819491,\\\"bias\\\":0.08323202818194908,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":3393961.826518888,\\\"ask\\\":3490342.0812273356,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:05 AM\\\",\\\"price\\\":3442151.953873112,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0358,\\\"forecast\\\":0.5829519461903689,\\\"bias\\\":0.08295194619036894,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":3461027.343807843,\\\"ask\\\":3559312.0959646585,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:07 AM\\\",\\\"price\\\":3510169.719886251,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0358,\\\"forecast\\\":0.5845910969721823,\\\"bias\\\":0.08459109697218226,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":3517658.0064558773,\\\"ask\\\":3617550.9315884984,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:11 AM\\\",\\\"price\\\":3567604.469022188,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0358,\\\"forecast\\\":0.5859752090868205,\\\"bias\\\":0.08597520908682055,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":3487815.6698310445,\\\"ask\\\":3586861.1452420685,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:16 AM\\\",\\\"price\\\":3537338.4075365565,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0358,\\\"forecast\\\":0.5852395907589507,\\\"bias\\\":0.08523959075895071,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":3597229.8472558577,\\\"ask\\\":3699382.4189832043,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:20 AM\\\",\\\"price\\\":3648306.133119531,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0358,\\\"forecast\\\":0.5879135909326382,\\\"bias\\\":0.08791359093263817,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":3709208.5490460983,\\\"ask\\\":3814541.0433394965,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:24 AM\\\",\\\"price\\\":3761874.7961927974,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0358,\\\"forecast\\\":0.5906502661522839,\\\"bias\\\":0.09065026615228389,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":3719056.3819973776,\\\"ask\\\":3824668.5307762083,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:28 AM\\\",\\\"price\\\":3771862.456386793,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0358,\\\"forecast\\\":0.5908909397801624,\\\"bias\\\":0.09089093978016238,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":3839201.986141369,\\\"ask\\\":3948225.9776342274,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:32 AM\\\",\\\"price\\\":3893713.9818877983,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0358,\\\"forecast\\\":0.5879546716117197,\\\"bias\\\":0.08795467161171966,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":3798654.249239717,\\\"ask\\\":3906526.7837008857,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:36 AM\\\",\\\"price\\\":3852590.5164703014,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0358,\\\"forecast\\\":0.5888935206487167,\\\"bias\\\":0.0888935206487167,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":3925840.990650871,\\\"ask\\\":4037325.3189857844,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:40 AM\\\",\\\"price\\\":3981583.1548183276,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0358,\\\"forecast\\\":0.5918698581835524,\\\"bias\\\":0.09186985818355242,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":3972750.8008996407,\\\"ask\\\":4085567.253663525,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:45 AM\\\",\\\"price\\\":4029159.027281583,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0358,\\\"forecast\\\":0.5907721067399165,\\\"bias\\\":0.09077210673991654,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0}],\\\"longTermRecords\\\":[{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":1346128.1047107724,\\\"ask\\\":1384354.8663049934,\\\"price\\\":1365241.4855078831,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:27:23 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":1124858.8389753383,\\\"ask\\\":1156802.0920091204,\\\"price\\\":1140830.4654922297,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":562.8,\\\"averageShortPrice\\\":127919.04444451557,\\\"dateObserved\\\":\\\"7/29/2023, 6:34:14 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":972650.103966081,\\\"ask\\\":1000270.9994133933,\\\"price\\\":986460.5516897371,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:41:02 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":675821.9891459756,\\\"ask\\\":695013.6886349077,\\\"price\\\":685471.29830665,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":440.4,\\\"averageShortPrice\\\":40756.79213856389,\\\"dateObserved\\\":\\\"7/29/2023, 6:47:54 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":675737.8713065445,\\\"ask\\\":694927.1820535861,\\\"price\\\":685237.1759661161,\\\"maxShares\\\":7100000,\\\"investedShares\\\":2612.43,\\\"averagePrice\\\":235767.71078683698,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:54:48 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":1027694.2154956524,\\\"ask\\\":1056878.2297287947,\\\"price\\\":1042286.2226122234,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:01:39 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":1303769.1592443893,\\\"ask\\\":1340793.0298923033,\\\"price\\\":1322281.0945683462,\\\"maxShares\\\":7100000,\\\"investedShares\\\":273.28,\\\"averagePrice\\\":117084.4646531734,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:08:30 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":1638046.5936255644,\\\"ask\\\":1684563.1297528625,\\\"price\\\":1660778.7874038403,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:15:23 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":1399135.5498098664,\\\"ask\\\":1438867.593820694,\\\"price\\\":1418751.2284410007,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:22:11 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":1190043.2590573716,\\\"ask\\\":1223837.5909575806,\\\"price\\\":1206709.7903301548,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:29:00 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":1361875.5958289534,\\\"ask\\\":1400549.5478403226,\\\"price\\\":1381212.5718346376,\\\"maxShares\\\":7100000,\\\"investedShares\\\":555.56,\\\"averagePrice\\\":260115.0190649781,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:35:51 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":1916468.6523856532,\\\"ask\\\":1970891.6972809858,\\\"price\\\":1943231.228476518,\\\"maxShares\\\":7100000,\\\"investedShares\\\":544.27,\\\"averagePrice\\\":344705.4759217005,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:42:40 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":2930598.3317029057,\\\"ask\\\":3013820.1910210396,\\\"price\\\":2972209.2613619734,\\\"maxShares\\\":7100000,\\\"investedShares\\\":410.09,\\\"averagePrice\\\":644808.7592788707,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:49:32 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":2253566.6892358805,\\\"ask\\\":2317562.497855155,\\\"price\\\":2284273.027218224,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":400.68,\\\"averageShortPrice\\\":550405.0449555145,\\\"dateObserved\\\":\\\"7/29/2023, 7:56:21 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":3009929.1593034402,\\\"ask\\\":3095403.8210280854,\\\"price\\\":3052666.4901657635,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:03:13 AM\\\",\\\"bias\\\":null},{\\\"volatility\\\":0.0358,\\\"forecast\\\":0.45626351053836117,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":4721375.358435253,\\\"ask\\\":4855450.9264232665,\\\"price\\\":4787947.821311757,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:09:58 AM\\\",\\\"bias\\\":0.10043507940434554},{\\\"volatility\\\":0.0358,\\\"forecast\\\":0.5448694139180391,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":4796051.218860108,\\\"ask\\\":4932247.3995173955,\\\"price\\\":4865080.9597395435,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:16:47 AM\\\",\\\"bias\\\":0.10043507940434554},{\\\"volatility\\\":0.0358,\\\"forecast\\\":0.42987574852131133,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":4112629.9407374356,\\\"ask\\\":4229418.620596106,\\\"price\\\":4169882.712979547,\\\"maxShares\\\":7100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:35 AM\\\",\\\"bias\\\":0.08273882887912948}],\\\"recentTicksOfPrices\\\":[3504422.907997689,3424109.496899974,3315776.028720975,3269473.3888550857,3175311.6693851855,3247766.714914285,3257226.4155657273,3343002.415414527,3430607.702715299,3442151.953873112,3510169.719886251,3567604.469022188,3537338.4075365565,3648306.133119531,3761874.7961927974,3771862.456386793,3893713.9818877983,3852590.5164703014,3981583.1548183276,4029159.027281583]}],[\\\"OMGA\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":8482.078611902096,\\\"ask\\\":8584.477951281195,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:37 AM\\\",\\\"price\\\":8533.278281591645,\\\"maxShares\\\":3100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0091,\\\"forecast\\\":0.4739733282106926,\\\"bias\\\":0.0260266717893074,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":8502.319791952965,\\\"ask\\\":8604.963491654611,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:39 AM\\\",\\\"price\\\":8553.641641803788,\\\"maxShares\\\":3100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0091,\\\"forecast\\\":0.4733522415951159,\\\"bias\\\":0.026647758404884092,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":8438.897634434345,\\\"ask\\\":8540.775674286671,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:44 AM\\\",\\\"price\\\":8489.836654360508,\\\"maxShares\\\":3100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0091,\\\"forecast\\\":0.47535494195277456,\\\"bias\\\":0.024645058047225443,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":8470.761331929378,\\\"ask\\\":8573.02404418607,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:48 AM\\\",\\\"price\\\":8521.892688057724,\\\"maxShares\\\":3100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0091,\\\"forecast\\\":0.4744243907026208,\\\"bias\\\":0.025575609297379176,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":8428.810112263685,\\\"ask\\\":8530.566371164254,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:52 AM\\\",\\\"price\\\":8479.68824171397,\\\"maxShares\\\":3100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0091,\\\"forecast\\\":0.4731514613218092,\\\"bias\\\":0.026848538678190814,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":8445.986871651523,\\\"ask\\\":8547.95049585657,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:56 AM\\\",\\\"price\\\":8496.968683754047,\\\"maxShares\\\":3100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0091,\\\"forecast\\\":0.4726043249138845,\\\"bias\\\":0.027395675086115512,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":8502.830782246867,\\\"ask\\\":8605.48065084542,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:00 AM\\\",\\\"price\\\":8554.155716546144,\\\"maxShares\\\":3100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0091,\\\"forecast\\\":0.47076051751877573,\\\"bias\\\":0.029239482481224266,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":8566.553989939295,\\\"ask\\\":8669.973152795706,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:04 AM\\\",\\\"price\\\":8618.2635713675,\\\"maxShares\\\":3100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0091,\\\"forecast\\\":0.46856920775066824,\\\"bias\\\":0.03143079224933176,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":8588.640962249016,\\\"ask\\\":8692.326768634315,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:08 AM\\\",\\\"price\\\":8640.483865441665,\\\"maxShares\\\":3100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0091,\\\"forecast\\\":0.467758834012408,\\\"bias\\\":0.032241165987592024,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":8523.970213188713,\\\"ask\\\":8626.875286184957,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:13 AM\\\",\\\"price\\\":8575.422749686835,\\\"maxShares\\\":3100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0091,\\\"forecast\\\":0.4653127199331155,\\\"bias\\\":0.034687280066884485,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":8528.986975401209,\\\"ask\\\":8631.952612931202,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:17 AM\\\",\\\"price\\\":8580.469794166205,\\\"maxShares\\\":3100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0091,\\\"forecast\\\":0.4655168710874972,\\\"bias\\\":0.034483128912502825,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":8517.972431766359,\\\"ask\\\":8620.80509693859,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:21 AM\\\",\\\"price\\\":8569.388764352474,\\\"maxShares\\\":3100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0091,\\\"forecast\\\":0.46596277054434027,\\\"bias\\\":0.034037229455659734,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":8589.776483322004,\\\"ask\\\":8693.475998211203,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:25 AM\\\",\\\"price\\\":8641.626240766604,\\\"maxShares\\\":3100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0091,\\\"forecast\\\":0.46309353024305566,\\\"bias\\\":0.03690646975694434,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":8662.013463246334,\\\"ask\\\":8766.585054351923,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:29 AM\\\",\\\"price\\\":8714.299258799128,\\\"maxShares\\\":3100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0091,\\\"forecast\\\":0.46619723372135524,\\\"bias\\\":0.03380276627864476,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":8718.288994098468,\\\"ask\\\":8823.539967870282,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:33 AM\\\",\\\"price\\\":8770.914480984375,\\\"maxShares\\\":3100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0091,\\\"forecast\\\":0.4640011292882776,\\\"bias\\\":0.03599887071172242,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":8699.139833179272,\\\"ask\\\":8804.159629958094,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:38 AM\\\",\\\"price\\\":8751.649731568683,\\\"maxShares\\\":3100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0091,\\\"forecast\\\":0.4632086967243832,\\\"bias\\\":0.036791303275616805,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":8673.074547448052,\\\"ask\\\":8777.779672769355,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:42 AM\\\",\\\"price\\\":8725.427110108703,\\\"maxShares\\\":3100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0091,\\\"forecast\\\":0.462103003665876,\\\"bias\\\":0.03789699633412402,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":8596.511058177959,\\\"ask\\\":8700.291875781717,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:46 AM\\\",\\\"price\\\":8648.401466979838,\\\"maxShares\\\":3100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0091,\\\"forecast\\\":0.4654782407272372,\\\"bias\\\":0.0345217592727628,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":8573.34043572702,\\\"ask\\\":8676.841527506422,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:50 AM\\\",\\\"price\\\":8625.09098161672,\\\"maxShares\\\":3100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0091,\\\"forecast\\\":0.46641123838019183,\\\"bias\\\":0.03358876161980817,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":8624.420621734755,\\\"ask\\\":8728.538375719481,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:54 AM\\\",\\\"price\\\":8676.479498727118,\\\"maxShares\\\":3100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0091,\\\"forecast\\\":0.4644100111990577,\\\"bias\\\":0.035589988800942274,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":8678.8149410276,\\\"ask\\\":8783.589366875016,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:58 AM\\\",\\\"price\\\":8731.202153951308,\\\"maxShares\\\":3100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0091,\\\"forecast\\\":0.46216534654345354,\\\"bias\\\":0.03783465345654646,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":8623.802533981087,\\\"ask\\\":8727.912826141825,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:03 AM\\\",\\\"price\\\":8675.857680061456,\\\"maxShares\\\":3100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0091,\\\"forecast\\\":0.45975182263887215,\\\"bias\\\":0.040248177361127846,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":8552.726735260047,\\\"ask\\\":8655.978969488537,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:07 AM\\\",\\\"price\\\":8604.352852374292,\\\"maxShares\\\":3100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0091,\\\"forecast\\\":0.4564070748858372,\\\"bias\\\":0.043592925114162795,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":8558.639411289429,\\\"ask\\\":8661.96302591264,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:11 AM\\\",\\\"price\\\":8610.301218601035,\\\"maxShares\\\":3100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0091,\\\"forecast\\\":0.4567084417497059,\\\"bias\\\":0.043291558250294127,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":8504.34222163765,\\\"ask\\\":8607.010336989413,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:15 AM\\\",\\\"price\\\":8555.676279313531,\\\"maxShares\\\":3100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0091,\\\"forecast\\\":0.4594724532245224,\\\"bias\\\":0.040527546775477596,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":8542.313386613434,\\\"ask\\\":8645.439906371343,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:19 AM\\\",\\\"price\\\":8593.876646492388,\\\"maxShares\\\":3100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0091,\\\"forecast\\\":0.4612819737313055,\\\"bias\\\":0.03871802626869453,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":8557.871251465076,\\\"ask\\\":8661.18559252904,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:23 AM\\\",\\\"price\\\":8609.528421997058,\\\"maxShares\\\":3100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0091,\\\"forecast\\\":0.4605768136736627,\\\"bias\\\":0.03942318632633729,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":8634.489629903328,\\\"ask\\\":8738.728941330734,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:28 AM\\\",\\\"price\\\":8686.60928561703,\\\"maxShares\\\":3100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0091,\\\"forecast\\\":0.4641063603569877,\\\"bias\\\":0.03589363964301229,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":8583.315101461576,\\\"ask\\\":8686.936611740792,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:32 AM\\\",\\\"price\\\":8635.125856601184,\\\"maxShares\\\":3100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0091,\\\"forecast\\\":0.4662463727660353,\\\"bias\\\":0.03375362723396469,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":8654.598907722371,\\\"ask\\\":8759.080987091253,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:36 AM\\\",\\\"price\\\":8706.839947406812,\\\"maxShares\\\":3100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0091,\\\"forecast\\\":0.46904958690404974,\\\"bias\\\":0.030950413095950258,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":8623.55526603463,\\\"ask\\\":8727.662573069254,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:40 AM\\\",\\\"price\\\":8675.608919551942,\\\"maxShares\\\":3100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0091,\\\"forecast\\\":0.47016376024044915,\\\"bias\\\":0.029836239759550853,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":8559.038680353531,\\\"ask\\\":8662.367115126412,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:44 AM\\\",\\\"price\\\":8610.702897739971,\\\"maxShares\\\":3100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0091,\\\"forecast\\\":0.4724127655209924,\\\"bias\\\":0.027587234479007627,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":8509.681092776658,\\\"ask\\\":8612.413661301123,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:48 AM\\\",\\\"price\\\":8561.04737703889,\\\"maxShares\\\":3100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0091,\\\"forecast\\\":0.4740128717141107,\\\"bias\\\":0.025987128285889283,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":8503.385410589075,\\\"ask\\\":8606.041974902022,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:53 AM\\\",\\\"price\\\":8554.713692745549,\\\"maxShares\\\":3100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0091,\\\"forecast\\\":0.474205273554973,\\\"bias\\\":0.025794726445027005,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":8446.843477379734,\\\"ask\\\":8548.817442901422,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:57 AM\\\",\\\"price\\\":8497.830460140578,\\\"maxShares\\\":3100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0091,\\\"forecast\\\":0.4759319347671923,\\\"bias\\\":0.02406806523280769,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":8503.109528981913,\\\"ask\\\":8605.762762732196,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:01 AM\\\",\\\"price\\\":8554.436145857055,\\\"maxShares\\\":3100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0091,\\\"forecast\\\":0.47753515495705406,\\\"bias\\\":0.022464845042945936,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":8495.842455955433,\\\"ask\\\":8598.407958441818,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:05 AM\\\",\\\"price\\\":8547.125207198626,\\\"maxShares\\\":3100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0091,\\\"forecast\\\":0.4773429978280796,\\\"bias\\\":0.022657002171920404,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":8453.382337326553,\\\"ask\\\":8555.435242807356,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:07 AM\\\",\\\"price\\\":8504.408790066955,\\\"maxShares\\\":3100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0091,\\\"forecast\\\":0.47848102632555645,\\\"bias\\\":0.021518973674443553,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":8418.369045851343,\\\"ask\\\":8519.999255660414,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:11 AM\\\",\\\"price\\\":8469.184150755878,\\\"maxShares\\\":3100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0091,\\\"forecast\\\":0.47937603353349295,\\\"bias\\\":0.02062396646650705,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":8436.678088091234,\\\"ask\\\":8538.529332615475,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:16 AM\\\",\\\"price\\\":8487.603710353354,\\\"maxShares\\\":3100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0091,\\\"forecast\\\":0.4798245824996082,\\\"bias\\\":0.020175417500391812,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":8503.952501430032,\\\"ask\\\":8606.615911910072,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:20 AM\\\",\\\"price\\\":8555.284206670052,\\\"maxShares\\\":3100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0091,\\\"forecast\\\":0.4814333784759772,\\\"bias\\\":0.018566621524022775,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":8437.191397876186,\\\"ask\\\":8539.04883929924,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:24 AM\\\",\\\"price\\\":8488.120118587713,\\\"maxShares\\\":3100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0091,\\\"forecast\\\":0.48290250260005757,\\\"bias\\\":0.01709749739994243,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":8442.885374604817,\\\"ask\\\":8544.811556189585,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:28 AM\\\",\\\"price\\\":8493.848465397201,\\\"maxShares\\\":3100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0091,\\\"forecast\\\":0.4827871173400555,\\\"bias\\\":0.017212882659944473,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":8512.21588252749,\\\"ask\\\":8614.979052135466,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:32 AM\\\",\\\"price\\\":8563.597467331478,\\\"maxShares\\\":3100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0091,\\\"forecast\\\":0.48420058897288953,\\\"bias\\\":0.015799411027110466,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":8489.182321789198,\\\"ask\\\":8591.667420241381,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:36 AM\\\",\\\"price\\\":8540.42487101529,\\\"maxShares\\\":3100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0091,\\\"forecast\\\":0.4837719061154274,\\\"bias\\\":0.01622809388457258,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":8561.432063877262,\\\"ask\\\":8664.789392616225,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:40 AM\\\",\\\"price\\\":8613.110728246744,\\\"maxShares\\\":3100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0091,\\\"forecast\\\":0.48239076532554015,\\\"bias\\\":0.01760923467445985,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":8587.435800068703,\\\"ask\\\":8691.10705721239,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:45 AM\\\",\\\"price\\\":8639.271428640546,\\\"maxShares\\\":3100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0091,\\\"forecast\\\":0.482925612637989,\\\"bias\\\":0.017074387362011,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0}],\\\"longTermRecords\\\":[{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":8001.159959416542,\\\"ask\\\":8097.753439811913,\\\"price\\\":8049.456699614228,\\\"maxShares\\\":3100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:27:23 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":8188.097400791645,\\\"ask\\\":8286.947671223732,\\\"price\\\":8237.522536007686,\\\"maxShares\\\":3100000,\\\"investedShares\\\":11561.02,\\\"averagePrice\\\":172.995196969216,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:34:14 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":8849.375734677615,\\\"ask\\\":8956.209244553005,\\\"price\\\":8902.792489615309,\\\"maxShares\\\":3100000,\\\"investedShares\\\":52024.59,\\\"averagePrice\\\":778.4783863614721,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:41:02 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":8913.727964762342,\\\"ask\\\":9021.338362727278,\\\"price\\\":8967.92962873899,\\\"maxShares\\\":3100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:47:54 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":9126.8274547213,\\\"ask\\\":9237.010482343689,\\\"price\\\":9183.35711234019,\\\"maxShares\\\":3100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:54:48 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":9645.459078105767,\\\"ask\\\":9761.903252086924,\\\"price\\\":9703.681165096345,\\\"maxShares\\\":3100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:01:39 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":9737.937452129527,\\\"ask\\\":9855.49806523371,\\\"price\\\":9796.717758681618,\\\"maxShares\\\":3100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:08:30 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":10156.262853950735,\\\"ask\\\":10278.87367311312,\\\"price\\\":10217.239287042652,\\\"maxShares\\\":3100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:15:23 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":10250.979216868443,\\\"ask\\\":10374.733493128426,\\\"price\\\":10313.483212096015,\\\"maxShares\\\":3100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:22:11 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":9522.032598893862,\\\"ask\\\":9636.98671477588,\\\"price\\\":9579.172319534311,\\\"maxShares\\\":3100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":51741.6,\\\"averageShortPrice\\\":966.3406827146507,\\\"dateObserved\\\":\\\"7/29/2023, 7:29:00 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":9577.283872863409,\\\"ask\\\":9692.905006137415,\\\"price\\\":9635.094439500412,\\\"maxShares\\\":3100000,\\\"investedShares\\\":73320.8,\\\"averagePrice\\\":1336.5908298977781,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:35:51 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":9900.102452031659,\\\"ask\\\":10019.620791492807,\\\"price\\\":9959.283415787364,\\\"maxShares\\\":3100000,\\\"investedShares\\\":87813.18,\\\"averagePrice\\\":1844.8253466525182,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:42:40 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":9590.045492971069,\\\"ask\\\":9705.820690069306,\\\"price\\\":9647.93309152019,\\\"maxShares\\\":3100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:49:32 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":9676.83932773461,\\\"ask\\\":9793.662337727385,\\\"price\\\":9735.457401849757,\\\"maxShares\\\":3100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:56:21 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":9504.280918405631,\\\"ask\\\":9619.020728285785,\\\"price\\\":9561.650823345706,\\\"maxShares\\\":3100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:03:13 AM\\\",\\\"bias\\\":null},{\\\"volatility\\\":0.0091,\\\"forecast\\\":0.4565858154148805,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":8802.687408510807,\\\"ask\\\":8908.957276621606,\\\"price\\\":8855.372541025612,\\\"maxShares\\\":3100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:09:58 AM\\\",\\\"bias\\\":0.0520274919309236},{\\\"volatility\\\":0.0091,\\\"forecast\\\":0.4895926164500445,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":8583.767311455138,\\\"ask\\\":8687.394281009929,\\\"price\\\":8635.16292577964,\\\"maxShares\\\":3100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:16:47 AM\\\",\\\"bias\\\":0.023265253287510335},{\\\"volatility\\\":0.0091,\\\"forecast\\\":0.49780811915921513,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":8529.918513753064,\\\"ask\\\":8632.895397218901,\\\"price\\\":8582.052858515475,\\\"maxShares\\\":3100000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:35 AM\\\",\\\"bias\\\":0.027931862925772877}],\\\"recentTicksOfPrices\\\":[8686.60928561703,8635.125856601184,8706.839947406812,8675.608919551942,8610.702897739971,8561.04737703889,8554.713692745549,8497.830460140578,8554.436145857055,8547.125207198626,8504.408790066955,8469.184150755878,8487.603710353354,8555.284206670052,8488.120118587713,8493.848465397201,8563.597467331478,8540.42487101529,8613.110728246744,8639.271428640546]}],[\\\"FNS\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":3545.0766539463143,\\\"ask\\\":3609.467551798013,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:37 AM\\\",\\\"price\\\":3577.272102872164,\\\"maxShares\\\":3800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.4380824611030096,\\\"bias\\\":0.06191753889699042,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":3552.234930911818,\\\"ask\\\":3616.755847921316,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:39 AM\\\",\\\"price\\\":3584.4953894165674,\\\"maxShares\\\":3800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.4382074860138118,\\\"bias\\\":0.06179251398618818,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":3574.824414697306,\\\"ask\\\":3639.7556351458943,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:44 AM\\\",\\\"price\\\":3607.2900249216004,\\\"maxShares\\\":3800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.43781453312080115,\\\"bias\\\":0.06218546687919885,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":3563.439515857602,\\\"ask\\\":3628.1639470235323,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:48 AM\\\",\\\"price\\\":3595.8017314405674,\\\"maxShares\\\":3800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.43801321061948434,\\\"bias\\\":0.06198678938051566,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":3578.446625182596,\\\"ask\\\":3643.4436375471637,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:52 AM\\\",\\\"price\\\":3610.94513136488,\\\"maxShares\\\":3800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.4377521587563058,\\\"bias\\\":0.0622478412436942,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":3584.6171036166575,\\\"ask\\\":3649.726193288806,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:56 AM\\\",\\\"price\\\":3617.171648452732,\\\"maxShares\\\":3800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.4378594955429601,\\\"bias\\\":0.06214050445703989,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":3605.0309880201025,\\\"ask\\\":3670.5108646945337,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:00 AM\\\",\\\"price\\\":3637.7709263573183,\\\"maxShares\\\":3800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.4382133768747983,\\\"bias\\\":0.06178662312520172,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":3582.3141909043184,\\\"ask\\\":3647.3814516876455,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:04 AM\\\",\\\"price\\\":3614.847821295982,\\\"maxShares\\\":3800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.43860518901276435,\\\"bias\\\":0.06139481098723565,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":3574.5159508031925,\\\"ask\\\":3639.441568476711,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:08 AM\\\",\\\"price\\\":3606.978759639952,\\\"maxShares\\\":3800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.43847124878599486,\\\"bias\\\":0.06152875121400514,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":3551.714976388174,\\\"ask\\\":3616.226449218635,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:13 AM\\\",\\\"price\\\":3583.9707128034047,\\\"maxShares\\\":3800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.43886624542608144,\\\"bias\\\":0.061133754573918564,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":3553.483736894515,\\\"ask\\\":3618.0273365555654,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:17 AM\\\",\\\"price\\\":3585.75553672504,\\\"maxShares\\\":3800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.438896690146847,\\\"bias\\\":0.06110330985315299,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":3549.599917589924,\\\"ask\\\":3614.07297361073,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:21 AM\\\",\\\"price\\\":3581.8364456003274,\\\"maxShares\\\":3800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.4389635467560119,\\\"bias\\\":0.0610364532439881,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":3574.918620826735,\\\"ask\\\":3639.851552385646,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:25 AM\\\",\\\"price\\\":3607.3850866061907,\\\"maxShares\\\":3800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.43939890958060907,\\\"bias\\\":0.060601090419390935,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":3600.357221063593,\\\"ask\\\":3665.7522059063217,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:29 AM\\\",\\\"price\\\":3633.0547134849576,\\\"maxShares\\\":3800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.43983013811378896,\\\"bias\\\":0.06016986188621104,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":3620.1494940198495,\\\"ask\\\":3685.903975243217,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:33 AM\\\",\\\"price\\\":3653.026734631533,\\\"maxShares\\\":3800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.4394993658439639,\\\"bias\\\":0.060500634156036126,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":3613.419090479084,\\\"ask\\\":3679.051324211297,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:38 AM\\\",\\\"price\\\":3646.2352073451907,\\\"maxShares\\\":3800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.4396120551479573,\\\"bias\\\":0.060387944852042685,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":3622.6078540749863,\\\"ask\\\":3688.4069876505155,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:42 AM\\\",\\\"price\\\":3655.507420862751,\\\"maxShares\\\":3800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.4394584912973788,\\\"bias\\\":0.060541508702621205,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":3595.5115837420185,\\\"ask\\\":3660.818554990612,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:46 AM\\\",\\\"price\\\":3628.1650693663155,\\\"maxShares\\\":3800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.43900224215230865,\\\"bias\\\":0.06099775784769135,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":3587.3079620319863,\\\"ask\\\":3652.465927033576,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:50 AM\\\",\\\"price\\\":3619.8869445327814,\\\"maxShares\\\":3800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.4391417346452418,\\\"bias\\\":0.06085826535475819,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":3569.31360055728,\\\"ask\\\":3634.144725491721,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:54 AM\\\",\\\"price\\\":3601.729163024501,\\\"maxShares\\\":3800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.4394485459115161,\\\"bias\\\":0.06055145408848389,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":3588.3619634628944,\\\"ask\\\":3653.5390727891627,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:58 AM\\\",\\\"price\\\":3620.950518126029,\\\"maxShares\\\":3800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.43912540084750157,\\\"bias\\\":0.06087459915249843,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":3607.730973381398,\\\"ask\\\":3673.2598911622913,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:03 AM\\\",\\\"price\\\":3640.495432271845,\\\"maxShares\\\":3800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.43879681618219324,\\\"bias\\\":0.06120318381780676,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":3633.0998146055153,\\\"ask\\\":3699.089518604404,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:07 AM\\\",\\\"price\\\":3666.09466660496,\\\"maxShares\\\":3800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.4383664476585588,\\\"bias\\\":0.06163355234144119,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":3630.975826024152,\\\"ask\\\":3696.9269510175263,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:11 AM\\\",\\\"price\\\":3663.9513885208394,\\\"maxShares\\\":3800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.4383303942757564,\\\"bias\\\":0.061669605724243626,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":3650.5917745776533,\\\"ask\\\":3716.899193288448,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:15 AM\\\",\\\"price\\\":3683.7454839330508,\\\"maxShares\\\":3800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.4379972309964717,\\\"bias\\\":0.0620027690035283,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":3636.851730618349,\\\"ask\\\":3702.9095824358365,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:19 AM\\\",\\\"price\\\":3669.880656527093,\\\"maxShares\\\":3800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.43823147776670285,\\\"bias\\\":0.06176852223329715,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":3631.255692580313,\\\"ask\\\":3697.211900921832,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:23 AM\\\",\\\"price\\\":3664.2337967510725,\\\"maxShares\\\":3800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.4383266677035275,\\\"bias\\\":0.06167333229647248,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":3658.764601868743,\\\"ask\\\":3725.2204674929985,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:28 AM\\\",\\\"price\\\":3691.992534680871,\\\"maxShares\\\":3800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.43879387966745653,\\\"bias\\\":0.06120612033254347,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":3640.3993388302556,\\\"ask\\\":3706.521627527475,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:32 AM\\\",\\\"price\\\":3673.4604831788656,\\\"maxShares\\\":3800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.43910265527003467,\\\"bias\\\":0.06089734472996533,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":3665.981320574439,\\\"ask\\\":3732.568266861361,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:36 AM\\\",\\\"price\\\":3699.2747937179,\\\"maxShares\\\":3800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.5613252853529993,\\\"bias\\\":0.061325285352999304,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":3654.848504762659,\\\"ask\\\":3721.2332404697504,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:40 AM\\\",\\\"price\\\":3688.040872616205,\\\"maxShares\\\":3800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.5615120846431887,\\\"bias\\\":0.06151208464318869,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":3631.6850201014886,\\\"ask\\\":3697.649026521092,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:44 AM\\\",\\\"price\\\":3664.6670233112904,\\\"maxShares\\\":3800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.5619044188410122,\\\"bias\\\":0.061904418841012165,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":3649.5087317455204,\\\"ask\\\":3715.7964786389803,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:48 AM\\\",\\\"price\\\":3682.6526051922506,\\\"maxShares\\\":3800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.5622082355279788,\\\"bias\\\":0.06220823552797883,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":3651.7950394116037,\\\"ask\\\":3718.124313588605,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:53 AM\\\",\\\"price\\\":3684.9596765001047,\\\"maxShares\\\":3800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.5622472071201123,\\\"bias\\\":0.062247207120112336,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":3631.227657284911,\\\"ask\\\":3697.183356408148,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:57 AM\\\",\\\"price\\\":3664.2055068465297,\\\"maxShares\\\":3800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.5625997771641827,\\\"bias\\\":0.06259977716418275,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":3610.87534199492,\\\"ask\\\":3676.461372424696,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:01 AM\\\",\\\"price\\\":3643.668357209808,\\\"maxShares\\\":3800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.5629526141583352,\\\"bias\\\":0.0629526141583352,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":3613.488796247977,\\\"ask\\\":3679.1222960789187,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:05 AM\\\",\\\"price\\\":3646.305546163448,\\\"maxShares\\\":3800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.5629981775637787,\\\"bias\\\":0.06299817756377868,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":3628.846515935095,\\\"ask\\\":3694.7589652659035,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:07 AM\\\",\\\"price\\\":3661.8027406004994,\\\"maxShares\\\":3800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.5627304284696544,\\\"bias\\\":0.06273042846965438,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":3616.120361508246,\\\"ask\\\":3681.8016596991115,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:11 AM\\\",\\\"price\\\":3648.961010603679,\\\"maxShares\\\":3800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.5629511946610856,\\\"bias\\\":0.06295119466108556,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":3609.477864281851,\\\"ask\\\":3675.0385116653756,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:16 AM\\\",\\\"price\\\":3642.2581879736135,\\\"maxShares\\\":3800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.5628353460115975,\\\"bias\\\":0.06283534601159746,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":3585.2869825633875,\\\"ask\\\":3650.40823956252,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:20 AM\\\",\\\"price\\\":3617.847611062954,\\\"maxShares\\\":3800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.5624113792746255,\\\"bias\\\":0.06241137927462548,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":3609.2918251747615,\\\"ask\\\":3674.849093442315,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:24 AM\\\",\\\"price\\\":3642.0704593085384,\\\"maxShares\\\":3800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.5619935116551205,\\\"bias\\\":0.06199351165512046,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":3607.23194864969,\\\"ask\\\":3672.75180240922,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:28 AM\\\",\\\"price\\\":3639.9918755294552,\\\"maxShares\\\":3800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.5620289124780181,\\\"bias\\\":0.06202891247801812,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":3582.340527780066,\\\"ask\\\":3647.408266932479,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:32 AM\\\",\\\"price\\\":3614.8743973562728,\\\"maxShares\\\":3800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.5624599121986205,\\\"bias\\\":0.06245991219862046,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":3574.1348306354794,\\\"ask\\\":3639.0535258437926,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:36 AM\\\",\\\"price\\\":3606.594178239636,\\\"maxShares\\\":3800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.5623165132650418,\\\"bias\\\":0.06231651326504184,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":3548.579920169433,\\\"ask\\\":3613.0344494964256,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:40 AM\\\",\\\"price\\\":3580.8071848329296,\\\"maxShares\\\":3800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.5618677441932245,\\\"bias\\\":0.061867744193224494,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":3539.483331839773,\\\"ask\\\":3603.772635546247,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:45 AM\\\",\\\"price\\\":3571.6279836930103,\\\"maxShares\\\":3800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0077,\\\"forecast\\\":0.5620267463263177,\\\"bias\\\":0.06202674632631766,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0}],\\\"longTermRecords\\\":[{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":3111.273796369178,\\\"ask\\\":3167.785328492936,\\\"price\\\":3139.5295624310584,\\\"maxShares\\\":3800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:27:23 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":2977.0830202106836,\\\"ask\\\":3031.1571820308573,\\\"price\\\":3004.120101120772,\\\"maxShares\\\":3800000,\\\"investedShares\\\":132927.6,\\\"averagePrice\\\":240.73259646895025,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:34:14 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":3109.3553709031244,\\\"ask\\\":3165.832057761101,\\\"price\\\":3137.593714332113,\\\"maxShares\\\":3800000,\\\"investedShares\\\":283340,\\\"averagePrice\\\":571.8500050370386,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:41:02 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":2794.5645204604753,\\\"ask\\\":2845.323512759454,\\\"price\\\":2819.8393218590604,\\\"maxShares\\\":3800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:47:54 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":2661.44827634276,\\\"ask\\\":2709.7894155699746,\\\"price\\\":2685.5707938587348,\\\"maxShares\\\":3800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:54:48 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":2765.894281321523,\\\"ask\\\":2816.132522556424,\\\"price\\\":2791.013401938973,\\\"maxShares\\\":3800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:01:39 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":2625.953308580406,\\\"ask\\\":2673.6497359814634,\\\"price\\\":2649.8015222809336,\\\"maxShares\\\":3800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:08:30 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":2747.715678126807,\\\"ask\\\":2797.6237328253756,\\\"price\\\":2772.746454363685,\\\"maxShares\\\":3800000,\\\"investedShares\\\":160639.92,\\\"averagePrice\\\":252.11668229993202,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:15:23 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":2759.5262345735973,\\\"ask\\\":2809.64880997453,\\\"price\\\":2784.473503903217,\\\"maxShares\\\":3800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:22:11 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":2919.8452143035206,\\\"ask\\\":2972.8797388821904,\\\"price\\\":2946.037874791353,\\\"maxShares\\\":3800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:29:00 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":2942.0080634220626,\\\"ask\\\":2995.445142273319,\\\"price\\\":2968.726602847692,\\\"maxShares\\\":3800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":106088.82,\\\"averageShortPrice\\\":169.66919227226273,\\\"dateObserved\\\":\\\"7/29/2023, 7:35:51 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":2754.7973150945986,\\\"ask\\\":2804.833996902573,\\\"price\\\":2780.2500038944763,\\\"maxShares\\\":3800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":123770.29,\\\"averageShortPrice\\\":197.9473909843065,\\\"dateObserved\\\":\\\"7/29/2023, 7:42:40 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":2857.033508188999,\\\"ask\\\":2908.927154150049,\\\"price\\\":2882.9803311695227,\\\"maxShares\\\":3800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:49:32 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":2959.8913546969125,\\\"ask\\\":3013.6532561949384,\\\"price\\\":2986.6561062645005,\\\"maxShares\\\":3800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":121470.02,\\\"averageShortPrice\\\":201.69583722479004,\\\"dateObserved\\\":\\\"7/29/2023, 7:56:21 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":3051.609569810086,\\\"ask\\\":3107.03739247061,\\\"price\\\":3079.323481140348,\\\"maxShares\\\":3800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:03:13 AM\\\",\\\"bias\\\":null},{\\\"volatility\\\":0.0077,\\\"forecast\\\":0.5304708727572058,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":3103.293217768172,\\\"ask\\\":3159.6597948820245,\\\"price\\\":3131.339303063283,\\\"maxShares\\\":3800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:09:58 AM\\\",\\\"bias\\\":0.06703818664008027},{\\\"volatility\\\":0.0077,\\\"forecast\\\":0.5642308372526417,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":3387.712242821288,\\\"ask\\\":3449.2448567171336,\\\"price\\\":3418.617352422749,\\\"maxShares\\\":3800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:16:47 AM\\\",\\\"bias\\\":0.0663432473959229},{\\\"volatility\\\":0.0077,\\\"forecast\\\":0.5047858913944206,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":3642.8809082155985,\\\"ask\\\":3709.0482708269833,\\\"price\\\":3675.7338479112072,\\\"maxShares\\\":3800000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:35 AM\\\",\\\"bias\\\":0.06579530878459217}],\\\"recentTicksOfPrices\\\":[3691.992534680871,3673.4604831788656,3699.2747937179,3688.040872616205,3664.6670233112904,3682.6526051922506,3684.9596765001047,3664.2055068465297,3643.668357209808,3646.305546163448,3661.8027406004994,3648.961010603679,3642.2581879736135,3617.847611062954,3642.0704593085384,3639.9918755294552,3614.8743973562728,3606.594178239636,3580.8071848329296,3571.6279836930103]}],[\\\"JGN\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":431558.54397731175,\\\"ask\\\":439397.145179725,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:37 AM\\\",\\\"price\\\":435477.8445785184,\\\"maxShares\\\":8300000,\\\"investedShares\\\":110322,\\\"averagePrice\\\":61508.678355266384,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0346,\\\"forecast\\\":0.7231531239892306,\\\"bias\\\":0.2231531239892306,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":427678.06603721366,\\\"ask\\\":435446.18429016,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:39 AM\\\",\\\"price\\\":431562.12516368687,\\\"maxShares\\\":8300000,\\\"investedShares\\\":110322,\\\"averagePrice\\\":61508.678355266384,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0346,\\\"forecast\\\":0.7211283748995057,\\\"bias\\\":0.22112837489950565,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":439899.07259397936,\\\"ask\\\":447889.1667480577,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:44 AM\\\",\\\"price\\\":443894.11967101856,\\\"maxShares\\\":8300000,\\\"investedShares\\\":110322,\\\"averagePrice\\\":61508.678355266384,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0346,\\\"forecast\\\":0.714809576873285,\\\"bias\\\":0.21480957687328495,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":433673.0938127018,\\\"ask\\\":441550.10258023825,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:48 AM\\\",\\\"price\\\":437611.59819647006,\\\"maxShares\\\":8300000,\\\"investedShares\\\":110322,\\\"averagePrice\\\":61508.678355266384,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0346,\\\"forecast\\\":0.7178934662976215,\\\"bias\\\":0.21789346629762152,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":441879.9251197913,\\\"ask\\\":449905.9984317552,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:52 AM\\\",\\\"price\\\":445892.96177577326,\\\"maxShares\\\":8300000,\\\"investedShares\\\":110322,\\\"averagePrice\\\":61508.678355266384,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0346,\\\"forecast\\\":0.7137700494974226,\\\"bias\\\":0.21377004949742262,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":445303.7688955404,\\\"ask\\\":453392.0310954593,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:56 AM\\\",\\\"price\\\":449347.8999954999,\\\"maxShares\\\":8300000,\\\"investedShares\\\":110322,\\\"averagePrice\\\":61508.678355266384,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0346,\\\"forecast\\\":0.712113682661534,\\\"bias\\\":0.21211368266153396,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":434192.82649631705,\\\"ask\\\":442079.27541350544,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:00 AM\\\",\\\"price\\\":438136.0509549113,\\\"maxShares\\\":8300000,\\\"investedShares\\\":110322,\\\"averagePrice\\\":61508.678355266384,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0346,\\\"forecast\\\":0.7175416463825317,\\\"bias\\\":0.2175416463825317,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":446565.155024251,\\\"ask\\\":454676.3283748429,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:04 AM\\\",\\\"price\\\":450620.741699547,\\\"maxShares\\\":8300000,\\\"investedShares\\\":110322,\\\"averagePrice\\\":61508.678355266384,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0346,\\\"forecast\\\":0.7113427951963637,\\\"bias\\\":0.21134279519636368,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":442229.917899163,\\\"ask\\\":450262.3482949096,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:08 AM\\\",\\\"price\\\":446246.1330970363,\\\"maxShares\\\":8300000,\\\"investedShares\\\":110322,\\\"averagePrice\\\":61508.678355266384,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0346,\\\"forecast\\\":0.7092709744199501,\\\"bias\\\":0.20927097441995013,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":429830.5941837841,\\\"ask\\\":437637.80981981644,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:13 AM\\\",\\\"price\\\":433734.2020018003,\\\"maxShares\\\":8300000,\\\"investedShares\\\":110322,\\\"averagePrice\\\":61508.678355266384,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0346,\\\"forecast\\\":0.703234134345797,\\\"bias\\\":0.20323413434579696,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":428870.8779158479,\\\"ask\\\":436660.6617730479,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:17 AM\\\",\\\"price\\\":432765.7698444479,\\\"maxShares\\\":8300000,\\\"investedShares\\\":110322,\\\"averagePrice\\\":61508.678355266384,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0346,\\\"forecast\\\":0.7036889264871508,\\\"bias\\\":0.20368892648715076,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":430979.4649949485,\\\"ask\\\":438807.54811291926,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:21 AM\\\",\\\"price\\\":434893.5065539339,\\\"maxShares\\\":8300000,\\\"investedShares\\\":110322,\\\"averagePrice\\\":61508.678355266384,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0346,\\\"forecast\\\":0.7026874692638627,\\\"bias\\\":0.20268746926386272,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":444792.973648316,\\\"ask\\\":452871.95803345187,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:25 AM\\\",\\\"price\\\":448832.46584088396,\\\"maxShares\\\":8300000,\\\"investedShares\\\":110322,\\\"averagePrice\\\":61508.678355266384,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0346,\\\"forecast\\\":0.6961910457958946,\\\"bias\\\":0.19619104579589464,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":459015.2902514585,\\\"ask\\\":467352.60127519834,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:29 AM\\\",\\\"price\\\":463183.9457633284,\\\"maxShares\\\":8300000,\\\"investedShares\\\":110322,\\\"averagePrice\\\":61508.678355266384,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0346,\\\"forecast\\\":0.7024642815107578,\\\"bias\\\":0.2024642815107578,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":447949.94571776217,\\\"ask\\\":456086.27167429065,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:33 AM\\\",\\\"price\\\":452018.10869602644,\\\"maxShares\\\":8300000,\\\"investedShares\\\":110322,\\\"averagePrice\\\":61508.678355266384,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0346,\\\"forecast\\\":0.7074655925994199,\\\"bias\\\":0.20746559259941988,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":444231.87317637977,\\\"ask\\\":452300.6660292302,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:38 AM\\\",\\\"price\\\":448266.269602805,\\\"maxShares\\\":8300000,\\\"investedShares\\\":110322,\\\"averagePrice\\\":61508.678355266384,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0346,\\\"forecast\\\":0.7057291748191962,\\\"bias\\\":0.20572917481919617,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":449308.01599727414,\\\"ask\\\":457469.00922426797,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:42 AM\\\",\\\"price\\\":453388.51261077105,\\\"maxShares\\\":8300000,\\\"investedShares\\\":110322,\\\"averagePrice\\\":61508.678355266384,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0346,\\\"forecast\\\":0.7080799981996526,\\\"bias\\\":0.20807999819965262,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":434591.1585055675,\\\"ask\\\":442484.8425147503,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:46 AM\\\",\\\"price\\\":438538.00051015895,\\\"maxShares\\\":8300000,\\\"investedShares\\\":110322,\\\"averagePrice\\\":61508.678355266384,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0346,\\\"forecast\\\":0.7151263534244324,\\\"bias\\\":0.21512635342443243,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":430170.7418527777,\\\"ask\\\":437984.13575121365,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:50 AM\\\",\\\"price\\\":434077.4388019957,\\\"maxShares\\\":8300000,\\\"investedShares\\\":110322,\\\"averagePrice\\\":61508.678355266384,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0346,\\\"forecast\\\":0.7173369828852729,\\\"bias\\\":0.21733698288527292,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":420641.695778825,\\\"ask\\\":428282.0091229408,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:54 AM\\\",\\\"price\\\":424461.8524508829,\\\"maxShares\\\":8300000,\\\"investedShares\\\":110322,\\\"averagePrice\\\":61508.678355266384,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0346,\\\"forecast\\\":0.7124135191766808,\\\"bias\\\":0.21241351917668083,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":430728.8960396463,\\\"ask\\\":438552.42795560346,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:58 AM\\\",\\\"price\\\":434640.6619976249,\\\"maxShares\\\":8300000,\\\"investedShares\\\":110322,\\\"averagePrice\\\":61508.678355266384,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0346,\\\"forecast\\\":0.7175073026212199,\\\"bias\\\":0.21750730262121987,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":441176.11167009315,\\\"ask\\\":449189.4012867043,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:03 AM\\\",\\\"price\\\":445182.75647839875,\\\"maxShares\\\":8300000,\\\"investedShares\\\":110322,\\\"averagePrice\\\":61508.678355266384,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0346,\\\"forecast\\\":0.7227828848089345,\\\"bias\\\":0.2227828848089345,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":455116.1461414041,\\\"ask\\\":463382.6351732358,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:07 AM\\\",\\\"price\\\":459249.39065732,\\\"maxShares\\\":8300000,\\\"investedShares\\\":110322,\\\"averagePrice\\\":61508.678355266384,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0346,\\\"forecast\\\":0.7298222530152009,\\\"bias\\\":0.22982225301520087,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":456312.43604379025,\\\"ask\\\":464600.6538528601,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:11 AM\\\",\\\"price\\\":460456.5449483252,\\\"maxShares\\\":8300000,\\\"investedShares\\\":110322,\\\"averagePrice\\\":61508.678355266384,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0346,\\\"forecast\\\":0.7304263494485106,\\\"bias\\\":0.2304263494485106,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":467389.72883124603,\\\"ask\\\":475879.1487292908,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:15 AM\\\",\\\"price\\\":471634.4387802684,\\\"maxShares\\\":8300000,\\\"investedShares\\\":110322,\\\"averagePrice\\\":61508.678355266384,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0346,\\\"forecast\\\":0.7248325940801148,\\\"bias\\\":0.2248325940801148,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":475324.3658523378,\\\"ask\\\":483957.9063017243,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:19 AM\\\",\\\"price\\\":479641.1360770311,\\\"maxShares\\\":8300000,\\\"investedShares\\\":110322,\\\"averagePrice\\\":61508.678355266384,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0346,\\\"forecast\\\":0.728649462347625,\\\"bias\\\":0.22864946234762495,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":472055.4613940802,\\\"ask\\\":480629.627191349,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:23 AM\\\",\\\"price\\\":476342.5442927146,\\\"maxShares\\\":8300000,\\\"investedShares\\\":110322,\\\"averagePrice\\\":61508.678355266384,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0346,\\\"forecast\\\":0.727066103382475,\\\"bias\\\":0.22706610338247502,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":488124.68672878004,\\\"ask\\\":496990.7254382836,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:28 AM\\\",\\\"price\\\":492557.70608353184,\\\"maxShares\\\":8300000,\\\"investedShares\\\":110322,\\\"averagePrice\\\":61508.678355266384,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0346,\\\"forecast\\\":0.7347956535720854,\\\"bias\\\":0.23479565357208543,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":499190.01422897214,\\\"ask\\\":508257.03769629955,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:32 AM\\\",\\\"price\\\":503723.5259626359,\\\"maxShares\\\":8300000,\\\"investedShares\\\":110322,\\\"averagePrice\\\":61508.678355266384,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0346,\\\"forecast\\\":0.7294730569629932,\\\"bias\\\":0.22947305696299325,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":514952.9251263646,\\\"ask\\\":524306.257772454,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:36 AM\\\",\\\"price\\\":519629.59144940926,\\\"maxShares\\\":8300000,\\\"investedShares\\\":110322,\\\"averagePrice\\\":61508.678355266384,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0346,\\\"forecast\\\":0.7367191220827991,\\\"bias\\\":0.2367191220827991,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":522001.29274015885,\\\"ask\\\":531482.6482086985,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:40 AM\\\",\\\"price\\\":526741.9704744287,\\\"maxShares\\\":8300000,\\\"investedShares\\\":110322,\\\"averagePrice\\\":61508.678355266384,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0346,\\\"forecast\\\":0.7334790523361425,\\\"bias\\\":0.23347905233614252,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":507457.39934329834,\\\"ask\\\":516674.5872223895,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:44 AM\\\",\\\"price\\\":512065.99328284396,\\\"maxShares\\\":8300000,\\\"investedShares\\\":110322,\\\"averagePrice\\\":61508.678355266384,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0346,\\\"forecast\\\":0.7401706375844239,\\\"bias\\\":0.24017063758442392,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":518648.5549867204,\\\"ask\\\":528069.0130994963,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:48 AM\\\",\\\"price\\\":523358.78404310835,\\\"maxShares\\\":8300000,\\\"investedShares\\\":110322,\\\"averagePrice\\\":61508.678355266384,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0346,\\\"forecast\\\":0.7454672141831008,\\\"bias\\\":0.2454672141831008,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":520108.57500810345,\\\"ask\\\":529555.5521525493,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:53 AM\\\",\\\"price\\\":524832.0635803264,\\\"maxShares\\\":8300000,\\\"investedShares\\\":110322,\\\"averagePrice\\\":61508.678355266384,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0346,\\\"forecast\\\":0.7461582159102909,\\\"bias\\\":0.24615821591029086,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":533346.0431251561,\\\"ask\\\":543033.4586410519,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:57 AM\\\",\\\"price\\\":538189.750883104,\\\"maxShares\\\":8300000,\\\"investedShares\\\":110322,\\\"averagePrice\\\":61508.678355266384,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0346,\\\"forecast\\\":0.7524232761139461,\\\"bias\\\":0.2524232761139461,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":546854.1901032076,\\\"ask\\\":556786.9604582607,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:01 AM\\\",\\\"price\\\":551820.5752807342,\\\"maxShares\\\":8300000,\\\"investedShares\\\":110322,\\\"averagePrice\\\":61508.678355266384,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0346,\\\"forecast\\\":0.7588164438488164,\\\"bias\\\":0.2588164438488164,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":548632.7124427094,\\\"ask\\\":558597.7869371278,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:05 AM\\\",\\\"price\\\":553615.2496899186,\\\"maxShares\\\":8300000,\\\"investedShares\\\":110322,\\\"averagePrice\\\":61508.678355266384,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0346,\\\"forecast\\\":0.7579747005915713,\\\"bias\\\":0.25797470059157135,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":559110.4398771354,\\\"ask\\\":569265.8262724819,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:07 AM\\\",\\\"price\\\":564188.1330748087,\\\"maxShares\\\":8300000,\\\"investedShares\\\":110322,\\\"averagePrice\\\":61508.678355266384,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0346,\\\"forecast\\\":0.7629014731599468,\\\"bias\\\":0.26290147315994683,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":16,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":567952.1706513601,\\\"ask\\\":578268.1535693464,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:11 AM\\\",\\\"price\\\":573110.1621103532,\\\"maxShares\\\":8300000,\\\"investedShares\\\":110322,\\\"averagePrice\\\":61508.678355266384,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0346,\\\"forecast\\\":0.7587439688816542,\\\"bias\\\":0.2587439688816542,\\\"countOfNegative\\\":3,\\\"countOfPositive\\\":17,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":572648.7767347131,\\\"ask\\\":583050.0663222255,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:16 AM\\\",\\\"price\\\":577849.4215284693,\\\"maxShares\\\":8300000,\\\"investedShares\\\":110322,\\\"averagePrice\\\":61508.678355266384,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0346,\\\"forecast\\\":0.7566043195219436,\\\"bias\\\":0.2566043195219436,\\\"countOfNegative\\\":2,\\\"countOfPositive\\\":18,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":590010.8460064596,\\\"ask\\\":600727.4910398765,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:20 AM\\\",\\\"price\\\":595369.1685231681,\\\"maxShares\\\":8300000,\\\"investedShares\\\":110322,\\\"averagePrice\\\":61508.678355266384,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0346,\\\"forecast\\\":0.7488243640728581,\\\"bias\\\":0.24882436407285813,\\\"countOfNegative\\\":2,\\\"countOfPositive\\\":18,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":607761.7431458876,\\\"ask\\\":618800.8060890016,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:24 AM\\\",\\\"price\\\":613281.2746174446,\\\"maxShares\\\":8300000,\\\"investedShares\\\":110322,\\\"averagePrice\\\":61508.678355266384,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0346,\\\"forecast\\\":0.7413383056006506,\\\"bias\\\":0.24133830560065062,\\\"countOfNegative\\\":2,\\\"countOfPositive\\\":18,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":609321.2448445243,\\\"ask\\\":620388.633751892,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:28 AM\\\",\\\"price\\\":614854.9392982082,\\\"maxShares\\\":8300000,\\\"investedShares\\\":110322,\\\"averagePrice\\\":61508.678355266384,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0346,\\\"forecast\\\":0.7419575737625165,\\\"bias\\\":0.24195757376251648,\\\"countOfNegative\\\":2,\\\"countOfPositive\\\":18,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":590872.6998417407,\\\"ask\\\":601604.9991325089,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:32 AM\\\",\\\"price\\\":596238.8494871248,\\\"maxShares\\\":8300000,\\\"investedShares\\\":110322,\\\"averagePrice\\\":61508.678355266384,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0346,\\\"forecast\\\":0.7344030443528523,\\\"bias\\\":0.2344030443528523,\\\"countOfNegative\\\":3,\\\"countOfPositive\\\":17,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":596968.403567849,\\\"ask\\\":607811.421997941,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:36 AM\\\",\\\"price\\\":602389.912782895,\\\"maxShares\\\":8300000,\\\"investedShares\\\":110322,\\\"averagePrice\\\":61508.678355266384,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0346,\\\"forecast\\\":0.7319848390249442,\\\"bias\\\":0.23198483902494416,\\\"countOfNegative\\\":3,\\\"countOfPositive\\\":17,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":616286.1513686726,\\\"ask\\\":627480.0471553891,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:40 AM\\\",\\\"price\\\":621883.0992620309,\\\"maxShares\\\":8300000,\\\"investedShares\\\":110322,\\\"averagePrice\\\":61508.678355266384,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0346,\\\"forecast\\\":0.7244778678232611,\\\"bias\\\":0.22447786782326107,\\\"countOfNegative\\\":3,\\\"countOfPositive\\\":17,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":623403.3068226026,\\\"ask\\\":634726.4748577256,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:45 AM\\\",\\\"price\\\":629064.8908401642,\\\"maxShares\\\":8300000,\\\"investedShares\\\":110322,\\\"averagePrice\\\":61508.678355266384,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0346,\\\"forecast\\\":0.7218854943329321,\\\"bias\\\":0.22188549433293214,\\\"countOfNegative\\\":2,\\\"countOfPositive\\\":18,\\\"magnitudeOfSignal\\\":0}],\\\"longTermRecords\\\":[{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":1510.1362397103865,\\\"ask\\\":1537.565555870615,\\\"price\\\":1523.8508977905003,\\\"maxShares\\\":8300000,\\\"investedShares\\\":804141.45,\\\"averagePrice\\\":274.2054743410181,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:27:23 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":1864.8351950298038,\\\"ask\\\":1898.70707546425,\\\"price\\\":1881.7711352470267,\\\"maxShares\\\":8300000,\\\"investedShares\\\":102015.4,\\\"averagePrice\\\":78.41952924919359,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:34:14 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":2853.1352078225614,\\\"ask\\\":2904.9580471170175,\\\"price\\\":2879.046627469789,\\\"maxShares\\\":8300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:41:02 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":3695.6126728666295,\\\"ask\\\":3762.73782736875,\\\"price\\\":3729.825985886855,\\\"maxShares\\\":8300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:47:54 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":3505.9521126140985,\\\"ask\\\":3569.632372984488,\\\"price\\\":3535.4703098400223,\\\"maxShares\\\":8300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":260822.6,\\\"averageShortPrice\\\":766.8047925710563,\\\"dateObserved\\\":\\\"7/29/2023, 6:54:48 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":3472.2957342617256,\\\"ask\\\":3535.364677971828,\\\"price\\\":3503.830206116778,\\\"maxShares\\\":8300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:01:39 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":3118.902552329465,\\\"ask\\\":3175.5526491427136,\\\"price\\\":3147.227600736089,\\\"maxShares\\\":8300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:08:30 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":3569.720669221879,\\\"ask\\\":3634.5591879363014,\\\"price\\\":3603.1774128029892,\\\"maxShares\\\":8300000,\\\"investedShares\\\":466994.56,\\\"averagePrice\\\":1096.3723987723931,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:15:23 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":4402.345159791906,\\\"ask\\\":4482.307029495493,\\\"price\\\":4443.341182068395,\\\"maxShares\\\":8300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:22:11 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":5062.83615461932,\\\"ask\\\":5154.794833512504,\\\"price\\\":5106.462407936821,\\\"maxShares\\\":8300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:29:00 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":5122.920512112276,\\\"ask\\\":5215.97053150483,\\\"price\\\":5169.445521808552,\\\"maxShares\\\":8300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:35:51 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":8783.771691641241,\\\"ask\\\":8943.315476151369,\\\"price\\\":8861.74258011498,\\\"maxShares\\\":8300000,\\\"investedShares\\\":193407.48,\\\"averagePrice\\\":3350.438754213629,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:42:40 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":21925.662599962117,\\\"ask\\\":22323.90874204014,\\\"price\\\":22124.78567100113,\\\"maxShares\\\":8300000,\\\"investedShares\\\":230129.73,\\\"averagePrice\\\":9969.492134838652,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:49:32 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":46424.25893428966,\\\"ask\\\":47267.48462633528,\\\"price\\\":46878.950063150834,\\\"maxShares\\\":8300000,\\\"investedShares\\\":27398.28,\\\"averagePrice\\\":3576.873797851831,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:56:21 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":70474.00494723978,\\\"ask\\\":71754.05750934912,\\\"price\\\":71114.03122829444,\\\"maxShares\\\":8300000,\\\"investedShares\\\":18321.64,\\\"averagePrice\\\":15876.023106709381,\\\"sharesShort\\\":6136.22,\\\"averageShortPrice\\\":38734.82815142085,\\\"dateObserved\\\":\\\"7/29/2023, 8:03:13 AM\\\",\\\"bias\\\":null},{\\\"volatility\\\":0.0346,\\\"forecast\\\":0.5885720844310439,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":79507.27192014235,\\\"ask\\\":80951.39996712776,\\\"price\\\":80248.4377699123,\\\"maxShares\\\":8300000,\\\"investedShares\\\":80454.63,\\\"averagePrice\\\":44890.803473053704,\\\"sharesShort\\\":3660.39,\\\"averageShortPrice\\\":22676.578460809407,\\\"dateObserved\\\":\\\"7/29/2023, 8:09:58 AM\\\",\\\"bias\\\":0.20376793423057027},{\\\"volatility\\\":0.0346,\\\"forecast\\\":0.6597384243305666,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":153917.1608619907,\\\"ask\\\":156712.83078683013,\\\"price\\\":155344.56945144208,\\\"maxShares\\\":8300000,\\\"investedShares\\\":110322,\\\"averagePrice\\\":61508.67835526635,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:16:47 AM\\\",\\\"bias\\\":0.1815770880920481},{\\\"volatility\\\":0.0346,\\\"forecast\\\":0.6708761809815971,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":292704.7487398218,\\\"ask\\\":298021.2830257118,\\\"price\\\":295470.01888014795,\\\"maxShares\\\":8300000,\\\"investedShares\\\":110322,\\\"averagePrice\\\":61508.67835526635,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:35 AM\\\",\\\"bias\\\":0.22343315867694746}],\\\"recentTicksOfPrices\\\":[492557.70608353184,503723.5259626359,519629.59144940926,526741.9704744287,512065.99328284396,523358.78404310835,524832.0635803264,538189.750883104,551820.5752807342,553615.2496899186,564188.1330748087,573110.1621103532,577849.4215284693,595369.1685231681,613281.2746174446,614854.9392982082,596238.8494871248,602389.912782895,621883.0992620309,629064.8908401642]}],[\\\"SGC\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":247727.63976397805,\\\"ask\\\":252732.23854708872,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:37 AM\\\",\\\"price\\\":250229.9391555334,\\\"maxShares\\\":2200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.027200000000000002,\\\"forecast\\\":0.6111212132301211,\\\"bias\\\":0.11112121323012114,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":249494.63554068803,\\\"ask\\\":254534.93120817668,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:39 AM\\\",\\\"price\\\":252014.78337443236,\\\"maxShares\\\":2200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.027200000000000002,\\\"forecast\\\":0.6119138204445103,\\\"bias\\\":0.11191382044451026,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":244013.17761039294,\\\"ask\\\":248942.73675403724,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:44 AM\\\",\\\"price\\\":246477.9571822151,\\\"maxShares\\\":2200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.027200000000000002,\\\"forecast\\\":0.6093998131905058,\\\"bias\\\":0.10939981319050585,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":246767.09712616136,\\\"ask\\\":251752.29100749796,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:48 AM\\\",\\\"price\\\":249259.69406682966,\\\"maxShares\\\":2200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.027200000000000002,\\\"forecast\\\":0.6106344935611201,\\\"bias\\\":0.1106344935611201,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":250438.17067673814,\\\"ask\\\":255497.5276601066,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:52 AM\\\",\\\"price\\\":252967.84916842237,\\\"maxShares\\\":2200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.027200000000000002,\\\"forecast\\\":0.6122803668068796,\\\"bias\\\":0.11228036680687958,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":251963.63830738745,\\\"ask\\\":257053.8128186478,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:56 AM\\\",\\\"price\\\":254508.72556301762,\\\"maxShares\\\":2200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.027200000000000002,\\\"forecast\\\":0.6129642883698685,\\\"bias\\\":0.11296428836986849,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":257032.3656267172,\\\"ask\\\":262224.9386696812,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:00 AM\\\",\\\"price\\\":259628.65214819918,\\\"maxShares\\\":2200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.027200000000000002,\\\"forecast\\\":0.6152367796643086,\\\"bias\\\":0.11523677966430856,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":262790.0707372252,\\\"ask\\\":268098.9610551489,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:04 AM\\\",\\\"price\\\":265444.51589618705,\\\"maxShares\\\":2200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.027200000000000002,\\\"forecast\\\":0.6126553950453955,\\\"bias\\\":0.11265539504539546,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":264815.26409303135,\\\"ask\\\":270165.0674080421,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:08 AM\\\",\\\"price\\\":267490.1657505367,\\\"maxShares\\\":2200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.027200000000000002,\\\"forecast\\\":0.6135235745656551,\\\"bias\\\":0.1135235745656551,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":270820.5887919029,\\\"ask\\\":276291.7117977999,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:13 AM\\\",\\\"price\\\":273556.1502948514,\\\"maxShares\\\":2200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.027200000000000002,\\\"forecast\\\":0.6160979953739806,\\\"bias\\\":0.11609799537398058,\\\"countOfNegative\\\":3,\\\"countOfPositive\\\":16,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":270345.00455246744,\\\"ask\\\":275806.5197959516,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:17 AM\\\",\\\"price\\\":273075.7621742095,\\\"maxShares\\\":2200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.027200000000000002,\\\"forecast\\\":0.6163022320933582,\\\"bias\\\":0.11630223209335822,\\\"countOfNegative\\\":3,\\\"countOfPositive\\\":16,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":271389.90794298094,\\\"ask\\\":276872.5323458694,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:21 AM\\\",\\\"price\\\":274131.22014442517,\\\"maxShares\\\":2200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.027200000000000002,\\\"forecast\\\":0.615852715384737,\\\"bias\\\":0.11585271538473696,\\\"countOfNegative\\\":3,\\\"countOfPositive\\\":16,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":264719.8929496201,\\\"ask\\\":270067.76957486494,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:25 AM\\\",\\\"price\\\":267393.8312622425,\\\"maxShares\\\":2200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.027200000000000002,\\\"forecast\\\":0.6129336323493535,\\\"bias\\\":0.1129336323493535,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":271374.0310177363,\\\"ask\\\":276856.33467466023,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:29 AM\\\",\\\"price\\\":274115.18284619827,\\\"maxShares\\\":2200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.027200000000000002,\\\"forecast\\\":0.6157723913629404,\\\"bias\\\":0.11577239136294037,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":276643.86026535573,\\\"ask\\\":282232.6251192013,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:33 AM\\\",\\\"price\\\":279438.2426922785,\\\"maxShares\\\":2200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.027200000000000002,\\\"forecast\\\":0.6135242000685,\\\"bias\\\":0.11352420006849995,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":274835.5462402797,\\\"ask\\\":280387.77949765907,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:38 AM\\\",\\\"price\\\":277611.6628689694,\\\"maxShares\\\":2200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.027200000000000002,\\\"forecast\\\":0.6127772537364926,\\\"bias\\\":0.11277725373649261,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":272388.703739375,\\\"ask\\\":277891.50583512,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:42 AM\\\",\\\"price\\\":275140.1047872475,\\\"maxShares\\\":2200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.027200000000000002,\\\"forecast\\\":0.6137903213629746,\\\"bias\\\":0.11379032136297462,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":279640.00746211305,\\\"ask\\\":285289.30054215575,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:46 AM\\\",\\\"price\\\":282464.6540021344,\\\"maxShares\\\":2200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.027200000000000002,\\\"forecast\\\":0.6107610908200649,\\\"bias\\\":0.11076109082006491,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":281898.99818919477,\\\"ask\\\":287593.9274455421,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:50 AM\\\",\\\"price\\\":284746.46281736845,\\\"maxShares\\\":2200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.027200000000000002,\\\"forecast\\\":0.6116558421804112,\\\"bias\\\":0.11165584218041125,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":286919.2262276376,\\\"ask\\\":292715.57423223637,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:54 AM\\\",\\\"price\\\":289817.400229937,\\\"maxShares\\\":2200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.027200000000000002,\\\"forecast\\\":0.6136442770211546,\\\"bias\\\":0.11364427702115465,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":281610.3843052229,\\\"ask\\\":287299.4829780557,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:58 AM\\\",\\\"price\\\":284454.9336416393,\\\"maxShares\\\":2200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.027200000000000002,\\\"forecast\\\":0.6157866678409424,\\\"bias\\\":0.11578666784094238,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":286979.9359170314,\\\"ask\\\":292777.5103800018,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:03 AM\\\",\\\"price\\\":289878.7231485166,\\\"maxShares\\\":2200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.027200000000000002,\\\"forecast\\\":0.617994407766674,\\\"bias\\\":0.11799440776667403,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":294108.4038209546,\\\"ask\\\":300049.98773652944,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:07 AM\\\",\\\"price\\\":297079.195778742,\\\"maxShares\\\":2200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.027200000000000002,\\\"forecast\\\":0.6150634734282876,\\\"bias\\\":0.1150634734282876,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":293501.92177569366,\\\"ask\\\":299431.2535287379,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:11 AM\\\",\\\"price\\\":296466.5876522158,\\\"maxShares\\\":2200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.027200000000000002,\\\"forecast\\\":0.614825710314924,\\\"bias\\\":0.11482571031492395,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":299103.04444784415,\\\"ask\\\":305145.5301942653,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:15 AM\\\",\\\"price\\\":302124.2873210547,\\\"maxShares\\\":2200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.027200000000000002,\\\"forecast\\\":0.6126344030638516,\\\"bias\\\":0.11263440306385164,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":303094.7779477013,\\\"ask\\\":309217.90477492753,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:19 AM\\\",\\\"price\\\":306156.3413613144,\\\"maxShares\\\":2200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.027200000000000002,\\\"forecast\\\":0.6141375857572153,\\\"bias\\\":0.11413758575721533,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":304744.76471065235,\\\"ask\\\":310901.2246037969,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:23 AM\\\",\\\"price\\\":307822.9946572246,\\\"maxShares\\\":2200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.027200000000000002,\\\"forecast\\\":0.6135162437897628,\\\"bias\\\":0.11351624378976277,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":312899.8962982235,\\\"ask\\\":319221.10632445023,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:28 AM\\\",\\\"price\\\":316060.5013113369,\\\"maxShares\\\":2200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.027200000000000002,\\\"forecast\\\":0.6165539987002082,\\\"bias\\\":0.11655399870020822,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":307421.4120408708,\\\"ask\\\":313631.94561745407,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:32 AM\\\",\\\"price\\\":310526.67882916244,\\\"maxShares\\\":2200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.027200000000000002,\\\"forecast\\\":0.6144769174625302,\\\"bias\\\":0.11447691746253019,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":315052.69311556505,\\\"ask\\\":321417.39398658654,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:36 AM\\\",\\\"price\\\":318235.0435510758,\\\"maxShares\\\":2200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.027200000000000002,\\\"forecast\\\":0.617318637328175,\\\"bias\\\":0.11731863732817505,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":318442.6722038065,\\\"ask\\\":324875.8575008531,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:40 AM\\\",\\\"price\\\":321659.2648523298,\\\"maxShares\\\":2200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.027200000000000002,\\\"forecast\\\":0.61605628428091,\\\"bias\\\":0.11605628428090997,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":311426.0382699901,\\\"ask\\\":317717.47338655556,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:44 AM\\\",\\\"price\\\":314571.75582827284,\\\"maxShares\\\":2200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.027200000000000002,\\\"forecast\\\":0.6186711088698934,\\\"bias\\\":0.1186711088698934,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":316825.1594202597,\\\"ask\\\":323225.6676913761,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:48 AM\\\",\\\"price\\\":320025.4135558179,\\\"maxShares\\\":2200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.027200000000000002,\\\"forecast\\\":0.6207284824195962,\\\"bias\\\":0.12072848241959622,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":317526.288703918,\\\"ask\\\":323940.961202987,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:53 AM\\\",\\\"price\\\":320733.6249534525,\\\"maxShares\\\":2200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.027200000000000002,\\\"forecast\\\":0.62099565272435,\\\"bias\\\":0.12099565272434998,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":323879.35526748095,\\\"ask\\\":330422.3725456119,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:57 AM\\\",\\\"price\\\":327150.86390654644,\\\"maxShares\\\":2200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.027200000000000002,\\\"forecast\\\":0.6234165339647576,\\\"bias\\\":0.1234165339647576,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":317556.68169822916,\\\"ask\\\":323971.96819718333,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:01 AM\\\",\\\"price\\\":320764.32494770625,\\\"maxShares\\\":2200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.027200000000000002,\\\"forecast\\\":0.625873803807529,\\\"bias\\\":0.125873803807529,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":318368.58038861444,\\\"ask\\\":324800.26888131374,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:05 AM\\\",\\\"price\\\":321584.4246349641,\\\"maxShares\\\":2200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.027200000000000002,\\\"forecast\\\":0.6255519816499268,\\\"bias\\\":0.12555198164992676,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":313659.4941853342,\\\"ask\\\":319996.04962342174,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:07 AM\\\",\\\"price\\\":316827.77190437797,\\\"maxShares\\\":2200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.027200000000000002,\\\"forecast\\\":0.6236670232299122,\\\"bias\\\":0.12366702322991219,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":309808.03615943325,\\\"ask\\\":316066.7843646743,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:11 AM\\\",\\\"price\\\":312937.4102620538,\\\"maxShares\\\":2200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.027200000000000002,\\\"forecast\\\":0.6252044215332699,\\\"bias\\\":0.12520442153326994,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":311822.0286951338,\\\"ask\\\":318121.46361826785,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:16 AM\\\",\\\"price\\\":314971.7461567008,\\\"maxShares\\\":2200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.027200000000000002,\\\"forecast\\\":0.6260183473872621,\\\"bias\\\":0.12601834738726214,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":319254.14924353926,\\\"ask\\\":325703.72801613604,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:20 AM\\\",\\\"price\\\":322478.93862983765,\\\"maxShares\\\":2200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.027200000000000002,\\\"forecast\\\":0.6290219310436583,\\\"bias\\\":0.12902193104365833,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":311877.86456614133,\\\"ask\\\":318178.42748666945,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:24 AM\\\",\\\"price\\\":315028.1460264054,\\\"maxShares\\\":2200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.027200000000000002,\\\"forecast\\\":0.6320734540952527,\\\"bias\\\":0.13207345409525273,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":312506.9792910498,\\\"ask\\\":318820.25159996,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:28 AM\\\",\\\"price\\\":315663.6154455049,\\\"maxShares\\\":2200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.027200000000000002,\\\"forecast\\\":0.6323398704209398,\\\"bias\\\":0.13233987042093975,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":320177.4271397072,\\\"ask\\\":326645.6579910145,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:32 AM\\\",\\\"price\\\":323411.54256536084,\\\"maxShares\\\":2200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.027200000000000002,\\\"forecast\\\":0.6355881373129777,\\\"bias\\\":0.1355881373129777,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":322774.07729554834,\\\"ask\\\":329294.7657257615,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:36 AM\\\",\\\"price\\\":326034.4215106549,\\\"maxShares\\\":2200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.027200000000000002,\\\"forecast\\\":0.6366877618587466,\\\"bias\\\":0.13668776185874665,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":314766.76400063344,\\\"ask\\\":321125.6885258988,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:40 AM\\\",\\\"price\\\":317946.2262632661,\\\"maxShares\\\":2200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.027200000000000002,\\\"forecast\\\":0.6401649451511399,\\\"bias\\\":0.14016494515113986,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":true,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":311934.8455704243,\\\"ask\\\":318236.55962235207,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:45 AM\\\",\\\"price\\\":315085.7025963882,\\\"maxShares\\\":2200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.027200000000000002,\\\"forecast\\\":0.6388924496377999,\\\"bias\\\":0.1388924496377999,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0}],\\\"longTermRecords\\\":[{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":64825.7484561765,\\\"ask\\\":66135.35953609926,\\\"price\\\":65480.55399613788,\\\"maxShares\\\":2200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:27:23 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":101108.31127357829,\\\"ask\\\":103150.90342051927,\\\"price\\\":102129.60734704878,\\\"maxShares\\\":2200000,\\\"investedShares\\\":15157.8,\\\"averagePrice\\\":25861.237872164416,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:34:14 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":100360.28920268654,\\\"ask\\\":102387.76979263985,\\\"price\\\":101374.02949766311,\\\"maxShares\\\":2200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:41:02 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":96487.82293344318,\\\"ask\\\":98437.07188159355,\\\"price\\\":97457.82624218275,\\\"maxShares\\\":2200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:47:54 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":84722.37500967602,\\\"ask\\\":86433.93814118457,\\\"price\\\":85576.46715857343,\\\"maxShares\\\":2200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:54:48 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":70911.30014855601,\\\"ask\\\":72343.85166670867,\\\"price\\\":71627.57590763233,\\\"maxShares\\\":2200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:01:39 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":57457.59740582654,\\\"ask\\\":58618.3569493786,\\\"price\\\":58037.97717760256,\\\"maxShares\\\":2200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:08:30 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":60681.87215922231,\\\"ask\\\":61907.768566479346,\\\"price\\\":61278.31871288505,\\\"maxShares\\\":2200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:15:23 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":83698.25318186654,\\\"ask\\\":85389.12698352043,\\\"price\\\":84499.08126553679,\\\"maxShares\\\":2200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:22:11 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":88161.57951109525,\\\"ask\\\":89942.62152142046,\\\"price\\\":89087.22036241488,\\\"maxShares\\\":2200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:29:00 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":84262.81540588276,\\\"ask\\\":85965.0945049915,\\\"price\\\":85113.95495543713,\\\"maxShares\\\":2200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:35:51 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":88594.27251461042,\\\"ask\\\":90384.05579773388,\\\"price\\\":89536.84810075868,\\\"maxShares\\\":2200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:42:40 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":60729.54399602854,\\\"ask\\\":61956.403470695805,\\\"price\\\":61342.973733362174,\\\"maxShares\\\":2200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":16174.62,\\\"averageShortPrice\\\":13632.453099225417,\\\"dateObserved\\\":\\\"7/29/2023, 7:49:32 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":64630.01259862429,\\\"ask\\\":65935.66941879857,\\\"price\\\":65303.26374525896,\\\"maxShares\\\":2200000,\\\"investedShares\\\":8476.6,\\\"averagePrice\\\":7137.317918633082,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:56:21 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":89488.55020635639,\\\"ask\\\":91296.39970547472,\\\"price\\\":90392.47495591555,\\\"maxShares\\\":2200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:03:13 AM\\\",\\\"bias\\\":null},{\\\"volatility\\\":0.027200000000000002,\\\"forecast\\\":0.4316602789876098,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":116327.717179607,\\\"ask\\\":118677.77207212424,\\\"price\\\":117491.18551517012,\\\"maxShares\\\":2200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:09:58 AM\\\",\\\"bias\\\":0.16234560626453115},{\\\"volatility\\\":0.027200000000000002,\\\"forecast\\\":0.6121097347693116,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":153394.81011962768,\\\"ask\\\":156493.6951725494,\\\"price\\\":154967.5294752967,\\\"maxShares\\\":2200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:16:47 AM\\\",\\\"bias\\\":0.1307485472055242},{\\\"volatility\\\":0.027200000000000002,\\\"forecast\\\":0.6108893355909181,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":218863.55223345786,\\\"ask\\\":223285.03813716426,\\\"price\\\":221106.0477739327,\\\"maxShares\\\":2200000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:35 AM\\\",\\\"bias\\\":0.1186836195020875}],\\\"recentTicksOfPrices\\\":[316060.5013113369,310526.67882916244,318235.0435510758,321659.2648523298,314571.75582827284,320025.4135558179,320733.6249534525,327150.86390654644,320764.32494770625,321584.4246349641,316827.77190437797,312937.4102620538,314971.7461567008,322478.93862983765,315028.1460264054,315663.6154455049,323411.54256536084,326034.4215106549,317946.2262632661,315085.7025963882]}],[\\\"CTYS\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":874.0005631942165,\\\"ask\\\":898.8200518041942,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:37 AM\\\",\\\"price\\\":886.4103074992054,\\\"maxShares\\\":45500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.015300000000000001,\\\"forecast\\\":0.5699612119019443,\\\"bias\\\":0.06996121190194426,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":870.5079033439665,\\\"ask\\\":895.2282089156006,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:39 AM\\\",\\\"price\\\":882.8680561297836,\\\"maxShares\\\":45500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.015300000000000001,\\\"forecast\\\":0.569680512881354,\\\"bias\\\":0.06968051288135402,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":859.6455296225859,\\\"ask\\\":884.0573702203876,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:44 AM\\\",\\\"price\\\":871.8514499214867,\\\"maxShares\\\":45500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.015300000000000001,\\\"forecast\\\":0.5705609871535195,\\\"bias\\\":0.07056098715351955,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":865.1028556404597,\\\"ask\\\":889.6696710136168,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:48 AM\\\",\\\"price\\\":877.3862633270383,\\\"maxShares\\\":45500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.015300000000000001,\\\"forecast\\\":0.5710089326121655,\\\"bias\\\":0.07100893261216545,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":872.3421478312806,\\\"ask\\\":897.1145414816618,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:52 AM\\\",\\\"price\\\":884.7283446564712,\\\"maxShares\\\":45500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.015300000000000001,\\\"forecast\\\":0.5704147207124056,\\\"bias\\\":0.07041472071240562,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":875.3310510783241,\\\"ask\\\":900.1883223057004,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:56 AM\\\",\\\"price\\\":887.7596866920122,\\\"maxShares\\\":45500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.015300000000000001,\\\"forecast\\\":0.570173458969063,\\\"bias\\\":0.07017345896906302,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":885.2360838979331,\\\"ask\\\":910.3746339477731,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:00 AM\\\",\\\"price\\\":897.8053589228531,\\\"maxShares\\\":45500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.015300000000000001,\\\"forecast\\\":0.5693793932115444,\\\"bias\\\":0.0693793932115444,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":874.2205602361591,\\\"ask\\\":899.0462962266383,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:04 AM\\\",\\\"price\\\":886.6334282313987,\\\"maxShares\\\":45500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.015300000000000001,\\\"forecast\\\":0.5685051855089084,\\\"bias\\\":0.06850518550890838,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":878.0102275422223,\\\"ask\\\":902.9435808598514,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:08 AM\\\",\\\"price\\\":890.4769042010369,\\\"maxShares\\\":45500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.015300000000000001,\\\"forecast\\\":0.5688021493114398,\\\"bias\\\":0.0688021493114398,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":889.2101645790889,\\\"ask\\\":914.461568847055,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:13 AM\\\",\\\"price\\\":901.8358667130719,\\\"maxShares\\\":45500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.015300000000000001,\\\"forecast\\\":0.5679245060720823,\\\"bias\\\":0.06792450607208234,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":890.0900701151364,\\\"ask\\\":915.3664615585684,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:17 AM\\\",\\\"price\\\":902.7282658368524,\\\"maxShares\\\":45500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.015300000000000001,\\\"forecast\\\":0.5679917198212125,\\\"bias\\\":0.06799171982121255,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":892.0252185014982,\\\"ask\\\":917.3565634488024,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:21 AM\\\",\\\"price\\\":904.6908909751503,\\\"maxShares\\\":45500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.015300000000000001,\\\"forecast\\\":0.5678438987508337,\\\"bias\\\":0.06784389875083374,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":904.6679201983959,\\\"ask\\\":930.3582871005817,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:25 AM\\\",\\\"price\\\":917.5131036494888,\\\"maxShares\\\":45500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.015300000000000001,\\\"forecast\\\":0.5688054524783195,\\\"bias\\\":0.06880545247831948,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":892.0548928962693,\\\"ask\\\":917.3870805241553,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:29 AM\\\",\\\"price\\\":904.7209867102123,\\\"maxShares\\\":45500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.015300000000000001,\\\"forecast\\\":0.569778313069697,\\\"bias\\\":0.06977831306969695,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":901.7990070730502,\\\"ask\\\":927.4079038256318,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:33 AM\\\",\\\"price\\\":914.603455449341,\\\"maxShares\\\":45500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.015300000000000001,\\\"forecast\\\":0.5690161090225819,\\\"bias\\\":0.06901610902258193,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":905.1365989373904,\\\"ask\\\":930.8402751749635,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:38 AM\\\",\\\"price\\\":917.988437056177,\\\"maxShares\\\":45500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.015300000000000001,\\\"forecast\\\":0.5692715402241861,\\\"bias\\\":0.06927154022418613,\\\"countOfNegative\\\":4,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":900.5860408717297,\\\"ask\\\":926.1604923366469,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:42 AM\\\",\\\"price\\\":913.3732666041883,\\\"maxShares\\\":45500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.015300000000000001,\\\"forecast\\\":0.5696215613790586,\\\"bias\\\":0.06962156137905862,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":914.0717795859549,\\\"ask\\\":940.0291932050287,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:46 AM\\\",\\\"price\\\":927.0504863954918,\\\"maxShares\\\":45500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.015300000000000001,\\\"forecast\\\":0.5685790200303991,\\\"bias\\\":0.06857902003039906,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":909.9370319276904,\\\"ask\\\":935.777028777564,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:50 AM\\\",\\\"price\\\":922.8570303526272,\\\"maxShares\\\":45500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.015300000000000001,\\\"forecast\\\":0.5688906426290266,\\\"bias\\\":0.06889064262902655,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":900.9122867265077,\\\"ask\\\":926.4960027795931,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:54 AM\\\",\\\"price\\\":913.7041447530504,\\\"maxShares\\\":45500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.015300000000000001,\\\"forecast\\\":0.5695807436584306,\\\"bias\\\":0.06958074365843059,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":910.4656472035921,\\\"ask\\\":936.320655440611,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:58 AM\\\",\\\"price\\\":923.3931513221015,\\\"maxShares\\\":45500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.015300000000000001,\\\"forecast\\\":0.570318584551741,\\\"bias\\\":0.070318584551741,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":920.2307191352205,\\\"ask\\\":946.3630316461598,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:03 AM\\\",\\\"price\\\":933.2968753906902,\\\"maxShares\\\":45500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.015300000000000001,\\\"forecast\\\":0.5695643924101845,\\\"bias\\\":0.06956439241018453,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":933.0884377683589,\\\"ask\\\":959.585878191801,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:07 AM\\\",\\\"price\\\":946.33715798008,\\\"maxShares\\\":45500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.015300000000000001,\\\"forecast\\\":0.570536365379459,\\\"bias\\\":0.07053636537945895,\\\"countOfNegative\\\":5,\\\"countOfPositive\\\":15,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":932.0051400379431,\\\"ask\\\":958.4718174426717,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:11 AM\\\",\\\"price\\\":945.2384787403074,\\\"maxShares\\\":45500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.015300000000000001,\\\"forecast\\\":0.5704543788310541,\\\"bias\\\":0.0704543788310541,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":942.0098607480327,\\\"ask\\\":968.7606478686664,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:15 AM\\\",\\\"price\\\":955.3852543083495,\\\"maxShares\\\":45500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.015300000000000001,\\\"forecast\\\":0.5712106797919896,\\\"bias\\\":0.07121067979198958,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":14,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":934.9909352538838,\\\"ask\\\":961.5424019750893,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:19 AM\\\",\\\"price\\\":948.2666686144865,\\\"maxShares\\\":45500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.015300000000000001,\\\"forecast\\\":0.5706761051378386,\\\"bias\\\":0.07067610513783862,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":932.1366058174211,\\\"ask\\\":958.6070165302891,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:23 AM\\\",\\\"price\\\":945.3718111738551,\\\"maxShares\\\":45500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.015300000000000001,\\\"forecast\\\":0.5704596852632295,\\\"bias\\\":0.07045968526322954,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":918.3134190186745,\\\"ask\\\":944.3912848731602,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:28 AM\\\",\\\"price\\\":931.3523519459173,\\\"maxShares\\\":45500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.015300000000000001,\\\"forecast\\\":0.5715203007034519,\\\"bias\\\":0.07152030070345194,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":927.5187575034142,\\\"ask\\\":953.8580325643632,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:32 AM\\\",\\\"price\\\":940.6883950338887,\\\"maxShares\\\":45500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.015300000000000001,\\\"forecast\\\":0.5708033683763503,\\\"bias\\\":0.07080336837635026,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":940.4699144027765,\\\"ask\\\":967.1769707955531,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:36 AM\\\",\\\"price\\\":953.8234425991648,\\\"maxShares\\\":45500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.015300000000000001,\\\"forecast\\\":0.5717920120295673,\\\"bias\\\":0.07179201202956731,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":934.8119448938484,\\\"ask\\\":961.3583287245054,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:40 AM\\\",\\\"price\\\":948.0851368091769,\\\"maxShares\\\":45500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.015300000000000001,\\\"forecast\\\":0.5713574893244749,\\\"bias\\\":0.07135748932447494,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":946.6592801504892,\\\"ask\\\":973.5420994651076,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:44 AM\\\",\\\"price\\\":960.1006898077984,\\\"maxShares\\\":45500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.015300000000000001,\\\"forecast\\\":0.5704531404832808,\\\"bias\\\":0.07045314048328077,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":937.5166809317844,\\\"ask\\\":964.1398726823828,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:48 AM\\\",\\\"price\\\":950.8282768070836,\\\"maxShares\\\":45500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.015300000000000001,\\\"forecast\\\":0.5697660862257528,\\\"bias\\\":0.06976608622575275,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":938.6837054353583,\\\"ask\\\":965.3400378412306,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:53 AM\\\",\\\"price\\\":952.0118716382945,\\\"maxShares\\\":45500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.015300000000000001,\\\"forecast\\\":0.569679241123367,\\\"bias\\\":0.06967924112336699,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":928.2368627115881,\\\"ask\\\":954.5965302125256,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:57 AM\\\",\\\"price\\\":941.4166964620568,\\\"maxShares\\\":45500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.015300000000000001,\\\"forecast\\\":0.5688950360326523,\\\"bias\\\":0.06889503603265235,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":917.956132568631,\\\"ask\\\":944.0238523575982,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:01 AM\\\",\\\"price\\\":930.9899924631146,\\\"maxShares\\\":45500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.015300000000000001,\\\"forecast\\\":0.568123440039651,\\\"bias\\\":0.06812344003965098,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":916.637873068764,\\\"ask\\\":942.6681574966802,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:05 AM\\\",\\\"price\\\":929.6530152827221,\\\"maxShares\\\":45500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.015300000000000001,\\\"forecast\\\":0.5680254685564357,\\\"bias\\\":0.06802546855643565,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":924.3788990805368,\\\"ask\\\":950.6290098049334,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:07 AM\\\",\\\"price\\\":937.5039544427351,\\\"maxShares\\\":45500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.015300000000000001,\\\"forecast\\\":0.5674509920515587,\\\"bias\\\":0.06745099205155869,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":930.8429540413412,\\\"ask\\\":957.2766281926166,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:11 AM\\\",\\\"price\\\":944.0597911169789,\\\"maxShares\\\":45500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.015300000000000001,\\\"forecast\\\":0.5679226675952299,\\\"bias\\\":0.06792266759522991,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":934.2467547184676,\\\"ask\\\":960.7770885238601,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:16 AM\\\",\\\"price\\\":947.5119216211639,\\\"maxShares\\\":45500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.015300000000000001,\\\"forecast\\\":0.568171039483258,\\\"bias\\\":0.06817103948325798,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":921.8871034017845,\\\"ask\\\":948.0664531941272,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:20 AM\\\",\\\"price\\\":934.9767782979559,\\\"maxShares\\\":45500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.015300000000000001,\\\"forecast\\\":0.5672570769440275,\\\"bias\\\":0.0672570769440275,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":909.7835270749925,\\\"ask\\\":935.6191647606921,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:24 AM\\\",\\\"price\\\":922.7013459178423,\\\"maxShares\\\":45500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.015300000000000001,\\\"forecast\\\":0.5663623023739425,\\\"bias\\\":0.06636230237394247,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":910.815826996194,\\\"ask\\\":936.6807794869582,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:28 AM\\\",\\\"price\\\":923.7483032415761,\\\"maxShares\\\":45500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.015300000000000001,\\\"forecast\\\":0.5664376013846112,\\\"bias\\\":0.06643760138461119,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":923.391003686847,\\\"ask\\\":949.6130605866763,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:32 AM\\\",\\\"price\\\":936.5020321367616,\\\"maxShares\\\":45500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.015300000000000001,\\\"forecast\\\":0.5655203307887873,\\\"bias\\\":0.06552033078878727,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":919.1977204640241,\\\"ask\\\":945.3006983270998,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:36 AM\\\",\\\"price\\\":932.2492093955619,\\\"maxShares\\\":45500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.015300000000000001,\\\"forecast\\\":0.5658192276395233,\\\"bias\\\":0.0658192276395233,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":906.2301391384251,\\\"ask\\\":931.9648692559463,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:40 AM\\\",\\\"price\\\":919.0975041971857,\\\"maxShares\\\":45500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.015300000000000001,\\\"forecast\\\":0.5667610592453614,\\\"bias\\\":0.06676105924536135,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":901.6258168661335,\\\"ask\\\":927.229795438397,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:45 AM\\\",\\\"price\\\":914.4278061522652,\\\"maxShares\\\":45500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.015300000000000001,\\\"forecast\\\":0.5664201313057937,\\\"bias\\\":0.06642013130579372,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0}],\\\"longTermRecords\\\":[{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":1443.3834882076544,\\\"ask\\\":1484.3720659660862,\\\"price\\\":1463.8777770868705,\\\"maxShares\\\":45500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:27:23 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":1567.8787191907406,\\\"ask\\\":1612.402658478104,\\\"price\\\":1590.1406888344222,\\\"maxShares\\\":45500000,\\\"investedShares\\\":583454.4,\\\"averagePrice\\\":342.78600196022825,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:34:14 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":1928.3350683660942,\\\"ask\\\":1983.0950905915006,\\\"price\\\":1955.7150794787965,\\\"maxShares\\\":45500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:41:02 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":2129.470930352915,\\\"ask\\\":2189.942721478555,\\\"price\\\":2159.7676833978553,\\\"maxShares\\\":45500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":76289.34,\\\"averageShortPrice\\\":58.9859706909165,\\\"dateObserved\\\":\\\"7/29/2023, 6:47:54 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":1729.6670418315418,\\\"ask\\\":1778.7853756766574,\\\"price\\\":1754.2373532561544,\\\"maxShares\\\":45500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":712033.84,\\\"averageShortPrice\\\":550.5357264485542,\\\"dateObserved\\\":\\\"7/29/2023, 6:54:48 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":1831.5021149692639,\\\"ask\\\":1883.5123170170714,\\\"price\\\":1857.5072159931678,\\\"maxShares\\\":45500000,\\\"investedShares\\\":297309.72,\\\"averagePrice\\\":242.17167374700435,\\\"sharesShort\\\":758769.18,\\\"averageShortPrice\\\":445.4582407894473,\\\"dateObserved\\\":\\\"7/29/2023, 7:01:39 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":1401.175869522074,\\\"ask\\\":1440.9658536464326,\\\"price\\\":1421.0708615842532,\\\"maxShares\\\":45500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":1781067.45,\\\"averageShortPrice\\\":864.9273352246097,\\\"dateObserved\\\":\\\"7/29/2023, 7:08:30 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":1424.960502064357,\\\"ask\\\":1465.425911859288,\\\"price\\\":1445.414943880107,\\\"maxShares\\\":45500000,\\\"investedShares\\\":276127.92,\\\"averagePrice\\\":115.88831368340645,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:15:23 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":1424.7253673264825,\\\"ask\\\":1465.1840998671946,\\\"price\\\":1444.8174113716989,\\\"maxShares\\\":45500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:22:11 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":1444.6140023152902,\\\"ask\\\":1485.637523679212,\\\"price\\\":1465.212339803962,\\\"maxShares\\\":45500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:29:00 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":1493.7785727547287,\\\"ask\\\":1536.1982482487783,\\\"price\\\":1514.9884105017534,\\\"maxShares\\\":45500000,\\\"investedShares\\\":179271.48,\\\"averagePrice\\\":100.40637506941512,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:35:51 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":1557.7060992974602,\\\"ask\\\":1601.941160940796,\\\"price\\\":1580.004738547519,\\\"maxShares\\\":45500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:42:40 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":1379.6292089875074,\\\"ask\\\":1418.8073203989175,\\\"price\\\":1399.2182646932126,\\\"maxShares\\\":45500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":171204.04,\\\"averageShortPrice\\\":46.727864652339115,\\\"dateObserved\\\":\\\"7/29/2023, 7:49:32 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":1113.3584977479732,\\\"ask\\\":1144.9751690836144,\\\"price\\\":1129.2109742931896,\\\"maxShares\\\":45500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":666453.9,\\\"averageShortPrice\\\":168.49010326236797,\\\"dateObserved\\\":\\\"7/29/2023, 7:56:21 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":982.7662429693219,\\\"ask\\\":1010.6744121408656,\\\"price\\\":996.720327555094,\\\"maxShares\\\":45500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:03:13 AM\\\",\\\"bias\\\":null},{\\\"volatility\\\":0.015300000000000001,\\\"forecast\\\":0.4443391327772867,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":783.9619665674769,\\\"ask\\\":806.2245781941398,\\\"price\\\":795.0286912557116,\\\"maxShares\\\":45500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:09:58 AM\\\",\\\"bias\\\":0.05830498857705424},{\\\"volatility\\\":0.015300000000000001,\\\"forecast\\\":0.4683053731259543,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":717.4985158836528,\\\"ask\\\":737.8737272880568,\\\"price\\\":727.6264027597713,\\\"maxShares\\\":45500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:16:47 AM\\\",\\\"bias\\\":0.06047403122074568},{\\\"volatility\\\":0.015300000000000001,\\\"forecast\\\":0.5648156276479124,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":842.0588106337003,\\\"ask\\\":865.9712312196466,\\\"price\\\":854.1267378170211,\\\"maxShares\\\":45500000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:35 AM\\\",\\\"bias\\\":0.07023835923983235}],\\\"recentTicksOfPrices\\\":[931.3523519459173,940.6883950338887,953.8234425991648,948.0851368091769,960.1006898077984,950.8282768070836,952.0118716382945,941.4166964620568,930.9899924631146,929.6530152827221,937.5039544427351,944.0597911169789,947.5119216211639,934.9767782979559,922.7013459178423,923.7483032415761,936.5020321367616,932.2492093955619,919.0975041971857,914.4278061522652]}],[\\\"MDYN\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":4714.378828494574,\\\"ask\\\":4742.750215626938,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:37 AM\\\",\\\"price\\\":4728.564522060757,\\\"maxShares\\\":3700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.4301251870576072,\\\"bias\\\":0.06987481294239278,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":4704.632412807892,\\\"ask\\\":4732.945145482764,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:39 AM\\\",\\\"price\\\":4718.788779145329,\\\"maxShares\\\":3700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.4302699441636271,\\\"bias\\\":0.06973005583637287,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":4674.13644796481,\\\"ask\\\":4702.2656542715185,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:44 AM\\\",\\\"price\\\":4688.201051118164,\\\"maxShares\\\":3700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.42981499695466874,\\\"bias\\\":0.07018500304533126,\\\"countOfNegative\\\":13,\\\"countOfPositive\\\":6,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":4689.457815710678,\\\"ask\\\":4717.679226838324,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:48 AM\\\",\\\"price\\\":4703.568521274501,\\\"maxShares\\\":3700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.4300450566146452,\\\"bias\\\":0.0699549433853548,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":4709.7200183454,\\\"ask\\\":4738.063368505953,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:52 AM\\\",\\\"price\\\":4723.891693425677,\\\"maxShares\\\":3700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.4303473178341461,\\\"bias\\\":0.06965268216585391,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":4701.402608444594,\\\"ask\\\":4729.695903981873,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:56 AM\\\",\\\"price\\\":4715.549256213234,\\\"maxShares\\\":3700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.43047054274307506,\\\"bias\\\":0.06952945725692494,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":7,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":4728.87185127646,\\\"ask\\\":4757.330458204903,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:00 AM\\\",\\\"price\\\":4743.1011547406815,\\\"maxShares\\\":3700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.4308767877946959,\\\"bias\\\":0.0691232122053041,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":4698.304280114808,\\\"ask\\\":4726.578929744384,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:04 AM\\\",\\\"price\\\":4712.441604929596,\\\"maxShares\\\":3700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.4304270662394211,\\\"bias\\\":0.06957293376057888,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":4687.811613360727,\\\"ask\\\":4716.023117553469,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:08 AM\\\",\\\"price\\\":4701.917365457099,\\\"maxShares\\\":3700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.4302713420616464,\\\"bias\\\":0.06972865793835359,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":4718.6876691815405,\\\"ask\\\":4747.084987150536,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:13 AM\\\",\\\"price\\\":4732.886328166039,\\\"maxShares\\\":3700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.4307306066636365,\\\"bias\\\":0.0692693933363635,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":4716.277948616863,\\\"ask\\\":4744.660764756984,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:17 AM\\\",\\\"price\\\":4730.469356686924,\\\"maxShares\\\":3700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.43069521437263,\\\"bias\\\":0.06930478562737002,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":4721.572331776428,\\\"ask\\\":4749.98700980116,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:21 AM\\\",\\\"price\\\":4735.779670788794,\\\"maxShares\\\":3700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.4306174144435545,\\\"bias\\\":0.0693825855564455,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":4687.270411921819,\\\"ask\\\":4715.478659134988,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:25 AM\\\",\\\"price\\\":4701.374535528404,\\\"maxShares\\\":3700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.43112516323547595,\\\"bias\\\":0.06887483676452405,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":4653.298162988482,\\\"ask\\\":4681.301963367549,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:29 AM\\\",\\\"price\\\":4667.300063178016,\\\"maxShares\\\":3700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.43162799649864786,\\\"bias\\\":0.06837200350135214,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":4627.200312092529,\\\"ask\\\":4655.04705419138,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:33 AM\\\",\\\"price\\\":4641.123683141955,\\\"maxShares\\\":3700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.43201362111666425,\\\"bias\\\":0.06798637888333575,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":4636.042860304235,\\\"ask\\\":4663.942817337158,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:38 AM\\\",\\\"price\\\":4649.992838820696,\\\"maxShares\\\":3700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.4321435426226436,\\\"bias\\\":0.0678564573773564,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":4648.138324831682,\\\"ask\\\":4676.111073025253,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:42 AM\\\",\\\"price\\\":4662.124698928468,\\\"maxShares\\\":3700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.43196650470520026,\\\"bias\\\":0.06803349529479974,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":4612.475212979819,\\\"ask\\\":4640.233338634662,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:46 AM\\\",\\\"price\\\":4626.354275807241,\\\"maxShares\\\":3700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.4314404777803197,\\\"bias\\\":0.06855952221968031,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":4623.297209145331,\\\"ask\\\":4651.120462159244,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:50 AM\\\",\\\"price\\\":4637.208835652288,\\\"maxShares\\\":3700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.43127962035511713,\\\"bias\\\":0.06872037964488287,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":4647.210531196785,\\\"ask\\\":4675.177695878009,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:54 AM\\\",\\\"price\\\":4661.194113537397,\\\"maxShares\\\":3700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.4309241743399452,\\\"bias\\\":0.06907582566005482,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":4621.904138121952,\\\"ask\\\":4649.719007558994,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:58 AM\\\",\\\"price\\\":4635.811572840474,\\\"maxShares\\\":3700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.43130238642394403,\\\"bias\\\":0.06869761357605597,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":4596.449318784878,\\\"ask\\\":4624.110999740454,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:03 AM\\\",\\\"price\\\":4610.2801592626665,\\\"maxShares\\\":3700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.4309219437776343,\\\"bias\\\":0.06907805622236568,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":4629.610143835308,\\\"ask\\\":4657.47138843211,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:07 AM\\\",\\\"price\\\":4643.540766133709,\\\"maxShares\\\":3700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.4314203035284646,\\\"bias\\\":0.06857969647153539,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":4632.388638755786,\\\"ask\\\":4660.26660448551,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:11 AM\\\",\\\"price\\\":4646.327621620648,\\\"maxShares\\\":3700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.43137914491415935,\\\"bias\\\":0.06862085508584065,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":4606.85417230949,\\\"ask\\\":4634.578470237129,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:15 AM\\\",\\\"price\\\":4620.71632127331,\\\"maxShares\\\":3700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.4317594905591848,\\\"bias\\\":0.06824050944081522,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":4589.066331765471,\\\"ask\\\":4616.683581505283,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:19 AM\\\",\\\"price\\\":4602.874956635377,\\\"maxShares\\\":3700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.43149498113334067,\\\"bias\\\":0.06850501886665933,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":4581.821998745405,\\\"ask\\\":4609.395651696731,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:23 AM\\\",\\\"price\\\":4595.608825221068,\\\"maxShares\\\":3700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.4313866676348347,\\\"bias\\\":0.06861333236516531,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":4617.433568672136,\\\"ask\\\":4645.221533980092,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:28 AM\\\",\\\"price\\\":4631.327551326114,\\\"maxShares\\\":3700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.430853380116442,\\\"bias\\\":0.06914661988355802,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":4641.33286687533,\\\"ask\\\":4669.2646594543185,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:32 AM\\\",\\\"price\\\":4655.298763164825,\\\"maxShares\\\":3700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.4312112749651199,\\\"bias\\\":0.0687887250348801,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":4608.109448928452,\\\"ask\\\":4635.841301178773,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:36 AM\\\",\\\"price\\\":4621.975375053613,\\\"maxShares\\\":3700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.43071532394937345,\\\"bias\\\":0.06928467605062655,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":4593.7532432055605,\\\"ask\\\":4621.398699032274,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:40 AM\\\",\\\"price\\\":4607.575971118918,\\\"maxShares\\\":3700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.43093184952446784,\\\"bias\\\":0.06906815047553216,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":4563.887931131517,\\\"ask\\\":4591.353655892589,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:44 AM\\\",\\\"price\\\":4577.620793512053,\\\"maxShares\\\":3700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.43047987920892644,\\\"bias\\\":0.06952012079107356,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":4541.022468664437,\\\"ask\\\":4568.350587833931,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:48 AM\\\",\\\"price\\\":4554.686528249184,\\\"maxShares\\\":3700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.4308299346697009,\\\"bias\\\":0.06917006533029912,\\\"countOfNegative\\\":12,\\\"countOfPositive\\\":8,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":4543.94117420389,\\\"ask\\\":4571.286858301405,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:53 AM\\\",\\\"price\\\":4557.614016252648,\\\"maxShares\\\":3700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.43078547616850715,\\\"bias\\\":0.06921452383149285,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":4517.688221191292,\\\"ask\\\":4544.875913595652,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:57 AM\\\",\\\"price\\\":4531.282067393472,\\\"maxShares\\\":3700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.43038326035524804,\\\"bias\\\":0.06961673964475196,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":4543.813079770983,\\\"ask\\\":4571.157992989263,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:01 AM\\\",\\\"price\\\":4557.485536380123,\\\"maxShares\\\":3700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.4299806811180472,\\\"bias\\\":0.07001931888195279,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":4547.187189719341,\\\"ask\\\":4574.552408514041,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:05 AM\\\",\\\"price\\\":4560.869799116692,\\\"maxShares\\\":3700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.42992868670800677,\\\"bias\\\":0.07007131329199323,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":4567.015203991752,\\\"ask\\\":4594.499748850278,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:07 AM\\\",\\\"price\\\":4580.757476421015,\\\"maxShares\\\":3700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.43023423273944816,\\\"bias\\\":0.06976576726055184,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":4550.584436322829,\\\"ask\\\":4577.970099931592,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:11 AM\\\",\\\"price\\\":4564.277268127211,\\\"maxShares\\\":3700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.4299823299060555,\\\"bias\\\":0.0700176700939445,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":4559.17636260594,\\\"ask\\\":4586.613732892435,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:16 AM\\\",\\\"price\\\":4572.895047749188,\\\"maxShares\\\":3700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.42985013003846034,\\\"bias\\\":0.07014986996153966,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":4590.737346394038,\\\"ask\\\":4618.36465239039,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:20 AM\\\",\\\"price\\\":4604.550999392214,\\\"maxShares\\\":3700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.4293645162493662,\\\"bias\\\":0.07063548375063378,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":4559.417425290906,\\\"ask\\\":4586.856246305695,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:24 AM\\\",\\\"price\\\":4573.136835798301,\\\"maxShares\\\":3700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.42887930123793083,\\\"bias\\\":0.07112069876206917,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":4562.088664866206,\\\"ask\\\":4589.543561545441,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:28 AM\\\",\\\"price\\\":4575.816113205824,\\\"maxShares\\\":3700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.4288376335406276,\\\"bias\\\":0.0711623664593724,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":4529.796446948434,\\\"ask\\\":4557.057007311213,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:32 AM\\\",\\\"price\\\":4543.426727129824,\\\"maxShares\\\":3700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.4293449390392661,\\\"bias\\\":0.07065506096073387,\\\"countOfNegative\\\":11,\\\"countOfPositive\\\":9,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":4540.466328668426,\\\"ask\\\":4567.791100957303,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:36 AM\\\",\\\"price\\\":4554.128714812865,\\\"maxShares\\\":3700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.4295113661960267,\\\"bias\\\":0.0704886338039733,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":4574.013553433465,\\\"ask\\\":4601.540214737979,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:40 AM\\\",\\\"price\\\":4587.7768840857225,\\\"maxShares\\\":3700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.43003217130070764,\\\"bias\\\":0.06996782869929236,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":4586.074252540808,\\\"ask\\\":4613.673495785787,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:45 AM\\\",\\\"price\\\":4599.873874163298,\\\"maxShares\\\":3700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0079,\\\"forecast\\\":0.4302166615562083,\\\"bias\\\":0.0697833384437917,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0}],\\\"longTermRecords\\\":[{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":5464.200690594752,\\\"ask\\\":5497.084546305455,\\\"price\\\":5480.642618450104,\\\"maxShares\\\":3700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":100483.32,\\\"averageShortPrice\\\":1177.9929571697942,\\\"dateObserved\\\":\\\"7/29/2023, 6:27:23 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":5533.260282657259,\\\"ask\\\":5566.55974273343,\\\"price\\\":5549.910012695343,\\\"maxShares\\\":3700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:34:14 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":5503.625326238739,\\\"ask\\\":5536.746441542076,\\\"price\\\":5520.18588389041,\\\"maxShares\\\":3700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:41:02 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":5591.142625614505,\\\"ask\\\":5624.790424765646,\\\"price\\\":5608.043384667691,\\\"maxShares\\\":3700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:47:54 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":5899.961762141985,\\\"ask\\\":5935.468051583157,\\\"price\\\":5918.501678674524,\\\"maxShares\\\":3700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 6:54:48 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":6261.086881096245,\\\"ask\\\":6298.7664410627285,\\\"price\\\":6279.9266610794875,\\\"maxShares\\\":3700000,\\\"investedShares\\\":112074.06,\\\"averagePrice\\\":874.42159215551,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:01:39 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":6268.736466601232,\\\"ask\\\":6306.462062187598,\\\"price\\\":6287.599264394412,\\\"maxShares\\\":3700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:08:30 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":6237.867986723848,\\\"ask\\\":6275.407814126394,\\\"price\\\":6256.460766025549,\\\"maxShares\\\":3700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:15:23 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":5889.270286404795,\\\"ask\\\":5924.712233965909,\\\"price\\\":5907.297621358082,\\\"maxShares\\\":3700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:22:11 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":6029.856846508034,\\\"ask\\\":6066.144851602363,\\\"price\\\":6048.679597731822,\\\"maxShares\\\":3700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:29:00 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":6293.798637060702,\\\"ask\\\":6331.675058146318,\\\"price\\\":6312.736847603507,\\\"maxShares\\\":3700000,\\\"investedShares\\\":77353.9,\\\"averagePrice\\\":646.3795717303648,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:35:51 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":5869.510746172326,\\\"ask\\\":5904.833779750096,\\\"price\\\":5886.217368979801,\\\"maxShares\\\":3700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":87498.5,\\\"averageShortPrice\\\":571.4381912214551,\\\"dateObserved\\\":\\\"7/29/2023, 7:42:40 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":5631.773437240722,\\\"ask\\\":5665.665754816893,\\\"price\\\":5648.719596028802,\\\"maxShares\\\":3700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":193169.9,\\\"averageShortPrice\\\":1252.7835606029353,\\\"dateObserved\\\":\\\"7/29/2023, 7:49:32 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":5329.819566395187,\\\"ask\\\":5361.894709222035,\\\"price\\\":5345.819216599066,\\\"maxShares\\\":3700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":178059.26,\\\"averageShortPrice\\\":1013.7069653744876,\\\"dateObserved\\\":\\\"7/29/2023, 7:56:21 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":5195.801616911567,\\\"ask\\\":5227.07023245968,\\\"price\\\":5211.435924685626,\\\"maxShares\\\":3700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:03:13 AM\\\",\\\"bias\\\":null},{\\\"volatility\\\":0.0079,\\\"forecast\\\":0.5331246335865434,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":5290.320778016681,\\\"ask\\\":5322.158214995718,\\\"price\\\":5306.4775999969415,\\\"maxShares\\\":3700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:09:58 AM\\\",\\\"bias\\\":0.06971142928690321},{\\\"volatility\\\":0.0079,\\\"forecast\\\":0.43600518864827703,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":5061.9876764710125,\\\"ask\\\":5092.450992477856,\\\"price\\\":5077.434833450465,\\\"maxShares\\\":3700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:16:47 AM\\\",\\\"bias\\\":0.07015660830505266},{\\\"volatility\\\":0.0079,\\\"forecast\\\":0.43214766401803223,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":4824.6282878575985,\\\"ask\\\":4853.663162207797,\\\"price\\\":4839.337997516959,\\\"maxShares\\\":3700000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:35 AM\\\",\\\"bias\\\":0.06989481433125255}],\\\"recentTicksOfPrices\\\":[4631.327551326114,4655.298763164825,4621.975375053613,4607.575971118918,4577.620793512053,4554.686528249184,4557.614016252648,4531.282067393472,4557.485536380123,4560.869799116692,4580.757476421015,4564.277268127211,4572.895047749188,4604.550999392214,4573.136835798301,4575.816113205824,4543.426727129824,4554.128714812865,4587.7768840857225,4599.873874163298]}],[\\\"TITN\\\",{\\\"shortTermRecords\\\":[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":27347.362575232793,\\\"ask\\\":27788.449068381713,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:37 AM\\\",\\\"price\\\":27567.905821807253,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0064,\\\"forecast\\\":0.5953662633875175,\\\"bias\\\":0.09536626338751752,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":27393.25992036994,\\\"ask\\\":27835.08669327913,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:39 AM\\\",\\\"price\\\":27614.173306824534,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0064,\\\"forecast\\\":0.5952062092582355,\\\"bias\\\":0.09520620925823553,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":27249.231521210502,\\\"ask\\\":27688.735255423577,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:44 AM\\\",\\\"price\\\":27468.98338831704,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0064,\\\"forecast\\\":0.5947029878041249,\\\"bias\\\":0.0947029878041249,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":27321.592309948453,\\\"ask\\\":27762.2631536573,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:48 AM\\\",\\\"price\\\":27541.927731802876,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0064,\\\"forecast\\\":0.5949544731675933,\\\"bias\\\":0.09495447316759331,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":27417.228641731148,\\\"ask\\\":27859.442006920362,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:52 AM\\\",\\\"price\\\":27638.335324325755,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0064,\\\"forecast\\\":0.5952868512148567,\\\"bias\\\":0.0952868512148567,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":27456.52362403879,\\\"ask\\\":27899.37077926522,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:56 AM\\\",\\\"price\\\":27677.947201652005,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0064,\\\"forecast\\\":0.5951502839789202,\\\"bias\\\":0.09515028397892022,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":27327.173502380178,\\\"ask\\\":27767.93436532179,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:00 AM\\\",\\\"price\\\":27547.553933850984,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0064,\\\"forecast\\\":0.5946999007438063,\\\"bias\\\":0.0946999007438063,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":27471.208287440393,\\\"ask\\\":27914.292292076527,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:04 AM\\\",\\\"price\\\":27692.75028975846,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0064,\\\"forecast\\\":0.5951990405413293,\\\"bias\\\":0.09519904054132933,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":27521.021709048895,\\\"ask\\\":27964.909155969042,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:08 AM\\\",\\\"price\\\":27742.96543250897,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0064,\\\"forecast\\\":0.5950264165382789,\\\"bias\\\":0.09502641653827892,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":27374.952752189074,\\\"ask\\\":27816.484248192126,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:13 AM\\\",\\\"price\\\":27595.7185001906,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0064,\\\"forecast\\\":0.5955334643371747,\\\"bias\\\":0.09553346433717469,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":27386.283890823477,\\\"ask\\\":27827.99814712708,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:17 AM\\\",\\\"price\\\":27607.14101897528,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0064,\\\"forecast\\\":0.5955730078914021,\\\"bias\\\":0.0955730078914021,\\\"countOfNegative\\\":6,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":27361.40063614783,\\\"ask\\\":27802.713549634085,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:21 AM\\\",\\\"price\\\":27582.05709289096,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0064,\\\"forecast\\\":0.5956599247684693,\\\"bias\\\":0.0956599247684693,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":27523.615119183603,\\\"ask\\\":27967.54439529947,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:25 AM\\\",\\\"price\\\":27745.579757241536,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0064,\\\"forecast\\\":0.5962270530909521,\\\"bias\\\":0.09622705309095214,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":27361.784491993152,\\\"ask\\\":27803.10359670272,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:29 AM\\\",\\\"price\\\":27582.444044347936,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0064,\\\"forecast\\\":0.596796185720403,\\\"bias\\\":0.09679618572040305,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":27486.805715754235,\\\"ask\\\":27930.14129181479,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:33 AM\\\",\\\"price\\\":27708.473503784513,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0064,\\\"forecast\\\":0.5963539054445054,\\\"bias\\\":0.0963539054445054,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":27529.359314216,\\\"ask\\\":27973.381238638834,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:38 AM\\\",\\\"price\\\":27751.370276427417,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0064,\\\"forecast\\\":0.5962047354956613,\\\"bias\\\":0.09620473549566133,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":27471.295290312384,\\\"ask\\\":27914.380698220648,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:42 AM\\\",\\\"price\\\":27692.837994266516,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0064,\\\"forecast\\\":0.5960013947356997,\\\"bias\\\":0.09600139473569969,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":27643.370065265713,\\\"ask\\\":28089.23087277,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:46 AM\\\",\\\"price\\\":27866.300469017857,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0064,\\\"forecast\\\":0.5966027285359365,\\\"bias\\\":0.09660272853593654,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":27695.913347785565,\\\"ask\\\":28142.62162758856,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:50 AM\\\",\\\"price\\\":27919.267487687062,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0064,\\\"forecast\\\":0.5964191103864248,\\\"bias\\\":0.09641911038642481,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":27580.344530325947,\\\"ask\\\":28025.188796944105,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:54 AM\\\",\\\"price\\\":27802.766663635026,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0064,\\\"forecast\\\":0.5968231315383584,\\\"bias\\\":0.09682313153835842,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":27702.682673784828,\\\"ask\\\":28149.50013626523,\\\"dateObserved\\\":\\\"7/29/2023, 8:24:58 AM\\\",\\\"price\\\":27926.09140502503,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0064,\\\"forecast\\\":0.596393653141406,\\\"bias\\\":0.09639365314140602,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":27578.95177114276,\\\"ask\\\":28023.773573903127,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:03 AM\\\",\\\"price\\\":27801.362672522944,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0064,\\\"forecast\\\":0.5968261160504799,\\\"bias\\\":0.09682611605047986,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":27418.700089573817,\\\"ask\\\":27860.937187792748,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:07 AM\\\",\\\"price\\\":27639.818638683282,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0064,\\\"forecast\\\":0.5973920271938304,\\\"bias\\\":0.09739202719383044,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":27432.031157157024,\\\"ask\\\":27874.483272595044,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:11 AM\\\",\\\"price\\\":27653.257214876034,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0064,\\\"forecast\\\":0.5974393795370249,\\\"bias\\\":0.09743937953702486,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":27555.20916344653,\\\"ask\\\":27999.648020921475,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:15 AM\\\",\\\"price\\\":27777.428592184002,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0064,\\\"forecast\\\":0.5970018476445924,\\\"bias\\\":0.09700184764459241,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":27641.736928655024,\\\"ask\\\":28087.571395246232,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:19 AM\\\",\\\"price\\\":27864.654161950628,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0064,\\\"forecast\\\":0.5966972463240946,\\\"bias\\\":0.0966972463240946,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":27606.376096531425,\\\"ask\\\":28051.640227120643,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:23 AM\\\",\\\"price\\\":27829.008161826034,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0064,\\\"forecast\\\":0.5968211052138714,\\\"bias\\\":0.09682110521387144,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":27780.202277954737,\\\"ask\\\":28228.270056631427,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:28 AM\\\",\\\"price\\\":28004.236167293082,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0064,\\\"forecast\\\":0.5974307485419802,\\\"bias\\\":0.0974307485419802,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":27664.202933024393,\\\"ask\\\":28110.399754524788,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:32 AM\\\",\\\"price\\\":27887.30134377459,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0064,\\\"forecast\\\":0.5970222096430173,\\\"bias\\\":0.09702220964301733,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":27825.784780130336,\\\"ask\\\":28274.58776045502,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:36 AM\\\",\\\"price\\\":28050.186270292677,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0064,\\\"forecast\\\":0.5964555196182814,\\\"bias\\\":0.09645551961828136,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":27896.233371619794,\\\"ask\\\":28346.172619549146,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:40 AM\\\",\\\"price\\\":28121.20299558447,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0064,\\\"forecast\\\":0.5962113160656345,\\\"bias\\\":0.09621131606563449,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":27749.126053462565,\\\"ask\\\":28196.69260271196,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:44 AM\\\",\\\"price\\\":27972.909328087262,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0064,\\\"forecast\\\":0.5967213641534743,\\\"bias\\\":0.09672136415347432,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":27636.39059283891,\\\"ask\\\":28082.138828207277,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:48 AM\\\",\\\"price\\\":27859.264710523094,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0064,\\\"forecast\\\":0.5963268145286469,\\\"bias\\\":0.09632681452864689,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":27650.780925590265,\\\"ask\\\":28096.761263099786,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:53 AM\\\",\\\"price\\\":27873.771094345026,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0064,\\\"forecast\\\":0.5963769721246357,\\\"bias\\\":0.0963769721246357,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":27521.217497381578,\\\"ask\\\":27965.108102178056,\\\"dateObserved\\\":\\\"7/29/2023, 8:25:57 AM\\\",\\\"price\\\":27743.162799779817,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0064,\\\"forecast\\\":0.5959232519754443,\\\"bias\\\":0.09592325197544427,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":27392.887440096336,\\\"ask\\\":27834.708205259183,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:01 AM\\\",\\\"price\\\":27613.79782267776,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0064,\\\"forecast\\\":0.5963726327297703,\\\"bias\\\":0.09637263272977026,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":27376.41840005889,\\\"ask\\\":27817.97353554371,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:05 AM\\\",\\\"price\\\":27597.1959678013,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0064,\\\"forecast\\\":0.5963146571128086,\\\"bias\\\":0.09631465711280862,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":27473.127179575866,\\\"ask\\\":27916.242134085158,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:07 AM\\\",\\\"price\\\":27694.68465683051,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0064,\\\"forecast\\\":0.5966548942030978,\\\"bias\\\":0.09665489420309781,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":27553.489349863125,\\\"ask\\\":27997.900468409305,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:11 AM\\\",\\\"price\\\":27775.694909136215,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0064,\\\"forecast\\\":0.5969376212845937,\\\"bias\\\":0.09693762128459371,\\\"countOfNegative\\\":10,\\\"countOfPositive\\\":10,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":27595.635009266814,\\\"ask\\\":28040.725896513053,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:16 AM\\\",\\\"price\\\":27818.180452889934,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0064,\\\"forecast\\\":0.5970858965145723,\\\"bias\\\":0.09708589651457233,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":27750.394543741102,\\\"ask\\\":28197.98155251112,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:20 AM\\\",\\\"price\\\":27974.18804812611,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0064,\\\"forecast\\\":0.5976303655272828,\\\"bias\\\":0.09763036552728277,\\\"countOfNegative\\\":9,\\\"countOfPositive\\\":11,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":27904.825140436755,\\\"ask\\\":28354.902965282512,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:24 AM\\\",\\\"price\\\":28129.864052859633,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0064,\\\"forecast\\\":0.5970870537707517,\\\"bias\\\":0.09708705377075166,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":27918.06964367222,\\\"ask\\\":28368.361089537902,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:28 AM\\\",\\\"price\\\":28143.21536660506,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0064,\\\"forecast\\\":0.5971331343246099,\\\"bias\\\":0.0971331343246099,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":27757.76116042824,\\\"ask\\\":28205.466985596435,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:32 AM\\\",\\\"price\\\":27981.614073012337,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0064,\\\"forecast\\\":0.5976941041141515,\\\"bias\\\":0.09769410411415147,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":27810.729728870334,\\\"ask\\\":28259.2898857876,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:36 AM\\\",\\\"price\\\":28035.009807328966,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0064,\\\"forecast\\\":0.5978805282573039,\\\"bias\\\":0.09788052825730387,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":27977.19414287489,\\\"ask\\\":28428.439209695454,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:40 AM\\\",\\\"price\\\":28202.816676285172,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0064,\\\"forecast\\\":0.5972946527719191,\\\"bias\\\":0.09729465277191907,\\\"countOfNegative\\\":8,\\\"countOfPositive\\\":12,\\\"magnitudeOfSignal\\\":0},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":28036.95709948083,\\\"ask\\\":28489.166084956327,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:45 AM\\\",\\\"price\\\":28263.06159221858,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"volatility\\\":0.0064,\\\"forecast\\\":0.5970868186309432,\\\"bias\\\":0.09708681863094315,\\\"countOfNegative\\\":7,\\\"countOfPositive\\\":13,\\\"magnitudeOfSignal\\\":0}],\\\"longTermRecords\\\":[{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":29088.21683631954,\\\"ask\\\":29557.381624002093,\\\"price\\\":29322.799230160817,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":34885.62,\\\"averageShortPrice\\\":6320.65306171459,\\\"dateObserved\\\":\\\"7/29/2023, 6:27:23 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":27302.169550236486,\\\"ask\\\":27742.527123627384,\\\"price\\\":27522.34833693193,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":27957.6,\\\"averageShortPrice\\\":4023.95389997517,\\\"dateObserved\\\":\\\"7/29/2023, 6:34:14 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":28290.444644171206,\\\"ask\\\":28746.742138432022,\\\"price\\\":28518.59339130161,\\\"maxShares\\\":5300000,\\\"investedShares\\\":30433.91,\\\"averagePrice\\\":4747.986015531336,\\\"sharesShort\\\":20799.52,\\\"averageShortPrice\\\":3887.320925094414,\\\"dateObserved\\\":\\\"7/29/2023, 6:41:02 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":26193.92523751245,\\\"ask\\\":26616.407902633608,\\\"price\\\":26406.003792087813,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":8914.08,\\\"averageShortPrice\\\":1665.9946821833205,\\\"dateObserved\\\":\\\"7/29/2023, 6:47:54 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":24887.14625517484,\\\"ask\\\":25288.551839935724,\\\"price\\\":25085.075699198256,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":32021.44,\\\"averageShortPrice\\\":3997.3250384203984,\\\"dateObserved\\\":\\\"7/29/2023, 6:54:48 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":25720.455289400605,\\\"ask\\\":26135.301342455474,\\\"price\\\":25927.87831592804,\\\"maxShares\\\":5300000,\\\"investedShares\\\":37956.6,\\\"averagePrice\\\":5269.177715090149,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:01:39 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":24905.84294377198,\\\"ask\\\":25307.550088026346,\\\"price\\\":25106.696515899166,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":49957.75,\\\"averageShortPrice\\\":6255.270503180217,\\\"dateObserved\\\":\\\"7/29/2023, 7:08:30 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":23736.245692220054,\\\"ask\\\":24119.08836467524,\\\"price\\\":23928.21403023163,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:15:23 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":24091.140648580284,\\\"ask\\\":24479.707433234806,\\\"price\\\":24284.32672305977,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:22:11 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":24626.998246797404,\\\"ask\\\":25024.20789593932,\\\"price\\\":24824.942791647423,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":22746.35,\\\"averageShortPrice\\\":2659.773005634576,\\\"dateObserved\\\":\\\"7/29/2023, 7:29:00 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":24524.616312853526,\\\"ask\\\":24920.174640480185,\\\"price\\\":24722.395476666858,\\\"maxShares\\\":5300000,\\\"investedShares\\\":33107.84,\\\"averagePrice\\\":4364.528255941426,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:35:51 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":26947.11680130562,\\\"ask\\\":27381.74771745571,\\\"price\\\":27165.43908212447,\\\"maxShares\\\":5300000,\\\"investedShares\\\":86952.48,\\\"averagePrice\\\":13248.586318915863,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:42:40 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":28461.013339619672,\\\"ask\\\":28920.061941871605,\\\"price\\\":28690.53764074563,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:49:32 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":29719.856820214027,\\\"ask\\\":30199.209349572324,\\\"price\\\":29955.370146742196,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 7:56:21 AM\\\",\\\"bias\\\":null},{\\\"forecast\\\":null,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":28581.063182993807,\\\"ask\\\":29042.04807304209,\\\"price\\\":28811.55562801795,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:03:13 AM\\\",\\\"bias\\\":null},{\\\"volatility\\\":0.0064,\\\"forecast\\\":0.3975813566396257,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":26329.073791804505,\\\"ask\\\":26753.73627231747,\\\"price\\\":26541.98832918488,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:09:58 AM\\\",\\\"bias\\\":0.10482984844669574},{\\\"volatility\\\":0.0064,\\\"forecast\\\":0.5498640096035006,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":26527.582649166063,\\\"ask\\\":26955.44688544294,\\\"price\\\":26742.447640451832,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:16:47 AM\\\",\\\"bias\\\":0.10292173914789499},{\\\"volatility\\\":0.0064,\\\"forecast\\\":0.49539058714699535,\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":26409.073950178743,\\\"ask\\\":26835.02675582678,\\\"price\\\":26622.932316995044,\\\"maxShares\\\":5300000,\\\"investedShares\\\":0,\\\"averagePrice\\\":0,\\\"sharesShort\\\":0,\\\"averageShortPrice\\\":0,\\\"dateObserved\\\":\\\"7/29/2023, 8:23:35 AM\\\",\\\"bias\\\":0.09726802862119555}],\\\"recentTicksOfPrices\\\":[28004.236167293082,27887.30134377459,28050.186270292677,28121.20299558447,27972.909328087262,27859.264710523094,27873.771094345026,27743.162799779817,27613.79782267776,27597.1959678013,27694.68465683051,27775.694909136215,27818.180452889934,27974.18804812611,28129.864052859633,28143.21536660506,27981.614073012337,28035.009807328966,28202.816676285172,28263.06159221858]}]]\"}}],[\"data/salesLedger.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"data/salesLedger.txt\",\"text\":\"[{\\\"date\\\":\\\"7/29/2023, 6:21:54 AM\\\",\\\"symbol\\\":\\\"MGCP\\\",\\\"price\\\":4163.719559872865,\\\"averagePurchasePrice\\\":4200.881550334178,\\\"profit\\\":\\\"$44,231,167.26\\\",\\\"profitPercent\\\":\\\"0.88%\\\",\\\"shares\\\":1190226,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 6:21:54 AM\\\",\\\"symbol\\\":\\\"JGN\\\",\\\"price\\\":1360.0605486267873,\\\"averagePurchasePrice\\\":1305.7403540048483,\\\"profit\\\":\\\"$208,005,333.66\\\",\\\"profitPercent\\\":\\\"4.16%\\\",\\\"shares\\\":3829245,\\\"type\\\":\\\"Short-Term Long Sale\\\"},{\\\"date\\\":\\\"7/29/2023, 6:21:54 AM\\\",\\\"symbol\\\":\\\"MDYN\\\",\\\"price\\\":5499.865835940701,\\\"averagePurchasePrice\\\":5609.4902722371135,\\\"profit\\\":\\\"$52,454,415.77\\\",\\\"profitPercent\\\":\\\"1.95%\\\",\\\"shares\\\":478492,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 6:21:54 AM\\\",\\\"symbol\\\":\\\"TITN\\\",\\\"price\\\":29750.291121623995,\\\"averagePurchasePrice\\\":30098.34791292663,\\\"profit\\\":\\\"$57,819,890.28\\\",\\\"profitPercent\\\":\\\"1.16%\\\",\\\"shares\\\":166122,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 6:23:18 AM\\\",\\\"symbol\\\":\\\"FSIG\\\",\\\"price\\\":9863.451596739586,\\\"averagePurchasePrice\\\":10092.753409467361,\\\"profit\\\":\\\"-$113,597,264.53\\\",\\\"profitPercent\\\":\\\"-2.27%\\\",\\\"shares\\\":495405,\\\"type\\\":\\\"Short-Term Long Sale\\\"},{\\\"date\\\":\\\"7/29/2023, 6:25:47 AM\\\",\\\"symbol\\\":\\\"ECP\\\",\\\"price\\\":21713.311938971074,\\\"averagePurchasePrice\\\":22492.231887077236,\\\"profit\\\":\\\"$173,153,125.54\\\",\\\"profitPercent\\\":\\\"3.46%\\\",\\\"shares\\\":222299,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 6:25:47 AM\\\",\\\"symbol\\\":\\\"ICRS\\\",\\\"price\\\":16313.007620688006,\\\"averagePurchasePrice\\\":15978.63577219953,\\\"profit\\\":\\\"-$63,296,256.55\\\",\\\"profitPercent\\\":\\\"-2.09%\\\",\\\"shares\\\":189299,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 6:26:20 AM\\\",\\\"symbol\\\":\\\"OMTK\\\",\\\"price\\\":63501.84865769049,\\\"averagePurchasePrice\\\":62346.695366379194,\\\"profit\\\":\\\"-$92,639,828.50\\\",\\\"profitPercent\\\":\\\"-1.85%\\\",\\\"shares\\\":80197,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 6:26:58 AM\\\",\\\"symbol\\\":\\\"VITA\\\",\\\"price\\\":17198.366166132706,\\\"averagePurchasePrice\\\":17434.627272450496,\\\"profit\\\":\\\"$67,756,377.64\\\",\\\"profitPercent\\\":\\\"1.36%\\\",\\\"shares\\\":286786,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 6:27:06 AM\\\",\\\"symbol\\\":\\\"FSIG\\\",\\\"price\\\":10332.51832751825,\\\"averagePurchasePrice\\\":10769.21219592083,\\\"profit\\\":\\\"-$127,091,889.91\\\",\\\"profitPercent\\\":\\\"-4.06%\\\",\\\"shares\\\":291032,\\\"type\\\":\\\"Short-Term Long Sale\\\"},{\\\"date\\\":\\\"7/29/2023, 6:27:06 AM\\\",\\\"symbol\\\":\\\"SYSC\\\",\\\"price\\\":9243.413562262323,\\\"averagePurchasePrice\\\":8613.293512935968,\\\"profit\\\":\\\"$365,783,428.39\\\",\\\"profitPercent\\\":\\\"7.32%\\\",\\\"shares\\\":580498,\\\"type\\\":\\\"Short-Term Long Sale\\\"},{\\\"date\\\":\\\"7/29/2023, 6:27:31 AM\\\",\\\"symbol\\\":\\\"ECP\\\",\\\"price\\\":21314.94617685739,\\\"averagePurchasePrice\\\":21112.54783891726,\\\"profit\\\":\\\"-$47,933,188.78\\\",\\\"profitPercent\\\":\\\"-0.96%\\\",\\\"shares\\\":236826,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 6:28:08 AM\\\",\\\"symbol\\\":\\\"JGN\\\",\\\"price\\\":1820.1519722594244,\\\"averagePurchasePrice\\\":1960.4882312298398,\\\"profit\\\":\\\"-$357,911,489.83\\\",\\\"profitPercent\\\":\\\"-7.16%\\\",\\\"shares\\\":2550385,\\\"type\\\":\\\"Short-Term Long Sale\\\"},{\\\"date\\\":\\\"7/29/2023, 6:29:23 AM\\\",\\\"symbol\\\":\\\"BLD\\\",\\\"price\\\":21791.754805084238,\\\"averagePurchasePrice\\\":21922.92672048135,\\\"profit\\\":\\\"$29,916,641.09\\\",\\\"profitPercent\\\":\\\"0.60%\\\",\\\"shares\\\":228072,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 6:29:44 AM\\\",\\\"symbol\\\":\\\"HLS\\\",\\\"price\\\":4462.709796754065,\\\"averagePurchasePrice\\\":4363.401525311981,\\\"profit\\\":\\\"$113,796,851.70\\\",\\\"profitPercent\\\":\\\"2.28%\\\",\\\"shares\\\":1145895,\\\"type\\\":\\\"Short-Term Long Sale\\\"},{\\\"date\\\":\\\"7/29/2023, 6:30:38 AM\\\",\\\"symbol\\\":\\\"SGC\\\",\\\"price\\\":103582.77773752612,\\\"averagePurchasePrice\\\":92361.56382915867,\\\"profit\\\":\\\"$607,460,414.93\\\",\\\"profitPercent\\\":\\\"12.15%\\\",\\\"shares\\\":54135,\\\"type\\\":\\\"Short-Term Long Sale\\\"},{\\\"date\\\":\\\"7/29/2023, 6:30:58 AM\\\",\\\"symbol\\\":\\\"CTK\\\",\\\"price\\\":2802.6282432024586,\\\"averagePurchasePrice\\\":2878.0168375979574,\\\"profit\\\":\\\"$77,038,323.01\\\",\\\"profitPercent\\\":\\\"2.62%\\\",\\\"shares\\\":1021883,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 6:31:07 AM\\\",\\\"symbol\\\":\\\"CLRK\\\",\\\"price\\\":14327.072331279689,\\\"averagePurchasePrice\\\":14723.680666295726,\\\"profit\\\":\\\"$134,683,827.88\\\",\\\"profitPercent\\\":\\\"2.69%\\\",\\\"shares\\\":339589,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 6:31:11 AM\\\",\\\"symbol\\\":\\\"OMTK\\\",\\\"price\\\":59985.60274080022,\\\"averagePurchasePrice\\\":60526.17997212197,\\\"profit\\\":\\\"$44,656,544.50\\\",\\\"profitPercent\\\":\\\"0.89%\\\",\\\"shares\\\":82609,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 6:31:52 AM\\\",\\\"symbol\\\":\\\"UNV\\\",\\\"price\\\":18424.85850537241,\\\"averagePurchasePrice\\\":18270.423936596053,\\\"profit\\\":\\\"-$42,263,490.70\\\",\\\"profitPercent\\\":\\\"-0.85%\\\",\\\"shares\\\":273666,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 6:32:05 AM\\\",\\\"symbol\\\":\\\"NTLK\\\",\\\"price\\\":1042092.43215228,\\\"averagePurchasePrice\\\":1065992.0370376299,\\\"profit\\\":\\\"$112,089,146.91\\\",\\\"profitPercent\\\":\\\"2.24%\\\",\\\"shares\\\":4690,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 6:32:09 AM\\\",\\\"symbol\\\":\\\"TITN\\\",\\\"price\\\":27144.452392292733,\\\"averagePurchasePrice\\\":26826.359333167802,\\\"profit\\\":\\\"-$59,287,456.73\\\",\\\"profitPercent\\\":\\\"-1.19%\\\",\\\"shares\\\":186384,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 6:33:28 AM\\\",\\\"symbol\\\":\\\"CTYS\\\",\\\"price\\\":1713.6373318745698,\\\"averagePurchasePrice\\\":1713.930009801141,\\\"profit\\\":\\\"-$853,821.12\\\",\\\"profitPercent\\\":\\\"-0.02%\\\",\\\"shares\\\":2917272,\\\"type\\\":\\\"Short-Term Long Sale\\\"},{\\\"date\\\":\\\"7/29/2023, 6:33:36 AM\\\",\\\"symbol\\\":\\\"MGCP\\\",\\\"price\\\":4465.533229235016,\\\"averagePurchasePrice\\\":4375.136778441667,\\\"profit\\\":\\\"$77,861,355.75\\\",\\\"profitPercent\\\":\\\"2.07%\\\",\\\"shares\\\":861332,\\\"type\\\":\\\"Short-Term Long Sale\\\"},{\\\"date\\\":\\\"7/29/2023, 6:34:16 AM\\\",\\\"symbol\\\":\\\"FNS\\\",\\\"price\\\":2966.8738914689466,\\\"averagePurchasePrice\\\":3009.1574558618786,\\\"profit\\\":\\\"-$70,258,159.18\\\",\\\"profitPercent\\\":\\\"-1.41%\\\",\\\"shares\\\":1661595,\\\"type\\\":\\\"Short-Term Long Sale\\\"},{\\\"date\\\":\\\"7/29/2023, 6:34:47 AM\\\",\\\"symbol\\\":\\\"OMGA\\\",\\\"price\\\":8507.344095474915,\\\"averagePurchasePrice\\\":8649.7598484608,\\\"profit\\\":\\\"-$82,323,568.43\\\",\\\"profitPercent\\\":\\\"-1.65%\\\",\\\"shares\\\":578051,\\\"type\\\":\\\"Short-Term Long Sale\\\"},{\\\"date\\\":\\\"7/29/2023, 6:35:41 AM\\\",\\\"symbol\\\":\\\"TITN\\\",\\\"price\\\":27979.713286774866,\\\"averagePurchasePrice\\\":27929.329503125497,\\\"profit\\\":\\\"$9,019,856.10\\\",\\\"profitPercent\\\":\\\"0.18%\\\",\\\"shares\\\":179023,\\\"type\\\":\\\"Short-Term Long Sale\\\"},{\\\"date\\\":\\\"7/29/2023, 6:36:14 AM\\\",\\\"symbol\\\":\\\"ECP\\\",\\\"price\\\":19613.858447708524,\\\"averagePurchasePrice\\\":19777.00426712471,\\\"profit\\\":\\\"$41,246,362.92\\\",\\\"profitPercent\\\":\\\"0.82%\\\",\\\"shares\\\":252819,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 6:36:14 AM\\\",\\\"symbol\\\":\\\"AERO\\\",\\\"price\\\":18895.39733886255,\\\"averagePurchasePrice\\\":19104.83223471948,\\\"profit\\\":\\\"-$42,544,814.18\\\",\\\"profitPercent\\\":\\\"-1.10%\\\",\\\"shares\\\":203141,\\\"type\\\":\\\"Short-Term Long Sale\\\"},{\\\"date\\\":\\\"7/29/2023, 6:37:12 AM\\\",\\\"symbol\\\":\\\"ICRS\\\",\\\"price\\\":15092.035131527255,\\\"averagePurchasePrice\\\":15532.261059484017,\\\"profit\\\":\\\"-$141,713,568.69\\\",\\\"profitPercent\\\":\\\"-2.83%\\\",\\\"shares\\\":321911,\\\"type\\\":\\\"Short-Term Long Sale\\\"},{\\\"date\\\":\\\"7/29/2023, 6:37:12 AM\\\",\\\"symbol\\\":\\\"FNS\\\",\\\"price\\\":3192.6213361020236,\\\"averagePurchasePrice\\\":3186.814296931882,\\\"profit\\\":\\\"$9,111,041.21\\\",\\\"profitPercent\\\":\\\"0.18%\\\",\\\"shares\\\":1568965,\\\"type\\\":\\\"Short-Term Long Sale\\\"},{\\\"date\\\":\\\"7/29/2023, 6:37:16 AM\\\",\\\"symbol\\\":\\\"FLCM\\\",\\\"price\\\":4051.4183482777075,\\\"averagePurchasePrice\\\":3760.7245026021096,\\\"profit\\\":\\\"$386,486,479.33\\\",\\\"profitPercent\\\":\\\"7.73%\\\",\\\"shares\\\":1329531,\\\"type\\\":\\\"Short-Term Long Sale\\\"},{\\\"date\\\":\\\"7/29/2023, 6:38:41 AM\\\",\\\"symbol\\\":\\\"MGCP\\\",\\\"price\\\":4622.717910830886,\\\"averagePurchasePrice\\\":4580.879104437063,\\\"profit\\\":\\\"-$45,666,806.15\\\",\\\"profitPercent\\\":\\\"-0.91%\\\",\\\"shares\\\":1091494,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 6:39:14 AM\\\",\\\"symbol\\\":\\\"SLRS\\\",\\\"price\\\":21431.213255241604,\\\"averagePurchasePrice\\\":21303.990436504417,\\\"profit\\\":\\\"$29,858,941.11\\\",\\\"profitPercent\\\":\\\"0.60%\\\",\\\"shares\\\":234698,\\\"type\\\":\\\"Short-Term Long Sale\\\"},{\\\"date\\\":\\\"7/29/2023, 6:40:21 AM\\\",\\\"symbol\\\":\\\"FSIG\\\",\\\"price\\\":9809.170147052833,\\\"averagePurchasePrice\\\":9281.030465769769,\\\"profit\\\":\\\"$284,526,274.92\\\",\\\"profitPercent\\\":\\\"5.69%\\\",\\\"shares\\\":538733,\\\"type\\\":\\\"Short-Term Long Sale\\\"},{\\\"date\\\":\\\"7/29/2023, 6:41:04 AM\\\",\\\"symbol\\\":\\\"ICRS\\\",\\\"price\\\":14404.50301146051,\\\"averagePurchasePrice\\\":14253.47196881679,\\\"profit\\\":\\\"-$52,980,481.51\\\",\\\"profitPercent\\\":\\\"-1.06%\\\",\\\"shares\\\":350792,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 6:41:15 AM\\\",\\\"symbol\\\":\\\"AERO\\\",\\\"price\\\":19308.88695142115,\\\"averagePurchasePrice\\\":19865.07331522369,\\\"profit\\\":\\\"-$139,990,995.40\\\",\\\"profitPercent\\\":\\\"-2.80%\\\",\\\"shares\\\":251698,\\\"type\\\":\\\"Short-Term Long Sale\\\"},{\\\"date\\\":\\\"7/29/2023, 6:41:23 AM\\\",\\\"symbol\\\":\\\"TITN\\\",\\\"price\\\":27323.882941077427,\\\"averagePurchasePrice\\\":27766.578036388673,\\\"profit\\\":\\\"$65,770,324.92\\\",\\\"profitPercent\\\":\\\"1.59%\\\",\\\"shares\\\":148568,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 6:41:56 AM\\\",\\\"symbol\\\":\\\"CTK\\\",\\\"price\\\":2578.0320678202597,\\\"averagePurchasePrice\\\":2528.2802378390115,\\\"profit\\\":\\\"-$98,390,661.77\\\",\\\"profitPercent\\\":\\\"-1.97%\\\",\\\"shares\\\":1977629,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 6:42:50 AM\\\",\\\"symbol\\\":\\\"BLD\\\",\\\"price\\\":21126.96955346598,\\\"averagePurchasePrice\\\":21069.50952174404,\\\"profit\\\":\\\"-$13,635,840.13\\\",\\\"profitPercent\\\":\\\"-0.27%\\\",\\\"shares\\\":237310,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 6:43:07 AM\\\",\\\"symbol\\\":\\\"DCOMM\\\",\\\"price\\\":8207.89494116097,\\\"averagePurchasePrice\\\":8145.3780442216985,\\\"profit\\\":\\\"$38,375,684.60\\\",\\\"profitPercent\\\":\\\"0.77%\\\",\\\"shares\\\":613845,\\\"type\\\":\\\"Short-Term Long Sale\\\"},{\\\"date\\\":\\\"7/29/2023, 6:43:19 AM\\\",\\\"symbol\\\":\\\"NTLK\\\",\\\"price\\\":733284.6264081498,\\\"averagePurchasePrice\\\":679279.8689760648,\\\"profit\\\":\\\"-$396,394,919.55\\\",\\\"profitPercent\\\":\\\"-7.95%\\\",\\\"shares\\\":7340,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 6:44:01 AM\\\",\\\"symbol\\\":\\\"MGCP\\\",\\\"price\\\":4368.432263267863,\\\"averagePurchasePrice\\\":4504.3157008525195,\\\"profit\\\":\\\"$126,196,986.74\\\",\\\"profitPercent\\\":\\\"3.02%\\\",\\\"shares\\\":928715,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 6:44:40 AM\\\",\\\"symbol\\\":\\\"HLS\\\",\\\"price\\\":4372.49043984605,\\\"averagePurchasePrice\\\":4448.787585289092,\\\"profit\\\":\\\"-$79,368,334.44\\\",\\\"profitPercent\\\":\\\"-1.72%\\\",\\\"shares\\\":1040253,\\\"type\\\":\\\"Short-Term Long Sale\\\"},{\\\"date\\\":\\\"7/29/2023, 6:45:18 AM\\\",\\\"symbol\\\":\\\"DCOMM\\\",\\\"price\\\":7980.001888584387,\\\"averagePurchasePrice\\\":7950.899025259273,\\\"profit\\\":\\\"-$16,648,234.76\\\",\\\"profitPercent\\\":\\\"-0.37%\\\",\\\"shares\\\":572048,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 6:45:47 AM\\\",\\\"symbol\\\":\\\"FLCM\\\",\\\"price\\\":3810.4158095684056,\\\"averagePurchasePrice\\\":3770.8314526450695,\\\"profit\\\":\\\"$45,236,448.91\\\",\\\"profitPercent\\\":\\\"1.05%\\\",\\\"shares\\\":1142786,\\\"type\\\":\\\"Short-Term Long Sale\\\"},{\\\"date\\\":\\\"7/29/2023, 6:46:08 AM\\\",\\\"symbol\\\":\\\"ECP\\\",\\\"price\\\":17062.822400043307,\\\"averagePurchasePrice\\\":18761.427600623454,\\\"profit\\\":\\\"$452,685,080.38\\\",\\\"profitPercent\\\":\\\"9.05%\\\",\\\"shares\\\":266504,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 6:46:45 AM\\\",\\\"symbol\\\":\\\"APHE\\\",\\\"price\\\":300.1194507329131,\\\"averagePurchasePrice\\\":306.7663898024441,\\\"profit\\\":\\\"-$64,475,308.97\\\",\\\"profitPercent\\\":\\\"-2.17%\\\",\\\"shares\\\":9700000,\\\"type\\\":\\\"Short-Term Long Sale\\\"},{\\\"date\\\":\\\"7/29/2023, 6:47:10 AM\\\",\\\"symbol\\\":\\\"AERO\\\",\\\"price\\\":18444.57522043348,\\\"averagePurchasePrice\\\":18356.97285025979,\\\"profit\\\":\\\"-$23,860,783.18\\\",\\\"profitPercent\\\":\\\"-0.48%\\\",\\\"shares\\\":272376,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 6:47:14 AM\\\",\\\"symbol\\\":\\\"NVMD\\\",\\\"price\\\":5884.939230297991,\\\"averagePurchasePrice\\\":6045.497287321011,\\\"profit\\\":\\\"$120,348,378.90\\\",\\\"profitPercent\\\":\\\"2.66%\\\",\\\"shares\\\":749563,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 6:48:45 AM\\\",\\\"symbol\\\":\\\"FSIG\\\",\\\"price\\\":7791.690170584546,\\\"averagePurchasePrice\\\":9260.762063123278,\\\"profit\\\":\\\"$793,169,543.64\\\",\\\"profitPercent\\\":\\\"15.86%\\\",\\\"shares\\\":539912,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 6:49:23 AM\\\",\\\"symbol\\\":\\\"WDS\\\",\\\"price\\\":888.5395535967535,\\\"averagePurchasePrice\\\":824.4420891555746,\\\"profit\\\":\\\"-$388,732,341.28\\\",\\\"profitPercent\\\":\\\"-7.77%\\\",\\\"shares\\\":6064707,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 6:49:43 AM\\\",\\\"symbol\\\":\\\"TITN\\\",\\\"price\\\":25181.451001492347,\\\"averagePurchasePrice\\\":24983.281490127483,\\\"profit\\\":\\\"-$39,660,456.99\\\",\\\"profitPercent\\\":\\\"-0.79%\\\",\\\"shares\\\":200134,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 6:49:48 AM\\\",\\\"symbol\\\":\\\"CTYS\\\",\\\"price\\\":1819.7821819085289,\\\"averagePurchasePrice\\\":1966.19902303055,\\\"profit\\\":\\\"$372,334,805.80\\\",\\\"profitPercent\\\":\\\"7.45%\\\",\\\"shares\\\":2542978,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 6:49:52 AM\\\",\\\"symbol\\\":\\\"FLCM\\\",\\\"price\\\":3757.1608587855426,\\\"averagePurchasePrice\\\":3756.730579543915,\\\"profit\\\":\\\"-$500,496.51\\\",\\\"profitPercent\\\":\\\"-0.01%\\\",\\\"shares\\\":1163190,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 6:50:46 AM\\\",\\\"symbol\\\":\\\"JGN\\\",\\\"price\\\":3503.0949603571794,\\\"averagePurchasePrice\\\":3834.023962855282,\\\"profit\\\":\\\"$431,568,814.23\\\",\\\"profitPercent\\\":\\\"8.63%\\\",\\\"shares\\\":1304113,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 6:51:38 AM\\\",\\\"symbol\\\":\\\"NTLK\\\",\\\"price\\\":658186.262829517,\\\"averagePurchasePrice\\\":644894.0332417209,\\\"profit\\\":\\\"$103,054,655.99\\\",\\\"profitPercent\\\":\\\"2.06%\\\",\\\"shares\\\":7753,\\\"type\\\":\\\"Short-Term Long Sale\\\"},{\\\"date\\\":\\\"7/29/2023, 6:52:27 AM\\\",\\\"symbol\\\":\\\"SLRS\\\",\\\"price\\\":23937.108093434286,\\\"averagePurchasePrice\\\":22596.805774451706,\\\"profit\\\":\\\"$296,568,694.12\\\",\\\"profitPercent\\\":\\\"5.93%\\\",\\\"shares\\\":221270,\\\"type\\\":\\\"Short-Term Long Sale\\\"},{\\\"date\\\":\\\"7/29/2023, 6:52:32 AM\\\",\\\"symbol\\\":\\\"FSIG\\\",\\\"price\\\":7332.19329731597,\\\"averagePurchasePrice\\\":7404.409531808374,\\\"profit\\\":\\\"$48,765,673.31\\\",\\\"profitPercent\\\":\\\"0.98%\\\",\\\"shares\\\":675273,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 6:52:44 AM\\\",\\\"symbol\\\":\\\"MGCP\\\",\\\"price\\\":4465.527482415699,\\\"averagePurchasePrice\\\":4411.707772525383,\\\"profit\\\":\\\"$60,996,460.56\\\",\\\"profitPercent\\\":\\\"1.22%\\\",\\\"shares\\\":1133348,\\\"type\\\":\\\"Short-Term Long Sale\\\"},{\\\"date\\\":\\\"7/29/2023, 6:52:56 AM\\\",\\\"symbol\\\":\\\"WDS\\\",\\\"price\\\":1030.1468714297916,\\\"averagePurchasePrice\\\":1047.5845800425789,\\\"profit\\\":\\\"-$83,228,160.43\\\",\\\"profitPercent\\\":\\\"-1.66%\\\",\\\"shares\\\":4772884,\\\"type\\\":\\\"Short-Term Long Sale\\\"},{\\\"date\\\":\\\"7/29/2023, 6:53:34 AM\\\",\\\"symbol\\\":\\\"ECP\\\",\\\"price\\\":17668.710918902958,\\\"averagePurchasePrice\\\":17656.236409332312,\\\"profit\\\":\\\"$3,532,606.47\\\",\\\"profitPercent\\\":\\\"0.07%\\\",\\\"shares\\\":283186,\\\"type\\\":\\\"Short-Term Long Sale\\\"},{\\\"date\\\":\\\"7/29/2023, 6:53:34 AM\\\",\\\"symbol\\\":\\\"LXO\\\",\\\"price\\\":4751.689396994392,\\\"averagePurchasePrice\\\":4634.842933028747,\\\"profit\\\":\\\"-$126,052,212.63\\\",\\\"profitPercent\\\":\\\"-2.52%\\\",\\\"shares\\\":1078785,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 6:53:34 AM\\\",\\\"symbol\\\":\\\"NTLK\\\",\\\"price\\\":694005.4612306819,\\\"averagePurchasePrice\\\":770579.0226446543,\\\"profit\\\":\\\"-$496,885,840.02\\\",\\\"profitPercent\\\":\\\"-9.94%\\\",\\\"shares\\\":6489,\\\"type\\\":\\\"Short-Term Long Sale\\\"},{\\\"date\\\":\\\"7/29/2023, 6:53:46 AM\\\",\\\"symbol\\\":\\\"OMTK\\\",\\\"price\\\":53533.179819839046,\\\"averagePurchasePrice\\\":52902.81292239488,\\\"profit\\\":\\\"-$59,577,866.58\\\",\\\"profitPercent\\\":\\\"-1.19%\\\",\\\"shares\\\":94513,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 6:54:50 AM\\\",\\\"symbol\\\":\\\"SYSC\\\",\\\"price\\\":7427.950505111483,\\\"averagePurchasePrice\\\":7627.150782726639,\\\"profit\\\":\\\"-$130,586,339.59\\\",\\\"profitPercent\\\":\\\"-2.61%\\\",\\\"shares\\\":655553,\\\"type\\\":\\\"Short-Term Long Sale\\\"},{\\\"date\\\":\\\"7/29/2023, 6:54:57 AM\\\",\\\"symbol\\\":\\\"MGCP\\\",\\\"price\\\":4331.528838148286,\\\"averagePurchasePrice\\\":4348.5745122107255,\\\"profit\\\":\\\"$19,599,150.13\\\",\\\"profitPercent\\\":\\\"0.39%\\\",\\\"shares\\\":1149802,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 6:54:57 AM\\\",\\\"symbol\\\":\\\"FSIG\\\",\\\"price\\\":7771.664035621883,\\\"averagePurchasePrice\\\":7724.87878130982,\\\"profit\\\":\\\"$30,282,176.92\\\",\\\"profitPercent\\\":\\\"0.61%\\\",\\\"shares\\\":647259,\\\"type\\\":\\\"Short-Term Long Sale\\\"},{\\\"date\\\":\\\"7/29/2023, 6:55:13 AM\\\",\\\"symbol\\\":\\\"CLRK\\\",\\\"price\\\":14156.192446057283,\\\"averagePurchasePrice\\\":14431.535872898034,\\\"profit\\\":\\\"$95,396,309.69\\\",\\\"profitPercent\\\":\\\"1.91%\\\",\\\"shares\\\":346463,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 6:56:57 AM\\\",\\\"symbol\\\":\\\"MDYN\\\",\\\"price\\\":6154.11019240804,\\\"averagePurchasePrice\\\":6245.8685153965,\\\"profit\\\":\\\"-$73,455,198.54\\\",\\\"profitPercent\\\":\\\"-1.47%\\\",\\\"shares\\\":800529,\\\"type\\\":\\\"Short-Term Long Sale\\\"},{\\\"date\\\":\\\"7/29/2023, 6:57:05 AM\\\",\\\"symbol\\\":\\\"CTYS\\\",\\\"price\\\":1985.4835148957054,\\\"averagePurchasePrice\\\":2018.0972812250357,\\\"profit\\\":\\\"-$80,803,247.80\\\",\\\"profitPercent\\\":\\\"-1.62%\\\",\\\"shares\\\":2477581,\\\"type\\\":\\\"Short-Term Long Sale\\\"},{\\\"date\\\":\\\"7/29/2023, 6:57:51 AM\\\",\\\"symbol\\\":\\\"AERO\\\",\\\"price\\\":20492.718207749047,\\\"averagePurchasePrice\\\":20789.03166505762,\\\"profit\\\":\\\"-$71,266,645.93\\\",\\\"profitPercent\\\":\\\"-1.43%\\\",\\\"shares\\\":240511,\\\"type\\\":\\\"Short-Term Long Sale\\\"},{\\\"date\\\":\\\"7/29/2023, 6:59:06 AM\\\",\\\"symbol\\\":\\\"TITN\\\",\\\"price\\\":26161.39834265724,\\\"averagePurchasePrice\\\":26345.88857545074,\\\"profit\\\":\\\"-$35,013,109.85\\\",\\\"profitPercent\\\":\\\"-0.70%\\\",\\\"shares\\\":189783,\\\"type\\\":\\\"Short-Term Long Sale\\\"},{\\\"date\\\":\\\"7/29/2023, 6:59:10 AM\\\",\\\"symbol\\\":\\\"CLRK\\\",\\\"price\\\":13401.106134780495,\\\"averagePurchasePrice\\\":13663.4745743264,\\\"profit\\\":\\\"$96,010,844.40\\\",\\\"profitPercent\\\":\\\"1.92%\\\",\\\"shares\\\":365939,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 6:59:26 AM\\\",\\\"symbol\\\":\\\"SLRS\\\",\\\"price\\\":22526.141820471315,\\\"averagePurchasePrice\\\":22606.620686038186,\\\"profit\\\":\\\"$17,799,832.61\\\",\\\"profitPercent\\\":\\\"0.36%\\\",\\\"shares\\\":221174,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 7:01:23 AM\\\",\\\"symbol\\\":\\\"FSIG\\\",\\\"price\\\":9929.530182108387,\\\"averagePurchasePrice\\\":8676.158802874661,\\\"profit\\\":\\\"$722,307,898.88\\\",\\\"profitPercent\\\":\\\"14.45%\\\",\\\"shares\\\":576292,\\\"type\\\":\\\"Short-Term Long Sale\\\"},{\\\"date\\\":\\\"7/29/2023, 7:01:56 AM\\\",\\\"symbol\\\":\\\"FLCM\\\",\\\"price\\\":2856.8408341462386,\\\"averagePurchasePrice\\\":2720.8288517869332,\\\"profit\\\":\\\"-$249,945,819.68\\\",\\\"profitPercent\\\":\\\"-5.00%\\\",\\\"shares\\\":1837675,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 7:02:21 AM\\\",\\\"symbol\\\":\\\"SYSC\\\",\\\"price\\\":5991.520148880884,\\\"averagePurchasePrice\\\":6568.456483167928,\\\"profit\\\":\\\"$439,172,014.77\\\",\\\"profitPercent\\\":\\\"8.78%\\\",\\\"shares\\\":761214,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 7:02:50 AM\\\",\\\"symbol\\\":\\\"MGCP\\\",\\\"price\\\":3920.1967258206755,\\\"averagePurchasePrice\\\":4165.754439309799,\\\"profit\\\":\\\"$294,733,837.87\\\",\\\"profitPercent\\\":\\\"5.89%\\\",\\\"shares\\\":1200263,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 7:04:09 AM\\\",\\\"symbol\\\":\\\"CTYS\\\",\\\"price\\\":1494.0939445404404,\\\"averagePurchasePrice\\\":1713.300926113259,\\\"profit\\\":\\\"$639,721,160.22\\\",\\\"profitPercent\\\":\\\"12.79%\\\",\\\"shares\\\":2918343,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 7:05:32 AM\\\",\\\"symbol\\\":\\\"BLD\\\",\\\"price\\\":20045.961548365955,\\\"averagePurchasePrice\\\":20527.26606211934,\\\"profit\\\":\\\"$117,235,190.85\\\",\\\"profitPercent\\\":\\\"2.34%\\\",\\\"shares\\\":243578,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 7:05:57 AM\\\",\\\"symbol\\\":\\\"TITN\\\",\\\"price\\\":25011.276182093712,\\\"averagePurchasePrice\\\":25021.082012720857,\\\"profit\\\":\\\"$1,959,508.94\\\",\\\"profitPercent\\\":\\\"0.04%\\\",\\\"shares\\\":199831,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 7:06:05 AM\\\",\\\"symbol\\\":\\\"NTLK\\\",\\\"price\\\":1340629.7366141877,\\\"averagePurchasePrice\\\":1463555.8081646676,\\\"profit\\\":\\\"-$419,915,460.42\\\",\\\"profitPercent\\\":\\\"-8.40%\\\",\\\"shares\\\":3416,\\\"type\\\":\\\"Short-Term Long Sale\\\"},{\\\"date\\\":\\\"7/29/2023, 7:06:38 AM\\\",\\\"symbol\\\":\\\"SLRS\\\",\\\"price\\\":22575.85957659809,\\\"averagePurchasePrice\\\":23033.314053121256,\\\"profit\\\":\\\"-$99,302,845.40\\\",\\\"profitPercent\\\":\\\"-1.99%\\\",\\\"shares\\\":217077,\\\"type\\\":\\\"Short-Term Long Sale\\\"},{\\\"date\\\":\\\"7/29/2023, 7:06:51 AM\\\",\\\"symbol\\\":\\\"ECP\\\",\\\"price\\\":18351.288018557425,\\\"averagePurchasePrice\\\":18291.456839335882,\\\"profit\\\":\\\"$16,354,972.50\\\",\\\"profitPercent\\\":\\\"0.33%\\\",\\\"shares\\\":273352,\\\"type\\\":\\\"Short-Term Long Sale\\\"},{\\\"date\\\":\\\"7/29/2023, 7:07:32 AM\\\",\\\"symbol\\\":\\\"KGI\\\",\\\"price\\\":9002.696146725346,\\\"averagePurchasePrice\\\":9249.615484284504,\\\"profit\\\":\\\"-$133,475,457.87\\\",\\\"profitPercent\\\":\\\"-2.67%\\\",\\\"shares\\\":540563,\\\"type\\\":\\\"Short-Term Long Sale\\\"},{\\\"date\\\":\\\"7/29/2023, 7:08:01 AM\\\",\\\"symbol\\\":\\\"CTYS\\\",\\\"price\\\":1294.8022140384967,\\\"averagePurchasePrice\\\":1283.366625348357,\\\"profit\\\":\\\"-$44,553,087.84\\\",\\\"profitPercent\\\":\\\"-0.89%\\\",\\\"shares\\\":3896003,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 7:08:22 AM\\\",\\\"symbol\\\":\\\"OMTK\\\",\\\"price\\\":51376.740577847886,\\\"averagePurchasePrice\\\":51254.45914346176,\\\"profit\\\":\\\"-$11,817,522.38\\\",\\\"profitPercent\\\":\\\"-0.24%\\\",\\\"shares\\\":96642,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 7:08:22 AM\\\",\\\"symbol\\\":\\\"FLCM\\\",\\\"price\\\":2373.138470518349,\\\"averagePurchasePrice\\\":2644.522771692473,\\\"profit\\\":\\\"$513,106,298.23\\\",\\\"profitPercent\\\":\\\"10.26%\\\",\\\"shares\\\":1890700,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 7:08:34 AM\\\",\\\"symbol\\\":\\\"FSIG\\\",\\\"price\\\":12183.633719844747,\\\"averagePurchasePrice\\\":10681.196823804794,\\\"profit\\\":\\\"$703,308,740.28\\\",\\\"profitPercent\\\":\\\"14.07%\\\",\\\"shares\\\":468112,\\\"type\\\":\\\"Short-Term Long Sale\\\"},{\\\"date\\\":\\\"7/29/2023, 7:09:16 AM\\\",\\\"symbol\\\":\\\"OMN\\\",\\\"price\\\":17860.807537303324,\\\"averagePurchasePrice\\\":17476.547284406326,\\\"profit\\\":\\\"-$109,936,089.83\\\",\\\"profitPercent\\\":\\\"-2.20%\\\",\\\"shares\\\":286098,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 7:09:24 AM\\\",\\\"symbol\\\":\\\"FNS\\\",\\\"price\\\":2702.1979222199225,\\\"averagePurchasePrice\\\":2801.296469999245,\\\"profit\\\":\\\"-$176,879,808.75\\\",\\\"profitPercent\\\":\\\"-3.54%\\\",\\\"shares\\\":1784888,\\\"type\\\":\\\"Short-Term Long Sale\\\"},{\\\"date\\\":\\\"7/29/2023, 7:09:49 AM\\\",\\\"symbol\\\":\\\"CTYS\\\",\\\"price\\\":1387.6631333195867,\\\"averagePurchasePrice\\\":1448.6039210425806,\\\"profit\\\":\\\"-$210,343,161.96\\\",\\\"profitPercent\\\":\\\"-4.21%\\\",\\\"shares\\\":3451599,\\\"type\\\":\\\"Short-Term Long Sale\\\"},{\\\"date\\\":\\\"7/29/2023, 7:10:26 AM\\\",\\\"symbol\\\":\\\"GPH\\\",\\\"price\\\":15706.7632761,\\\"averagePurchasePrice\\\":15811.51999657973,\\\"profit\\\":\\\"-$33,126,693.93\\\",\\\"profitPercent\\\":\\\"-0.66%\\\",\\\"shares\\\":316225,\\\"type\\\":\\\"Short-Term Long Sale\\\"},{\\\"date\\\":\\\"7/29/2023, 7:10:26 AM\\\",\\\"symbol\\\":\\\"CTK\\\",\\\"price\\\":2949.2154610840794,\\\"averagePurchasePrice\\\":3080.807522563811,\\\"profit\\\":\\\"-$213,567,467.77\\\",\\\"profitPercent\\\":\\\"-4.27%\\\",\\\"shares\\\":1622951,\\\"type\\\":\\\"Short-Term Long Sale\\\"},{\\\"date\\\":\\\"7/29/2023, 7:11:10 AM\\\",\\\"symbol\\\":\\\"KGI\\\",\\\"price\\\":9414.00949764077,\\\"averagePurchasePrice\\\":9384.105978118281,\\\"profit\\\":\\\"$15,933,073.66\\\",\\\"profitPercent\\\":\\\"0.32%\\\",\\\"shares\\\":532816,\\\"type\\\":\\\"Short-Term Long Sale\\\"},{\\\"date\\\":\\\"7/29/2023, 7:11:10 AM\\\",\\\"symbol\\\":\\\"SLRS\\\",\\\"price\\\":23773.271294754337,\\\"averagePurchasePrice\\\":23073.70923035208,\\\"profit\\\":\\\"-$151,593,000.67\\\",\\\"profitPercent\\\":\\\"-3.03%\\\",\\\"shares\\\":216697,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 7:13:14 AM\\\",\\\"symbol\\\":\\\"CLRK\\\",\\\"price\\\":11919.459448230606,\\\"averagePurchasePrice\\\":12197.1756641264,\\\"profit\\\":\\\"$113,844,486.10\\\",\\\"profitPercent\\\":\\\"2.28%\\\",\\\"shares\\\":409931,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 7:13:19 AM\\\",\\\"symbol\\\":\\\"ECP\\\",\\\"price\\\":19919.03473334222,\\\"averagePurchasePrice\\\":19723.61668970678,\\\"profit\\\":\\\"$49,539,060.32\\\",\\\"profitPercent\\\":\\\"0.99%\\\",\\\"shares\\\":253503,\\\"type\\\":\\\"Short-Term Long Sale\\\"},{\\\"date\\\":\\\"7/29/2023, 7:13:31 AM\\\",\\\"symbol\\\":\\\"DCOMM\\\",\\\"price\\\":7946.038782232179,\\\"averagePurchasePrice\\\":8101.040283555671,\\\"profit\\\":\\\"$95,667,701.62\\\",\\\"profitPercent\\\":\\\"1.91%\\\",\\\"shares\\\":617205,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 7:13:56 AM\\\",\\\"symbol\\\":\\\"MGCP\\\",\\\"price\\\":3794.059901419415,\\\"averagePurchasePrice\\\":3750.716389764961,\\\"profit\\\":\\\"-$57,780,325.17\\\",\\\"profitPercent\\\":\\\"-1.16%\\\",\\\"shares\\\":1333079,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 7:14:12 AM\\\",\\\"symbol\\\":\\\"JGN\\\",\\\"price\\\":4222.066756070122,\\\"averagePurchasePrice\\\":3426.1637461637274,\\\"profit\\\":\\\"$1,161,507,424.73\\\",\\\"profitPercent\\\":\\\"23.23%\\\",\\\"shares\\\":1459358,\\\"type\\\":\\\"Short-Term Long Sale\\\"},{\\\"date\\\":\\\"7/29/2023, 7:14:21 AM\\\",\\\"symbol\\\":\\\"KGI\\\",\\\"price\\\":9861.87084680037,\\\"averagePurchasePrice\\\":9774.05869758059,\\\"profit\\\":\\\"$44,921,007.43\\\",\\\"profitPercent\\\":\\\"0.90%\\\",\\\"shares\\\":511558,\\\"type\\\":\\\"Short-Term Long Sale\\\"},{\\\"date\\\":\\\"7/29/2023, 7:15:02 AM\\\",\\\"symbol\\\":\\\"WDS\\\",\\\"price\\\":1092.068626703536,\\\"averagePurchasePrice\\\":1147.3093702199608,\\\"profit\\\":\\\"$240,740,375.54\\\",\\\"profitPercent\\\":\\\"4.81%\\\",\\\"shares\\\":4358022,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 7:15:07 AM\\\",\\\"symbol\\\":\\\"CTK\\\",\\\"price\\\":2784.1101907820826,\\\"averagePurchasePrice\\\":2680.13980223607,\\\"profit\\\":\\\"-$193,964,453.64\\\",\\\"profitPercent\\\":\\\"-3.88%\\\",\\\"shares\\\":1865574,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 7:16:21 AM\\\",\\\"symbol\\\":\\\"DCOMM\\\",\\\"price\\\":7526.205031023017,\\\"averagePurchasePrice\\\":7442.002257242285,\\\"profit\\\":\\\"-$56,572,644.00\\\",\\\"profitPercent\\\":\\\"-1.13%\\\",\\\"shares\\\":671862,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 7:16:26 AM\\\",\\\"symbol\\\":\\\"STM\\\",\\\"price\\\":95751.39782525541,\\\"averagePurchasePrice\\\":95987.98201009227,\\\"profit\\\":\\\"$12,323,670.19\\\",\\\"profitPercent\\\":\\\"0.25%\\\",\\\"shares\\\":52090,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 7:17:34 AM\\\",\\\"symbol\\\":\\\"VITA\\\",\\\"price\\\":16958.683084689575,\\\"averagePurchasePrice\\\":16601.918814054567,\\\"profit\\\":\\\"-$107,446,695.39\\\",\\\"profitPercent\\\":\\\"-2.15%\\\",\\\"shares\\\":301170,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 7:17:43 AM\\\",\\\"symbol\\\":\\\"HLS\\\",\\\"price\\\":4461.745744143555,\\\"averagePurchasePrice\\\":4424.670058236401,\\\"profit\\\":\\\"-$41,896,563.19\\\",\\\"profitPercent\\\":\\\"-0.84%\\\",\\\"shares\\\":1130028,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 7:17:51 AM\\\",\\\"symbol\\\":\\\"FSIG\\\",\\\"price\\\":14923.418106608528,\\\"averagePurchasePrice\\\":15217.560752311914,\\\"profit\\\":\\\"-$96,645,860.81\\\",\\\"profitPercent\\\":\\\"-1.93%\\\",\\\"shares\\\":328568,\\\"type\\\":\\\"Short-Term Long Sale\\\"},{\\\"date\\\":\\\"7/29/2023, 7:18:03 AM\\\",\\\"symbol\\\":\\\"MGCP\\\",\\\"price\\\":4051.260267175968,\\\"averagePurchasePrice\\\":3854.200720603,\\\"profit\\\":\\\"$255,642,590.94\\\",\\\"profitPercent\\\":\\\"5.11%\\\",\\\"shares\\\":1297286,\\\"type\\\":\\\"Short-Term Long Sale\\\"},{\\\"date\\\":\\\"7/29/2023, 7:20:16 AM\\\",\\\"symbol\\\":\\\"MGCP\\\",\\\"price\\\":4173.3527400492885,\\\"averagePurchasePrice\\\":4170.79746915074,\\\"profit\\\":\\\"$3,063,289.42\\\",\\\"profitPercent\\\":\\\"0.06%\\\",\\\"shares\\\":1198812,\\\"type\\\":\\\"Short-Term Long Sale\\\"},{\\\"date\\\":\\\"7/29/2023, 7:20:33 AM\\\",\\\"symbol\\\":\\\"HLS\\\",\\\"price\\\":4378.8999579407,\\\"averagePurchasePrice\\\":4258.306438782964,\\\"profit\\\":\\\"-$141,598,015.95\\\",\\\"profitPercent\\\":\\\"-2.83%\\\",\\\"shares\\\":1174176,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 7:20:50 AM\\\",\\\"symbol\\\":\\\"VITA\\\",\\\"price\\\":17877.54594676976,\\\"averagePurchasePrice\\\":17455.71724803055,\\\"profit\\\":\\\"$120,828,190.64\\\",\\\"profitPercent\\\":\\\"2.42%\\\",\\\"shares\\\":286439,\\\"type\\\":\\\"Short-Term Long Sale\\\"},{\\\"date\\\":\\\"7/29/2023, 7:21:37 AM\\\",\\\"symbol\\\":\\\"FLCM\\\",\\\"price\\\":2131.8812881609665,\\\"averagePurchasePrice\\\":2167.973444894107,\\\"profit\\\":\\\"$83,239,377.17\\\",\\\"profitPercent\\\":\\\"1.66%\\\",\\\"shares\\\":2306301,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 7:21:44 AM\\\",\\\"symbol\\\":\\\"SYSC\\\",\\\"price\\\":5640.85150442857,\\\"averagePurchasePrice\\\":5317.216936121455,\\\"profit\\\":\\\"-$304,327,177.23\\\",\\\"profitPercent\\\":\\\"-6.09%\\\",\\\"shares\\\":940342,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 7:22:42 AM\\\",\\\"symbol\\\":\\\"MGCP\\\",\\\"price\\\":4262.019638704123,\\\"averagePurchasePrice\\\":4272.117123453791,\\\"profit\\\":\\\"-$11,850,549.47\\\",\\\"profitPercent\\\":\\\"-0.24%\\\",\\\"shares\\\":1173614,\\\"type\\\":\\\"Short-Term Long Sale\\\"},{\\\"date\\\":\\\"7/29/2023, 7:22:46 AM\\\",\\\"symbol\\\":\\\"AERO\\\",\\\"price\\\":19737.165298613003,\\\"averagePurchasePrice\\\":19134.781772938346,\\\"profit\\\":\\\"-$157,405,224.79\\\",\\\"profitPercent\\\":\\\"-3.15%\\\",\\\"shares\\\":261304,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 7:22:46 AM\\\",\\\"symbol\\\":\\\"CTK\\\",\\\"price\\\":3123.838521113541,\\\"averagePurchasePrice\\\":3077.6682239793968,\\\"profit\\\":\\\"$75,008,587.92\\\",\\\"profitPercent\\\":\\\"1.50%\\\",\\\"shares\\\":1624607,\\\"type\\\":\\\"Short-Term Long Sale\\\"},{\\\"date\\\":\\\"7/29/2023, 7:23:21 AM\\\",\\\"symbol\\\":\\\"FSIG\\\",\\\"price\\\":18407.562258946426,\\\"averagePurchasePrice\\\":17218.271189574756,\\\"profit\\\":\\\"$345,357,044.34\\\",\\\"profitPercent\\\":\\\"6.91%\\\",\\\"shares\\\":290389,\\\"type\\\":\\\"Short-Term Long Sale\\\"},{\\\"date\\\":\\\"7/29/2023, 7:24:40 AM\\\",\\\"symbol\\\":\\\"OMGA\\\",\\\"price\\\":9807.164265400506,\\\"averagePurchasePrice\\\":9663.406827146508,\\\"profit\\\":\\\"-$74,382,398.67\\\",\\\"profitPercent\\\":\\\"-1.49%\\\",\\\"shares\\\":517416,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 7:24:53 AM\\\",\\\"symbol\\\":\\\"ICRS\\\",\\\"price\\\":18501.06727344763,\\\"averagePurchasePrice\\\":18782.721423301267,\\\"profit\\\":\\\"-$74,976,898.00\\\",\\\"profitPercent\\\":\\\"-1.50%\\\",\\\"shares\\\":266202,\\\"type\\\":\\\"Short-Term Long Sale\\\"},{\\\"date\\\":\\\"7/29/2023, 7:25:26 AM\\\",\\\"symbol\\\":\\\"MGCP\\\",\\\"price\\\":4381.927437821907,\\\"averagePurchasePrice\\\":4442.528751429758,\\\"profit\\\":\\\"-$68,205,869.45\\\",\\\"profitPercent\\\":\\\"-1.36%\\\",\\\"shares\\\":1125485,\\\"type\\\":\\\"Short-Term Long Sale\\\"},{\\\"date\\\":\\\"7/29/2023, 7:25:30 AM\\\",\\\"symbol\\\":\\\"BLD\\\",\\\"price\\\":20169.760209451895,\\\"averagePurchasePrice\\\":19643.379164105492,\\\"profit\\\":\\\"-$133,984,504.90\\\",\\\"profitPercent\\\":\\\"-2.68%\\\",\\\"shares\\\":254539,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 7:25:34 AM\\\",\\\"symbol\\\":\\\"FSIG\\\",\\\"price\\\":20186.669340420096,\\\"averagePurchasePrice\\\":20064.318355764222,\\\"profit\\\":\\\"$30,489,743.03\\\",\\\"profitPercent\\\":\\\"0.61%\\\",\\\"shares\\\":249199,\\\"type\\\":\\\"Short-Term Long Sale\\\"},{\\\"date\\\":\\\"7/29/2023, 7:25:57 AM\\\",\\\"symbol\\\":\\\"DCOMM\\\",\\\"price\\\":7452.815705793606,\\\"averagePurchasePrice\\\":7425.209419421768,\\\"profit\\\":\\\"-$18,589,576.33\\\",\\\"profitPercent\\\":\\\"-0.37%\\\",\\\"shares\\\":673382,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 7:27:12 AM\\\",\\\"symbol\\\":\\\"TITN\\\",\\\"price\\\":24768.149308749697,\\\"averagePurchasePrice\\\":24179.75459667797,\\\"profit\\\":\\\"-$121,671,200.54\\\",\\\"profitPercent\\\":\\\"-2.43%\\\",\\\"shares\\\":206785,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 7:27:29 AM\\\",\\\"symbol\\\":\\\"SLRS\\\",\\\"price\\\":23902.79107117868,\\\"averagePurchasePrice\\\":23246.428598772272,\\\"profit\\\":\\\"-$141,175,035.10\\\",\\\"profitPercent\\\":\\\"-2.82%\\\",\\\"shares\\\":215087,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 7:27:45 AM\\\",\\\"symbol\\\":\\\"WDS\\\",\\\"price\\\":956.8546064060833,\\\"averagePurchasePrice\\\":917.258455873874,\\\"profit\\\":\\\"-$215,839,646.05\\\",\\\"profitPercent\\\":\\\"-4.32%\\\",\\\"shares\\\":5451026,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 7:28:14 AM\\\",\\\"symbol\\\":\\\"RHOC\\\",\\\"price\\\":1207.3351200174739,\\\"averagePurchasePrice\\\":1216.705306627149,\\\"profit\\\":\\\"$38,506,397.69\\\",\\\"profitPercent\\\":\\\"0.77%\\\",\\\"shares\\\":4109459,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 7:28:31 AM\\\",\\\"symbol\\\":\\\"ECP\\\",\\\"price\\\":20320.61375981165,\\\"averagePurchasePrice\\\":20230.504392989445,\\\"profit\\\":\\\"$22,270,710.23\\\",\\\"profitPercent\\\":\\\"0.45%\\\",\\\"shares\\\":247152,\\\"type\\\":\\\"Short-Term Long Sale\\\"},{\\\"date\\\":\\\"7/29/2023, 7:28:56 AM\\\",\\\"symbol\\\":\\\"FSIG\\\",\\\"price\\\":21578.76324300399,\\\"averagePurchasePrice\\\":22582.79815717215,\\\"profit\\\":\\\"-$222,300,358.24\\\",\\\"profitPercent\\\":\\\"-4.45%\\\",\\\"shares\\\":221407,\\\"type\\\":\\\"Short-Term Long Sale\\\"},{\\\"date\\\":\\\"7/29/2023, 7:29:02 AM\\\",\\\"symbol\\\":\\\"OMTK\\\",\\\"price\\\":49257.59128783567,\\\"averagePurchasePrice\\\":49501.67536333195,\\\"profit\\\":\\\"$24,654,200.21\\\",\\\"profitPercent\\\":\\\"0.49%\\\",\\\"shares\\\":101007,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 7:29:04 AM\\\",\\\"symbol\\\":\\\"STM\\\",\\\"price\\\":105476.43649508181,\\\"averagePurchasePrice\\\":104541.22947586255,\\\"profit\\\":\\\"$44,729,081.32\\\",\\\"profitPercent\\\":\\\"0.89%\\\",\\\"shares\\\":47828,\\\"type\\\":\\\"Short-Term Long Sale\\\"},{\\\"date\\\":\\\"7/29/2023, 7:29:37 AM\\\",\\\"symbol\\\":\\\"BLD\\\",\\\"price\\\":19192.48732848937,\\\"averagePurchasePrice\\\":19374.396577791325,\\\"profit\\\":\\\"$46,945,865.70\\\",\\\"profitPercent\\\":\\\"0.94%\\\",\\\"shares\\\":258073,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 7:30:52 AM\\\",\\\"symbol\\\":\\\"OMGA\\\",\\\"price\\\":9603.092512876696,\\\"averagePurchasePrice\\\":9547.077356412701,\\\"profit\\\":\\\"$29,336,257.74\\\",\\\"profitPercent\\\":\\\"0.59%\\\",\\\"shares\\\":523720,\\\"type\\\":\\\"Short-Term Long Sale\\\"},{\\\"date\\\":\\\"7/29/2023, 7:31:00 AM\\\",\\\"symbol\\\":\\\"WDS\\\",\\\"price\\\":950.7509582215777,\\\"averagePurchasePrice\\\":891.9518929022818,\\\"profit\\\":\\\"-$329,608,920.88\\\",\\\"profitPercent\\\":\\\"-6.59%\\\",\\\"shares\\\":5605683,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 7:31:38 AM\\\",\\\"symbol\\\":\\\"CLRK\\\",\\\"price\\\":10578.37766624309,\\\"averagePurchasePrice\\\":10516.884309789213,\\\"profit\\\":\\\"$29,235,540.49\\\",\\\"profitPercent\\\":\\\"0.58%\\\",\\\"shares\\\":475426,\\\"type\\\":\\\"Short-Term Long Sale\\\"},{\\\"date\\\":\\\"7/29/2023, 7:32:03 AM\\\",\\\"symbol\\\":\\\"UNV\\\",\\\"price\\\":15759.339231159485,\\\"averagePurchasePrice\\\":16001.580480721246,\\\"profit\\\":\\\"$75,692,881.01\\\",\\\"profitPercent\\\":\\\"1.51%\\\",\\\"shares\\\":312469,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 7:32:15 AM\\\",\\\"symbol\\\":\\\"FLCM\\\",\\\"price\\\":1833.8535724614892,\\\"averagePurchasePrice\\\":1930.2363923879682,\\\"profit\\\":\\\"$249,665,815.89\\\",\\\"profitPercent\\\":\\\"4.99%\\\",\\\"shares\\\":2590356,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 7:32:23 AM\\\",\\\"symbol\\\":\\\"KGI\\\",\\\"price\\\":9943.610495744342,\\\"averagePurchasePrice\\\":9939.168221801348,\\\"profit\\\":\\\"$2,234,730.33\\\",\\\"profitPercent\\\":\\\"0.04%\\\",\\\"shares\\\":503060,\\\"type\\\":\\\"Short-Term Long Sale\\\"},{\\\"date\\\":\\\"7/29/2023, 7:33:05 AM\\\",\\\"symbol\\\":\\\"MGCP\\\",\\\"price\\\":4620.7764344573625,\\\"averagePurchasePrice\\\":4533.661509270263,\\\"profit\\\":\\\"$96,075,653.51\\\",\\\"profitPercent\\\":\\\"1.92%\\\",\\\"shares\\\":1102861,\\\"type\\\":\\\"Short-Term Long Sale\\\"},{\\\"date\\\":\\\"7/29/2023, 7:33:09 AM\\\",\\\"symbol\\\":\\\"MDYN\\\",\\\"price\\\":6406.69962417525,\\\"averagePurchasePrice\\\":6463.795717303647,\\\"profit\\\":\\\"-$44,166,054.78\\\",\\\"profitPercent\\\":\\\"-0.88%\\\",\\\"shares\\\":773539,\\\"type\\\":\\\"Short-Term Long Sale\\\"},{\\\"date\\\":\\\"7/29/2023, 7:33:26 AM\\\",\\\"symbol\\\":\\\"CTK\\\",\\\"price\\\":3455.1594261865457,\\\"averagePurchasePrice\\\":3550.237639813463,\\\"profit\\\":\\\"-$133,903,972.63\\\",\\\"profitPercent\\\":\\\"-2.68%\\\",\\\"shares\\\":1408356,\\\"type\\\":\\\"Short-Term Long Sale\\\"},{\\\"date\\\":\\\"7/29/2023, 7:34:07 AM\\\",\\\"symbol\\\":\\\"LXO\\\",\\\"price\\\":5462.020064418174,\\\"averagePurchasePrice\\\":5483.070136156354,\\\"profit\\\":\\\"-$19,195,518.32\\\",\\\"profitPercent\\\":\\\"-0.38%\\\",\\\"shares\\\":911898,\\\"type\\\":\\\"Short-Term Long Sale\\\"},{\\\"date\\\":\\\"7/29/2023, 7:34:16 AM\\\",\\\"symbol\\\":\\\"FSIG\\\",\\\"price\\\":25758.304085689095,\\\"averagePurchasePrice\\\":25149.199383451054,\\\"profit\\\":\\\"$121,097,933.17\\\",\\\"profitPercent\\\":\\\"2.42%\\\",\\\"shares\\\":198813,\\\"type\\\":\\\"Short-Term Long Sale\\\"},{\\\"date\\\":\\\"7/29/2023, 7:34:36 AM\\\",\\\"symbol\\\":\\\"TITN\\\",\\\"price\\\":25419.100101855252,\\\"averagePurchasePrice\\\":25673.695623184867,\\\"profit\\\":\\\"-$49,582,986.97\\\",\\\"profitPercent\\\":\\\"-0.99%\\\",\\\"shares\\\":194752,\\\"type\\\":\\\"Short-Term Long Sale\\\"},{\\\"date\\\":\\\"7/29/2023, 7:35:22 AM\\\",\\\"symbol\\\":\\\"CTYS\\\",\\\"price\\\":1596.7705485085512,\\\"averagePurchasePrice\\\":1673.439584490252,\\\"profit\\\":\\\"-$229,076,192.51\\\",\\\"profitPercent\\\":\\\"-4.58%\\\",\\\"shares\\\":2987858,\\\"type\\\":\\\"Short-Term Long Sale\\\"},{\\\"date\\\":\\\"7/29/2023, 7:35:53 AM\\\",\\\"symbol\\\":\\\"ECP\\\",\\\"price\\\":21766.228063712228,\\\"averagePurchasePrice\\\":21318.747255915347,\\\"profit\\\":\\\"$104,949,911.26\\\",\\\"profitPercent\\\":\\\"2.10%\\\",\\\"shares\\\":234535,\\\"type\\\":\\\"Short-Term Long Sale\\\"},{\\\"date\\\":\\\"7/29/2023, 7:36:16 AM\\\",\\\"symbol\\\":\\\"STM\\\",\\\"price\\\":111676.51146893599,\\\"averagePurchasePrice\\\":113248.16773568447,\\\"profit\\\":\\\"-$69,390,195.83\\\",\\\"profitPercent\\\":\\\"-1.39%\\\",\\\"shares\\\":44151,\\\"type\\\":\\\"Short-Term Long Sale\\\"},{\\\"date\\\":\\\"7/29/2023, 7:36:16 AM\\\",\\\"symbol\\\":\\\"FNS\\\",\\\"price\\\":2845.6758451437263,\\\"averagePurchasePrice\\\":2827.819871204379,\\\"profit\\\":\\\"-$31,571,986.75\\\",\\\"profitPercent\\\":\\\"-0.63%\\\",\\\"shares\\\":1768147,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 7:36:37 AM\\\",\\\"symbol\\\":\\\"NTLK\\\",\\\"price\\\":1775390.4837199093,\\\"averagePurchasePrice\\\":1530088.3474410477,\\\"profit\\\":\\\"$801,647,381.36\\\",\\\"profitPercent\\\":\\\"16.03%\\\",\\\"shares\\\":3268,\\\"type\\\":\\\"Short-Term Long Sale\\\"},{\\\"date\\\":\\\"7/29/2023, 7:38:23 AM\\\",\\\"symbol\\\":\\\"WDS\\\",\\\"price\\\":740.7878898850076,\\\"averagePurchasePrice\\\":721.2212374222183,\\\"profit\\\":\\\"-$135,649,438.03\\\",\\\"profitPercent\\\":\\\"-2.71%\\\",\\\"shares\\\":6932685,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 7:38:39 AM\\\",\\\"symbol\\\":\\\"CLRK\\\",\\\"price\\\":10042.325513027534,\\\"averagePurchasePrice\\\":10374.475326297648,\\\"profit\\\":\\\"$160,080,266.81\\\",\\\"profitPercent\\\":\\\"3.20%\\\",\\\"shares\\\":481952,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 7:38:39 AM\\\",\\\"symbol\\\":\\\"VITA\\\",\\\"price\\\":15754.64037840871,\\\"averagePurchasePrice\\\":16069.698559070057,\\\"profit\\\":\\\"$98,028,777.62\\\",\\\"profitPercent\\\":\\\"1.96%\\\",\\\"shares\\\":311145,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 7:38:56 AM\\\",\\\"symbol\\\":\\\"RHOC\\\",\\\"price\\\":1105.6809264971832,\\\"averagePurchasePrice\\\":1121.472839504198,\\\"profit\\\":\\\"$70,407,028.16\\\",\\\"profitPercent\\\":\\\"1.41%\\\",\\\"shares\\\":4458423,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 7:39:25 AM\\\",\\\"symbol\\\":\\\"MDYN\\\",\\\"price\\\":5759.893893684305,\\\"averagePurchasePrice\\\":5714.381912214552,\\\"profit\\\":\\\"-$39,822,301.11\\\",\\\"profitPercent\\\":\\\"-0.80%\\\",\\\"shares\\\":874985,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 7:39:38 AM\\\",\\\"symbol\\\":\\\"FLCM\\\",\\\"price\\\":1568.6420448846825,\\\"averagePurchasePrice\\\":1494.4057460285399,\\\"profit\\\":\\\"-$98,198,959.53\\\",\\\"profitPercent\\\":\\\"-4.97%\\\",\\\"shares\\\":1322789,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 7:40:11 AM\\\",\\\"symbol\\\":\\\"OMGA\\\",\\\"price\\\":10235.83315147667,\\\"averagePurchasePrice\\\":10249.029703625101,\\\"profit\\\":\\\"-$6,437,951.16\\\",\\\"profitPercent\\\":\\\"-0.13%\\\",\\\"shares\\\":487851,\\\"type\\\":\\\"Short-Term Long Sale\\\"},{\\\"date\\\":\\\"7/29/2023, 7:41:01 AM\\\",\\\"symbol\\\":\\\"DCOMM\\\",\\\"price\\\":7291.72204042567,\\\"averagePurchasePrice\\\":7317.277955802275,\\\"profit\\\":\\\"-$17,462,714.76\\\",\\\"profitPercent\\\":\\\"-0.35%\\\",\\\"shares\\\":683314,\\\"type\\\":\\\"Short-Term Long Sale\\\"},{\\\"date\\\":\\\"7/29/2023, 7:41:17 AM\\\",\\\"symbol\\\":\\\"MGCP\\\",\\\"price\\\":4282.253171776087,\\\"averagePurchasePrice\\\":4279.225959625811,\\\"profit\\\":\\\"-$3,537,103.66\\\",\\\"profitPercent\\\":\\\"-0.07%\\\",\\\"shares\\\":1168436,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 7:41:46 AM\\\",\\\"symbol\\\":\\\"NTLK\\\",\\\"price\\\":2229576.1822931976,\\\"averagePurchasePrice\\\":2301355.3461253517,\\\"profit\\\":\\\"-$155,976,123.01\\\",\\\"profitPercent\\\":\\\"-3.12%\\\",\\\"shares\\\":2173,\\\"type\\\":\\\"Short-Term Long Sale\\\"},{\\\"date\\\":\\\"7/29/2023, 7:41:59 AM\\\",\\\"symbol\\\":\\\"TITN\\\",\\\"price\\\":27791.878131952028,\\\"averagePurchasePrice\\\":27601.22149774139,\\\"profit\\\":\\\"$34,537,639.94\\\",\\\"profitPercent\\\":\\\"0.69%\\\",\\\"shares\\\":181151,\\\"type\\\":\\\"Short-Term Long Sale\\\"},{\\\"date\\\":\\\"7/29/2023, 7:42:57 AM\\\",\\\"symbol\\\":\\\"FLCM\\\",\\\"price\\\":1798.405339653961,\\\"averagePurchasePrice\\\":1811.328033009075,\\\"profit\\\":\\\"-$35,671,880.27\\\",\\\"profitPercent\\\":\\\"-0.71%\\\",\\\"shares\\\":2760406,\\\"type\\\":\\\"Short-Term Long Sale\\\"},{\\\"date\\\":\\\"7/29/2023, 7:43:26 AM\\\",\\\"symbol\\\":\\\"FSIG\\\",\\\"price\\\":18249.312359013285,\\\"averagePurchasePrice\\\":19919.314721704814,\\\"profit\\\":\\\"$419,192,303.07\\\",\\\"profitPercent\\\":\\\"8.38%\\\",\\\"shares\\\":251013,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 7:43:43 AM\\\",\\\"symbol\\\":\\\"DCOMM\\\",\\\"price\\\":7877.042505205064,\\\"averagePurchasePrice\\\":7662.826222785733,\\\"profit\\\":\\\"$139,776,338.49\\\",\\\"profitPercent\\\":\\\"2.80%\\\",\\\"shares\\\":652501,\\\"type\\\":\\\"Short-Term Long Sale\\\"},{\\\"date\\\":\\\"7/29/2023, 7:44:32 AM\\\",\\\"symbol\\\":\\\"KGI\\\",\\\"price\\\":11599.79258541047,\\\"averagePurchasePrice\\\":11777.986545086727,\\\"profit\\\":\\\"-$75,647,077.96\\\",\\\"profitPercent\\\":\\\"-1.51%\\\",\\\"shares\\\":424521,\\\"type\\\":\\\"Short-Term Long Sale\\\"},{\\\"date\\\":\\\"7/29/2023, 7:44:53 AM\\\",\\\"symbol\\\":\\\"JGN\\\",\\\"price\\\":18262.995317543257,\\\"averagePurchasePrice\\\":9306.774317260086,\\\"profit\\\":\\\"$4,811,667,038.86\\\",\\\"profitPercent\\\":\\\"96.23%\\\",\\\"shares\\\":537243,\\\"type\\\":\\\"Short-Term Long Sale\\\"},{\\\"date\\\":\\\"7/29/2023, 7:45:51 AM\\\",\\\"symbol\\\":\\\"SGC\\\",\\\"price\\\":59182.358622300904,\\\"averagePurchasePrice\\\":64916.44332964485,\\\"profit\\\":\\\"$441,650,672.33\\\",\\\"profitPercent\\\":\\\"8.83%\\\",\\\"shares\\\":77022,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 7:46:20 AM\\\",\\\"symbol\\\":\\\"VITA\\\",\\\"price\\\":14457.484278211652,\\\"averagePurchasePrice\\\":14496.461696610395,\\\"profit\\\":\\\"$13,443,779.33\\\",\\\"profitPercent\\\":\\\"0.27%\\\",\\\"shares\\\":344912,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 7:46:20 AM\\\",\\\"symbol\\\":\\\"OMN\\\",\\\"price\\\":17161.906155081982,\\\"averagePurchasePrice\\\":16615.53839102669,\\\"profit\\\":\\\"-$164,414,626.66\\\",\\\"profitPercent\\\":\\\"-3.29%\\\",\\\"shares\\\":300923,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 7:46:37 AM\\\",\\\"symbol\\\":\\\"MDYN\\\",\\\"price\\\":5589.590994999011,\\\"averagePurchasePrice\\\":5694.470730013339,\\\"profit\\\":\\\"$92,089,126.93\\\",\\\"profitPercent\\\":\\\"1.84%\\\",\\\"shares\\\":878045,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 7:46:50 AM\\\",\\\"symbol\\\":\\\"NTLK\\\",\\\"price\\\":3128052.109064078,\\\"averagePurchasePrice\\\":2803516.344690744,\\\"profit\\\":\\\"$578,647,267.88\\\",\\\"profitPercent\\\":\\\"11.58%\\\",\\\"shares\\\":1783,\\\"type\\\":\\\"Short-Term Long Sale\\\"},{\\\"date\\\":\\\"7/29/2023, 7:46:58 AM\\\",\\\"symbol\\\":\\\"MGCP\\\",\\\"price\\\":3886.863296558449,\\\"averagePurchasePrice\\\":4035.3055479809605,\\\"profit\\\":\\\"$183,929,449.82\\\",\\\"profitPercent\\\":\\\"3.68%\\\",\\\"shares\\\":1239064,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 7:47:06 AM\\\",\\\"symbol\\\":\\\"OMTK\\\",\\\"price\\\":50597.488521527805,\\\"averagePurchasePrice\\\":51111.15320615092,\\\"profit\\\":\\\"-$50,249,761.44\\\",\\\"profitPercent\\\":\\\"-1.00%\\\",\\\"shares\\\":97826,\\\"type\\\":\\\"Short-Term Long Sale\\\"},{\\\"date\\\":\\\"7/29/2023, 7:47:31 AM\\\",\\\"symbol\\\":\\\"WDS\\\",\\\"price\\\":900.6912591085949,\\\"averagePurchasePrice\\\":967.2972106798586,\\\"profit\\\":\\\"-$344,288,961.12\\\",\\\"profitPercent\\\":\\\"-6.89%\\\",\\\"shares\\\":5169042,\\\"type\\\":\\\"Short-Term Long Sale\\\"},{\\\"date\\\":\\\"7/29/2023, 7:47:52 AM\\\",\\\"symbol\\\":\\\"ECP\\\",\\\"price\\\":23705.5220362316,\\\"averagePurchasePrice\\\":23783.772001978923,\\\"profit\\\":\\\"-$16,450,255.55\\\",\\\"profitPercent\\\":\\\"-0.33%\\\",\\\"shares\\\":210227,\\\"type\\\":\\\"Short-Term Long Sale\\\"},{\\\"date\\\":\\\"7/29/2023, 7:48:05 AM\\\",\\\"symbol\\\":\\\"UNV\\\",\\\"price\\\":15299.819890745965,\\\"averagePurchasePrice\\\":15002.167529018852,\\\"profit\\\":\\\"-$99,203,067.38\\\",\\\"profitPercent\\\":\\\"-1.98%\\\",\\\"shares\\\":333285,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 7:49:15 AM\\\",\\\"symbol\\\":\\\"SLRS\\\",\\\"price\\\":23905.433257391996,\\\"averagePurchasePrice\\\":24052.911455231788,\\\"profit\\\":\\\"-$30,657,030.38\\\",\\\"profitPercent\\\":\\\"-0.61%\\\",\\\"shares\\\":207875,\\\"type\\\":\\\"Short-Term Long Sale\\\"},{\\\"date\\\":\\\"7/29/2023, 7:49:32 AM\\\",\\\"symbol\\\":\\\"KGI\\\",\\\"price\\\":10130.453439516785,\\\"averagePurchasePrice\\\":10865.236215041581,\\\"profit\\\":\\\"$338,134,541.99\\\",\\\"profitPercent\\\":\\\"6.76%\\\",\\\"shares\\\":460183,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 7:49:34 AM\\\",\\\"symbol\\\":\\\"FSIG\\\",\\\"price\\\":19779.7978683381,\\\"averagePurchasePrice\\\":18958.17802720668,\\\"profit\\\":\\\"$216,692,373.66\\\",\\\"profitPercent\\\":\\\"4.33%\\\",\\\"shares\\\":263738,\\\"type\\\":\\\"Short-Term Long Sale\\\"},{\\\"date\\\":\\\"7/29/2023, 7:49:59 AM\\\",\\\"symbol\\\":\\\"FLCM\\\",\\\"price\\\":1734.6412807253464,\\\"averagePurchasePrice\\\":1691.690701303688,\\\"profit\\\":\\\"-$126,945,720.40\\\",\\\"profitPercent\\\":\\\"-2.54%\\\",\\\"shares\\\":2955623,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 7:49:59 AM\\\",\\\"symbol\\\":\\\"CTYS\\\",\\\"price\\\":1189.173129250491,\\\"averagePurchasePrice\\\":1168.1966163084778,\\\"profit\\\":\\\"-$89,781,594.02\\\",\\\"profitPercent\\\":\\\"-1.80%\\\",\\\"shares\\\":4280101,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 7:50:24 AM\\\",\\\"symbol\\\":\\\"MGCP\\\",\\\"price\\\":3665.4347489684656,\\\"averagePurchasePrice\\\":3814.0770749543344,\\\"profit\\\":\\\"$194,860,130.33\\\",\\\"profitPercent\\\":\\\"3.90%\\\",\\\"shares\\\":1310933,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 7:50:24 AM\\\",\\\"symbol\\\":\\\"CLRK\\\",\\\"price\\\":9117.156058840797,\\\"averagePurchasePrice\\\":9140.912053288428,\\\"profit\\\":\\\"$12,994,315.16\\\",\\\"profitPercent\\\":\\\"0.26%\\\",\\\"shares\\\":546991,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 7:50:24 AM\\\",\\\"symbol\\\":\\\"JGN\\\",\\\"price\\\":37873.81940683222,\\\"averagePurchasePrice\\\":25549.098556084515,\\\"profit\\\":\\\"$2,411,972,519.93\\\",\\\"profitPercent\\\":\\\"48.24%\\\",\\\"shares\\\":195702,\\\"type\\\":\\\"Short-Term Long Sale\\\"},{\\\"date\\\":\\\"7/29/2023, 7:50:49 AM\\\",\\\"symbol\\\":\\\"SYSC\\\",\\\"price\\\":5699.152060083715,\\\"averagePurchasePrice\\\":5882.834163837606,\\\"profit\\\":\\\"-$156,116,930.44\\\",\\\"profitPercent\\\":\\\"-3.12%\\\",\\\"shares\\\":849930,\\\"type\\\":\\\"Short-Term Long Sale\\\"},{\\\"date\\\":\\\"7/29/2023, 7:51:01 AM\\\",\\\"symbol\\\":\\\"UNV\\\",\\\"price\\\":15571.194621560522,\\\"averagePurchasePrice\\\":15567.067855085896,\\\"profit\\\":\\\"$1,325,480.25\\\",\\\"profitPercent\\\":\\\"0.03%\\\",\\\"shares\\\":321191,\\\"type\\\":\\\"Short-Term Long Sale\\\"},{\\\"date\\\":\\\"7/29/2023, 7:51:26 AM\\\",\\\"symbol\\\":\\\"FNS\\\",\\\"price\\\":2986.3455149549673,\\\"averagePurchasePrice\\\":2881.369103211286,\\\"profit\\\":\\\"-$182,164,097.63\\\",\\\"profitPercent\\\":\\\"-3.64%\\\",\\\"shares\\\":1735286,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 7:51:43 AM\\\",\\\"symbol\\\":\\\"FSIG\\\",\\\"price\\\":18245.495455742992,\\\"averagePurchasePrice\\\":18110.422326024494,\\\"profit\\\":\\\"-$37,291,529.95\\\",\\\"profitPercent\\\":\\\"-0.75%\\\",\\\"shares\\\":276084,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 7:51:51 AM\\\",\\\"symbol\\\":\\\"NTLK\\\",\\\"price\\\":2457245.2703527114,\\\"averagePurchasePrice\\\":2620976.4045500695,\\\"profit\\\":\\\"$312,399,004.05\\\",\\\"profitPercent\\\":\\\"6.25%\\\",\\\"shares\\\":1908,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 7:52:08 AM\\\",\\\"symbol\\\":\\\"SGC\\\",\\\"price\\\":61907.79183775624,\\\"averagePurchasePrice\\\":64884.70835120983,\\\"profit\\\":\\\"-$229,401,186.53\\\",\\\"profitPercent\\\":\\\"-4.59%\\\",\\\"shares\\\":77060,\\\"type\\\":\\\"Short-Term Long Sale\\\"},{\\\"date\\\":\\\"7/29/2023, 7:52:41 AM\\\",\\\"symbol\\\":\\\"SYSC\\\",\\\"price\\\":5483.64590564773,\\\"averagePurchasePrice\\\":5186.443135314621,\\\"profit\\\":\\\"-$286,518,925.15\\\",\\\"profitPercent\\\":\\\"-5.73%\\\",\\\"shares\\\":964052,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 7:53:39 AM\\\",\\\"symbol\\\":\\\"BLD\\\",\\\"price\\\":21134.851888249937,\\\"averagePurchasePrice\\\":20630.12225053581,\\\"profit\\\":\\\"$122,328,293.91\\\",\\\"profitPercent\\\":\\\"2.45%\\\",\\\"shares\\\":242364,\\\"type\\\":\\\"Short-Term Long Sale\\\"},{\\\"date\\\":\\\"7/29/2023, 7:53:43 AM\\\",\\\"symbol\\\":\\\"MDYN\\\",\\\"price\\\":5304.300972955854,\\\"averagePurchasePrice\\\":5335.299817760461,\\\"profit\\\":\\\"$29,050,691.40\\\",\\\"profitPercent\\\":\\\"0.58%\\\",\\\"shares\\\":937154,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 7:54:04 AM\\\",\\\"symbol\\\":\\\"GPH\\\",\\\"price\\\":14409.013058632545,\\\"averagePurchasePrice\\\":14040.649559080108,\\\"profit\\\":\\\"-$131,177,557.46\\\",\\\"profitPercent\\\":\\\"-2.62%\\\",\\\"shares\\\":356109,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 7:55:15 AM\\\",\\\"symbol\\\":\\\"CTYS\\\",\\\"price\\\":1112.8051982669656,\\\"averagePurchasePrice\\\":1071.9196279669961,\\\"profit\\\":\\\"-$189,268,545.06\\\",\\\"profitPercent\\\":\\\"-3.81%\\\",\\\"shares\\\":4629226,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 7:55:36 AM\\\",\\\"symbol\\\":\\\"ECP\\\",\\\"price\\\":22994.099056410083,\\\"averagePurchasePrice\\\":23198.785583315228,\\\"profit\\\":\\\"$44,115,882.46\\\",\\\"profitPercent\\\":\\\"0.88%\\\",\\\"shares\\\":215529,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 7:55:50 AM\\\",\\\"symbol\\\":\\\"WDS\\\",\\\"price\\\":873.958873363503,\\\"averagePurchasePrice\\\":906.4197551761462,\\\"profit\\\":\\\"-$170,920,500.92\\\",\\\"profitPercent\\\":\\\"-3.58%\\\",\\\"shares\\\":5265430,\\\"type\\\":\\\"Short-Term Long Sale\\\"},{\\\"date\\\":\\\"7/29/2023, 7:55:52 AM\\\",\\\"symbol\\\":\\\"RHOC\\\",\\\"price\\\":876.5999834813151,\\\"averagePurchasePrice\\\":905.2803373821394,\\\"profit\\\":\\\"$158,405,925.33\\\",\\\"profitPercent\\\":\\\"3.17%\\\",\\\"shares\\\":5523151,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 7:56:23 AM\\\",\\\"symbol\\\":\\\"FSIG\\\",\\\"price\\\":15003.415450289633,\\\"averagePurchasePrice\\\":17070.836896847726,\\\"profit\\\":\\\"$605,541,539.43\\\",\\\"profitPercent\\\":\\\"12.11%\\\",\\\"shares\\\":292897,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 7:56:23 AM\\\",\\\"symbol\\\":\\\"VITA\\\",\\\"price\\\":15347.483626169827,\\\"averagePurchasePrice\\\":14615.85075476033,\\\"profit\\\":\\\"$250,287,215.51\\\",\\\"profitPercent\\\":\\\"5.01%\\\",\\\"shares\\\":342094,\\\"type\\\":\\\"Short-Term Long Sale\\\"},{\\\"date\\\":\\\"7/29/2023, 7:57:40 AM\\\",\\\"symbol\\\":\\\"JGN\\\",\\\"price\\\":64566.18935099949,\\\"averagePurchasePrice\\\":61732.672626433065,\\\"profit\\\":\\\"$229,497,853.59\\\",\\\"profitPercent\\\":\\\"4.59%\\\",\\\"shares\\\":80994,\\\"type\\\":\\\"Short-Term Long Sale\\\"},{\\\"date\\\":\\\"7/29/2023, 7:58:05 AM\\\",\\\"symbol\\\":\\\"APHE\\\",\\\"price\\\":370.3484648527553,\\\"averagePurchasePrice\\\":369.3538212829493,\\\"profit\\\":\\\"-$9,648,042.63\\\",\\\"profitPercent\\\":\\\"-0.27%\\\",\\\"shares\\\":9700000,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 7:58:30 AM\\\",\\\"symbol\\\":\\\"OMTK\\\",\\\"price\\\":49786.31765292536,\\\"averagePurchasePrice\\\":49391.00801417194,\\\"profit\\\":\\\"-$40,018,380.66\\\",\\\"profitPercent\\\":\\\"-0.80%\\\",\\\"shares\\\":101233,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 7:58:47 AM\\\",\\\"symbol\\\":\\\"JGN\\\",\\\"price\\\":69071.67059435166,\\\"averagePurchasePrice\\\":76878.12514593943,\\\"profit\\\":\\\"-$507,716,191.13\\\",\\\"profitPercent\\\":\\\"-10.15%\\\",\\\"shares\\\":65038,\\\"type\\\":\\\"Short-Term Long Sale\\\"},{\\\"date\\\":\\\"7/29/2023, 7:59:29 AM\\\",\\\"symbol\\\":\\\"KGI\\\",\\\"price\\\":12429.768339738042,\\\"averagePurchasePrice\\\":12069.943762102228,\\\"profit\\\":\\\"$149,058,050.93\\\",\\\"profitPercent\\\":\\\"2.98%\\\",\\\"shares\\\":414252,\\\"type\\\":\\\"Short-Term Long Sale\\\"},{\\\"date\\\":\\\"7/29/2023, 7:59:49 AM\\\",\\\"symbol\\\":\\\"MGCP\\\",\\\"price\\\":3274.0235595587224,\\\"averagePurchasePrice\\\":3487.0095161024856,\\\"profit\\\":\\\"$305,399,072.19\\\",\\\"profitPercent\\\":\\\"6.11%\\\",\\\"shares\\\":1433893,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 7:59:58 AM\\\",\\\"symbol\\\":\\\"FLCM\\\",\\\"price\\\":1631.3260599022738,\\\"averagePurchasePrice\\\":1739.412718107726,\\\"profit\\\":\\\"$310,698,665.87\\\",\\\"profitPercent\\\":\\\"6.21%\\\",\\\"shares\\\":2874533,\\\"type\\\":\\\"Short-Term Cover Short\\\"},{\\\"date\\\":\\\"7/29/2023, 8:04:59 AM\\\",\\\"symbol\\\":\\\"SLRS\\\",\\\"price\\\":19343.849014081872,\\\"averagePurchasePrice\\\":20605.640068036195,\\\"profit\\\":\\\"$306,176,122.82\\\",\\\"profitPercent\\\":\\\"6.12%\\\",\\\"shares\\\":242652,\\\"type\\\":\\\"Short-Term Cover Short\\\",\\\"forecastAtSale\\\":0.6219923703677677},{\\\"date\\\":\\\"7/29/2023, 8:04:59 AM\\\",\\\"symbol\\\":\\\"JGN\\\",\\\"price\\\":61458.52727769141,\\\"averagePurchasePrice\\\":83987.3276326274,\\\"profit\\\":\\\"$305,422,946.41\\\",\\\"profitPercent\\\":\\\"26.82%\\\",\\\"shares\\\":13557,\\\"type\\\":\\\"Short-Term Cover Short\\\",\\\"forecastAtSale\\\":0.6536495547280613}]\"}}],[\"data/stockMarketReserveMoney.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"data/stockMarketReserveMoney.txt\",\"text\":\"{\\\"stockMarketReserveMoneyLimit\\\":1500000000000,\\\"capitalToReserveForTrading\\\":58996760175.16028,\\\"moneyInvested\\\":69399696887.26859,\\\"moneyRequested\\\":[[\\\"purchase-server\\\",36048938836.95105]],\\\"countOfVisitedWithoutFillingRequest\\\":38}\"}}],[\"data/contracts.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"data/contracts.txt\",\"text\":\"[{\\\"server\\\":\\\"iron-gym\\\",\\\"name\\\":\\\"contract-415259.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[9,-10,1,-6,-2,-10,-4,0,-7,4,-6],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 9,-10,1,-6,-2,-10,-4,0,-7,4,-6\\\"},{\\\"server\\\":\\\"darkweb\\\",\\\"name\\\":\\\"contract-866615.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":14,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 14 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"neo-net\\\",\\\"name\\\":\\\"contract-867240-CyberSec.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[1,2,-3,2,-9,0,-5,7,2,-7,-10,10,-3,2,7,-9,-8,10,-5,8,-6,-10,-8,-6,1,-9,-7,-9,-1,-3,2,9,2,4,4,-5,-2,-5],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 1,2,-3,2,-9,0,-5,7,2,-7,-10,10,-3,2,7,-9,-8,10,-5,8,-6,-10,-8,-6,1,-9,-7,-9,-1,-3,2,9,2,4,4,-5,-2,-5\\\"},{\\\"server\\\":\\\"omega-net\\\",\\\"name\\\":\\\"contract-187004-NWO.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"0010000010000000000000000101101001010110001001000001000011111110\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '0010000010000000000000000101101001010110001001000001000011111110' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"omega-net\\\",\\\"name\\\":\\\"contract-922467.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0],[0,0,0,0],[0,0,1,0],[1,0,0,0],[0,0,0,0],[0,0,0,1],[1,0,0,0],[0,0,1,0],[0,0,1,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,0,\\\\n0,0,0,0,\\\\n0,0,1,0,\\\\n1,0,0,0,\\\\n0,0,0,0,\\\\n0,0,0,1,\\\\n1,0,0,0,\\\\n0,0,1,0,\\\\n0,0,1,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"aevum-police\\\",\\\"name\\\":\\\"contract-290972-NiteSec.cct\\\",\\\"type\\\":\\\"Find All Valid Math Expressions\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[\\\"516883837033\\\",81],\\\"description\\\":\\\"You are given the following string which contains only digits between 0 and 9:\\\\n\\\\n 516883837033\\\\n\\\\n You are also given a target number of 81. Return all possible ways you can add the +(add), -(subtract), and *(multiply) operators to the string such that it evaluates to the target number. (Normal order of operations applies.)\\\\n\\\\n The provided answer should be an array of strings containing the valid expressions. The data provided by this problem is an array with two elements. The first element is the string of digits, while the second element is the target number:\\\\n\\\\n [\\\\\\\"516883837033\\\\\\\", 81]\\\\n\\\\n NOTE: The order of evaluation expects script operator precedence NOTE: Numbers in the expression cannot have leading 0's. In other words, \\\\\\\"1+01\\\\\\\" is not a valid expression Examples:\\\\n\\\\n Input: digits = \\\\\\\"123\\\\\\\", target = 6\\\\n Output: [1+2+3, 1*2*3]\\\\n\\\\n Input: digits = \\\\\\\"105\\\\\\\", target = 5\\\\n Output: [1*0+5, 10-5]\\\"},{\\\"server\\\":\\\"unitalife\\\",\\\"name\\\":\\\"contract-775208-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"1722424137\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 1722424137\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"},{\\\"server\\\":\\\"unitalife\\\",\\\"name\\\":\\\"contract-871087.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[11,9],\\\"description\\\":\\\"You are in a grid with 11 rows and 9 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [11, 9]\\\"},{\\\"server\\\":\\\"applied-energetics\\\",\\\"name\\\":\\\"contract-210417.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[4,6,5,1,9,0],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 4,6,5,1,9,0\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"kuai-gong\\\",\\\"name\\\":\\\"contract-95547-CyberSec.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":37,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 37 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"},{\\\"server\\\":\\\"blade\\\",\\\"name\\\":\\\"contract-514183.cct\\\",\\\"type\\\":\\\"Find All Valid Math Expressions\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[\\\"2253490\\\",60],\\\"description\\\":\\\"You are given the following string which contains only digits between 0 and 9:\\\\n\\\\n 2253490\\\\n\\\\n You are also given a target number of 60. Return all possible ways you can add the +(add), -(subtract), and *(multiply) operators to the string such that it evaluates to the target number. (Normal order of operations applies.)\\\\n\\\\n The provided answer should be an array of strings containing the valid expressions. The data provided by this problem is an array with two elements. The first element is the string of digits, while the second element is the target number:\\\\n\\\\n [\\\\\\\"2253490\\\\\\\", 60]\\\\n\\\\n NOTE: The order of evaluation expects script operator precedence NOTE: Numbers in the expression cannot have leading 0's. In other words, \\\\\\\"1+01\\\\\\\" is not a valid expression Examples:\\\\n\\\\n Input: digits = \\\\\\\"123\\\\\\\", target = 6\\\\n Output: [1+2+3, 1*2*3]\\\\n\\\\n Input: digits = \\\\\\\"105\\\\\\\", target = 5\\\\n Output: [1*0+5, 10-5]\\\"},{\\\"server\\\":\\\"nwo\\\",\\\"name\\\":\\\"contract-30438-TianDiHui.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":22563020385,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 22563020385 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"},{\\\"server\\\":\\\"nwo\\\",\\\"name\\\":\\\"contract-676921.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[5,3,0],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 5,3,0\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"megacorp\\\",\\\"name\\\":\\\"contract-449584.cct\\\",\\\"type\\\":\\\"Proper 2-Coloring of a Graph\\\",\\\"attemptsLeft\\\":5,\\\"input\\\":[14,[[8,12],[10,11],[6,11],[6,7],[6,8],[5,12],[6,9],[1,5],[0,4],[4,10],[3,11],[0,5],[3,7],[0,7],[4,10],[1,9],[1,7],[7,12],[4,12],[4,6],[10,13],[3,8],[11,12],[2,11],[5,10],[2,8],[3,5],[1,11],[9,12]]],\\\"description\\\":\\\"You are given the following data, representing a graph:\\\\n [14,[[8,12],[10,11],[6,11],[6,7],[6,8],[5,12],[6,9],[1,5],[0,4],[4,10],[3,11],[0,5],[3,7],[0,7],[4,10],[1,9],[1,7],[7,12],[4,12],[4,6],[10,13],[3,8],[11,12],[2,11],[5,10],[2,8],[3,5],[1,11],[9,12]]]\\\\n Note that \\\\\\\"graph\\\\\\\", as used here, refers to the field of graph theory, and has no relation to statistics or plotting. The first element of the data represents the number of vertices in the graph. Each vertex is a unique number between 0 and 13. The next element of the data represents the edges of the graph. Two vertices u,v in a graph are said to be adjacent if there exists an edge [u,v]. Note that an edge [u,v] is the same as an edge [v,u], as order does not matter. You must construct a 2-coloring of the graph, meaning that you have to assign each vertex in the graph a \\\\\\\"color\\\\\\\", either 0 or 1, such that no two adjacent vertices have the same color. Submit your answer in the form of an array, where element i represents the color of vertex i. If it is impossible to construct a 2-coloring of the given graph, instead submit an empty array.\\\\n\\\\n Examples:\\\\n\\\\n Input: [4, [[0, 2], [0, 3], [1, 2], [1, 3]]]\\\\n Output: [0, 0, 1, 1]\\\\n\\\\n Input: [3, [[0, 1], [0, 2], [1, 2]]]\\\\n Output: []\\\"},{\\\"server\\\":\\\"powerhouse-fitness\\\",\\\"name\\\":\\\"contract-150149-NWO.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"()a()((a(\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n ()a()((a(\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"fulcrumassets\\\",\\\"name\\\":\\\"contract-162034-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[4,12],\\\"description\\\":\\\"You are in a grid with 4 rows and 12 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [4, 12]\\\"},{\\\"server\\\":\\\"solaris\\\",\\\"name\\\":\\\"contract-828866.cct\\\",\\\"type\\\":\\\"Array Jumping Game II\\\",\\\"attemptsLeft\\\":3,\\\"input\\\":[2,4,3,6,1,2,3,3,2,3,2,0,1,2,1,2,2,3],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 2,4,3,6,1,2,3,3,2,3,2,0,1,2,1,2,2,3\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine the minimum number of jumps to reach the end of the array.\\\\n\\\\n If it's impossible to reach the end, then the answer should be 0.\\\"},{\\\"server\\\":\\\"infocomm\\\",\\\"name\\\":\\\"contract-159954-BachmanAssociates.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":7684497914009,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 7684497914009 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"},{\\\"server\\\":\\\"infocomm\\\",\\\"name\\\":\\\"contract-921158-NiteSec.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"(()((a)(((\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n (()((a)(((\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"titan-labs\\\",\\\"name\\\":\\\"contract-675708.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[5,4,0,5,4,0,4,7,1,0,4,8,0,8,3,2],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 5,4,0,5,4,0,4,7,1,0,4,8,0,8,3,2\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"avmnite-02h\\\",\\\"name\\\":\\\"contract-352379.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[30,[1,2,4,5,6,8,9,10,11,12]],\\\"description\\\":\\\"How many different distinct ways can the number 30 be written as a sum of integers contained in the set:\\\\n\\\\n [1,2,4,5,6,8,9,10,11,12]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"I.I.I.I\\\",\\\"name\\\":\\\"contract-897408.cct\\\",\\\"type\\\":\\\"Array Jumping Game II\\\",\\\"attemptsLeft\\\":3,\\\"input\\\":[3,3,0,2,2,3,6,2,0,1,2,5,2,2,4,1,4,1,5,1,3,1,3],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 3,3,0,2,2,3,6,2,0,1,2,5,2,2,4,1,4,1,5,1,3,1,3\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine the minimum number of jumps to reach the end of the array.\\\\n\\\\n If it's impossible to reach the end, then the answer should be 0.\\\"},{\\\"server\\\":\\\"catalyst\\\",\\\"name\\\":\\\"contract-278327-TianDiHui.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":323,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 323 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"},{\\\"server\\\":\\\"summit-uni\\\",\\\"name\\\":\\\"contract-525976-TianDiHui.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"()))()aaaa)((\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n ()))()aaaa)((\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"lexo-corp\\\",\\\"name\\\":\\\"contract-193878.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,0],[0,1,0,0,0],[0,0,0,0,1],[0,0,1,0,0],[0,0,0,1,0],[0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,0,0,\\\\n0,1,0,0,0,\\\\n0,0,0,0,1,\\\\n0,0,1,0,0,\\\\n0,0,0,1,0,\\\\n0,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"lexo-corp\\\",\\\"name\\\":\\\"contract-251954.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"(()((aa((((aa\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n (()((aa((((aa\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"lexo-corp\\\",\\\"name\\\":\\\"contract-388509.cct\\\",\\\"type\\\":\\\"Array Jumping Game II\\\",\\\"attemptsLeft\\\":3,\\\"input\\\":[3,4,0,1,1,0,2,4,5,1,5,5,1],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 3,4,0,1,1,0,2,4,5,1,5,5,1\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine the minimum number of jumps to reach the end of the array.\\\\n\\\\n If it's impossible to reach the end, then the answer should be 0.\\\"},{\\\"server\\\":\\\"snap-fitness\\\",\\\"name\\\":\\\"contract-515843-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Find All Valid Math Expressions\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[\\\"35000\\\",-24],\\\"description\\\":\\\"You are given the following string which contains only digits between 0 and 9:\\\\n\\\\n 35000\\\\n\\\\n You are also given a target number of -24. Return all possible ways you can add the +(add), -(subtract), and *(multiply) operators to the string such that it evaluates to the target number. (Normal order of operations applies.)\\\\n\\\\n The provided answer should be an array of strings containing the valid expressions. The data provided by this problem is an array with two elements. The first element is the string of digits, while the second element is the target number:\\\\n\\\\n [\\\\\\\"35000\\\\\\\", -24]\\\\n\\\\n NOTE: The order of evaluation expects script operator precedence NOTE: Numbers in the expression cannot have leading 0's. In other words, \\\\\\\"1+01\\\\\\\" is not a valid expression Examples:\\\\n\\\\n Input: digits = \\\\\\\"123\\\\\\\", target = 6\\\\n Output: [1+2+3, 1*2*3]\\\\n\\\\n Input: digits = \\\\\\\"105\\\\\\\", target = 5\\\\n Output: [1*0+5, 10-5]\\\"},{\\\"server\\\":\\\"nova-med\\\",\\\"name\\\":\\\"contract-451833-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"01010111001010100010111111110111\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '01010111001010100010111111110111' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"nova-med\\\",\\\"name\\\":\\\"contract-943121-NiteSec.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[55,[1,2,4,6,8,9,11,12]],\\\"description\\\":\\\"How many different distinct ways can the number 55 be written as a sum of integers contained in the set:\\\\n\\\\n [1,2,4,6,8,9,11,12]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"microdyne\\\",\\\"name\\\":\\\"contract-791331-Sector12.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0],[0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,\\\\n0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"fulcrumtech\\\",\\\"name\\\":\\\"contract-542501.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":4655676301747880,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 4655676301747880 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"},{\\\"server\\\":\\\"omnitek\\\",\\\"name\\\":\\\"contract-841265.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader IV\\\",\\\"attemptsLeft\\\":9,\\\"input\\\":[7,[35,73,177,180,173,62,60,22,163,171,126,33,61,70,66,183,150,192,118,125,189,99,184,42,36,97,46,31,78,136,174,195,58,74,55,20,25,156,139,58,32,10,23,106,143,96,74,108]],\\\"description\\\":\\\"You are given the following array with two elements:\\\\n\\\\n [7, [35,73,177,180,173,62,60,22,163,171,126,33,61,70,66,183,150,192,118,125,189,99,184,42,36,97,46,31,78,136,174,195,58,74,55,20,25,156,139,58,32,10,23,106,143,96,74,108]]\\\\n\\\\n The first element is an integer k. The second element is an array of stock prices (which are numbers) where the i-th element represents the stock price on day i.\\\\n\\\\n Determine the maximum possible profit you can earn using at most k transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you can buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0.\\\"},{\\\"server\\\":\\\"phantasy\\\",\\\"name\\\":\\\"contract-645313.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"(((()((())a)))))))\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n (((()((())a)))))))\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"computek\\\",\\\"name\\\":\\\"contract-621936.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,1,0,0,1],[0,0,0,0,1,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,1,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,\\\\n0,1,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,1,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,1,0,0,1,\\\\n0,0,0,0,1,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"rho-construction\\\",\\\"name\\\":\\\"contract-190262-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[3,3,-3,5,2,-7,4,-9,7,-4,9,2,-6,-10,5,10],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 3,3,-3,5,2,-7,4,-9,7,-4,9,2,-6,-10,5,10\\\"},{\\\"server\\\":\\\"rho-construction\\\",\\\"name\\\":\\\"contract-891710.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader IV\\\",\\\"attemptsLeft\\\":9,\\\"input\\\":[5,[188,56,4,32,147,9,102,183,156,62,84,140,103,154,81,112,70,125,125,158,157,109,36,188,22,19,28,150,81,105,82,158,96,194,132,127,44,133,11,155,104,111,197,72,137,42,59,16]],\\\"description\\\":\\\"You are given the following array with two elements:\\\\n\\\\n [5, [188,56,4,32,147,9,102,183,156,62,84,140,103,154,81,112,70,125,125,158,157,109,36,188,22,19,28,150,81,105,82,158,96,194,132,127,44,133,11,155,104,111,197,72,137,42,59,16]]\\\\n\\\\n The first element is an integer k. The second element is an array of stock prices (which are numbers) where the i-th element represents the stock price on day i.\\\\n\\\\n Determine the maximum possible profit you can earn using at most k transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you can buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0.\\\"}]\"}}],[\"contracts/2023-07-29T11:20:33.900Z.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"contracts/2023-07-29T11:20:33.900Z.txt\",\"text\":\"[{\\\"server\\\":\\\"iron-gym\\\",\\\"name\\\":\\\"contract-415259.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[9,-10,1,-6,-2,-10,-4,0,-7,4,-6],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 9,-10,1,-6,-2,-10,-4,0,-7,4,-6\\\"},{\\\"server\\\":\\\"darkweb\\\",\\\"name\\\":\\\"contract-866615.cct\\\",\\\"type\\\":\\\"Total Ways to Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":14,\\\"description\\\":\\\"It is possible write four as a sum in exactly four different ways:\\\\n\\\\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\\\\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\\\\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\\\\n\\\\n How many different distinct ways can the number 14 be written as a sum of at least two positive integers?\\\"},{\\\"server\\\":\\\"neo-net\\\",\\\"name\\\":\\\"contract-867240-CyberSec.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[1,2,-3,2,-9,0,-5,7,2,-7,-10,10,-3,2,7,-9,-8,10,-5,8,-6,-10,-8,-6,1,-9,-7,-9,-1,-3,2,9,2,4,4,-5,-2,-5],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 1,2,-3,2,-9,0,-5,7,2,-7,-10,10,-3,2,7,-9,-8,10,-5,8,-6,-10,-8,-6,1,-9,-7,-9,-1,-3,2,9,2,4,4,-5,-2,-5\\\"},{\\\"server\\\":\\\"omega-net\\\",\\\"name\\\":\\\"contract-187004-NWO.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"0010000010000000000000000101101001010110001001000001000011111110\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '0010000010000000000000000101101001010110001001000001000011111110' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"omega-net\\\",\\\"name\\\":\\\"contract-922467.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0],[0,0,0,0],[0,0,1,0],[1,0,0,0],[0,0,0,0],[0,0,0,1],[1,0,0,0],[0,0,1,0],[0,0,1,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,0,\\\\n0,0,0,0,\\\\n0,0,1,0,\\\\n1,0,0,0,\\\\n0,0,0,0,\\\\n0,0,0,1,\\\\n1,0,0,0,\\\\n0,0,1,0,\\\\n0,0,1,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"aevum-police\\\",\\\"name\\\":\\\"contract-290972-NiteSec.cct\\\",\\\"type\\\":\\\"Find All Valid Math Expressions\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[\\\"516883837033\\\",81],\\\"description\\\":\\\"You are given the following string which contains only digits between 0 and 9:\\\\n\\\\n 516883837033\\\\n\\\\n You are also given a target number of 81. Return all possible ways you can add the +(add), -(subtract), and *(multiply) operators to the string such that it evaluates to the target number. (Normal order of operations applies.)\\\\n\\\\n The provided answer should be an array of strings containing the valid expressions. The data provided by this problem is an array with two elements. The first element is the string of digits, while the second element is the target number:\\\\n\\\\n [\\\\\\\"516883837033\\\\\\\", 81]\\\\n\\\\n NOTE: The order of evaluation expects script operator precedence NOTE: Numbers in the expression cannot have leading 0's. In other words, \\\\\\\"1+01\\\\\\\" is not a valid expression Examples:\\\\n\\\\n Input: digits = \\\\\\\"123\\\\\\\", target = 6\\\\n Output: [1+2+3, 1*2*3]\\\\n\\\\n Input: digits = \\\\\\\"105\\\\\\\", target = 5\\\\n Output: [1*0+5, 10-5]\\\"},{\\\"server\\\":\\\"unitalife\\\",\\\"name\\\":\\\"contract-775208-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Generate IP Addresses\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"1722424137\\\",\\\"description\\\":\\\"Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\\\\n\\\\n 1722424137\\\\n\\\\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\\\\n\\\\n Examples:\\\\n\\\\n 25525511135 -> [\\\\\\\"255.255.11.135\\\\\\\", \\\\\\\"255.255.111.35\\\\\\\"]\\\\n 1938718066 -> [\\\\\\\"193.87.180.66\\\\\\\"]\\\"},{\\\"server\\\":\\\"unitalife\\\",\\\"name\\\":\\\"contract-871087.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[11,9],\\\"description\\\":\\\"You are in a grid with 11 rows and 9 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [11, 9]\\\"},{\\\"server\\\":\\\"applied-energetics\\\",\\\"name\\\":\\\"contract-210417.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[4,6,5,1,9,0],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 4,6,5,1,9,0\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"kuai-gong\\\",\\\"name\\\":\\\"contract-95547-CyberSec.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":37,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 37 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"},{\\\"server\\\":\\\"blade\\\",\\\"name\\\":\\\"contract-514183.cct\\\",\\\"type\\\":\\\"Find All Valid Math Expressions\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[\\\"2253490\\\",60],\\\"description\\\":\\\"You are given the following string which contains only digits between 0 and 9:\\\\n\\\\n 2253490\\\\n\\\\n You are also given a target number of 60. Return all possible ways you can add the +(add), -(subtract), and *(multiply) operators to the string such that it evaluates to the target number. (Normal order of operations applies.)\\\\n\\\\n The provided answer should be an array of strings containing the valid expressions. The data provided by this problem is an array with two elements. The first element is the string of digits, while the second element is the target number:\\\\n\\\\n [\\\\\\\"2253490\\\\\\\", 60]\\\\n\\\\n NOTE: The order of evaluation expects script operator precedence NOTE: Numbers in the expression cannot have leading 0's. In other words, \\\\\\\"1+01\\\\\\\" is not a valid expression Examples:\\\\n\\\\n Input: digits = \\\\\\\"123\\\\\\\", target = 6\\\\n Output: [1+2+3, 1*2*3]\\\\n\\\\n Input: digits = \\\\\\\"105\\\\\\\", target = 5\\\\n Output: [1*0+5, 10-5]\\\"},{\\\"server\\\":\\\"nwo\\\",\\\"name\\\":\\\"contract-30438-TianDiHui.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":22563020385,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 22563020385 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"},{\\\"server\\\":\\\"nwo\\\",\\\"name\\\":\\\"contract-676921.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[5,3,0],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 5,3,0\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"megacorp\\\",\\\"name\\\":\\\"contract-449584.cct\\\",\\\"type\\\":\\\"Proper 2-Coloring of a Graph\\\",\\\"attemptsLeft\\\":5,\\\"input\\\":[14,[[8,12],[10,11],[6,11],[6,7],[6,8],[5,12],[6,9],[1,5],[0,4],[4,10],[3,11],[0,5],[3,7],[0,7],[4,10],[1,9],[1,7],[7,12],[4,12],[4,6],[10,13],[3,8],[11,12],[2,11],[5,10],[2,8],[3,5],[1,11],[9,12]]],\\\"description\\\":\\\"You are given the following data, representing a graph:\\\\n [14,[[8,12],[10,11],[6,11],[6,7],[6,8],[5,12],[6,9],[1,5],[0,4],[4,10],[3,11],[0,5],[3,7],[0,7],[4,10],[1,9],[1,7],[7,12],[4,12],[4,6],[10,13],[3,8],[11,12],[2,11],[5,10],[2,8],[3,5],[1,11],[9,12]]]\\\\n Note that \\\\\\\"graph\\\\\\\", as used here, refers to the field of graph theory, and has no relation to statistics or plotting. The first element of the data represents the number of vertices in the graph. Each vertex is a unique number between 0 and 13. The next element of the data represents the edges of the graph. Two vertices u,v in a graph are said to be adjacent if there exists an edge [u,v]. Note that an edge [u,v] is the same as an edge [v,u], as order does not matter. You must construct a 2-coloring of the graph, meaning that you have to assign each vertex in the graph a \\\\\\\"color\\\\\\\", either 0 or 1, such that no two adjacent vertices have the same color. Submit your answer in the form of an array, where element i represents the color of vertex i. If it is impossible to construct a 2-coloring of the given graph, instead submit an empty array.\\\\n\\\\n Examples:\\\\n\\\\n Input: [4, [[0, 2], [0, 3], [1, 2], [1, 3]]]\\\\n Output: [0, 0, 1, 1]\\\\n\\\\n Input: [3, [[0, 1], [0, 2], [1, 2]]]\\\\n Output: []\\\"},{\\\"server\\\":\\\"powerhouse-fitness\\\",\\\"name\\\":\\\"contract-150149-NWO.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"()a()((a(\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n ()a()((a(\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"fulcrumassets\\\",\\\"name\\\":\\\"contract-162034-BachmanAssociates.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid I\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[4,12],\\\"description\\\":\\\"You are in a grid with 4 rows and 12 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an array with the number of rows and columns:\\\\n\\\\n [4, 12]\\\"},{\\\"server\\\":\\\"solaris\\\",\\\"name\\\":\\\"contract-828866.cct\\\",\\\"type\\\":\\\"Array Jumping Game II\\\",\\\"attemptsLeft\\\":3,\\\"input\\\":[2,4,3,6,1,2,3,3,2,3,2,0,1,2,1,2,2,3],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 2,4,3,6,1,2,3,3,2,3,2,0,1,2,1,2,2,3\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine the minimum number of jumps to reach the end of the array.\\\\n\\\\n If it's impossible to reach the end, then the answer should be 0.\\\"},{\\\"server\\\":\\\"infocomm\\\",\\\"name\\\":\\\"contract-159954-BachmanAssociates.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":7684497914009,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 7684497914009 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"},{\\\"server\\\":\\\"infocomm\\\",\\\"name\\\":\\\"contract-921158-NiteSec.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"(()((a)(((\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n (()((a)(((\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"titan-labs\\\",\\\"name\\\":\\\"contract-675708.cct\\\",\\\"type\\\":\\\"Array Jumping Game\\\",\\\"attemptsLeft\\\":1,\\\"input\\\":[5,4,0,5,4,0,4,7,1,0,4,8,0,8,3,2],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 5,4,0,5,4,0,4,7,1,0,4,8,0,8,3,2\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\\\\n\\\\n Your answer should be submitted as 1 or 0, representing true and false respectively\\\"},{\\\"server\\\":\\\"avmnite-02h\\\",\\\"name\\\":\\\"contract-352379.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[30,[1,2,4,5,6,8,9,10,11,12]],\\\"description\\\":\\\"How many different distinct ways can the number 30 be written as a sum of integers contained in the set:\\\\n\\\\n [1,2,4,5,6,8,9,10,11,12]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"I.I.I.I\\\",\\\"name\\\":\\\"contract-897408.cct\\\",\\\"type\\\":\\\"Array Jumping Game II\\\",\\\"attemptsLeft\\\":3,\\\"input\\\":[3,3,0,2,2,3,6,2,0,1,2,5,2,2,4,1,4,1,5,1,3,1,3],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 3,3,0,2,2,3,6,2,0,1,2,5,2,2,4,1,4,1,5,1,3,1,3\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine the minimum number of jumps to reach the end of the array.\\\\n\\\\n If it's impossible to reach the end, then the answer should be 0.\\\"},{\\\"server\\\":\\\"catalyst\\\",\\\"name\\\":\\\"contract-278327-TianDiHui.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":323,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 323 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"},{\\\"server\\\":\\\"summit-uni\\\",\\\"name\\\":\\\"contract-525976-TianDiHui.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"()))()aaaa)((\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n ()))()aaaa)((\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"lexo-corp\\\",\\\"name\\\":\\\"contract-193878.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,0,0],[0,1,0,0,0],[0,0,0,0,1],[0,0,1,0,0],[0,0,0,1,0],[0,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,0,0,\\\\n0,1,0,0,0,\\\\n0,0,0,0,1,\\\\n0,0,1,0,0,\\\\n0,0,0,1,0,\\\\n0,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"lexo-corp\\\",\\\"name\\\":\\\"contract-251954.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"(()((aa((((aa\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n (()((aa((((aa\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"lexo-corp\\\",\\\"name\\\":\\\"contract-388509.cct\\\",\\\"type\\\":\\\"Array Jumping Game II\\\",\\\"attemptsLeft\\\":3,\\\"input\\\":[3,4,0,1,1,0,2,4,5,1,5,5,1],\\\"description\\\":\\\"You are given the following array of integers:\\\\n\\\\n 3,4,0,1,1,0,2,4,5,1,5,5,1\\\\n\\\\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \\\\n\\\\nAssuming you are initially positioned at the start of the array, determine the minimum number of jumps to reach the end of the array.\\\\n\\\\n If it's impossible to reach the end, then the answer should be 0.\\\"},{\\\"server\\\":\\\"snap-fitness\\\",\\\"name\\\":\\\"contract-515843-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Find All Valid Math Expressions\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[\\\"35000\\\",-24],\\\"description\\\":\\\"You are given the following string which contains only digits between 0 and 9:\\\\n\\\\n 35000\\\\n\\\\n You are also given a target number of -24. Return all possible ways you can add the +(add), -(subtract), and *(multiply) operators to the string such that it evaluates to the target number. (Normal order of operations applies.)\\\\n\\\\n The provided answer should be an array of strings containing the valid expressions. The data provided by this problem is an array with two elements. The first element is the string of digits, while the second element is the target number:\\\\n\\\\n [\\\\\\\"35000\\\\\\\", -24]\\\\n\\\\n NOTE: The order of evaluation expects script operator precedence NOTE: Numbers in the expression cannot have leading 0's. In other words, \\\\\\\"1+01\\\\\\\" is not a valid expression Examples:\\\\n\\\\n Input: digits = \\\\\\\"123\\\\\\\", target = 6\\\\n Output: [1+2+3, 1*2*3]\\\\n\\\\n Input: digits = \\\\\\\"105\\\\\\\", target = 5\\\\n Output: [1*0+5, 10-5]\\\"},{\\\"server\\\":\\\"nova-med\\\",\\\"name\\\":\\\"contract-451833-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"HammingCodes: Encoded Binary to Integer\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"01010111001010100010111111110111\\\",\\\"description\\\":\\\"You are given the following encoded binary string: \\\\n '01010111001010100010111111110111' \\\\n\\\\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\\\\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\\\\n\\\\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\\\\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\\\\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\\\\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\\\\n Extra note for automation: return the decimal value as a string\\\"},{\\\"server\\\":\\\"nova-med\\\",\\\"name\\\":\\\"contract-943121-NiteSec.cct\\\",\\\"type\\\":\\\"Total Ways to Sum II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[55,[1,2,4,6,8,9,11,12]],\\\"description\\\":\\\"How many different distinct ways can the number 55 be written as a sum of integers contained in the set:\\\\n\\\\n [1,2,4,6,8,9,11,12]?\\\\n\\\\n You may use each integer in the set zero or more times.\\\"},{\\\"server\\\":\\\"microdyne\\\",\\\"name\\\":\\\"contract-791331-Sector12.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0],[0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,\\\\n0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"fulcrumtech\\\",\\\"name\\\":\\\"contract-542501.cct\\\",\\\"type\\\":\\\"HammingCodes: Integer to Encoded Binary\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":4655676301747880,\\\"description\\\":\\\"You are given the following decimal Value: \\\\n 4655676301747880 \\\\n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\\\\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\\\\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\\\\n The answer should be given as a string containing only 1s and 0s.\\\\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\\\\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\\\\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\\\\n\\\\n Extra rule for encoding:\\\\n There should be no leading zeros in the 'data bit' section\\\"},{\\\"server\\\":\\\"omnitek\\\",\\\"name\\\":\\\"contract-841265.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader IV\\\",\\\"attemptsLeft\\\":9,\\\"input\\\":[7,[35,73,177,180,173,62,60,22,163,171,126,33,61,70,66,183,150,192,118,125,189,99,184,42,36,97,46,31,78,136,174,195,58,74,55,20,25,156,139,58,32,10,23,106,143,96,74,108]],\\\"description\\\":\\\"You are given the following array with two elements:\\\\n\\\\n [7, [35,73,177,180,173,62,60,22,163,171,126,33,61,70,66,183,150,192,118,125,189,99,184,42,36,97,46,31,78,136,174,195,58,74,55,20,25,156,139,58,32,10,23,106,143,96,74,108]]\\\\n\\\\n The first element is an integer k. The second element is an array of stock prices (which are numbers) where the i-th element represents the stock price on day i.\\\\n\\\\n Determine the maximum possible profit you can earn using at most k transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you can buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0.\\\"},{\\\"server\\\":\\\"phantasy\\\",\\\"name\\\":\\\"contract-645313.cct\\\",\\\"type\\\":\\\"Sanitize Parentheses in Expression\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":\\\"(((()((())a)))))))\\\",\\\"description\\\":\\\"Given the following string:\\\\n\\\\n (((()((())a)))))))\\\\n\\\\n remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.\\\\n\\\\n IMPORTANT: The string may contain letters, not just parentheses. Examples:\\\\n \\\\\\\"()())()\\\\\\\" -> [\\\\\\\"()()()\\\\\\\", \\\\\\\"(())()\\\\\\\"]\\\\n \\\\\\\"(a)())()\\\\\\\" -> [\\\\\\\"(a)()()\\\\\\\", \\\\\\\"(a())()\\\\\\\"]\\\\n \\\\\\\")(\\\\\\\" -> [\\\\\\\"\\\\\\\"]\\\"},{\\\"server\\\":\\\"computek\\\",\\\"name\\\":\\\"contract-621936.cct\\\",\\\"type\\\":\\\"Unique Paths in a Grid II\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[[0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,1,0,0,1],[0,0,0,0,1,0,0,0,0]],\\\"description\\\":\\\"You are located in the top-left corner of the following grid:\\\\n\\\\n 0,0,0,1,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,\\\\n0,1,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,1,0,0,0,0,\\\\n0,0,0,0,0,0,0,0,0,\\\\n0,0,0,0,0,1,0,0,1,\\\\n0,0,0,0,1,0,0,0,0,\\\\n\\\\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\\\\n\\\\n Determine how many unique paths there are from start to finish.\\\\n\\\\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\\\"},{\\\"server\\\":\\\"rho-construction\\\",\\\"name\\\":\\\"contract-190262-OmniTekIncorporated.cct\\\",\\\"type\\\":\\\"Subarray with Maximum Sum\\\",\\\"attemptsLeft\\\":10,\\\"input\\\":[3,3,-3,5,2,-7,4,-9,7,-4,9,2,-6,-10,5,10],\\\"description\\\":\\\"Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\\\\n 3,3,-3,5,2,-7,4,-9,7,-4,9,2,-6,-10,5,10\\\"},{\\\"server\\\":\\\"rho-construction\\\",\\\"name\\\":\\\"contract-891710.cct\\\",\\\"type\\\":\\\"Algorithmic Stock Trader IV\\\",\\\"attemptsLeft\\\":9,\\\"input\\\":[5,[188,56,4,32,147,9,102,183,156,62,84,140,103,154,81,112,70,125,125,158,157,109,36,188,22,19,28,150,81,105,82,158,96,194,132,127,44,133,11,155,104,111,197,72,137,42,59,16]],\\\"description\\\":\\\"You are given the following array with two elements:\\\\n\\\\n [5, [188,56,4,32,147,9,102,183,156,62,84,140,103,154,81,112,70,125,125,158,157,109,36,188,22,19,28,150,81,105,82,158,96,194,132,127,44,133,11,155,104,111,197,72,137,42,59,16]]\\\\n\\\\n The first element is an integer k. The second element is an array of stock prices (which are numbers) where the i-th element represents the stock price on day i.\\\\n\\\\n Determine the maximum possible profit you can earn using at most k transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you can buy it again.\\\\n\\\\n If no profit can be made, then the answer should be 0.\\\"}]\"}}],[\"data/organizations.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"data/organizations.txt\",\"text\":\"{\\\"toJoinInOrderInWhichIWantToComplete\\\":[\\\"CyberSec\\\",\\\"NiteSec\\\",\\\"Chongqing\\\",\\\"The Black Hand\\\",\\\"Bachman & Associates\\\",\\\"BitRunners\\\",\\\"Daedalus\\\",\\\"NWO\\\",\\\"OmniTek Incorporated\\\",\\\"Blade Industries\\\",\\\"ECorp\\\",\\\"Illuminati\\\",\\\"Aevum\\\",\\\"Volhaven\\\",\\\"New Tokyo\\\",\\\"Ishima\\\",\\\"Tian Di Hui\\\",\\\"Netburners\\\"],\\\"companiesWeWantToBecomePartOf\\\":[\\\"Bachman & Associates\\\",\\\"NWO\\\",\\\"OmniTek Incorporated\\\",\\\"Blade Industries\\\",\\\"ECorp\\\"],\\\"doNoWorkFor\\\":[\\\"Aevum\\\",\\\"Volhaven\\\",\\\"New Tokyo\\\",\\\"Ishima\\\",\\\"Tian Di Hui\\\",\\\"Netburners\\\"],\\\"stopAtAugments\\\":[{\\\"final\\\":true,\\\"faction\\\":\\\"Chongqing\\\",\\\"augmentToStopAt\\\":\\\"Neuregen Gene Modification\\\"},{\\\"final\\\":true,\\\"faction\\\":\\\"NiteSec\\\",\\\"augmentToStopAt\\\":\\\"Cranial Signal Processors - Gen III\\\"},{\\\"final\\\":true,\\\"faction\\\":\\\"The Black Hand\\\",\\\"augmentToStopAt\\\":\\\"Cranial Signal Processors - Gen IV\\\"}]}\"}}],[\"data/factionsWithAugsToBuyAndNotEnoughtFavor.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"data/factionsWithAugsToBuyAndNotEnoughtFavor.txt\",\"text\":\"[{\\\"faction\\\":\\\"CyberSec\\\",\\\"maximumAugRep\\\":56250},{\\\"faction\\\":\\\"NiteSec\\\",\\\"maximumAugRep\\\":150000}]\"}}],[\"data/ramObservations.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"data/ramObservations.txt\",\"text\":\"[6254.5,6326.25,10934,3335.5,6244,3365.25,3365.25,10928.75,8428,3365.25,6233.5,10923.5,3365.25,5979.75,6588.75,6588.75,6588.75,246.75,246.75,10918.25,8429.75,8429.75,8429.75,6210.75,6210.75,6210.75,10911.25,1370.25,1370.25,1370.25,1370.25,1370.25,3298.75,6745.599999999999,6745.599999999999,10899,8435,8435,8435,8435,8435,8435,2234.75,10886.75,10886.75,10886.75,6590.5,6590.5,6590.5,6590.5,8443.75,10874.5,10874.5,6745.599999999999,6745.599999999999,6745.599999999999,10862.25,6161.75,5983.25,5983.25,8452.5,3270.75,10855.25,2046.8,257.25,6160,10351.25,10848.25,3267.25,6158.25,6158.25,8457.75,5985,5985,10841.25,10841.25,10841.25,6146,3260.25,3260.25,3260.25,3260.25,10829,8463,6139,6139,6139,1375.5,1375.5,1375.5,1375.5,1375.5,5988.5,6132,6132,6132,6132,6132,6132,6132,10816.75,10816.75,10816.75,10816.75,6119.75,5992,10804.5,6107.5,5992,5992,5992,10792.25,6095.25,5992,10780,10780,10780,6592.25,6592.25,6592.25,10767.75,3232.25,6076,5997.25,10755.5,10755.5,3232.25,6069,6069,6069,6069,6069,6069,10750.25,3228.75,6063.75,10031,6594,6056.75,6056.75,10738,10738,10738,10738,10738,10738,10738,10738,2591.75,6049.75,6049.75,6049.75,6049.75,164.5,164.5,10732.75,10732.75,157.5,157.5,157.5,157.5,316.75,10720.5,211.75,3186.75,3186.75,10713.5,3174.5,10703,3088.75,211.75,211.75,10363.5,10696,10696,10696,3169.25,3169.25,1694.8999999999999,1694.8999999999999,1694.8999999999999,1694.8999999999999,2437.7999999999997,1754.3999999999999,10683.75,1754.3999999999999,1694.8999999999999,3164,2335.7999999999997,4354,10678.5,2058,211.75,1754.3999999999999,211.75,211.75,3158.75,10666.25,10666.25,10666.25,10666.25,1609.8999999999999,3146.5,10654,10654,4348.75,4348.75,10641.75,10641.75,6856.5,3141.25,10636.5,10636.5,6844.25,10626,10626,10626,10626,8422.75,8422.75,10613.75,211.75,211.75,211.75,6819.75,10601.5,10601.5,10601.5,10601.5,3122,7808.5,6812.75,6812.75,1625.2,1625.2,10594.5,1625.2,8417.5,8417.5,6805.75,2128,2128,1625.2,1625.2,281.75,7810.25,1625.2,1625.2,2657.1,6804,6804,316.75,316.75,1625.2,10582.25,10582.25,10582.25,3697.5,31.5,6791.75,1914.5,3092.25,8412.25,10570,1635.3999999999999,1637.1,211.75,4667.25,1637.1,10564.75,1637.1,1638.8,3711.1,1638.8,10557.75,4077.5,4252.5,6886.25,43.75,316.75,316.75,10545.5,10097.5,10097.5,10097.5,10538.5,10538.5,10538.5,10538.5,6340.25,6340.25,6340.25,6340.25,4221,2121,10535,6333.25,3053.75,3053.75,10528,4520.25,4520.25,4520.25,4215.75,1681.3,5052.25,1681.3,211.75,1681.3,7546,13371.75,1681.3,1681.3,4030.25,5047,5047,22.75,10515.75,3041.5,3041.5,3041.5,3041.5,5040,10508.75,1689.8,4511.5,1689.8,3913,5027.75,10496.5,3036.25,3036.25,3036.25,3036.25,3036.25,3036.25,3036.25,4028.5,3722.25,5022.5,1693.2,1693.2,1693.2,3906,1693.2,5283.25,5283.25,5283.25,5283.25,13931.75,5971,5971,5971,5971,4028.5,4028.5,5278,5278,246.75,5958.75,3890.25,3890.25,10169.25,10169.25,10169.25,10169.25,10169.25,2975,2975,2975,5265.75,5950,211.75,4028.5,10162.25,13942.25,211.75,211.75,1694.8999999999999,246.75,1694.8999999999999,10155.25,246.75,211.75,5936,10148.25,5260.5,103.25,1732.3,67714.5,3479,10141.25,5013.75,4026.75,1616.7,67712.75,67712.75,67712.75,10134.25,1620.1,1621.8,19.25,67711,10127.25,10127.25,10127.25,4441.5,1625.2,211.75,67709.25,16332.75,10508.75,10115,5741.75,2323.9,4026.75,67709.25,67709.25,67709.25,67709.25,67709.25,211.75,5166,2330.7,2684.5,2684.5,67396,211.75,316.75,2339.2,89.25,1803.7,246.75,6497.75,4025,4025,4025,84,84,5530,67060,281.75,10099.25,67056.5,6409,78.75,78.75,78.75,78.75,5201,78.75,78.75,67056.5,67056.5,16341.5,16341.5,16341.5,16341.5,211.75,3011.75,211.75,211.75,67054.75,281.75,281.75,4758.25,5524.75,5524.75,5524.75,5524.75,67051.25,5524.75,67047.75,5524.75,5524.75,5524.75,4884.25,67047.75,4884.25,4884.25,4884.25,67046,4884.25,4884.25,4884.25,4884.25,67044.25,4884.25,4884.25,67044.25,2745.75,16359,16359,67040.75,67040.75,2733.5,67037.25,2733.5,2733.5,4019.75,4019.75,67035.5,67035.5,67035.5,4019.75,67032,67032,67032,67032,67032,10508.75,67030.25,67030.25,16366,16366,67028.5,16366,16366,67026.75,16366,67026.75,67026.75,4385.5,4385.5,67023.25,4385.5,5195.75,67019.75,67019.75,67019.75,67019.75,67019.75,67019.75,67019.75,67019.75,67019.75,67019.75,67019.75,67019.75,67019.75,67019.75,67019.75,67019.75,67019.75,67019.75,67019.75,67019.75,67019.75,67019.75,4754.75,4301.5,4301.5,4016.25,67018,6624.9,4756.5,2247,67014.5,2670.5,4368,4368,67011,67011,67011,67011,67011,4758.25,4012.75,4301.5,5197.5,5197.5,26099.5,67009.25,5197.5,26092.5,67005.75,4362.75,246.75,4301.5,2229.5,26085.5,67004,26078.5,67004,4011,2656.5,211.75,67002.25,211.75,3669.75,281.75,66998.75,25835.25,211.75,1936.3,22.75,3335.5,25627,2717.75,2219,5197.5,4011,1611.6,3318,211.75,2812.25,239.75,66500,23674,1798.6,66062.5,1654.1,7689.5,35,23667,66059,4011,22790.25,7693,1674.5,1679.6,66055.5,1872.5,21918.75,2222.5,7698.25,3090.5,5199.25,211.75,211.75,7705.25,7705.25,7705.25,7705.25,4009.25,3085.25,3085.25,3085.25,3085.25,3085.25,3085.25,3085.25,3085.25,3085.25,3085.25,3085.25,7710.5,7710.5,7710.5,11301.5,7710.5,7710.5,7710.5,7710.5,7710.5,7710.5,7710.5,7710.5,246.75,246.75,3080,4007.5,4007.5,7715.75,7715.75,7715.75,21059.5,7715.75,1931.2,1931.2,3073,1931.2,21047.25,131.25,131.25,7719.25,2410.6,1286.25,21042,11627,3066,119,7729.75,1931.2,21036.75,21036.75,21036.75,21036.75,2616.25,2616.25,3060.75,7740.25,3060.75,3060.75,21033.25,3060.75,21029.75,21029.75,7749,7749,1932.8999999999999,21017.5,3048.5,7757.75,7757.75,21005.25,11940.25,7757.75,20993,7757.75,1268.75,1268.75,1268.75,1268.75,20980.75,20980.75,7766.5,2243.5,2243.5,2243.5,2243.5,20968.5,65590,65590,65590,65590,65590,65590,65590,65590,7777,20961.5,20961.5,20961.5,20961.5,20961.5,65586.5,65586.5,65586.5,65586.5,65586.5,65586.5,3022.25,2458.75,2458.75,211.75,65584.75,316.75,316.75,7799.75,2351.1,2238.25,2238.25,2238.25,3015.25,65583,65583,1968.6,2356.2,7805,20938.75,65581.25,65581.25,3003,2361.2999999999997,7806.75,20931.75,19.25,19.25,65579.5,1624,20924.75,20924.75,1691.5,1691.5,1691.5,2226,20912.5,20912.5,20912.5,20912.5,20912.5,20912.5,65577.75,7770,7770,7770,20900.25,1693.2,1693.2,65574.25,1396.5,1693.2,2374.9,2978.5,20895,7778.75,7778.75,7778.75,65572.5,65572.5,1693.2,1693.2,1693.2,1693.2,20882.75,2219,246.75,65570.75,7782.25,7782.25,8361.5,211.75,65569,246.75,211.75,2962.75,65567.25,65567.25,65567.25,65567.25,1233.75,1233.75,1233.75,1233.75,1233.75,1233.75,1233.75,2770.25,65567.25,65567.25,65567.25,65567.25,7197.75,34438.25,65563.75,65563.75,2133.25,2758,2077.4,65560.25,7281.75,211.75,20420.75,2380,211.75,65556.75,20210.75,4695.25,325.5,65553.25,20209,20209,20209,20209,211.75,323.75,323.75,65549.75,20203.75,20203.75,34436.5,34436.5,34436.5,34436.5,34436.5,34436.5,65548,65548,18273.5,43389.5,43389.5,43389.5,320.25,65546.25,4576.25,1932.8999999999999,2116.5,1941.3999999999999,18259.5,65542.75,34436.5,1662.5,3272.5,43435,315,65539.25,33761,313.25,2429,18240.25,65537.5,2031.5,1977.5,43482.25,309.75,34389.25,18222.75,65535.75,65535.75,65535.75,65535.75,39109,39109,39109,65532.25,18133.5,18133.5,2411.5,39098.5,302.75,302.75,302.75,34340.25,18128.25,18128.25,18128.25,18128.25,39095,39095,43575,18651.5,65532.25,18123,18123,18123,39095,39095,39095,39095,65527,18117.75,43622.25,43622.25,43622.25,43622.25,43622.25,43622.25,43622.25,43622.25,65523.5,65523.5,18105.5,18105.5,18105.5,65520,39091.5,39091.5,39091.5,39091.5,18103.75,18103.75,18103.75,2392.25,2392.25,2392.25,65516.5,39091.5,34336.75,34336.75,65513,34336.75,18089.75,2387,39089.75,39089.75,1970.5,1970.5,65511.25,43104.25,39088,39088,65509.5,1863.2,1863.2,1863.2,1863.2,1863.2,17717,18070.5,2109.7,43186.5,2387,34303.5,18058.25,4446.75,39084.5,39084.5,39084.5,39084.5,18046,1956.7,43256.5,17743.25,281.75,18042.5,39084.5,38242.75,1967,211.75,316.75,34303.5,43279.25,39082.75,4378.5,17767.75,1609.8999999999999,281.75,16590,1615,39081,24.5,40076.75,16275,43303.75,281.75,39081,15960,1625.2,7262.5,17792.25,1625.2,39978.75,1625.2,15645,39079.25,43326.5,43326.5,43326.5,43326.5,15634.5,19.25,39977,39077.5,39077.5,39077.5,43408.75,246.75,246.75,39077.5,39849.25,1635.3999999999999,15603,47.25,316.75,39075.75,246.75,15590.75,43443.75,1655.8,40404,1657.5,39074,2299.5,246.75,246.75,1664.3,40740,43478.75,43478.75,211.75,15564.5,211.75,211.75,39070.5,15552.25,1686.3999999999999,351.75,1686.3999999999999,64846.25,38998.75,64776.25,64776.25,64776.25,15526,33713.75,15526,15526,15526,64190,39474.75,32651.5,5901,43092,38578.75,15519,1856.75,15130.5,211.75,211.75,211.75,32649.75,39263,38514,33631.5,246.75,281.75,15505,15505,15505,38445.75,32649.75,42635.25,15498,281.75,281.75,281.75,38375.75,7316.75,281.75,281.75,32646.25,15496.25,15496.25,15496.25,33547.5,14833,14833,38304,38304,38304,38304,38304,281.75,32644.5,15477,38970.75,14570.5,2296,37252.25,43253,38802.75,15354.5,14537.25,6482,38722.25,66.5,63582.75,43127,61.25,61.25,63488.25,35014,31944.5,38720.5,38720.5,38720.5,38720.5,38720.5,38720.5,38720.5,63390.25,14369.25,14369.25,14369.25,31942.75,63385,63385,43253,43253,38638.25,38638.25,63381.5,38638.25,211.75,211.75,211.75,211.75,63376.25,63376.25,63376.25,63376.25,31939.25,63371,63371,63371,63371,63371,63371,63371,63371,63371,63371,63371,63371,63371,63371,63371,38631.25,38631.25,38631.25,63365.75,42432.25,63362.25,63362.25,63362.25,63362.25,38627.75,42530.25,42530.25,42530.25,42530.25,63357,35292.25,38626,38626,63351.75,63351.75,42586.25,42586.25,38626]\"}}],[\"data/typeOfServerPurchase.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"data/typeOfServerPurchase.txt\",\"text\":\"{\\\"max\\\":false,\\\"min\\\":false,\\\"average\\\":true,\\\"lastPurchaseDate\\\":\\\"2023-07-29T11:23:48.231Z\\\"}\"}}],[\"data/enviroment.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"data/enviroment.txt\",\"text\":\"[{\\\"name\\\":\\\"n00dles\\\",\\\"lineage\\\":[],\\\"server\\\":{\\\"hostname\\\":\\\"n00dles\\\",\\\"ip\\\":\\\"18.6.1.8\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":3.5,\\\"maxRam\\\":4,\\\"organizationName\\\":\\\"Noodle Bar\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":true,\\\"baseDifficulty\\\":1,\\\"hackDifficulty\\\":5.827999999999989,\\\"minDifficulty\\\":1,\\\"moneyAvailable\\\":42404.97489993996,\\\"moneyMax\\\":70000,\\\"numOpenPortsRequired\\\":0,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":1,\\\"serverGrowth\\\":3000}},{\\\"name\\\":\\\"foodnstuff\\\",\\\"lineage\\\":[],\\\"server\\\":{\\\"hostname\\\":\\\"foodnstuff\\\",\\\"ip\\\":\\\"95.1.9.0\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":15.75,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\"FoodNStuff\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":true,\\\"baseDifficulty\\\":10,\\\"hackDifficulty\\\":7.8679999999999914,\\\"minDifficulty\\\":3,\\\"moneyAvailable\\\":1291285.5655930343,\\\"moneyMax\\\":2000000,\\\"numOpenPortsRequired\\\":0,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":1,\\\"serverGrowth\\\":5}},{\\\"name\\\":\\\"sigma-cosmetics\\\",\\\"lineage\\\":[],\\\"server\\\":{\\\"hostname\\\":\\\"sigma-cosmetics\\\",\\\"ip\\\":\\\"11.1.4.1\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":15.75,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\"Sigma Cosmetics\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":true,\\\"baseDifficulty\\\":10,\\\"hackDifficulty\\\":4.351999999999997,\\\"minDifficulty\\\":3,\\\"moneyAvailable\\\":14196.33092199681,\\\"moneyMax\\\":2300000,\\\"numOpenPortsRequired\\\":0,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":5,\\\"serverGrowth\\\":10}},{\\\"name\\\":\\\"joesguns\\\",\\\"lineage\\\":[],\\\"server\\\":{\\\"hostname\\\":\\\"joesguns\\\",\\\"ip\\\":\\\"1.9.8.8\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":15.75,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\"Joe's Guns\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":true,\\\"baseDifficulty\\\":15,\\\"hackDifficulty\\\":9.820000000000002,\\\"minDifficulty\\\":5,\\\"moneyAvailable\\\":3866.722183163358,\\\"moneyMax\\\":2500000,\\\"numOpenPortsRequired\\\":0,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":10,\\\"serverGrowth\\\":20}},{\\\"name\\\":\\\"hong-fang-tea\\\",\\\"lineage\\\":[],\\\"server\\\":{\\\"hostname\\\":\\\"hong-fang-tea\\\",\\\"ip\\\":\\\"83.6.9.1\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":15.75,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\"HongFang Teahouse\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":true,\\\"baseDifficulty\\\":15,\\\"hackDifficulty\\\":6.219999999999999,\\\"minDifficulty\\\":5,\\\"moneyAvailable\\\":6352.761025397237,\\\"moneyMax\\\":3000000,\\\"numOpenPortsRequired\\\":0,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":30,\\\"serverGrowth\\\":20}},{\\\"name\\\":\\\"harakiri-sushi\\\",\\\"lineage\\\":[],\\\"server\\\":{\\\"hostname\\\":\\\"harakiri-sushi\\\",\\\"ip\\\":\\\"23.1.9.4\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":15.75,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\"HaraKiri Sushi Bar Network\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":true,\\\"baseDifficulty\\\":15,\\\"hackDifficulty\\\":8.456,\\\"minDifficulty\\\":5,\\\"moneyAvailable\\\":127988.76468470313,\\\"moneyMax\\\":4000000,\\\"numOpenPortsRequired\\\":0,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":40,\\\"serverGrowth\\\":40}},{\\\"name\\\":\\\"iron-gym\\\",\\\"lineage\\\":[],\\\"server\\\":{\\\"hostname\\\":\\\"iron-gym\\\",\\\"ip\\\":\\\"22.0.6.6\\\",\\\"sshPortOpen\\\":true,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":31.5,\\\"maxRam\\\":32,\\\"organizationName\\\":\\\"Iron Gym Network\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":true,\\\"baseDifficulty\\\":30,\\\"hackDifficulty\\\":18.339999999999993,\\\"minDifficulty\\\":10,\\\"moneyAvailable\\\":13966961.800450595,\\\"moneyMax\\\":20000000,\\\"numOpenPortsRequired\\\":1,\\\"openPortCount\\\":1,\\\"requiredHackingSkill\\\":100,\\\"serverGrowth\\\":20}},{\\\"name\\\":\\\"darkweb\\\",\\\"lineage\\\":[],\\\"server\\\":{\\\"hostname\\\":\\\"darkweb\\\",\\\"ip\\\":\\\"73.0.1.2\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"darkweb\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":1,\\\"hackDifficulty\\\":1,\\\"minDifficulty\\\":1,\\\"moneyAvailable\\\":0,\\\"moneyMax\\\":0,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":1,\\\"serverGrowth\\\":1}},{\\\"name\\\":\\\"CLOUD-000\\\",\\\"lineage\\\":[],\\\"server\\\":{\\\"hostname\\\":\\\"CLOUD-000\\\",\\\"ip\\\":\\\"52.5.9.4\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":4095,\\\"maxRam\\\":4096,\\\"organizationName\\\":\\\"\\\",\\\"purchasedByPlayer\\\":true,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":1,\\\"hackDifficulty\\\":1,\\\"minDifficulty\\\":1,\\\"moneyAvailable\\\":0,\\\"moneyMax\\\":0,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":1,\\\"serverGrowth\\\":1}},{\\\"name\\\":\\\"nectar-net\\\",\\\"lineage\\\":[\\\"hong-fang-tea\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"nectar-net\\\",\\\"ip\\\":\\\"62.8.1.0\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":15.75,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\"Nectar Nightclub Network\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":true,\\\"baseDifficulty\\\":20,\\\"hackDifficulty\\\":8.039999999999997,\\\"minDifficulty\\\":7,\\\"moneyAvailable\\\":4574.447703044408,\\\"moneyMax\\\":2750000,\\\"numOpenPortsRequired\\\":0,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":20,\\\"serverGrowth\\\":25}},{\\\"name\\\":\\\"CSEC\\\",\\\"lineage\\\":[\\\"hong-fang-tea\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"CSEC\\\",\\\"ip\\\":\\\"97.5.0.7\\\",\\\"sshPortOpen\\\":true,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":7,\\\"maxRam\\\":8,\\\"organizationName\\\":\\\"CyberSec\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":true,\\\"baseDifficulty\\\":1,\\\"hackDifficulty\\\":1,\\\"minDifficulty\\\":1,\\\"moneyAvailable\\\":0,\\\"moneyMax\\\":0,\\\"numOpenPortsRequired\\\":1,\\\"openPortCount\\\":1,\\\"requiredHackingSkill\\\":52,\\\"serverGrowth\\\":1}},{\\\"name\\\":\\\"neo-net\\\",\\\"lineage\\\":[\\\"hong-fang-tea\\\",\\\"nectar-net\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"neo-net\\\",\\\"ip\\\":\\\"84.3.6.7\\\",\\\"sshPortOpen\\\":true,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":31.5,\\\"maxRam\\\":32,\\\"organizationName\\\":\\\"Neo Nightclub Network\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":true,\\\"baseDifficulty\\\":25,\\\"hackDifficulty\\\":9.458,\\\"minDifficulty\\\":8,\\\"moneyAvailable\\\":3374197.461978682,\\\"moneyMax\\\":5000000,\\\"numOpenPortsRequired\\\":1,\\\"openPortCount\\\":1,\\\"requiredHackingSkill\\\":50,\\\"serverGrowth\\\":25}},{\\\"name\\\":\\\"omega-net\\\",\\\"lineage\\\":[\\\"hong-fang-tea\\\",\\\"nectar-net\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"omega-net\\\",\\\"ip\\\":\\\"86.1.7.3\\\",\\\"sshPortOpen\\\":true,\\\"ftpPortOpen\\\":true,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":31.5,\\\"maxRam\\\":32,\\\"organizationName\\\":\\\"Omega Software\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":true,\\\"baseDifficulty\\\":28,\\\"hackDifficulty\\\":13.486000000000004,\\\"minDifficulty\\\":9,\\\"moneyAvailable\\\":43923577.70011612,\\\"moneyMax\\\":61335622,\\\"numOpenPortsRequired\\\":2,\\\"openPortCount\\\":2,\\\"requiredHackingSkill\\\":212,\\\"serverGrowth\\\":38}},{\\\"name\\\":\\\"johnson-ortho\\\",\\\"lineage\\\":[\\\"hong-fang-tea\\\",\\\"nectar-net\\\",\\\"omega-net\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"johnson-ortho\\\",\\\"ip\\\":\\\"78.3.9.5\\\",\\\"sshPortOpen\\\":true,\\\"ftpPortOpen\\\":true,\\\"smtpPortOpen\\\":true,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Johnson Orthopedics\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":true,\\\"baseDifficulty\\\":59,\\\"hackDifficulty\\\":22.692,\\\"minDifficulty\\\":20,\\\"moneyAvailable\\\":37738711.87509762,\\\"moneyMax\\\":84909225,\\\"numOpenPortsRequired\\\":2,\\\"openPortCount\\\":3,\\\"requiredHackingSkill\\\":273,\\\"serverGrowth\\\":62}},{\\\"name\\\":\\\"zb-institute\\\",\\\"lineage\\\":[\\\"hong-fang-tea\\\",\\\"nectar-net\\\",\\\"omega-net\\\",\\\"johnson-ortho\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"zb-institute\\\",\\\"ip\\\":\\\"95.9.1.0\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\"ZB Institute of Technology\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":67,\\\"hackDifficulty\\\":67,\\\"minDifficulty\\\":22,\\\"moneyAvailable\\\":160232903,\\\"moneyMax\\\":801164515,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":741,\\\"serverGrowth\\\":85}},{\\\"name\\\":\\\"aevum-police\\\",\\\"lineage\\\":[\\\"hong-fang-tea\\\",\\\"nectar-net\\\",\\\"omega-net\\\",\\\"johnson-ortho\\\",\\\"zb-institute\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"aevum-police\\\",\\\"ip\\\":\\\"85.4.3.5\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\"Aevum Police Headquarters\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":72,\\\"hackDifficulty\\\":72,\\\"minDifficulty\\\":24,\\\"moneyAvailable\\\":72655643,\\\"moneyMax\\\":363278215,\\\"numOpenPortsRequired\\\":4,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":423,\\\"serverGrowth\\\":39}},{\\\"name\\\":\\\"galactic-cyber\\\",\\\"lineage\\\":[\\\"hong-fang-tea\\\",\\\"nectar-net\\\",\\\"omega-net\\\",\\\"johnson-ortho\\\",\\\"zb-institute\\\",\\\"aevum-police\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"galactic-cyber\\\",\\\"ip\\\":\\\"68.0.0.7\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Galactic Cybersystems\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":60,\\\"hackDifficulty\\\":60,\\\"minDifficulty\\\":20,\\\"moneyAvailable\\\":151788166.20000002,\\\"moneyMax\\\":758940831,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":863,\\\"serverGrowth\\\":88}},{\\\"name\\\":\\\"aerocorp\\\",\\\"lineage\\\":[\\\"hong-fang-tea\\\",\\\"nectar-net\\\",\\\"omega-net\\\",\\\"johnson-ortho\\\",\\\"zb-institute\\\",\\\"aevum-police\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"aerocorp\\\",\\\"ip\\\":\\\"59.0.1.4\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"AeroCorp\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":80,\\\"hackDifficulty\\\":80,\\\"minDifficulty\\\":27,\\\"moneyAvailable\\\":236138400,\\\"moneyMax\\\":1180692000,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":909,\\\"serverGrowth\\\":59}},{\\\"name\\\":\\\"omnia\\\",\\\"lineage\\\":[\\\"hong-fang-tea\\\",\\\"nectar-net\\\",\\\"omega-net\\\",\\\"johnson-ortho\\\",\\\"zb-institute\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"omnia\\\",\\\"ip\\\":\\\"16.7.3.9\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":32,\\\"organizationName\\\":\\\"Omnia Cybersystems\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":90,\\\"hackDifficulty\\\":90,\\\"minDifficulty\\\":30,\\\"moneyAvailable\\\":190777422.20000002,\\\"moneyMax\\\":953887111,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":860,\\\"serverGrowth\\\":67}},{\\\"name\\\":\\\"unitalife\\\",\\\"lineage\\\":[\\\"hong-fang-tea\\\",\\\"nectar-net\\\",\\\"omega-net\\\",\\\"johnson-ortho\\\",\\\"zb-institute\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"unitalife\\\",\\\"ip\\\":\\\"97.3.7.3\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":64,\\\"organizationName\\\":\\\"UnitaLife Group\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":75,\\\"hackDifficulty\\\":75,\\\"minDifficulty\\\":25,\\\"moneyAvailable\\\":218151001,\\\"moneyMax\\\":1090755005,\\\"numOpenPortsRequired\\\":4,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":785,\\\"serverGrowth\\\":74}},{\\\"name\\\":\\\"icarus\\\",\\\"lineage\\\":[\\\"hong-fang-tea\\\",\\\"nectar-net\\\",\\\"omega-net\\\",\\\"johnson-ortho\\\",\\\"zb-institute\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"icarus\\\",\\\"ip\\\":\\\"18.0.9.2\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Icarus Microsystems\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":95,\\\"hackDifficulty\\\":95,\\\"minDifficulty\\\":32,\\\"moneyAvailable\\\":183936769.8,\\\"moneyMax\\\":919683849,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":882,\\\"serverGrowth\\\":94}},{\\\"name\\\":\\\"taiyang-digital\\\",\\\"lineage\\\":[\\\"hong-fang-tea\\\",\\\"nectar-net\\\",\\\"omega-net\\\",\\\"johnson-ortho\\\",\\\"zb-institute\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\",\\\"icarus\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"taiyang-digital\\\",\\\"ip\\\":\\\"1.4.9.7\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Taiyang Digital\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":80,\\\"hackDifficulty\\\":80,\\\"minDifficulty\\\":27,\\\"moneyAvailable\\\":161238692.60000002,\\\"moneyMax\\\":806193463,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":933,\\\"serverGrowth\\\":79}},{\\\"name\\\":\\\"zb-def\\\",\\\"lineage\\\":[\\\"hong-fang-tea\\\",\\\"nectar-net\\\",\\\"omega-net\\\",\\\"johnson-ortho\\\",\\\"zb-institute\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\",\\\"icarus\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"zb-def\\\",\\\"ip\\\":\\\"11.2.1.8\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"ZB Defense Industries\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":58,\\\"hackDifficulty\\\":58,\\\"minDifficulty\\\":19,\\\"moneyAvailable\\\":208403497,\\\"moneyMax\\\":1042017485,\\\"numOpenPortsRequired\\\":4,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":810,\\\"serverGrowth\\\":72}},{\\\"name\\\":\\\"applied-energetics\\\",\\\"lineage\\\":[\\\"hong-fang-tea\\\",\\\"nectar-net\\\",\\\"omega-net\\\",\\\"johnson-ortho\\\",\\\"zb-institute\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\",\\\"icarus\\\",\\\"taiyang-digital\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"applied-energetics\\\",\\\"ip\\\":\\\"38.3.8.3\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Applied Energetics\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":67,\\\"hackDifficulty\\\":67,\\\"minDifficulty\\\":22,\\\"moneyAvailable\\\":153670661.8,\\\"moneyMax\\\":768353309,\\\"numOpenPortsRequired\\\":4,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":828,\\\"serverGrowth\\\":75}},{\\\"name\\\":\\\"stormtech\\\",\\\"lineage\\\":[\\\"hong-fang-tea\\\",\\\"nectar-net\\\",\\\"omega-net\\\",\\\"johnson-ortho\\\",\\\"zb-institute\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\",\\\"icarus\\\",\\\"taiyang-digital\\\",\\\"applied-energetics\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"stormtech\\\",\\\"ip\\\":\\\"99.2.6.9\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Storm Technologies\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":86,\\\"hackDifficulty\\\":86,\\\"minDifficulty\\\":29,\\\"moneyAvailable\\\":227675522.8,\\\"moneyMax\\\":1138377614,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":1017,\\\"serverGrowth\\\":75}},{\\\"name\\\":\\\"helios\\\",\\\"lineage\\\":[\\\"hong-fang-tea\\\",\\\"nectar-net\\\",\\\"omega-net\\\",\\\"johnson-ortho\\\",\\\"zb-institute\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\",\\\"icarus\\\",\\\"taiyang-digital\\\",\\\"applied-energetics\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"helios\\\",\\\"ip\\\":\\\"2.8.6.2\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":64,\\\"organizationName\\\":\\\"Helios Labs\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":95,\\\"hackDifficulty\\\":95,\\\"minDifficulty\\\":32,\\\"moneyAvailable\\\":142203223.20000002,\\\"moneyMax\\\":711016116,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":875,\\\"serverGrowth\\\":77}},{\\\"name\\\":\\\"4sigma\\\",\\\"lineage\\\":[\\\"hong-fang-tea\\\",\\\"nectar-net\\\",\\\"omega-net\\\",\\\"johnson-ortho\\\",\\\"zb-institute\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\",\\\"icarus\\\",\\\"taiyang-digital\\\",\\\"applied-energetics\\\",\\\"helios\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"4sigma\\\",\\\"ip\\\":\\\"92.4.5.6\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Four Sigma\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":67,\\\"hackDifficulty\\\":67,\\\"minDifficulty\\\":22,\\\"moneyAvailable\\\":4294367456.4,\\\"moneyMax\\\":21471837282,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":1073,\\\"serverGrowth\\\":97}},{\\\"name\\\":\\\"kuai-gong\\\",\\\"lineage\\\":[\\\"hong-fang-tea\\\",\\\"nectar-net\\\",\\\"omega-net\\\",\\\"johnson-ortho\\\",\\\"zb-institute\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\",\\\"icarus\\\",\\\"taiyang-digital\\\",\\\"applied-energetics\\\",\\\"helios\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"kuai-gong\\\",\\\"ip\\\":\\\"46.3.3.3\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"KuaiGong International\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":99,\\\"hackDifficulty\\\":99,\\\"minDifficulty\\\":33,\\\"moneyAvailable\\\":5263233222.6,\\\"moneyMax\\\":26316166113,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":1089,\\\"serverGrowth\\\":94}},{\\\"name\\\":\\\".\\\",\\\"lineage\\\":[\\\"hong-fang-tea\\\",\\\"nectar-net\\\",\\\"omega-net\\\",\\\"johnson-ortho\\\",\\\"zb-institute\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\",\\\"icarus\\\",\\\"taiyang-digital\\\",\\\"applied-energetics\\\",\\\"helios\\\"],\\\"server\\\":{\\\"hostname\\\":\\\".\\\",\\\"ip\\\":\\\"35.6.0.0\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\".\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":1,\\\"hackDifficulty\\\":1,\\\"minDifficulty\\\":1,\\\"moneyAvailable\\\":0,\\\"moneyMax\\\":0,\\\"numOpenPortsRequired\\\":4,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":506,\\\"serverGrowth\\\":1}},{\\\"name\\\":\\\"blade\\\",\\\"lineage\\\":[\\\"hong-fang-tea\\\",\\\"nectar-net\\\",\\\"omega-net\\\",\\\"johnson-ortho\\\",\\\"zb-institute\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\",\\\"icarus\\\",\\\"taiyang-digital\\\",\\\"applied-energetics\\\",\\\"helios\\\",\\\"kuai-gong\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"blade\\\",\\\"ip\\\":\\\"46.3.7.3\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":512,\\\"organizationName\\\":\\\"Blade Industries\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":90,\\\"hackDifficulty\\\":90,\\\"minDifficulty\\\":30,\\\"moneyAvailable\\\":2450809760.2000003,\\\"moneyMax\\\":12254048801,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":942,\\\"serverGrowth\\\":62}},{\\\"name\\\":\\\"nwo\\\",\\\"lineage\\\":[\\\"hong-fang-tea\\\",\\\"nectar-net\\\",\\\"omega-net\\\",\\\"johnson-ortho\\\",\\\"zb-institute\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\",\\\"icarus\\\",\\\"taiyang-digital\\\",\\\"applied-energetics\\\",\\\"helios\\\",\\\"kuai-gong\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"nwo\\\",\\\"ip\\\":\\\"56.8.6.6\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"NWO\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":99,\\\"hackDifficulty\\\":99,\\\"minDifficulty\\\":33,\\\"moneyAvailable\\\":6603926536,\\\"moneyMax\\\":33019632680,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":1219,\\\"serverGrowth\\\":66}},{\\\"name\\\":\\\"ecorp\\\",\\\"lineage\\\":[\\\"hong-fang-tea\\\",\\\"nectar-net\\\",\\\"omega-net\\\",\\\"johnson-ortho\\\",\\\"zb-institute\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\",\\\"icarus\\\",\\\"taiyang-digital\\\",\\\"applied-energetics\\\",\\\"helios\\\",\\\"kuai-gong\\\",\\\"blade\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"ecorp\\\",\\\"ip\\\":\\\"52.7.2.7\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"ECorp\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":99,\\\"hackDifficulty\\\":99,\\\"minDifficulty\\\":33,\\\"moneyAvailable\\\":9511129894,\\\"moneyMax\\\":47555649470,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":1177,\\\"serverGrowth\\\":99}},{\\\"name\\\":\\\"megacorp\\\",\\\"lineage\\\":[\\\"hong-fang-tea\\\",\\\"nectar-net\\\",\\\"omega-net\\\",\\\"johnson-ortho\\\",\\\"zb-institute\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\",\\\"icarus\\\",\\\"taiyang-digital\\\",\\\"applied-energetics\\\",\\\"helios\\\",\\\"kuai-gong\\\",\\\"blade\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"megacorp\\\",\\\"ip\\\":\\\"73.5.2.8\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"MegaCorp\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":99,\\\"hackDifficulty\\\":99,\\\"minDifficulty\\\":33,\\\"moneyAvailable\\\":11009301731.2,\\\"moneyMax\\\":55046508656,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":1242,\\\"serverGrowth\\\":99}},{\\\"name\\\":\\\"The-Cave\\\",\\\"lineage\\\":[\\\"hong-fang-tea\\\",\\\"nectar-net\\\",\\\"omega-net\\\",\\\"johnson-ortho\\\",\\\"zb-institute\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\",\\\"icarus\\\",\\\"taiyang-digital\\\",\\\"applied-energetics\\\",\\\"helios\\\",\\\"kuai-gong\\\",\\\"blade\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"The-Cave\\\",\\\"ip\\\":\\\"77.8.5.6\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Helios\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":1,\\\"hackDifficulty\\\":1,\\\"minDifficulty\\\":1,\\\"moneyAvailable\\\":0,\\\"moneyMax\\\":0,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":925,\\\"serverGrowth\\\":1}},{\\\"name\\\":\\\"clarkinc\\\",\\\"lineage\\\":[\\\"hong-fang-tea\\\",\\\"nectar-net\\\",\\\"omega-net\\\",\\\"johnson-ortho\\\",\\\"zb-institute\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\",\\\"icarus\\\",\\\"taiyang-digital\\\",\\\"applied-energetics\\\",\\\"helios\\\",\\\"4sigma\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"clarkinc\\\",\\\"ip\\\":\\\"34.0.6.6\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Clarke Incorporated\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":48,\\\"hackDifficulty\\\":48,\\\"minDifficulty\\\":16,\\\"moneyAvailable\\\":4401882649,\\\"moneyMax\\\":22009413245,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":1116,\\\"serverGrowth\\\":55}},{\\\"name\\\":\\\"powerhouse-fitness\\\",\\\"lineage\\\":[\\\"hong-fang-tea\\\",\\\"nectar-net\\\",\\\"omega-net\\\",\\\"johnson-ortho\\\",\\\"zb-institute\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\",\\\"icarus\\\",\\\"taiyang-digital\\\",\\\"applied-energetics\\\",\\\"helios\\\",\\\"4sigma\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"powerhouse-fitness\\\",\\\"ip\\\":\\\"62.9.3.5\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":64,\\\"organizationName\\\":\\\"Powerhouse Fitness\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":62,\\\"hackDifficulty\\\":62,\\\"minDifficulty\\\":21,\\\"moneyAvailable\\\":180000000,\\\"moneyMax\\\":900000000,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":1047,\\\"serverGrowth\\\":59}},{\\\"name\\\":\\\"fulcrumassets\\\",\\\"lineage\\\":[\\\"hong-fang-tea\\\",\\\"nectar-net\\\",\\\"omega-net\\\",\\\"johnson-ortho\\\",\\\"zb-institute\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"unitalife\\\",\\\"icarus\\\",\\\"taiyang-digital\\\",\\\"applied-energetics\\\",\\\"helios\\\",\\\"4sigma\\\",\\\"clarkinc\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"fulcrumassets\\\",\\\"ip\\\":\\\"92.3.0.4\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Fulcrum Technologies\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":99,\\\"hackDifficulty\\\":99,\\\"minDifficulty\\\":33,\\\"moneyAvailable\\\":200000,\\\"moneyMax\\\":1000000,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":1263,\\\"serverGrowth\\\":1}},{\\\"name\\\":\\\"solaris\\\",\\\"lineage\\\":[\\\"hong-fang-tea\\\",\\\"nectar-net\\\",\\\"omega-net\\\",\\\"johnson-ortho\\\",\\\"zb-institute\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"omnia\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"solaris\\\",\\\"ip\\\":\\\"83.1.8.6\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":128,\\\"organizationName\\\":\\\"Solaris Space Systems\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":70,\\\"hackDifficulty\\\":70,\\\"minDifficulty\\\":23,\\\"moneyAvailable\\\":149707836.20000002,\\\"moneyMax\\\":748539181,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":798,\\\"serverGrowth\\\":79}},{\\\"name\\\":\\\"zeus-med\\\",\\\"lineage\\\":[\\\"hong-fang-tea\\\",\\\"nectar-net\\\",\\\"omega-net\\\",\\\"johnson-ortho\\\",\\\"zb-institute\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"omnia\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"zeus-med\\\",\\\"ip\\\":\\\"39.9.3.5\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Zeus Medical\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":79,\\\"hackDifficulty\\\":79,\\\"minDifficulty\\\":26,\\\"moneyAvailable\\\":293346263,\\\"moneyMax\\\":1466731315,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":821,\\\"serverGrowth\\\":76}},{\\\"name\\\":\\\"infocomm\\\",\\\"lineage\\\":[\\\"hong-fang-tea\\\",\\\"nectar-net\\\",\\\"omega-net\\\",\\\"johnson-ortho\\\",\\\"zb-institute\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"omnia\\\",\\\"solaris\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"infocomm\\\",\\\"ip\\\":\\\"39.0.4.8\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"InfoComm\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":84,\\\"hackDifficulty\\\":84,\\\"minDifficulty\\\":28,\\\"moneyAvailable\\\":146121140.20000002,\\\"moneyMax\\\":730605701,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":879,\\\"serverGrowth\\\":73}},{\\\"name\\\":\\\"titan-labs\\\",\\\"lineage\\\":[\\\"hong-fang-tea\\\",\\\"nectar-net\\\",\\\"omega-net\\\",\\\"johnson-ortho\\\",\\\"zb-institute\\\",\\\"aevum-police\\\",\\\"galactic-cyber\\\",\\\"omnia\\\",\\\"solaris\\\",\\\"infocomm\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"titan-labs\\\",\\\"ip\\\":\\\"14.2.8.0\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\"Titan Laboratories\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":77,\\\"hackDifficulty\\\":77,\\\"minDifficulty\\\":26,\\\"moneyAvailable\\\":154283475.6,\\\"moneyMax\\\":771417378,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":805,\\\"serverGrowth\\\":80}},{\\\"name\\\":\\\"the-hub\\\",\\\"lineage\\\":[\\\"hong-fang-tea\\\",\\\"nectar-net\\\",\\\"neo-net\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"the-hub\\\",\\\"ip\\\":\\\"12.2.4.3\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":32,\\\"organizationName\\\":\\\"The Hub\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":41,\\\"hackDifficulty\\\":41,\\\"minDifficulty\\\":14,\\\"moneyAvailable\\\":39891145.4,\\\"moneyMax\\\":199455727,\\\"numOpenPortsRequired\\\":2,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":312,\\\"serverGrowth\\\":48}},{\\\"name\\\":\\\"netlink\\\",\\\"lineage\\\":[\\\"hong-fang-tea\\\",\\\"nectar-net\\\",\\\"neo-net\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"netlink\\\",\\\"ip\\\":\\\"81.4.6.8\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\"NetLink Technologies\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":75,\\\"hackDifficulty\\\":75,\\\"minDifficulty\\\":25,\\\"moneyAvailable\\\":55000000,\\\"moneyMax\\\":275000000,\\\"numOpenPortsRequired\\\":3,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":423,\\\"serverGrowth\\\":53}},{\\\"name\\\":\\\"crush-fitness\\\",\\\"lineage\\\":[\\\"hong-fang-tea\\\",\\\"nectar-net\\\",\\\"neo-net\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"crush-fitness\\\",\\\"ip\\\":\\\"8.4.2.6\\\",\\\"sshPortOpen\\\":true,\\\"ftpPortOpen\\\":true,\\\"smtpPortOpen\\\":true,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Crush Fitness\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":true,\\\"baseDifficulty\\\":36,\\\"hackDifficulty\\\":14.26,\\\"minDifficulty\\\":12,\\\"moneyAvailable\\\":18229590.831641704,\\\"moneyMax\\\":44010655,\\\"numOpenPortsRequired\\\":2,\\\"openPortCount\\\":3,\\\"requiredHackingSkill\\\":274,\\\"serverGrowth\\\":33}},{\\\"name\\\":\\\"avmnite-02h\\\",\\\"lineage\\\":[\\\"hong-fang-tea\\\",\\\"nectar-net\\\",\\\"neo-net\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"avmnite-02h\\\",\\\"ip\\\":\\\"66.4.7.2\\\",\\\"sshPortOpen\\\":true,\\\"ftpPortOpen\\\":true,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":15.75,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\"NiteSec\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":true,\\\"baseDifficulty\\\":1,\\\"hackDifficulty\\\":1,\\\"minDifficulty\\\":1,\\\"moneyAvailable\\\":0,\\\"moneyMax\\\":0,\\\"numOpenPortsRequired\\\":2,\\\"openPortCount\\\":2,\\\"requiredHackingSkill\\\":216,\\\"serverGrowth\\\":1}},{\\\"name\\\":\\\"I.I.I.I\\\",\\\"lineage\\\":[\\\"hong-fang-tea\\\",\\\"nectar-net\\\",\\\"neo-net\\\",\\\"avmnite-02h\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"I.I.I.I\\\",\\\"ip\\\":\\\"91.6.1.8\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\"I.I.I.I\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":1,\\\"hackDifficulty\\\":1,\\\"minDifficulty\\\":1,\\\"moneyAvailable\\\":0,\\\"moneyMax\\\":0,\\\"numOpenPortsRequired\\\":3,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":356,\\\"serverGrowth\\\":1}},{\\\"name\\\":\\\"catalyst\\\",\\\"lineage\\\":[\\\"hong-fang-tea\\\",\\\"nectar-net\\\",\\\"neo-net\\\",\\\"netlink\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"catalyst\\\",\\\"ip\\\":\\\"53.6.9.2\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":128,\\\"organizationName\\\":\\\"Catalyst Ventures\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":66,\\\"hackDifficulty\\\":66,\\\"minDifficulty\\\":22,\\\"moneyAvailable\\\":77344326.4,\\\"moneyMax\\\":386721632,\\\"numOpenPortsRequired\\\":3,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":445,\\\"serverGrowth\\\":30}},{\\\"name\\\":\\\"rothman-uni\\\",\\\"lineage\\\":[\\\"hong-fang-tea\\\",\\\"nectar-net\\\",\\\"neo-net\\\",\\\"the-hub\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"rothman-uni\\\",\\\"ip\\\":\\\"96.5.8.6\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":64,\\\"organizationName\\\":\\\"Rothman University\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":46,\\\"hackDifficulty\\\":46,\\\"minDifficulty\\\":15,\\\"moneyAvailable\\\":41194356,\\\"moneyMax\\\":205971780,\\\"numOpenPortsRequired\\\":3,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":387,\\\"serverGrowth\\\":38}},{\\\"name\\\":\\\"summit-uni\\\",\\\"lineage\\\":[\\\"hong-fang-tea\\\",\\\"nectar-net\\\",\\\"neo-net\\\",\\\"the-hub\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"summit-uni\\\",\\\"ip\\\":\\\"78.7.2.8\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\"Summit University\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":63,\\\"hackDifficulty\\\":63,\\\"minDifficulty\\\":21,\\\"moneyAvailable\\\":55593538.6,\\\"moneyMax\\\":277967693,\\\"numOpenPortsRequired\\\":3,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":444,\\\"serverGrowth\\\":59}},{\\\"name\\\":\\\"lexo-corp\\\",\\\"lineage\\\":[\\\"hong-fang-tea\\\",\\\"nectar-net\\\",\\\"neo-net\\\",\\\"the-hub\\\",\\\"summit-uni\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"lexo-corp\\\",\\\"ip\\\":\\\"8.5.8.6\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\"LexoCorp\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":60,\\\"hackDifficulty\\\":60,\\\"minDifficulty\\\":20,\\\"moneyAvailable\\\":147923396.4,\\\"moneyMax\\\":739616982,\\\"numOpenPortsRequired\\\":4,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":672,\\\"serverGrowth\\\":55}},{\\\"name\\\":\\\"snap-fitness\\\",\\\"lineage\\\":[\\\"hong-fang-tea\\\",\\\"nectar-net\\\",\\\"neo-net\\\",\\\"the-hub\\\",\\\"summit-uni\\\",\\\"lexo-corp\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"snap-fitness\\\",\\\"ip\\\":\\\"55.5.7.8\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Snap Fitness\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":59,\\\"hackDifficulty\\\":59,\\\"minDifficulty\\\":20,\\\"moneyAvailable\\\":90000000,\\\"moneyMax\\\":450000000,\\\"numOpenPortsRequired\\\":4,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":741,\\\"serverGrowth\\\":59}},{\\\"name\\\":\\\"alpha-ent\\\",\\\"lineage\\\":[\\\"hong-fang-tea\\\",\\\"nectar-net\\\",\\\"neo-net\\\",\\\"the-hub\\\",\\\"rothman-uni\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"alpha-ent\\\",\\\"ip\\\":\\\"19.6.7.2\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":128,\\\"organizationName\\\":\\\"Alpha Enterprises\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":51,\\\"hackDifficulty\\\":51,\\\"minDifficulty\\\":17,\\\"moneyAvailable\\\":123287064.60000001,\\\"moneyMax\\\":616435323,\\\"numOpenPortsRequired\\\":4,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":510,\\\"serverGrowth\\\":55}},{\\\"name\\\":\\\"millenium-fitness\\\",\\\"lineage\\\":[\\\"hong-fang-tea\\\",\\\"nectar-net\\\",\\\"neo-net\\\",\\\"the-hub\\\",\\\"rothman-uni\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"millenium-fitness\\\",\\\"ip\\\":\\\"14.3.3.4\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":128,\\\"organizationName\\\":\\\"Millenium Fitness Network\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":50,\\\"hackDifficulty\\\":50,\\\"minDifficulty\\\":17,\\\"moneyAvailable\\\":50000000,\\\"moneyMax\\\":250000000,\\\"numOpenPortsRequired\\\":3,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":498,\\\"serverGrowth\\\":40}},{\\\"name\\\":\\\"global-pharm\\\",\\\"lineage\\\":[\\\"hong-fang-tea\\\",\\\"nectar-net\\\",\\\"neo-net\\\",\\\"the-hub\\\",\\\"rothman-uni\\\",\\\"alpha-ent\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"global-pharm\\\",\\\"ip\\\":\\\"59.7.7.4\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":8,\\\"organizationName\\\":\\\"Global Pharmaceuticals\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":76,\\\"hackDifficulty\\\":76,\\\"minDifficulty\\\":25,\\\"moneyAvailable\\\":310959721,\\\"moneyMax\\\":1554798605,\\\"numOpenPortsRequired\\\":4,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":808,\\\"serverGrowth\\\":85}},{\\\"name\\\":\\\"deltaone\\\",\\\"lineage\\\":[\\\"hong-fang-tea\\\",\\\"nectar-net\\\",\\\"neo-net\\\",\\\"the-hub\\\",\\\"rothman-uni\\\",\\\"alpha-ent\\\",\\\"global-pharm\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"deltaone\\\",\\\"ip\\\":\\\"57.9.9.5\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"DeltaOne\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":79,\\\"hackDifficulty\\\":79,\\\"minDifficulty\\\":26,\\\"moneyAvailable\\\":274782569.6,\\\"moneyMax\\\":1373912848,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":817,\\\"serverGrowth\\\":57}},{\\\"name\\\":\\\"defcomm\\\",\\\"lineage\\\":[\\\"hong-fang-tea\\\",\\\"nectar-net\\\",\\\"neo-net\\\",\\\"the-hub\\\",\\\"rothman-uni\\\",\\\"alpha-ent\\\",\\\"global-pharm\\\",\\\"deltaone\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"defcomm\\\",\\\"ip\\\":\\\"68.6.2.8\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"DefComm\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":92,\\\"hackDifficulty\\\":92,\\\"minDifficulty\\\":31,\\\"moneyAvailable\\\":171561283.4,\\\"moneyMax\\\":857806417,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":872,\\\"serverGrowth\\\":54}},{\\\"name\\\":\\\"univ-energy\\\",\\\"lineage\\\":[\\\"hong-fang-tea\\\",\\\"nectar-net\\\",\\\"neo-net\\\",\\\"the-hub\\\",\\\"rothman-uni\\\",\\\"alpha-ent\\\",\\\"global-pharm\\\",\\\"deltaone\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"univ-energy\\\",\\\"ip\\\":\\\"6.9.1.9\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\"Universal Energy\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":89,\\\"hackDifficulty\\\":89,\\\"minDifficulty\\\":30,\\\"moneyAvailable\\\":220640923.60000002,\\\"moneyMax\\\":1103204618,\\\"numOpenPortsRequired\\\":4,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":851,\\\"serverGrowth\\\":81}},{\\\"name\\\":\\\"nova-med\\\",\\\"lineage\\\":[\\\"hong-fang-tea\\\",\\\"nectar-net\\\",\\\"neo-net\\\",\\\"the-hub\\\",\\\"rothman-uni\\\",\\\"alpha-ent\\\",\\\"global-pharm\\\",\\\"deltaone\\\",\\\"univ-energy\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"nova-med\\\",\\\"ip\\\":\\\"78.6.7.1\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Nova Medical\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":66,\\\"hackDifficulty\\\":66,\\\"minDifficulty\\\":22,\\\"moneyAvailable\\\":223112572.60000002,\\\"moneyMax\\\":1115562863,\\\"numOpenPortsRequired\\\":4,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":835,\\\"serverGrowth\\\":70}},{\\\"name\\\":\\\"microdyne\\\",\\\"lineage\\\":[\\\"hong-fang-tea\\\",\\\"nectar-net\\\",\\\"neo-net\\\",\\\"the-hub\\\",\\\"rothman-uni\\\",\\\"alpha-ent\\\",\\\"global-pharm\\\",\\\"deltaone\\\",\\\"univ-energy\\\",\\\"nova-med\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"microdyne\\\",\\\"ip\\\":\\\"75.5.5.0\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":64,\\\"organizationName\\\":\\\"Microdyne Technologies\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":70,\\\"hackDifficulty\\\":70,\\\"minDifficulty\\\":23,\\\"moneyAvailable\\\":126020410.4,\\\"moneyMax\\\":630102052,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":805,\\\"serverGrowth\\\":83}},{\\\"name\\\":\\\"run4theh111z\\\",\\\"lineage\\\":[\\\"hong-fang-tea\\\",\\\"nectar-net\\\",\\\"neo-net\\\",\\\"the-hub\\\",\\\"rothman-uni\\\",\\\"alpha-ent\\\",\\\"global-pharm\\\",\\\"deltaone\\\",\\\"univ-energy\\\",\\\"nova-med\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"run4theh111z\\\",\\\"ip\\\":\\\"41.2.3.5\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":128,\\\"organizationName\\\":\\\"The Runners\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":1,\\\"hackDifficulty\\\":1,\\\"minDifficulty\\\":1,\\\"moneyAvailable\\\":0,\\\"moneyMax\\\":0,\\\"numOpenPortsRequired\\\":4,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":545,\\\"serverGrowth\\\":1}},{\\\"name\\\":\\\"vitalife\\\",\\\"lineage\\\":[\\\"hong-fang-tea\\\",\\\"nectar-net\\\",\\\"neo-net\\\",\\\"the-hub\\\",\\\"rothman-uni\\\",\\\"alpha-ent\\\",\\\"global-pharm\\\",\\\"deltaone\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"run4theh111z\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"vitalife\\\",\\\"ip\\\":\\\"92.5.6.1\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\"VitaLife\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":85,\\\"hackDifficulty\\\":85,\\\"minDifficulty\\\":28,\\\"moneyAvailable\\\":143490868.6,\\\"moneyMax\\\":717454343,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":785,\\\"serverGrowth\\\":79}},{\\\"name\\\":\\\"fulcrumtech\\\",\\\"lineage\\\":[\\\"hong-fang-tea\\\",\\\"nectar-net\\\",\\\"neo-net\\\",\\\"the-hub\\\",\\\"rothman-uni\\\",\\\"alpha-ent\\\",\\\"global-pharm\\\",\\\"deltaone\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"microdyne\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"fulcrumtech\\\",\\\"ip\\\":\\\"74.8.8.8\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":128,\\\"organizationName\\\":\\\"Fulcrum Technologies\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":95,\\\"hackDifficulty\\\":95,\\\"minDifficulty\\\":32,\\\"moneyAvailable\\\":304232622.2,\\\"moneyMax\\\":1521163111,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":1181,\\\"serverGrowth\\\":96}},{\\\"name\\\":\\\"omnitek\\\",\\\"lineage\\\":[\\\"hong-fang-tea\\\",\\\"nectar-net\\\",\\\"neo-net\\\",\\\"the-hub\\\",\\\"rothman-uni\\\",\\\"alpha-ent\\\",\\\"global-pharm\\\",\\\"deltaone\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"microdyne\\\",\\\"fulcrumtech\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"omnitek\\\",\\\"ip\\\":\\\"83.1.7.8\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":512,\\\"organizationName\\\":\\\"OmniTek Incorporated\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":92,\\\"hackDifficulty\\\":92,\\\"minDifficulty\\\":31,\\\"moneyAvailable\\\":3739181660.4,\\\"moneyMax\\\":18695908302,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":928,\\\"serverGrowth\\\":99}},{\\\"name\\\":\\\"b-and-a\\\",\\\"lineage\\\":[\\\"hong-fang-tea\\\",\\\"nectar-net\\\",\\\"neo-net\\\",\\\"the-hub\\\",\\\"rothman-uni\\\",\\\"alpha-ent\\\",\\\"global-pharm\\\",\\\"deltaone\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"microdyne\\\",\\\"fulcrumtech\\\",\\\"omnitek\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"b-and-a\\\",\\\"ip\\\":\\\"63.2.1.6\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"Bachman & Associates\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":82,\\\"hackDifficulty\\\":82,\\\"minDifficulty\\\":27,\\\"moneyAvailable\\\":3047419018.4,\\\"moneyMax\\\":15237095092,\\\"numOpenPortsRequired\\\":5,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":1096,\\\"serverGrowth\\\":76}},{\\\"name\\\":\\\"zer0\\\",\\\"lineage\\\":[\\\"joesguns\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"zer0\\\",\\\"ip\\\":\\\"21.7.5.2\\\",\\\"sshPortOpen\\\":true,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":31.5,\\\"maxRam\\\":32,\\\"organizationName\\\":\\\"ZER0 Nightclub\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":true,\\\"baseDifficulty\\\":25,\\\"hackDifficulty\\\":14.63599999999999,\\\"minDifficulty\\\":8,\\\"moneyAvailable\\\":6344135.456681891,\\\"moneyMax\\\":7500000,\\\"numOpenPortsRequired\\\":1,\\\"openPortCount\\\":1,\\\"requiredHackingSkill\\\":75,\\\"serverGrowth\\\":40}},{\\\"name\\\":\\\"phantasy\\\",\\\"lineage\\\":[\\\"joesguns\\\",\\\"zer0\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"phantasy\\\",\\\"ip\\\":\\\"60.1.3.4\\\",\\\"sshPortOpen\\\":true,\\\"ftpPortOpen\\\":true,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":31.5,\\\"maxRam\\\":32,\\\"organizationName\\\":\\\"Phantasy Club\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":true,\\\"baseDifficulty\\\":20,\\\"hackDifficulty\\\":9.176,\\\"minDifficulty\\\":7,\\\"moneyAvailable\\\":2624.6242377813005,\\\"moneyMax\\\":24000000,\\\"numOpenPortsRequired\\\":2,\\\"openPortCount\\\":2,\\\"requiredHackingSkill\\\":100,\\\"serverGrowth\\\":35}},{\\\"name\\\":\\\"computek\\\",\\\"lineage\\\":[\\\"joesguns\\\",\\\"zer0\\\",\\\"phantasy\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"computek\\\",\\\"ip\\\":\\\"21.1.5.8\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"CompuTek\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":64,\\\"hackDifficulty\\\":64,\\\"minDifficulty\\\":21,\\\"moneyAvailable\\\":45429093.800000004,\\\"moneyMax\\\":227145469,\\\"numOpenPortsRequired\\\":3,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":303,\\\"serverGrowth\\\":59}},{\\\"name\\\":\\\"syscore\\\",\\\"lineage\\\":[\\\"joesguns\\\",\\\"zer0\\\",\\\"phantasy\\\",\\\"computek\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"syscore\\\",\\\"ip\\\":\\\"13.0.3.2\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":0,\\\"organizationName\\\":\\\"SysCore Securities\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":78,\\\"hackDifficulty\\\":78,\\\"minDifficulty\\\":26,\\\"moneyAvailable\\\":118214217,\\\"moneyMax\\\":591071085,\\\"numOpenPortsRequired\\\":4,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":584,\\\"serverGrowth\\\":66}},{\\\"name\\\":\\\"rho-construction\\\",\\\"lineage\\\":[\\\"joesguns\\\",\\\"zer0\\\",\\\"phantasy\\\",\\\"computek\\\",\\\"syscore\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"rho-construction\\\",\\\"ip\\\":\\\"72.7.2.5\\\",\\\"sshPortOpen\\\":false,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":false,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":0,\\\"maxRam\\\":16,\\\"organizationName\\\":\\\"Rho Construction\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":false,\\\"baseDifficulty\\\":57,\\\"hackDifficulty\\\":57,\\\"minDifficulty\\\":19,\\\"moneyAvailable\\\":128414990.4,\\\"moneyMax\\\":642074952,\\\"numOpenPortsRequired\\\":3,\\\"openPortCount\\\":0,\\\"requiredHackingSkill\\\":524,\\\"serverGrowth\\\":44}},{\\\"name\\\":\\\"max-hardware\\\",\\\"lineage\\\":[\\\"foodnstuff\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"max-hardware\\\",\\\"ip\\\":\\\"32.4.9.1\\\",\\\"sshPortOpen\\\":true,\\\"ftpPortOpen\\\":false,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":31.5,\\\"maxRam\\\":32,\\\"organizationName\\\":\\\"Max Hardware Store\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":true,\\\"baseDifficulty\\\":15,\\\"hackDifficulty\\\":10.716000000000003,\\\"minDifficulty\\\":5,\\\"moneyAvailable\\\":7154.489845312511,\\\"moneyMax\\\":10000000,\\\"numOpenPortsRequired\\\":1,\\\"openPortCount\\\":1,\\\"requiredHackingSkill\\\":80,\\\"serverGrowth\\\":30}},{\\\"name\\\":\\\"silver-helix\\\",\\\"lineage\\\":[\\\"foodnstuff\\\",\\\"max-hardware\\\"],\\\"server\\\":{\\\"hostname\\\":\\\"silver-helix\\\",\\\"ip\\\":\\\"36.7.5.7\\\",\\\"sshPortOpen\\\":true,\\\"ftpPortOpen\\\":true,\\\"smtpPortOpen\\\":false,\\\"httpPortOpen\\\":false,\\\"sqlPortOpen\\\":false,\\\"hasAdminRights\\\":true,\\\"cpuCores\\\":1,\\\"isConnectedTo\\\":false,\\\"ramUsed\\\":63,\\\"maxRam\\\":64,\\\"organizationName\\\":\\\"Silver Helix\\\",\\\"purchasedByPlayer\\\":false,\\\"backdoorInstalled\\\":true,\\\"baseDifficulty\\\":30,\\\"hackDifficulty\\\":14.368,\\\"minDifficulty\\\":10,\\\"moneyAvailable\\\":32100561.53008452,\\\"moneyMax\\\":45000000,\\\"numOpenPortsRequired\\\":2,\\\"openPortCount\\\":2,\\\"requiredHackingSkill\\\":150,\\\"serverGrowth\\\":30}}]\"}}],[\"data/ramNeededToStartBatches.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"data/ramNeededToStartBatches.txt\",\"text\":\"100793\"}}],[\"data/ramToReserveOnHome.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"data/ramToReserveOnHome.txt\",\"text\":\"{\\\"ramToReserve\\\":1027.7,\\\"ramToReserveInLimitedEnvironment\\\":16.55,\\\"earlyGameLimiter\\\":\\\"scripts/stock/invest-in-stocks.js\\\"}\"}}],[\"data/ownedAugs.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"data/ownedAugs.txt\",\"text\":\"[]\"}}],[\"data/scriptsToRun.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"data/scriptsToRun.txt\",\"text\":\"[\\\"scripts/hacking/hack-all-machines.js\\\",\\\"scripts/precalculate-important-data.js\\\",\\\"scripts/script-registry.js\\\",\\\"scripts/stock/get-stock-quotes.js\\\",\\\"scripts/stock/second-part-of-quotes.js\\\",\\\"scripts/stock/populate-forecast.js\\\",\\\"scripts/stock/invest-in-stocks.js\\\",\\\"scripts/stock/buy-4s.js\\\",\\\"scripts/contracts/get.js\\\",\\\"scripts/contracts/populate-input.js\\\",\\\"scripts/contracts/populate-description.js\\\",\\\"scripts/contracts/do.js\\\",\\\"scripts/contracts/save-contracts-for-thomas.js\\\",\\\"scripts/singularity/join-organziations.js\\\",\\\"scripts/singularity/apply-to-jobs.js\\\",\\\"scripts/singularity/do-work-get-augments.js\\\",\\\"scripts/singularity/backdoor-all-machines.js\\\",\\\"scripts/singularity/do-work.js\\\",\\\"scripts/singularity/finish-round.js\\\",\\\"scripts/singularity/finish-bitnode.js\\\",\\\"scripts/singularity/study-computer-science.js\\\",\\\"scripts/singularity/create-early-programs.js\\\",\\\"scripts/singularity/do-job.js\\\",\\\"scripts/singularity/buy-rep.js\\\",\\\"scripts/singularity/workout.js\\\",\\\"scripts/singularity/upgade-home-machine.js\\\",\\\"scripts/singularity/travel-to-get-augs.js\\\",\\\"scripts/investments/invest-in-nodes.js\\\",\\\"scripts/investments/purchase-server.js\\\",\\\"scripts/investments/invest-in-programs.js\\\",\\\"scripts/corporations/invest.js\\\",\\\"scripts/corporations/start-company.js\\\",\\\"scripts/corporations/get-corporate-info.js\\\",\\\"scripts/corporations/add-supporting-material.js\\\",\\\"scripts/corporations/upgrade-offices.js\\\",\\\"scripts/corporations/upgrade-warehouse.js\\\",\\\"scripts/corporations/expand.js\\\",\\\"scripts/corporations/product-management.js\\\",\\\"scripts/corporations/research.js\\\",\\\"scripts/corporations/tea-party.js\\\",\\\"scripts/corporations/adjust-prices-export.js\\\",\\\"scripts/corporations/get-investments.js\\\",\\\"scripts/corporations/bribe-factions.js\\\"]\"}}],[\"data/latestQuotes.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"data/latestQuotes.txt\",\"text\":\"[{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ECP\\\",\\\"bid\\\":23478.726981179545,\\\"ask\\\":23525.73143960032,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:51 AM\\\"},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MGCP\\\",\\\"bid\\\":3252.600250959117,\\\"ask\\\":3265.636724910857,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:51 AM\\\"},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"BLD\\\",\\\"bid\\\":20444.211643919643,\\\"ask\\\":20649.68110767763,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:51 AM\\\"},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CLRK\\\",\\\"bid\\\":8662.584633317932,\\\"ask\\\":8697.304411407382,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:51 AM\\\"},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMTK\\\",\\\"bid\\\":55437.980732802724,\\\"ask\\\":55771.60950351167,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:51 AM\\\"},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FSIG\\\",\\\"bid\\\":13485.5907461233,\\\"ask\\\":13758.02692281266,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:51 AM\\\"},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"KGI\\\",\\\"bid\\\":14781.120911051812,\\\"ask\\\":14810.712744707569,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:51 AM\\\"},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FLCM\\\",\\\"bid\\\":2158.191690470027,\\\"ask\\\":2179.8820592184693,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:51 AM\\\"},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"STM\\\",\\\"bid\\\":125244.35234814725,\\\"ask\\\":127519.22454014183,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:51 AM\\\"},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"DCOMM\\\",\\\"bid\\\":9831.579845277896,\\\"ask\\\":9870.984974918289,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:51 AM\\\"},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"HLS\\\",\\\"bid\\\":3284.1416650467513,\\\"ask\\\":3350.4879613103217,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:51 AM\\\"},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"VITA\\\",\\\"bid\\\":19030.614651907086,\\\"ask\\\":19106.889660531964,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:51 AM\\\"},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"ICRS\\\",\\\"bid\\\":17512.846147022396,\\\"ask\\\":17866.641018679413,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:51 AM\\\"},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"UNV\\\",\\\"bid\\\":19243.110423479247,\\\"ask\\\":19358.91650426247,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:51 AM\\\"},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"AERO\\\",\\\"bid\\\":18443.081380686475,\\\"ask\\\":18740.550435213678,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:51 AM\\\"},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMN\\\",\\\"bid\\\":18217.218668444144,\\\"ask\\\":18474.057602339628,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:51 AM\\\"},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SLRS\\\",\\\"bid\\\":22216.73634811859,\\\"ask\\\":22575.07080534631,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:51 AM\\\"},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"GPH\\\",\\\"bid\\\":14589.449126917205,\\\"ask\\\":14736.076756333456,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:51 AM\\\"},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NVMD\\\",\\\"bid\\\":6347.505378711132,\\\"ask\\\":6436.996894624481,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:51 AM\\\"},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"WDS\\\",\\\"bid\\\":921.7435592733024,\\\"ask\\\":942.2474604907063,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:51 AM\\\"},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"LXO\\\",\\\"bid\\\":4423.07615560364,\\\"ask\\\":4521.466120642345,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:51 AM\\\"},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"RHOC\\\",\\\"bid\\\":1072.534717427883,\\\"ask\\\":1085.482822668461,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:51 AM\\\"},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"APHE\\\",\\\"bid\\\":305.9008644979812,\\\"ask\\\":315.21764209690446,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:51 AM\\\"},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SYSC\\\",\\\"bid\\\":5420.780223110723,\\\"ask\\\":5530.290934688717,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:51 AM\\\"},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTK\\\",\\\"bid\\\":3080.4562696955345,\\\"ask\\\":3136.4080485598324,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:51 AM\\\"},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"NTLK\\\",\\\"bid\\\":4035225.1489837337,\\\"ask\\\":4149815.7211658275,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:51 AM\\\"},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"OMGA\\\",\\\"bid\\\":8553.245750920676,\\\"ask\\\":8656.50425093179,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:51 AM\\\"},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"FNS\\\",\\\"bid\\\":3527.5519286080557,\\\"ask\\\":3591.624516615064,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:51 AM\\\"},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"JGN\\\",\\\"bid\\\":614070.300193899,\\\"ask\\\":625223.9484315277,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:51 AM\\\"},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"SGC\\\",\\\"bid\\\":308251.8434491033,\\\"ask\\\":314479.15341777203,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:51 AM\\\"},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"CTYS\\\",\\\"bid\\\":895.606653583728,\\\"ask\\\":921.0397025698784,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:51 AM\\\"},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"MDYN\\\",\\\"bid\\\":4570.214694664968,\\\"ask\\\":4597.718494231657,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:51 AM\\\"},{\\\"buyTrend\\\":false,\\\"sellTrend\\\":false,\\\"sellShortTrend\\\":false,\\\"coverShortTrend\\\":false,\\\"symbol\\\":\\\"TITN\\\",\\\"bid\\\":28115.77742671134,\\\"ask\\\":28569.257707787325,\\\"dateObserved\\\":\\\"7/29/2023, 8:26:51 AM\\\"}]\"}}]]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"scripts/coordinator.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":34224.496,\"onlineExpGained\":0,\"onlineMoneyMade\":37195029729.59621,\"onlineRunningTime\":68697.00999956141,\"ramUsage\":2.7,\"server\":\"home\",\"scriptKey\":\"scripts/coordinator.js*[]\",\"title\":\"scripts/coordinator.js \",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":60.41000000000032,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"johnson-ortho\\\"]\",\"title\":\"scripts/hacking/grow.js johnson-ortho\",\"threads\":20,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"scripts/hacking/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":60.41000000000032,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"scripts/hacking/weaken.js*[\\\"zer0\\\"]\",\"title\":\"scripts/hacking/weaken.js zer0\",\"threads\":4,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"scripts/hacking/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":31.409999999999922,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"scripts/hacking/weaken.js*[\\\"max-hardware\\\"]\",\"title\":\"scripts/hacking/weaken.js max-hardware\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.209999999999944,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"nectar-net\\\"]\",\"title\":\"scripts/hacking/grow.js nectar-net\",\"threads\":7,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.809999999999967,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"sigma-cosmetics\\\"]\",\"title\":\"scripts/hacking/grow.js sigma-cosmetics\",\"threads\":4,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":12.609999999999989,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"foodnstuff\\\"]\",\"title\":\"scripts/hacking/grow.js foodnstuff\",\"threads\":7,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":10.609999999999996,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"joesguns\\\"]\",\"title\":\"scripts/hacking/grow.js joesguns\",\"threads\":7,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.41,\"ramUsage\":1.75,\"server\":\"home\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"n00dles\\\"]\",\"title\":\"scripts/hacking/grow.js n00dles\",\"threads\":6,\"temporary\":false}}]}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"52.7.2.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":9511129894,\"moneyMax\":47555649470,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1177,\"serverGrowth\":99,\"runningScripts\":[]}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-449584.cct\",\"type\":\"Proper 2-Coloring of a Graph\",\"data\":[14,[[8,12],[10,11],[6,11],[6,7],[6,8],[5,12],[6,9],[1,5],[0,4],[4,10],[3,11],[0,5],[3,7],[0,7],[4,10],[1,9],[1,7],[7,12],[4,12],[4,6],[10,13],[3,8],[11,12],[2,11],[5,10],[2,8],[3,5],[1,11],[9,12]]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"73.5.2.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":11009301731.2,\"moneyMax\":55046508656,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1242,\"serverGrowth\":99,\"runningScripts\":[]}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"63.2.1.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":3047419018.4,\"moneyMax\":15237095092,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1096,\"serverGrowth\":76,\"runningScripts\":[]}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-514183.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"2253490\",60],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"46.3.7.3\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"kuai-gong\",\"ecorp\",\"megacorp\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":2450809760.2000003,\"moneyMax\":12254048801,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":942,\"serverGrowth\":62,\"runningScripts\":[]}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-30438-TianDiHui.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":22563020385,\"reward\":{\"name\":\"Tian Di Hui\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-676921.cct\",\"type\":\"Array Jumping Game\",\"data\":[5,3,0],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"56.8.6.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":6603926536,\"moneyMax\":33019632680,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1219,\"serverGrowth\":66,\"runningScripts\":[]}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"34.0.6.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"4sigma\",\"fulcrumassets\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":48,\"hackDifficulty\":48,\"minDifficulty\":16,\"moneyAvailable\":4401882649,\"moneyMax\":22009413245,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1116,\"serverGrowth\":55,\"runningScripts\":[]}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":1,\"fn\":\"contract-841265.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[7,[35,73,177,180,173,62,60,22,163,171,126,33,61,70,66,183,150,192,118,125,189,99,184,42,36,97,46,31,78,136,174,195,58,74,55,20,25,156,139,58,32,10,23,106,143,96,74,108]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"83.1.7.8\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"fulcrumtech\",\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":92,\"minDifficulty\":31,\"moneyAvailable\":3739181660.4,\"moneyMax\":18695908302,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":928,\"serverGrowth\":99,\"runningScripts\":[]}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"92.4.5.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"helios\",\"clarkinc\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":67,\"hackDifficulty\":67,\"minDifficulty\":22,\"moneyAvailable\":4294367456.4,\"moneyMax\":21471837282,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1073,\"serverGrowth\":97,\"runningScripts\":[]}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-95547-CyberSec.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":37,\"reward\":{\"name\":\"CyberSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"46.3.3.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"helios\",\"blade\",\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":5263233222.6,\"moneyMax\":26316166113,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1089,\"serverGrowth\":94,\"runningScripts\":[]}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-542501.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":4655676301747880,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"74.8.8.8\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"microdyne\",\"omnitek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":304232622.2,\"moneyMax\":1521163111,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1181,\"serverGrowth\":96,\"runningScripts\":[]}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-162034-BachmanAssociates.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[4,12],\"reward\":{\"name\":\"Bachman & Associates\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"92.3.0.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":200000,\"moneyMax\":1000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1263,\"serverGrowth\":1,\"runningScripts\":[]}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"99.2.6.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"applied-energetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":227675522.8,\"moneyMax\":1138377614,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1017,\"serverGrowth\":75,\"runningScripts\":[]}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"68.6.2.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":92,\"minDifficulty\":31,\"moneyAvailable\":171561283.4,\"moneyMax\":857806417,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":872,\"serverGrowth\":54,\"runningScripts\":[]}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-921158-NiteSec.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"(()((a)(((\",\"reward\":{\"name\":\"NiteSec\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-159954-BachmanAssociates.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":7684497914009,\"reward\":{\"name\":\"Bachman & Associates\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"39.0.4.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"solaris\",\"titan-labs\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":146121140.20000002,\"moneyMax\":730605701,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":879,\"serverGrowth\":73,\"runningScripts\":[]}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"2.8.6.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"applied-energetics\",\"4sigma\",\"kuai-gong\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":142203223.20000002,\"moneyMax\":711016116,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":875,\"serverGrowth\":77,\"runningScripts\":[]}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"92.5.6.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":143490868.6,\"moneyMax\":717454343,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":785,\"serverGrowth\":79,\"runningScripts\":[]}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"18.0.9.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"unitalife\",\"taiyang-digital\",\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":183936769.8,\"moneyMax\":919683849,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":882,\"serverGrowth\":94,\"runningScripts\":[]}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"univ-energy\",\"httpPortOpen\":false,\"ip\":\"6.9.1.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"deltaone\",\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":220640923.60000002,\"moneyMax\":1103204618,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":851,\"serverGrowth\":81,\"runningScripts\":[]}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-675708.cct\",\"type\":\"Array Jumping Game\",\"data\":[5,4,0,5,4,0,4,7,1,0,4,8,0,8,3,2],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"14.2.8.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"infocomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":154283475.6,\"moneyMax\":771417378,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":805,\"serverGrowth\":80,\"runningScripts\":[]}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-791331-Sector12.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0],[0,0,0]],\"reward\":{\"name\":\"Sector-12\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"75.5.5.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"nova-med\",\"fulcrumtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":126020410.4,\"moneyMax\":630102052,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":805,\"serverGrowth\":83,\"runningScripts\":[]}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"1.4.9.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"icarus\",\"applied-energetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":161238692.60000002,\"moneyMax\":806193463,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":933,\"serverGrowth\":79,\"runningScripts\":[]}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"68.0.0.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"aevum-police\",\"omnia\",\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":151788166.20000002,\"moneyMax\":758940831,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":863,\"serverGrowth\":88,\"runningScripts\":[]}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"59.0.1.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"aevum-police\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":236138400,\"moneyMax\":1180692000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":909,\"serverGrowth\":59,\"runningScripts\":[]}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"16.7.3.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"galactic-cyber\",\"solaris\",\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":190777422.20000002,\"moneyMax\":953887111,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":860,\"serverGrowth\":67,\"runningScripts\":[]}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":false,\"ip\":\"11.2.1.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"icarus\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":58,\"minDifficulty\":19,\"moneyAvailable\":208403497,\"moneyMax\":1042017485,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":810,\"serverGrowth\":72,\"runningScripts\":[]}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-210417.cct\",\"type\":\"Array Jumping Game\",\"data\":[4,6,5,1,9,0],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"38.3.8.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"taiyang-digital\",\"stormtech\",\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":67,\"hackDifficulty\":67,\"minDifficulty\":22,\"moneyAvailable\":153670661.8,\"moneyMax\":768353309,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":828,\"serverGrowth\":75,\"runningScripts\":[]}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-828866.cct\",\"type\":\"Array Jumping Game II\",\"data\":[2,4,3,6,1,2,3,3,2,3,2,0,1,2,1,2,2,3],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"83.1.8.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnia\",\"infocomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":149707836.20000002,\"moneyMax\":748539181,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":798,\"serverGrowth\":79,\"runningScripts\":[]}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"57.9.9.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"global-pharm\",\"defcomm\",\"univ-energy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":274782569.6,\"moneyMax\":1373912848,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":817,\"serverGrowth\":57,\"runningScripts\":[]}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"global-pharm\",\"httpPortOpen\":false,\"ip\":\"59.7.7.4\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"alpha-ent\",\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":310959721,\"moneyMax\":1554798605,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":808,\"serverGrowth\":85,\"runningScripts\":[]}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-943121-NiteSec.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[55,[1,2,4,6,8,9,11,12]],\"reward\":{\"name\":\"NiteSec\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-451833-OmniTekIncorporated.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"01010111001010100010111111110111\",\"reward\":{\"name\":\"OmniTek Incorporated\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"78.6.7.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"univ-energy\",\"microdyne\",\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":66,\"minDifficulty\":22,\"moneyAvailable\":223112572.60000002,\"moneyMax\":1115562863,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":835,\"serverGrowth\":70,\"runningScripts\":[]}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"39.9.3.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":293346263,\"moneyMax\":1466731315,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":821,\"serverGrowth\":76,\"runningScripts\":[]}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-775208-OmniTekIncorporated.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"1722424137\",\"reward\":{\"name\":\"OmniTek Incorporated\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-871087.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[11,9],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"unitalife\",\"httpPortOpen\":false,\"ip\":\"97.3.7.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"galactic-cyber\",\"icarus\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":218151001,\"moneyMax\":1090755005,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":785,\"serverGrowth\":74,\"runningScripts\":[]}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-251954.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"(()((aa((((aa\",\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-388509.cct\",\"type\":\"Array Jumping Game II\",\"data\":[3,4,0,1,1,0,2,4,5,1,5,5,1],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-193878.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,0],[0,1,0,0,0],[0,0,0,0,1],[0,0,1,0,0],[0,0,0,1,0],[0,0,0,0,0]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"lexo-corp\",\"httpPortOpen\":false,\"ip\":\"8.5.8.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"summit-uni\",\"snap-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":147923396.4,\"moneyMax\":739616982,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":672,\"serverGrowth\":55,\"runningScripts\":[]}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":1,\"fn\":\"contract-891710.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[5,[188,56,4,32,147,9,102,183,156,62,84,140,103,154,81,112,70,125,125,158,157,109,36,188,22,19,28,150,81,105,82,158,96,194,132,127,44,133,11,155,104,111,197,72,137,42,59,16]],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-190262-OmniTekIncorporated.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[3,3,-3,5,2,-7,4,-9,7,-4,9,2,-6,-10,5,10],\"reward\":{\"name\":\"OmniTek Incorporated\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"72.7.2.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"syscore\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":57,\"minDifficulty\":19,\"moneyAvailable\":128414990.4,\"moneyMax\":642074952,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":524,\"serverGrowth\":44,\"runningScripts\":[]}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"alpha-ent\",\"httpPortOpen\":false,\"ip\":\"19.6.7.2\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"rothman-uni\",\"global-pharm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":51,\"hackDifficulty\":51,\"minDifficulty\":17,\"moneyAvailable\":123287064.60000001,\"moneyMax\":616435323,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":510,\"serverGrowth\":55,\"runningScripts\":[]}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-290972-NiteSec.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"516883837033\",81],\"reward\":{\"name\":\"NiteSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aevum-police\",\"httpPortOpen\":false,\"ip\":\"85.4.3.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zb-institute\",\"galactic-cyber\",\"aerocorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":72655643,\"moneyMax\":363278215,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":423,\"serverGrowth\":39,\"runningScripts\":[]}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"96.5.8.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"the-hub\",\"alpha-ent\",\"millenium-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":46,\"hackDifficulty\":46,\"minDifficulty\":15,\"moneyAvailable\":41194356,\"moneyMax\":205971780,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":387,\"serverGrowth\":38,\"runningScripts\":[]}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":false,\"ip\":\"95.9.1.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"johnson-ortho\",\"aevum-police\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":67,\"hackDifficulty\":67,\"minDifficulty\":22,\"moneyAvailable\":160232903,\"moneyMax\":801164515,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":741,\"serverGrowth\":85,\"runningScripts\":[]}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-525976-TianDiHui.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"()))()aaaa)((\",\"reward\":{\"name\":\"Tian Di Hui\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"78.7.2.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"the-hub\",\"lexo-corp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":55593538.6,\"moneyMax\":277967693,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":444,\"serverGrowth\":59,\"runningScripts\":[]}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"syscore\",\"httpPortOpen\":false,\"ip\":\"13.0.3.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"computek\",\"rho-construction\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":118214217,\"moneyMax\":591071085,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":584,\"serverGrowth\":66,\"runningScripts\":[]}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-278327-TianDiHui.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":323,\"reward\":{\"name\":\"Tian Di Hui\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"53.6.9.2\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"netlink\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":66,\"minDifficulty\":22,\"moneyAvailable\":77344326.4,\"moneyMax\":386721632,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":445,\"serverGrowth\":30,\"runningScripts\":[]}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"12.2.4.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"neo-net\",\"rothman-uni\",\"summit-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":41,\"hackDifficulty\":41,\"minDifficulty\":14,\"moneyAvailable\":39891145.4,\"moneyMax\":199455727,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":312,\"serverGrowth\":48,\"runningScripts\":[]}},\"computek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-621936.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,1,0,0,1],[0,0,0,0,1,0,0,0,0]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"computek\",\"httpPortOpen\":false,\"ip\":\"21.1.5.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"phantasy\",\"syscore\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":45429093.800000004,\"moneyMax\":227145469,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":303,\"serverGrowth\":59,\"runningScripts\":[]}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"81.4.6.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"neo-net\",\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":55000000,\"moneyMax\":275000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":423,\"serverGrowth\":53,\"runningScripts\":[]}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"78.3.9.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omega-net\",\"zb-institute\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":59,\"hackDifficulty\":22.692,\"minDifficulty\":20,\"moneyAvailable\":37738711.87509762,\"moneyMax\":84909225,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":273,\"serverGrowth\":62,\"runningScripts\":[]}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"18.6.1.8\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/hacking/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/grow.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.grow(target);\\r\\n}\",\"filename\":\"scripts/hacking/grow.js\",\"server\":\"n00dles\"}}],[\"scripts/hacking/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/hack.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.hack(target);\\r\\n}\",\"filename\":\"scripts/hacking/hack.js\",\"server\":\"n00dles\"}}],[\"scripts/hacking/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/weaken.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.weaken(target);\\r\\n}\",\"filename\":\"scripts/hacking/weaken.js\",\"server\":\"n00dles\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":5.827999999999989,\"minDifficulty\":1,\"moneyAvailable\":42404.97489993996,\"moneyMax\":70000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":3000,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":60.41000000000032,\"ramUsage\":1.75,\"server\":\"n00dles\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"johnson-ortho\\\"]\",\"title\":\"scripts/hacking/grow.js johnson-ortho\",\"threads\":2,\"temporary\":false}}]}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"95.1.9.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/hacking/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/grow.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.grow(target);\\r\\n}\",\"filename\":\"scripts/hacking/grow.js\",\"server\":\"foodnstuff\"}}],[\"scripts/hacking/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/hack.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.hack(target);\\r\\n}\",\"filename\":\"scripts/hacking/hack.js\",\"server\":\"foodnstuff\"}}],[\"scripts/hacking/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/weaken.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.weaken(target);\\r\\n}\",\"filename\":\"scripts/hacking/weaken.js\",\"server\":\"foodnstuff\"}}]]},\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":10,\"hackDifficulty\":7.8679999999999914,\"minDifficulty\":3,\"moneyAvailable\":1291285.5655930343,\"moneyMax\":2000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":60.41000000000032,\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"johnson-ortho\\\"]\",\"title\":\"scripts/hacking/grow.js johnson-ortho\",\"threads\":9,\"temporary\":false}}]}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"11.1.4.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/hacking/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/weaken.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.weaken(target);\\r\\n}\",\"filename\":\"scripts/hacking/weaken.js\",\"server\":\"sigma-cosmetics\"}}],[\"scripts/hacking/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/grow.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.grow(target);\\r\\n}\",\"filename\":\"scripts/hacking/grow.js\",\"server\":\"sigma-cosmetics\"}}],[\"scripts/hacking/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/hack.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.hack(target);\\r\\n}\",\"filename\":\"scripts/hacking/hack.js\",\"server\":\"sigma-cosmetics\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":10,\"hackDifficulty\":4.351999999999997,\"minDifficulty\":3,\"moneyAvailable\":14196.33092199681,\"moneyMax\":2300000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":5,\"serverGrowth\":10,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":60.41000000000032,\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"johnson-ortho\\\"]\",\"title\":\"scripts/hacking/grow.js johnson-ortho\",\"threads\":9,\"temporary\":false}}]}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"1.9.8.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/hacking/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/weaken.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.weaken(target);\\r\\n}\",\"filename\":\"scripts/hacking/weaken.js\",\"server\":\"joesguns\"}}],[\"scripts/hacking/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/grow.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.grow(target);\\r\\n}\",\"filename\":\"scripts/hacking/grow.js\",\"server\":\"joesguns\"}}],[\"scripts/hacking/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/hack.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.hack(target);\\r\\n}\",\"filename\":\"scripts/hacking/hack.js\",\"server\":\"joesguns\"}}]]},\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":9.820000000000002,\"minDifficulty\":5,\"moneyAvailable\":3866.722183163358,\"moneyMax\":2500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":10,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":60.41000000000032,\"ramUsage\":1.75,\"server\":\"joesguns\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"johnson-ortho\\\"]\",\"title\":\"scripts/hacking/grow.js johnson-ortho\",\"threads\":9,\"temporary\":false}}]}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"21.7.5.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/hacking/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/grow.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.grow(target);\\r\\n}\",\"filename\":\"scripts/hacking/grow.js\",\"server\":\"zer0\"}}],[\"scripts/hacking/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/weaken.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.weaken(target);\\r\\n}\",\"filename\":\"scripts/hacking/weaken.js\",\"server\":\"zer0\"}}],[\"scripts/hacking/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/hack.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.hack(target);\\r\\n}\",\"filename\":\"scripts/hacking/hack.js\",\"server\":\"zer0\"}}]]},\"serversOnNetwork\":[\"joesguns\",\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":25,\"hackDifficulty\":14.63599999999999,\"minDifficulty\":8,\"moneyAvailable\":6344135.456681891,\"moneyMax\":7500000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":75,\"serverGrowth\":40,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":60.41000000000032,\"ramUsage\":1.75,\"server\":\"zer0\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"johnson-ortho\\\"]\",\"title\":\"scripts/hacking/grow.js johnson-ortho\",\"threads\":18,\"temporary\":false}}]}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"62.8.1.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/hacking/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/weaken.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.weaken(target);\\r\\n}\",\"filename\":\"scripts/hacking/weaken.js\",\"server\":\"nectar-net\"}}],[\"scripts/hacking/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/hack.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.hack(target);\\r\\n}\",\"filename\":\"scripts/hacking/hack.js\",\"server\":\"nectar-net\"}}],[\"scripts/hacking/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/grow.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.grow(target);\\r\\n}\",\"filename\":\"scripts/hacking/grow.js\",\"server\":\"nectar-net\"}}]]},\"serversOnNetwork\":[\"hong-fang-tea\",\"neo-net\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":20,\"hackDifficulty\":8.039999999999997,\"minDifficulty\":7,\"moneyAvailable\":4574.447703044408,\"moneyMax\":2750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":20,\"serverGrowth\":25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":60.41000000000032,\"ramUsage\":1.75,\"server\":\"nectar-net\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"johnson-ortho\\\"]\",\"title\":\"scripts/hacking/grow.js johnson-ortho\",\"threads\":9,\"temporary\":false}}]}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-867240-CyberSec.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[1,2,-3,2,-9,0,-5,7,2,-7,-10,10,-3,2,7,-9,-8,10,-5,8,-6,-10,-8,-6,1,-9,-7,-9,-1,-3,2,9,2,4,4,-5,-2,-5],\"reward\":{\"name\":\"CyberSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"84.3.6.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/hacking/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/grow.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.grow(target);\\r\\n}\",\"filename\":\"scripts/hacking/grow.js\",\"server\":\"neo-net\"}}],[\"scripts/hacking/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/weaken.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.weaken(target);\\r\\n}\",\"filename\":\"scripts/hacking/weaken.js\",\"server\":\"neo-net\"}}],[\"scripts/hacking/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/hack.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.hack(target);\\r\\n}\",\"filename\":\"scripts/hacking/hack.js\",\"server\":\"neo-net\"}}]]},\"serversOnNetwork\":[\"nectar-net\",\"the-hub\",\"netlink\",\"crush-fitness\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":25,\"hackDifficulty\":9.458,\"minDifficulty\":8,\"moneyAvailable\":3374197.461978682,\"moneyMax\":5000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":50,\"serverGrowth\":25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":60.41000000000032,\"ramUsage\":1.75,\"server\":\"neo-net\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"johnson-ortho\\\"]\",\"title\":\"scripts/hacking/grow.js johnson-ortho\",\"threads\":18,\"temporary\":false}}]}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"36.7.5.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/hacking/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/grow.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.grow(target);\\r\\n}\",\"filename\":\"scripts/hacking/grow.js\",\"server\":\"silver-helix\"}}],[\"scripts/hacking/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/hack.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.hack(target);\\r\\n}\",\"filename\":\"scripts/hacking/hack.js\",\"server\":\"silver-helix\"}}],[\"scripts/hacking/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/weaken.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.weaken(target);\\r\\n}\",\"filename\":\"scripts/hacking/weaken.js\",\"server\":\"silver-helix\"}}]]},\"serversOnNetwork\":[\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":30,\"hackDifficulty\":14.368,\"minDifficulty\":10,\"moneyAvailable\":32100561.53008452,\"moneyMax\":45000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":150,\"serverGrowth\":30,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":60.41000000000032,\"ramUsage\":1.75,\"server\":\"silver-helix\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"johnson-ortho\\\"]\",\"title\":\"scripts/hacking/grow.js johnson-ortho\",\"threads\":36,\"temporary\":false}}]}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"83.6.9.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/hacking/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/weaken.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.weaken(target);\\r\\n}\",\"filename\":\"scripts/hacking/weaken.js\",\"server\":\"hong-fang-tea\"}}],[\"scripts/hacking/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/grow.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.grow(target);\\r\\n}\",\"filename\":\"scripts/hacking/grow.js\",\"server\":\"hong-fang-tea\"}}],[\"scripts/hacking/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/hack.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.hack(target);\\r\\n}\",\"filename\":\"scripts/hacking/hack.js\",\"server\":\"hong-fang-tea\"}}]]},\"serversOnNetwork\":[\"home\",\"nectar-net\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":6.219999999999999,\"minDifficulty\":5,\"moneyAvailable\":6352.761025397237,\"moneyMax\":3000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":30,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":60.41000000000032,\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"johnson-ortho\\\"]\",\"title\":\"scripts/hacking/grow.js johnson-ortho\",\"threads\":9,\"temporary\":false}}]}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"23.1.9.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/hacking/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/hack.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.hack(target);\\r\\n}\",\"filename\":\"scripts/hacking/hack.js\",\"server\":\"harakiri-sushi\"}}],[\"scripts/hacking/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/grow.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.grow(target);\\r\\n}\",\"filename\":\"scripts/hacking/grow.js\",\"server\":\"harakiri-sushi\"}}],[\"scripts/hacking/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/weaken.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.weaken(target);\\r\\n}\",\"filename\":\"scripts/hacking/weaken.js\",\"server\":\"harakiri-sushi\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":8.456,\"minDifficulty\":5,\"moneyAvailable\":127988.76468470313,\"moneyMax\":4000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":40,\"serverGrowth\":40,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":60.41000000000032,\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"johnson-ortho\\\"]\",\"title\":\"scripts/hacking/grow.js johnson-ortho\",\"threads\":9,\"temporary\":false}}]}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-645313.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"(((()((())a)))))))\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"60.1.3.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/hacking/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/grow.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.grow(target);\\r\\n}\",\"filename\":\"scripts/hacking/grow.js\",\"server\":\"phantasy\"}}],[\"scripts/hacking/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/hack.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.hack(target);\\r\\n}\",\"filename\":\"scripts/hacking/hack.js\",\"server\":\"phantasy\"}}],[\"scripts/hacking/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/weaken.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.weaken(target);\\r\\n}\",\"filename\":\"scripts/hacking/weaken.js\",\"server\":\"phantasy\"}}]]},\"serversOnNetwork\":[\"zer0\",\"computek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":20,\"hackDifficulty\":9.176,\"minDifficulty\":7,\"moneyAvailable\":2624.6242377813005,\"moneyMax\":24000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":100,\"serverGrowth\":35,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":60.41000000000032,\"ramUsage\":1.75,\"server\":\"phantasy\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"johnson-ortho\\\"]\",\"title\":\"scripts/hacking/grow.js johnson-ortho\",\"threads\":18,\"temporary\":false}}]}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"32.4.9.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/hacking/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/grow.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.grow(target);\\r\\n}\",\"filename\":\"scripts/hacking/grow.js\",\"server\":\"max-hardware\"}}],[\"scripts/hacking/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/weaken.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.weaken(target);\\r\\n}\",\"filename\":\"scripts/hacking/weaken.js\",\"server\":\"max-hardware\"}}],[\"scripts/hacking/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/hack.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.hack(target);\\r\\n}\",\"filename\":\"scripts/hacking/hack.js\",\"server\":\"max-hardware\"}}]]},\"serversOnNetwork\":[\"foodnstuff\",\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":10.716000000000003,\"minDifficulty\":5,\"moneyAvailable\":7154.489845312511,\"moneyMax\":10000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":80,\"serverGrowth\":30,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":60.41000000000032,\"ramUsage\":1.75,\"server\":\"max-hardware\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"johnson-ortho\\\"]\",\"title\":\"scripts/hacking/grow.js johnson-ortho\",\"threads\":18,\"temporary\":false}}]}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-187004-NWO.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"0010000010000000000000000101101001010110001001000001000011111110\",\"reward\":{\"name\":\"NWO\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-922467.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0],[0,0,0,0],[0,0,1,0],[1,0,0,0],[0,0,0,0],[0,0,0,1],[1,0,0,0],[0,0,1,0],[0,0,1,0]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"86.1.7.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/hacking/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/weaken.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.weaken(target);\\r\\n}\",\"filename\":\"scripts/hacking/weaken.js\",\"server\":\"omega-net\"}}],[\"scripts/hacking/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/hack.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.hack(target);\\r\\n}\",\"filename\":\"scripts/hacking/hack.js\",\"server\":\"omega-net\"}}],[\"scripts/hacking/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/grow.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.grow(target);\\r\\n}\",\"filename\":\"scripts/hacking/grow.js\",\"server\":\"omega-net\"}}]]},\"serversOnNetwork\":[\"nectar-net\",\"johnson-ortho\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":28,\"hackDifficulty\":13.486000000000004,\"minDifficulty\":9,\"moneyAvailable\":43923577.70011612,\"moneyMax\":61335622,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":212,\"serverGrowth\":38,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":60.41000000000032,\"ramUsage\":1.75,\"server\":\"omega-net\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"johnson-ortho\\\"]\",\"title\":\"scripts/hacking/grow.js johnson-ortho\",\"threads\":18,\"temporary\":false}}]}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"8.4.2.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":36,\"hackDifficulty\":14.26,\"minDifficulty\":12,\"moneyAvailable\":18229590.831641704,\"moneyMax\":44010655,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":274,\"serverGrowth\":33,\"runningScripts\":[]}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-415259.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[9,-10,1,-6,-2,-10,-4,0,-7,4,-6],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"22.0.6.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/hacking/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/weaken.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.weaken(target);\\r\\n}\",\"filename\":\"scripts/hacking/weaken.js\",\"server\":\"iron-gym\"}}],[\"scripts/hacking/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/grow.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.grow(target);\\r\\n}\",\"filename\":\"scripts/hacking/grow.js\",\"server\":\"iron-gym\"}}],[\"scripts/hacking/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/hack.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.hack(target);\\r\\n}\",\"filename\":\"scripts/hacking/hack.js\",\"server\":\"iron-gym\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":30,\"hackDifficulty\":18.339999999999993,\"minDifficulty\":10,\"moneyAvailable\":13966961.800450595,\"moneyMax\":20000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":100,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":60.41000000000032,\"ramUsage\":1.75,\"server\":\"iron-gym\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"johnson-ortho\\\"]\",\"title\":\"scripts/hacking/grow.js johnson-ortho\",\"threads\":18,\"temporary\":false}}]}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"14.3.3.4\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"rothman-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":50,\"hackDifficulty\":50,\"minDifficulty\":17,\"moneyAvailable\":50000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":498,\"serverGrowth\":40,\"runningScripts\":[]}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-150149-NWO.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"()a()((a(\",\"reward\":{\"name\":\"NWO\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"62.9.3.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":180000000,\"moneyMax\":900000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1047,\"serverGrowth\":59,\"runningScripts\":[]}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-515843-OmniTekIncorporated.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"35000\",-24],\"reward\":{\"name\":\"OmniTek Incorporated\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"55.5.7.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"lexo-corp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":59,\"minDifficulty\":20,\"moneyAvailable\":90000000,\"moneyMax\":450000000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":741,\"serverGrowth\":59,\"runningScripts\":[]}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"run4theh111z\",\"httpPortOpen\":false,\"ip\":\"41.2.3.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"nova-med\",\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":545,\"serverGrowth\":1,\"runningScripts\":[]}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-897408.cct\",\"type\":\"Array Jumping Game II\",\"data\":[3,3,0,2,2,3,6,2,0,1,2,5,2,2,4,1,4,1,5,1,3,1,3],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"91.6.1.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":356,\"serverGrowth\":1,\"runningScripts\":[]}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-352379.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[30,[1,2,4,5,6,8,9,10,11,12]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"66.4.7.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/hacking/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/weaken.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.weaken(target);\\r\\n}\",\"filename\":\"scripts/hacking/weaken.js\",\"server\":\"avmnite-02h\"}}],[\"scripts/hacking/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/grow.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.grow(target);\\r\\n}\",\"filename\":\"scripts/hacking/grow.js\",\"server\":\"avmnite-02h\"}}],[\"scripts/hacking/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/hack.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.hack(target);\\r\\n}\",\"filename\":\"scripts/hacking/hack.js\",\"server\":\"avmnite-02h\"}}]]},\"serversOnNetwork\":[\"neo-net\",\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":216,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":60.41000000000032,\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"johnson-ortho\\\"]\",\"title\":\"scripts/hacking/grow.js johnson-ortho\",\"threads\":9,\"temporary\":false}}]}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\".\",\"httpPortOpen\":false,\"ip\":\"35.6.0.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":506,\"serverGrowth\":1,\"runningScripts\":[]}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"97.5.0.7\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/hacking/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/grow.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.grow(target);\\r\\n}\",\"filename\":\"scripts/hacking/grow.js\",\"server\":\"CSEC\"}}],[\"scripts/hacking/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/weaken.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.weaken(target);\\r\\n}\",\"filename\":\"scripts/hacking/weaken.js\",\"server\":\"CSEC\"}}],[\"scripts/hacking/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/hack.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.hack(target);\\r\\n}\",\"filename\":\"scripts/hacking/hack.js\",\"server\":\"CSEC\"}}]]},\"serversOnNetwork\":[\"hong-fang-tea\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":52,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":60.41000000000032,\"ramUsage\":1.75,\"server\":\"CSEC\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"johnson-ortho\\\"]\",\"title\":\"scripts/hacking/grow.js johnson-ortho\",\"threads\":4,\"temporary\":false}}]}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"77.8.5.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":1,\"runningScripts\":[]}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"81.6.1.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":6000,\"serverGrowth\":1,\"runningScripts\":[]}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-866615.cct\",\"type\":\"Total Ways to Sum\",\"data\":14,\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"darkweb\",\"httpPortOpen\":false,\"ip\":\"73.0.1.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"darkweb\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"CLOUD-000\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"CLOUD-000\",\"httpPortOpen\":false,\"ip\":\"52.5.9.4\",\"isConnectedTo\":false,\"maxRam\":4096,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/hacking/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/grow.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.grow(target);\\r\\n}\",\"filename\":\"scripts/hacking/grow.js\",\"server\":\"CLOUD-000\"}}],[\"scripts/hacking/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/hack.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.hack(target);\\r\\n}\",\"filename\":\"scripts/hacking/hack.js\",\"server\":\"CLOUD-000\"}}],[\"scripts/hacking/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\r\\n//run scripts/weaken.js\\r\\nexport async function main(ns) {\\r\\n    const target = ns.args[0];\\r\\n\\r\\n    await ns.weaken(target);\\r\\n}\",\"filename\":\"scripts/hacking/weaken.js\",\"server\":\"CLOUD-000\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":168.80999999999895,\"ramUsage\":1.75,\"server\":\"CLOUD-000\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"omega-net\\\"]\",\"title\":\"scripts/hacking/grow.js omega-net\",\"threads\":141,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":160.40999999999943,\"ramUsage\":1.75,\"server\":\"CLOUD-000\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"crush-fitness\\\"]\",\"title\":\"scripts/hacking/grow.js crush-fitness\",\"threads\":322,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"scripts/hacking/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":150.01000000000002,\"ramUsage\":1.75,\"server\":\"CLOUD-000\",\"scriptKey\":\"scripts/hacking/weaken.js*[\\\"iron-gym\\\"]\",\"title\":\"scripts/hacking/weaken.js iron-gym\",\"threads\":181,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":60.41000000000032,\"ramUsage\":1.75,\"server\":\"CLOUD-000\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"johnson-ortho\\\"]\",\"title\":\"scripts/hacking/grow.js johnson-ortho\",\"threads\":750,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":50.21000000000018,\"ramUsage\":1.75,\"server\":\"CLOUD-000\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"silver-helix\\\"]\",\"title\":\"scripts/hacking/grow.js silver-helix\",\"threads\":584,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":31.409999999999922,\"ramUsage\":1.75,\"server\":\"CLOUD-000\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"phantasy\\\"]\",\"title\":\"scripts/hacking/grow.js phantasy\",\"threads\":141,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"scripts/hacking/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.209999999999944,\"ramUsage\":1.75,\"server\":\"CLOUD-000\",\"scriptKey\":\"scripts/hacking/grow.js*[\\\"neo-net\\\"]\",\"title\":\"scripts/hacking/grow.js neo-net\",\"threads\":221,\"temporary\":false}}]}}}","CompaniesSave":"{\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":8001,\"favor\":0,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":4001,\"favor\":0,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":48001,\"favor\":0,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"The Black Hand\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Black Hand\",\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"NiteSec\",\"playerReputation\":113214.98637579393}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"CashRoot Starter Kit\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"Sector-12\",\"playerReputation\":9214.063999997212}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Netburners\",\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"Tian Di Hui\",\"playerReputation\":19202.27733333008}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Neurotrainer I\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":74620.3901577985}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}},\"Shadows of Anarchy\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"SoA - phyzical WKS harmonizer\",\"SoA - Might of Ares\",\"SoA - Wisdom of Athena\",\"SoA - Chaos of Dionysus\",\"SoA - Beauty of Aphrodite\",\"SoA - Trickery of Hermes\",\"SoA - Flood of Poseidon\",\"SoA - Hunt of Artemis\",\"SoA - Knowledge of Apollo\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Shadows of Anarchy\",\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{}","StockMarketSave":"{\"ECorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"ECorp\",\"symbol\":\"ECP\",\"price\":23502.229210389934,\"lastPrice\":23545.58885664091,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.42,\"b\":true,\"otlkMag\":15.782195585070934,\"otlkMagForecast\":66.6759504234516,\"cap\":104474376,\"spreadPerc\":0.1,\"shareTxForMovement\":43376,\"shareTxUntilMovement\":15556,\"totalShares\":88100000,\"maxShares\":17600000}},\"MegaCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"MegaCorp\",\"symbol\":\"MGCP\",\"price\":3259.118487934987,\"lastPrice\":3253.1167597307244,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.42,\"b\":true,\"otlkMag\":19.39752597424262,\"otlkMagForecast\":71.65423228180924,\"cap\":231400142,\"spreadPerc\":0.2,\"shareTxForMovement\":44077,\"shareTxUntilMovement\":43207,\"totalShares\":98700000,\"maxShares\":19700000}},\"Blade Industries\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Blade Industries\",\"symbol\":\"BLD\",\"price\":20546.946375798638,\"lastPrice\":20483.06405955176,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.71,\"b\":true,\"otlkMag\":7.59330582123202,\"otlkMagForecast\":58.32394023002851,\"cap\":26402570,\"spreadPerc\":0.5,\"shareTxForMovement\":70087,\"shareTxUntilMovement\":70087,\"totalShares\":94500000,\"maxShares\":18900000}},\"Clarke Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Clarke Incorporated\",\"symbol\":\"CLRK\",\"price\":8679.944522362657,\"lastPrice\":8706.252860951576,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.69,\"b\":true,\"otlkMag\":12.095176810141073,\"otlkMagForecast\":61.0393802128662,\"cap\":310365775,\"spreadPerc\":0.2,\"shareTxForMovement\":37066,\"shareTxUntilMovement\":23388,\"totalShares\":75000000,\"maxShares\":15000000}},\"OmniTek Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"OmniTek Incorporated\",\"symbol\":\"OMTK\",\"price\":55604.7951181572,\"lastPrice\":55758.674409219224,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.63,\"b\":true,\"otlkMag\":7.831736039887962,\"otlkMagForecast\":57.767699357104,\"cap\":179871833,\"spreadPerc\":0.3,\"shareTxForMovement\":75743,\"shareTxUntilMovement\":66556,\"totalShares\":51600000,\"maxShares\":10300000}},\"Four Sigma\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Four Sigma\",\"symbol\":\"FSIG\",\"price\":13621.80883446798,\"lastPrice\":13556.898443778233,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.09,\"b\":true,\"otlkMag\":26.984835990950767,\"otlkMagForecast\":73.51161468505029,\"cap\":531310131,\"spreadPerc\":1,\"shareTxForMovement\":44573,\"shareTxUntilMovement\":40294,\"totalShares\":30600000,\"maxShares\":6100000}},\"KuaiGong International\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"KuaiGong International\",\"symbol\":\"KGI\",\"price\":14795.916827879691,\"lastPrice\":14744.749601547092,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.79,\"b\":true,\"otlkMag\":12.615305031880839,\"otlkMagForecast\":61.97454707872076,\"cap\":106616318,\"spreadPerc\":0.1,\"shareTxForMovement\":68174,\"shareTxUntilMovement\":29936,\"totalShares\":91400000,\"maxShares\":18300000}},\"Fulcrum Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Fulcrum Technologies\",\"symbol\":\"FLCM\",\"price\":2169.0368748442484,\"lastPrice\":2180.6608359590614,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.22,\"b\":false,\"otlkMag\":16.22331016030315,\"otlkMagForecast\":33.52342320055576,\"cap\":712708299,\"spreadPerc\":0.5,\"shareTxForMovement\":50506,\"shareTxUntilMovement\":36666,\"totalShares\":57800000,\"maxShares\":11600000}},\"Storm Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Storm Technologies\",\"symbol\":\"STM\",\"price\":126381.78844414455,\"lastPrice\":126853.66761213259,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.85,\"b\":true,\"otlkMag\":7.888900202046882,\"otlkMagForecast\":57.61898612285258,\"cap\":194545401,\"spreadPerc\":0.9,\"shareTxForMovement\":66019,\"shareTxUntilMovement\":37692,\"totalShares\":52600000,\"maxShares\":10500000}},\"DefComm\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"DefComm\",\"symbol\":\"DCOMM\",\"price\":9851.282410098092,\"lastPrice\":9824.525825844818,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.62,\"b\":false,\"otlkMag\":9.909470905603962,\"otlkMagForecast\":38.44102158802675,\"cap\":12470542,\"spreadPerc\":0.2,\"shareTxForMovement\":91156,\"shareTxUntilMovement\":34178,\"totalShares\":98500000,\"maxShares\":19700000}},\"Helios Labs\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Helios Labs\",\"symbol\":\"HLS\",\"price\":3317.3148131785365,\"lastPrice\":3307.870091065993,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.65,\"b\":true,\"otlkMag\":10.312092371681343,\"otlkMagForecast\":60.78549204770724,\"cap\":119704200,\"spreadPerc\":1,\"shareTxForMovement\":63229,\"shareTxUntilMovement\":24113,\"totalShares\":52300000,\"maxShares\":10500000}},\"VitaLife\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"VitaLife\",\"symbol\":\"VITA\",\"price\":19068.752156219525,\"lastPrice\":19127.385909677523,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.7,\"b\":true,\"otlkMag\":9.266087271613387,\"otlkMagForecast\":61.81046579141367,\"cap\":102714961,\"spreadPerc\":0.2,\"shareTxForMovement\":104592,\"shareTxUntilMovement\":33008,\"totalShares\":74300000,\"maxShares\":14900000}},\"Icarus Microsystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Icarus Microsystems\",\"symbol\":\"ICRS\",\"price\":17689.743582850904,\"lastPrice\":17639.379139983303,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.65,\"b\":false,\"otlkMag\":7.986542006971134,\"otlkMagForecast\":41.19221027510699,\"cap\":434830251,\"spreadPerc\":1,\"shareTxForMovement\":65839,\"shareTxUntilMovement\":9861,\"totalShares\":34800000,\"maxShares\":7000000}},\"Universal Energy\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Universal Energy\",\"symbol\":\"UNV\",\"price\":19301.01346387086,\"lastPrice\":19251.964433467812,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.58,\"b\":false,\"otlkMag\":7.835931234099565,\"otlkMagForecast\":42.55220583286841,\"cap\":433498016,\"spreadPerc\":0.3,\"shareTxForMovement\":95228,\"shareTxUntilMovement\":7236,\"totalShares\":33300000,\"maxShares\":6700000}},\"AeroCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"AeroCorp\",\"symbol\":\"AERO\",\"price\":18591.815907950077,\"lastPrice\":18640.816400244752,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.6,\"b\":true,\"otlkMag\":6.343031497658776,\"otlkMagForecast\":56.51484911554058,\"cap\":226958116,\"spreadPerc\":0.8,\"shareTxForMovement\":56906,\"shareTxUntilMovement\":25172,\"totalShares\":45400000,\"maxShares\":9100000}},\"Omnia Cybersystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omnia Cybersystems\",\"symbol\":\"OMN\",\"price\":18345.638135391888,\"lastPrice\":18289.400778727486,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.7,\"b\":true,\"otlkMag\":4.4966655408327005,\"otlkMagForecast\":52.86196247337797,\"cap\":88064248,\"spreadPerc\":0.7,\"shareTxForMovement\":67676,\"shareTxUntilMovement\":13178,\"totalShares\":43700000,\"maxShares\":8700000}},\"Solaris Space Systems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Solaris Space Systems\",\"symbol\":\"SLRS\",\"price\":22395.90357673245,\"lastPrice\":22321.38541701666,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.76,\"b\":true,\"otlkMag\":10.879962738763414,\"otlkMagForecast\":60.74424736891486,\"cap\":409788688,\"spreadPerc\":0.8,\"shareTxForMovement\":69402,\"shareTxUntilMovement\":52486,\"totalShares\":30900000,\"maxShares\":6200000}},\"Global Pharmaceuticals\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"symbol\":\"GPH\",\"price\":14662.762941625331,\"lastPrice\":14627.423644152255,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.55,\"b\":true,\"otlkMag\":6.82613288989025,\"otlkMagForecast\":58.733265376605644,\"cap\":141716345,\"spreadPerc\":0.5,\"shareTxForMovement\":80935,\"shareTxUntilMovement\":42537,\"totalShares\":57000000,\"maxShares\":11400000}},\"Nova Medical\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Nova Medical\",\"symbol\":\"NVMD\",\"price\":6392.251136667806,\"lastPrice\":6414.7143146681865,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.8,\"b\":true,\"otlkMag\":5.681242787455229,\"otlkMagForecast\":54.76280413602539,\"cap\":83241637,\"spreadPerc\":0.7,\"shareTxForMovement\":105198,\"shareTxUntilMovement\":28924,\"totalShares\":28900000,\"maxShares\":5800000}},\"Watchdog Security\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Watchdog Security\",\"symbol\":\"WDS\",\"price\":931.9955098820044,\"lastPrice\":941.8209597523678,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.4,\"b\":true,\"otlkMag\":2.469405260541371,\"otlkMagForecast\":55.451303893742924,\"cap\":62423066,\"spreadPerc\":1.1,\"shareTxForMovement\":33675,\"shareTxUntilMovement\":22383,\"totalShares\":84300000,\"maxShares\":16900000}},\"LexoCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"LexoCorp\",\"symbol\":\"LXO\",\"price\":4472.271138122993,\"lastPrice\":4498.79210031349,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.35,\"b\":false,\"otlkMag\":5.572845503041276,\"otlkMagForecast\":47.75495403888847,\"cap\":80306915,\"spreadPerc\":1.1,\"shareTxForMovement\":49529,\"shareTxUntilMovement\":44074,\"totalShares\":64900000,\"maxShares\":13000000}},\"Rho Construction\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Rho Construction\",\"symbol\":\"RHOC\",\"price\":1079.008770048172,\"lastPrice\":1082.1843800400052,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.67,\"b\":false,\"otlkMag\":5.36621642001144,\"otlkMagForecast\":46.68378995731674,\"cap\":9582114,\"spreadPerc\":0.6,\"shareTxForMovement\":70435,\"shareTxUntilMovement\":62773,\"totalShares\":84600000,\"maxShares\":16900000}},\"Alpha Enterprises\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Alpha Enterprises\",\"symbol\":\"APHE\",\"price\":310.55925329744287,\"lastPrice\":313.3012562223595,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.01,\"b\":true,\"otlkMag\":5.856890174372881,\"otlkMagForecast\":50.698206473945596,\"cap\":116524288,\"spreadPerc\":1.5,\"shareTxForMovement\":64505,\"shareTxUntilMovement\":13158,\"totalShares\":48300000,\"maxShares\":9700000}},\"SysCore Securities\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"SysCore Securities\",\"symbol\":\"SYSC\",\"price\":5475.53557889972,\"lastPrice\":5439.218785242386,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.52,\"b\":false,\"otlkMag\":5.6017418574372275,\"otlkMagForecast\":42.82637565303372,\"cap\":138863786,\"spreadPerc\":1,\"shareTxForMovement\":58196,\"shareTxUntilMovement\":36386,\"totalShares\":26400000,\"maxShares\":5300000}},\"CompuTek\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"CompuTek\",\"symbol\":\"CTK\",\"price\":3108.4321591276835,\"lastPrice\":3097.140276615212,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.83,\"b\":false,\"otlkMag\":6.2074628006835475,\"otlkMagForecast\":45.0276152631607,\"cap\":8424081,\"spreadPerc\":0.9,\"shareTxForMovement\":69852,\"shareTxUntilMovement\":69562,\"totalShares\":41000000,\"maxShares\":8200000}},\"NetLink Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"NetLink Technologies\",\"symbol\":\"NTLK\",\"price\":4092520.4350747806,\"lastPrice\":4029159.027281583,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":3.58,\"b\":true,\"otlkMag\":9.219956304840478,\"otlkMagForecast\":59.52948599228292,\"cap\":19012274,\"spreadPerc\":1.4,\"shareTxForMovement\":23194,\"shareTxUntilMovement\":12500,\"totalShares\":35400000,\"maxShares\":7100000}},\"Omega Software\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omega Software\",\"symbol\":\"OMGA\",\"price\":8604.875000926233,\"lastPrice\":8639.271428640546,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.91,\"b\":false,\"otlkMag\":1.7756905040188085,\"otlkMagForecast\":48.31973909859909,\"cap\":4499442,\"spreadPerc\":0.6,\"shareTxForMovement\":38649,\"shareTxUntilMovement\":36122,\"totalShares\":15500000,\"maxShares\":3100000}},\"FoodNStuff\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"FoodNStuff\",\"symbol\":\"FNS\",\"price\":3559.58822261156,\"lastPrice\":3571.6279836930103,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.77,\"b\":true,\"otlkMag\":6.223654228015436,\"otlkMagForecast\":56.93916862686734,\"cap\":53818731,\"spreadPerc\":0.9,\"shareTxForMovement\":145453,\"shareTxUntilMovement\":66529,\"totalShares\":19200000,\"maxShares\":3800000}},\"Sigma Cosmetics\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Sigma Cosmetics\",\"symbol\":\"SGC\",\"price\":311365.49843343766,\"lastPrice\":315085.7025963882,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.72,\"b\":true,\"otlkMag\":14.055194072446378,\"otlkMagForecast\":61.89549494051106,\"cap\":57322936,\"spreadPerc\":1,\"shareTxForMovement\":53741,\"shareTxUntilMovement\":8097,\"totalShares\":10900000,\"maxShares\":2200000}},\"Joe's Guns\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Joe's Guns\",\"symbol\":\"JGN\",\"price\":619647.1243127134,\"lastPrice\":629064.8908401642,\"playerShares\":110322,\"playerAvgPx\":61508.678355266384,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":3.46,\"b\":true,\"otlkMag\":21.85131462666464,\"otlkMagForecast\":67.92051465013505,\"cap\":21052854,\"spreadPerc\":0.9,\"shareTxForMovement\":48733,\"shareTxUntilMovement\":29434,\"totalShares\":41700000,\"maxShares\":8300000}},\"Catalyst Ventures\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Catalyst Ventures\",\"symbol\":\"CTYS\",\"price\":908.3231780768032,\"lastPrice\":914.4278061522652,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.53,\"b\":true,\"otlkMag\":6.5973737105874966,\"otlkMagForecast\":61.22081629361608,\"cap\":6093995,\"spreadPerc\":1.4,\"shareTxForMovement\":32222,\"shareTxUntilMovement\":5404,\"totalShares\":227300000,\"maxShares\":45500000}},\"Microdyne Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Microdyne Technologies\",\"symbol\":\"MDYN\",\"price\":4583.966594448313,\"lastPrice\":4599.873874163298,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.79,\"b\":false,\"otlkMag\":7.002550056718396,\"otlkMagForecast\":42.2551378955901,\"cap\":33355950,\"spreadPerc\":0.3,\"shareTxForMovement\":164904,\"shareTxUntilMovement\":73240,\"totalShares\":18400000,\"maxShares\":3700000}},\"Titan Laboratories\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Titan Laboratories\",\"symbol\":\"TITN\",\"price\":28342.51756724933,\"lastPrice\":28263.06159221858,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.64,\"b\":true,\"otlkMag\":9.735975890713322,\"otlkMagForecast\":59.249355162538976,\"cap\":303636792,\"spreadPerc\":0.8,\"shareTxForMovement\":101971,\"shareTxUntilMovement\":67036,\"totalShares\":26300000,\"maxShares\":5300000}},\"Orders\":{\"ECP\":[],\"MGCP\":[],\"BLD\":[],\"CLRK\":[],\"OMTK\":[],\"FSIG\":[],\"KGI\":[],\"FLCM\":[],\"STM\":[],\"DCOMM\":[],\"HLS\":[],\"VITA\":[],\"ICRS\":[],\"UNV\":[],\"AERO\":[],\"OMN\":[],\"SLRS\":[],\"GPH\":[],\"NVMD\":[],\"WDS\":[],\"LXO\":[],\"RHOC\":[],\"APHE\":[],\"SYSC\":[],\"CTK\":[],\"NTLK\":[],\"OMGA\":[],\"FNS\":[],\"SGC\":[],\"JGN\":[],\"CTYS\":[],\"MDYN\":[],\"TITN\":[]},\"storedCycles\":154070,\"lastUpdate\":1690637209204,\"ticksUntilCycle\":57}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":10,\"AutoexecScript\":\"\",\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxRecentScriptsCapacity\":50,\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"RemoteFileApiPort\":0,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":true,\"SuppressMessages\":true,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"SuppressAutosaveDisabledWarnings\":false,\"UseIEC60027_2\":false,\"ShowMiddleNullTimeUnit\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":-1,\"y\":2,\"opened\":true},\"EditorTheme\":{\"common\":{\"accent\":\"B5CEA8\",\"bg\":\"1E1E1E\",\"fg\":\"D4D4D4\"},\"syntax\":{\"tag\":\"569CD6\",\"entity\":\"569CD6\",\"string\":\"CE9178\",\"regexp\":\"646695\",\"markup\":\"569CD6\",\"keyword\":\"569CD6\",\"comment\":\"6A9955\",\"constant\":\"569CD6\",\"error\":\"F44747\"},\"ui\":{\"line\":\"1E1E1E\",\"panel\":{\"bg\":\"252526\",\"selected\":\"252526\",\"border\":\"1E1E1E\"},\"selection\":{\"bg\":\"ADD6FF26\"}},\"base\":\"vs-dark\",\"inherit\":true},\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":0,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":true,\"MonacoTabSize\":2,\"MonacoDetectIndentation\":false,\"MonacoFontFamily\":\"Lucida Console\",\"MonacoFontSize\":20,\"MonacoFontLigatures\":false,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"hideTrailingDecimalZeros\":false,\"hideThousandsSeparator\":false,\"useEngineeringNotation\":false,\"disableSuffixes\":false}","VersionSave":"32","AllGangsSave":"","LastExportBonus":"1690558197519","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"fragments\":[],\"isBonusCharging\":false,\"storedCycles\":0}}"}}