[
    {
        "server": "n00dles",
        "name": "contract-385778-FulcrumTechnologies.cct",
        "type": "Compression III: LZ Compression",
        "attemptsLeft": 10,
        "input": "1MQcokNOHbHcj6j6j6is76jj6j6i5kRS6ehIem8Vf2em8Vf2m8Vf2m8Vfk2V",
        "description": "Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\n\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\n\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\n\n You are given the following input string:\n &nbsp; &nbsp; 1MQcokNOHbHcj6j6j6is76jj6j6i5kRS6ehIem8Vf2em8Vf2m8Vf2m8Vfk2V\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\n\n Examples (some have other possible encodings of minimal length):\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041"
    },
    {
        "server": "darkweb",
        "name": "contract-196698.cct",
        "type": "Generate IP Addresses",
        "attemptsLeft": 10,
        "input": "30115187231",
        "description": "Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\n\n 30115187231\n\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\n\n Examples:\n\n 25525511135 -> [\"255.255.11.135\", \"255.255.111.35\"]\n 1938718066 -> [\"193.87.180.66\"]"
    },
    {
        "server": "aerocorp",
        "name": "contract-53370.cct",
        "type": "Algorithmic Stock Trader IV",
        "attemptsLeft": 10,
        "input": [
            9,
            [
                84,
                183,
                157,
                197,
                194,
                200,
                15,
                83,
                111,
                63,
                176,
                47,
                120,
                166,
                164,
                106,
                116,
                159,
                169,
                143,
                12,
                43,
                135,
                38,
                43,
                34,
                144,
                117,
                92,
                111,
                167,
                157,
                133,
                106,
                92,
                198,
                122,
                184,
                9,
                110,
                45,
                131,
                170,
                166,
                90
            ]
        ],
        "description": "You are given the following array with two elements:\n\n [9, [84,183,157,197,194,200,15,83,111,63,176,47,120,166,164,106,116,159,169,143,12,43,135,38,43,34,144,117,92,111,167,157,133,106,92,198,122,184,9,110,45,131,170,166,90]]\n\n The first element is an integer k. The second element is an array of stock prices (which are numbers) where the i-th element represents the stock price on day i.\n\n Determine the maximum possible profit you can earn using at most k transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you can buy it again.\n\n If no profit can be made, then the answer should be 0."
    },
    {
        "server": "phantasy",
        "name": "contract-933564.cct",
        "type": "Proper 2-Coloring of a Graph",
        "attemptsLeft": 5,
        "input": [
            12,
            [
                [
                    1,
                    5
                ],
                [
                    3,
                    10
                ],
                [
                    3,
                    6
                ],
                [
                    0,
                    5
                ],
                [
                    6,
                    10
                ],
                [
                    8,
                    9
                ],
                [
                    9,
                    11
                ],
                [
                    6,
                    9
                ],
                [
                    1,
                    7
                ],
                [
                    5,
                    6
                ],
                [
                    1,
                    4
                ],
                [
                    2,
                    5
                ],
                [
                    6,
                    7
                ],
                [
                    0,
                    7
                ],
                [
                    3,
                    11
                ],
                [
                    4,
                    6
                ],
                [
                    2,
                    9
                ],
                [
                    3,
                    8
                ],
                [
                    2,
                    4
                ],
                [
                    1,
                    9
                ],
                [
                    2,
                    10
                ]
            ]
        ],
        "description": "You are given the following data, representing a graph:\n [12,[[1,5],[3,10],[3,6],[0,5],[6,10],[8,9],[9,11],[6,9],[1,7],[5,6],[1,4],[2,5],[6,7],[0,7],[3,11],[4,6],[2,9],[3,8],[2,4],[1,9],[2,10]]]\n Note that \"graph\", as used here, refers to the field of graph theory, and has no relation to statistics or plotting. The first element of the data represents the number of vertices in the graph. Each vertex is a unique number between 0 and 11. The next element of the data represents the edges of the graph. Two vertices u,v in a graph are said to be adjacent if there exists an edge [u,v]. Note that an edge [u,v] is the same as an edge [v,u], as order does not matter. You must construct a 2-coloring of the graph, meaning that you have to assign each vertex in the graph a \"color\", either 0 or 1, such that no two adjacent vertices have the same color. Submit your answer in the form of an array, where element i represents the color of vertex i. If it is impossible to construct a 2-coloring of the given graph, instead submit an empty array.\n\n Examples:\n\n Input: [4, [[0, 2], [0, 3], [1, 2], [1, 3]]]\n Output: [0, 0, 1, 1]\n\n Input: [3, [[0, 1], [0, 2], [1, 2]]]\n Output: []"
    },
    {
        "server": "icarus",
        "name": "contract-615616.cct",
        "type": "HammingCodes: Integer to Encoded Binary",
        "attemptsLeft": 10,
        "input": 7146739,
        "description": "You are given the following decimal Value: \n 7146739 \n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\n The answer should be given as a string containing only 1s and 0s.\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\n\n Extra rule for encoding:\n There should be no leading zeros in the 'data bit' section"
    },
    {
        "server": "4sigma",
        "name": "contract-241241.cct",
        "type": "Total Ways to Sum",
        "attemptsLeft": 10,
        "input": 48,
        "description": "It is possible write four as a sum in exactly four different ways:\n\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\n\n How many different distinct ways can the number 48 be written as a sum of at least two positive integers?"
    },
    {
        "server": "helios",
        "name": "contract-293914.cct",
        "type": "Proper 2-Coloring of a Graph",
        "attemptsLeft": 5,
        "input": [
            14,
            [
                [
                    2,
                    10
                ],
                [
                    6,
                    10
                ],
                [
                    4,
                    6
                ],
                [
                    1,
                    2
                ],
                [
                    0,
                    8
                ],
                [
                    0,
                    13
                ],
                [
                    0,
                    11
                ],
                [
                    2,
                    9
                ],
                [
                    1,
                    7
                ],
                [
                    8,
                    12
                ],
                [
                    1,
                    8
                ],
                [
                    12,
                    13
                ],
                [
                    3,
                    12
                ],
                [
                    2,
                    12
                ],
                [
                    5,
                    13
                ],
                [
                    3,
                    5
                ],
                [
                    1,
                    3
                ],
                [
                    7,
                    9
                ],
                [
                    5,
                    7
                ],
                [
                    11,
                    12
                ],
                [
                    1,
                    6
                ],
                [
                    10,
                    13
                ],
                [
                    4,
                    8
                ],
                [
                    0,
                    7
                ],
                [
                    5,
                    11
                ],
                [
                    4,
                    11
                ],
                [
                    9,
                    11
                ]
            ]
        ],
        "description": "You are given the following data, representing a graph:\n [14,[[2,10],[6,10],[4,6],[1,2],[0,8],[0,13],[0,11],[2,9],[1,7],[8,12],[1,8],[12,13],[3,12],[2,12],[5,13],[3,5],[1,3],[7,9],[5,7],[11,12],[1,6],[10,13],[4,8],[0,7],[5,11],[4,11],[9,11]]]\n Note that \"graph\", as used here, refers to the field of graph theory, and has no relation to statistics or plotting. The first element of the data represents the number of vertices in the graph. Each vertex is a unique number between 0 and 13. The next element of the data represents the edges of the graph. Two vertices u,v in a graph are said to be adjacent if there exists an edge [u,v]. Note that an edge [u,v] is the same as an edge [v,u], as order does not matter. You must construct a 2-coloring of the graph, meaning that you have to assign each vertex in the graph a \"color\", either 0 or 1, such that no two adjacent vertices have the same color. Submit your answer in the form of an array, where element i represents the color of vertex i. If it is impossible to construct a 2-coloring of the given graph, instead submit an empty array.\n\n Examples:\n\n Input: [4, [[0, 2], [0, 3], [1, 2], [1, 3]]]\n Output: [0, 0, 1, 1]\n\n Input: [3, [[0, 1], [0, 2], [1, 2]]]\n Output: []"
    },
    {
        "server": "helios",
        "name": "contract-621877-FulcrumTechnologies.cct",
        "type": "Proper 2-Coloring of a Graph",
        "attemptsLeft": 5,
        "input": [
            10,
            [
                [
                    8,
                    9
                ],
                [
                    0,
                    7
                ],
                [
                    0,
                    6
                ],
                [
                    1,
                    3
                ],
                [
                    5,
                    9
                ],
                [
                    2,
                    6
                ],
                [
                    4,
                    8
                ],
                [
                    1,
                    6
                ],
                [
                    0,
                    9
                ]
            ]
        ],
        "description": "You are given the following data, representing a graph:\n [10,[[8,9],[0,7],[0,6],[1,3],[5,9],[2,6],[4,8],[1,6],[0,9]]]\n Note that \"graph\", as used here, refers to the field of graph theory, and has no relation to statistics or plotting. The first element of the data represents the number of vertices in the graph. Each vertex is a unique number between 0 and 9. The next element of the data represents the edges of the graph. Two vertices u,v in a graph are said to be adjacent if there exists an edge [u,v]. Note that an edge [u,v] is the same as an edge [v,u], as order does not matter. You must construct a 2-coloring of the graph, meaning that you have to assign each vertex in the graph a \"color\", either 0 or 1, such that no two adjacent vertices have the same color. Submit your answer in the form of an array, where element i represents the color of vertex i. If it is impossible to construct a 2-coloring of the given graph, instead submit an empty array.\n\n Examples:\n\n Input: [4, [[0, 2], [0, 3], [1, 2], [1, 3]]]\n Output: [0, 0, 1, 1]\n\n Input: [3, [[0, 1], [0, 2], [1, 2]]]\n Output: []"
    },
    {
        "server": "ecorp",
        "name": "contract-335460-BachmanAssociates.cct",
        "type": "Unique Paths in a Grid I",
        "attemptsLeft": 10,
        "input": [
            8,
            8
        ],
        "description": "You are in a grid with 8 rows and 8 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\n\n NOTE: The data returned for this contract is an array with the number of rows and columns:\n\n [8, 8]"
    }
]