[
    {
        "server": "joesguns",
        "name": "contract-195395.cct",
        "type": "Compression I: RLE Compression",
        "attemptsLeft": 10,
        "input": "6DDIIIIIIIFFGGNppdddJJJJJJVVVVVV662ZNJuuuuuuuuuuuuOOOOOOOOOZp6ao",
        "description": "Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\n\n You are given the following input string:\n &nbsp; &nbsp; 6DDIIIIIIIFFGGNppdddJJJJJJVVVVVV662ZNJuuuuuuuuuuuuOOOOOOOOOZp6ao\n Encode it using run-length encoding with the minimum possible output length.\n\n Examples:\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\n"
    },
    {
        "server": "CSEC",
        "name": "contract-959011.cct",
        "type": "Array Jumping Game II",
        "attemptsLeft": 3,
        "input": [
            5,
            0,
            3,
            5,
            2,
            1,
            1,
            4,
            2,
            1,
            4,
            3,
            3
        ],
        "description": "You are given the following array of integers:\n\n 5,0,3,5,2,1,1,4,2,1,4,3,3\n\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \n\nAssuming you are initially positioned at the start of the array, determine the minimum number of jumps to reach the end of the array.\n\n If it's impossible to reach the end, then the answer should be 0."
    },
    {
        "server": "omega-net",
        "name": "contract-854177.cct",
        "type": "Unique Paths in a Grid I",
        "attemptsLeft": 10,
        "input": [
            2,
            10
        ],
        "description": "You are in a grid with 2 rows and 10 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\n\n NOTE: The data returned for this contract is an array with the number of rows and columns:\n\n [2, 10]"
    },
    {
        "server": "zb-institute",
        "name": "contract-846517-IcarusMicrosystems.cct",
        "type": "Total Ways to Sum II",
        "attemptsLeft": 10,
        "input": [
            101,
            [
                1,
                2,
                3,
                5,
                7,
                10,
                12,
                13,
                15,
                17
            ]
        ],
        "description": "How many different distinct ways can the number 101 be written as a sum of integers contained in the set:\n\n [1,2,3,5,7,10,12,13,15,17]?\n\n You may use each integer in the set zero or more times."
    },
    {
        "server": "alpha-ent",
        "name": "contract-814492-IcarusMicrosystems.cct",
        "type": "Algorithmic Stock Trader I",
        "attemptsLeft": 5,
        "input": [
            30,
            147,
            19
        ],
        "description": "You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\n\n 30,147,19\n\n Determine the maximum possible profit you can earn using at most one transaction (i.e. you can only buy and sell the stock once). If no profit can be made then the answer should be 0. Note that you have to buy the stock before you can sell it"
    },
    {
        "server": "omnitek",
        "name": "contract-360703.cct",
        "type": "Array Jumping Game II",
        "attemptsLeft": 3,
        "input": [
            1,
            2,
            1,
            3,
            1,
            4,
            2,
            3,
            3,
            2,
            5,
            1,
            4,
            6
        ],
        "description": "You are given the following array of integers:\n\n 1,2,1,3,1,4,2,3,3,2,5,1,4,6\n\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \n\nAssuming you are initially positioned at the start of the array, determine the minimum number of jumps to reach the end of the array.\n\n If it's impossible to reach the end, then the answer should be 0."
    },
    {
        "server": "clarkinc",
        "name": "contract-774975.cct",
        "type": "Shortest Path in a Grid",
        "attemptsLeft": 10,
        "input": [
            [
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1
            ],
            [
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1
            ],
            [
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1
            ],
            [
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                1
            ],
            [
                0,
                1,
                0,
                0,
                0,
                0,
                1,
                1
            ],
            [
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0
            ],
            [
                1,
                1,
                0,
                1,
                0,
                1,
                0,
                0
            ],
            [
                1,
                1,
                0,
                0,
                1,
                0,
                1,
                0
            ],
            [
                1,
                0,
                0,
                1,
                0,
                0,
                0,
                0
            ],
            [
                0,
                0,
                0,
                0,
                1,
                0,
                0,
                0
            ],
            [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        ],
        "description": "You are located in the top-left corner of the following grid:\n\n &nbsp;&nbsp;[[0,0,0,0,0,0,1,1],\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,1,1],\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,1,1],\n&nbsp;&nbsp;&nbsp;[0,1,1,0,0,0,0,1],\n&nbsp;&nbsp;&nbsp;[0,1,0,0,0,0,1,1],\n&nbsp;&nbsp;&nbsp;[0,0,1,1,0,0,0,0],\n&nbsp;&nbsp;&nbsp;[1,1,0,1,0,1,0,0],\n&nbsp;&nbsp;&nbsp;[1,1,0,0,1,0,1,0],\n&nbsp;&nbsp;&nbsp;[1,0,0,1,0,0,0,0],\n&nbsp;&nbsp;&nbsp;[0,0,0,0,1,0,0,0],\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,0,0]]\n\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\n\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\n\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\n\n Examples:\n\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\n \n Answer: 'DRRURRD'\n\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\n \n Answer: ''\n\n"
    },
    {
        "server": "icarus",
        "name": "contract-840397-IcarusMicrosystems.cct",
        "type": "Algorithmic Stock Trader IV",
        "attemptsLeft": 10,
        "input": [
            9,
            [
                58,
                50,
                174,
                147,
                13,
                69,
                17,
                50,
                132,
                138,
                83,
                65,
                66,
                93,
                38,
                70,
                150,
                54,
                153,
                180,
                61,
                181,
                53,
                80,
                18,
                105,
                77
            ]
        ],
        "description": "You are given the following array with two elements:\n\n [9, [58,50,174,147,13,69,17,50,132,138,83,65,66,93,38,70,150,54,153,180,61,181,53,80,18,105,77]]\n\n The first element is an integer k. The second element is an array of stock prices (which are numbers) where the i-th element represents the stock price on day i.\n\n Determine the maximum possible profit you can earn using at most k transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you can buy it again.\n\n If no profit can be made, then the answer should be 0."
    },
    {
        "server": "the-hub",
        "name": "contract-61833-IcarusMicrosystems.cct",
        "type": "Algorithmic Stock Trader III",
        "attemptsLeft": 10,
        "input": [
            52,
            200,
            79,
            122,
            26,
            200,
            157
        ],
        "description": "You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\n\n 52,200,79,122,26,200,157\n\n Determine the maximum possible profit you can earn using at most two transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\n\n If no profit can be made, then the answer should be 0"
    },
    {
        "server": "nectar-net",
        "name": "contract-266940-Daedalus.cct",
        "type": "Algorithmic Stock Trader I",
        "attemptsLeft": 5,
        "input": [
            104,
            7,
            131,
            125,
            45,
            18,
            52,
            129,
            108,
            119,
            69,
            21,
            124,
            100,
            150,
            160,
            70,
            168,
            98,
            104,
            82,
            145,
            138,
            120,
            132,
            174,
            9,
            40,
            161,
            120,
            29,
            59,
            79,
            132,
            192,
            35,
            15,
            191,
            71,
            1,
            121,
            123,
            167,
            106,
            60,
            190,
            62,
            105,
            51
        ],
        "description": "You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\n\n 104,7,131,125,45,18,52,129,108,119,69,21,124,100,150,160,70,168,98,104,82,145,138,120,132,174,9,40,161,120,29,59,79,132,192,35,15,191,71,1,121,123,167,106,60,190,62,105,51\n\n Determine the maximum possible profit you can earn using at most one transaction (i.e. you can only buy and sell the stock once). If no profit can be made then the answer should be 0. Note that you have to buy the stock before you can sell it"
    }
]