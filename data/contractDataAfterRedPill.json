[
    {
        "server": "foodnstuff",
        "name": "contract-652546.cct",
        "type": "Unique Paths in a Grid II",
        "attemptsLeft": 10,
        "input": [
            [
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0,
                0
            ],
            [
                1,
                1,
                0,
                0,
                1,
                0,
                0,
                0,
                0
            ],
            [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            [
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            [
                0,
                0,
                0,
                1,
                1,
                0,
                0,
                0,
                0
            ]
        ],
        "description": "You are located in the top-left corner of the following grid:\n\n 0,0,0,1,1,1,1,0,0,\n1,1,0,0,1,0,0,0,0,\n0,0,0,0,0,0,0,0,0,\n1,1,0,0,0,0,0,0,0,\n0,0,0,1,1,0,0,0,0,\n\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\n\n Determine how many unique paths there are from start to finish.\n\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid."
    },
    {
        "server": "silver-helix",
        "name": "contract-695990-AlphaEnterprises.cct",
        "type": "Minimum Path Sum in a Triangle",
        "attemptsLeft": 10,
        "input": [
            [
                5
            ],
            [
                1,
                4
            ],
            [
                9,
                2,
                9
            ],
            [
                5,
                2,
                7,
                9
            ],
            [
                9,
                5,
                7,
                3,
                4
            ]
        ],
        "description": "Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:\n\n [\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[5],\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,4],\n&nbsp;&nbsp;&nbsp;&nbsp;[9,2,9],\n&nbsp;&nbsp;&nbsp;[5,2,7,9],\n&nbsp;&nbsp;[9,5,7,3,4]\n]\n\n Example: If you are given the following triangle:\n\n[\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],\n &nbsp;&nbsp;&nbsp;&nbsp;[3,4],\n &nbsp;&nbsp;&nbsp;[6,5,7],\n &nbsp;&nbsp;[4,1,8,3]\n ]\n\n The minimum path sum is 11 (2 -> 3 -> 5 -> 1)."
    },
    {
        "server": "omega-net",
        "name": "contract-498601-AlphaEnterprises.cct",
        "type": "Spiralize Matrix",
        "attemptsLeft": 10,
        "input": [
            [
                29,
                26,
                34,
                38,
                45,
                15
            ],
            [
                2,
                20,
                3,
                40,
                38,
                30
            ],
            [
                10,
                45,
                46,
                25,
                47,
                7
            ],
            [
                16,
                5,
                35,
                25,
                41,
                19
            ],
            [
                47,
                32,
                23,
                4,
                45,
                29
            ],
            [
                37,
                5,
                41,
                22,
                33,
                36
            ],
            [
                9,
                39,
                24,
                12,
                5,
                48
            ],
            [
                43,
                34,
                18,
                18,
                11,
                16
            ],
            [
                45,
                14,
                18,
                14,
                34,
                39
            ],
            [
                3,
                47,
                44,
                15,
                3,
                44
            ],
            [
                37,
                22,
                37,
                40,
                44,
                11
            ],
            [
                32,
                35,
                40,
                21,
                12,
                42
            ],
            [
                32,
                47,
                18,
                25,
                16,
                17
            ],
            [
                5,
                11,
                14,
                29,
                47,
                24
            ],
            [
                27,
                17,
                43,
                47,
                45,
                19
            ]
        ],
        "description": "Given the following array of arrays of numbers representing a 2D matrix, return the elements of the matrix as an array in spiral order:\n\n&nbsp;&nbsp;&nbsp;&nbsp;[\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[29,26,34,38,45,15]\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[ 2,20, 3,40,38,30]\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[10,45,46,25,47, 7]\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[16, 5,35,25,41,19]\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[47,32,23, 4,45,29]\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[37, 5,41,22,33,36]\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[ 9,39,24,12, 5,48]\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[43,34,18,18,11,16]\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[45,14,18,14,34,39]\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[ 3,47,44,15, 3,44]\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[37,22,37,40,44,11]\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[32,35,40,21,12,42]\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[32,47,18,25,16,17]\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[ 5,11,14,29,47,24]\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[27,17,43,47,45,19]\n&nbsp;&nbsp;&nbsp;&nbsp;]\n\nHere is an example of what spiral order should be:\n\n &nbsp;&nbsp;&nbsp;&nbsp;[\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1, 2, 3]\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[4, 5, 6]\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[7, 8, 9]\n &nbsp;&nbsp;&nbsp;&nbsp;]\n\n Answer: [1, 2, 3, 6, 9, 8 ,7, 4, 5]\n\n Note that the matrix will not always be square:\n\n &nbsp;&nbsp;&nbsp;&nbsp;[\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,&nbsp;&nbsp;2,&nbsp;&nbsp;3,&nbsp;&nbsp;4]\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[5,&nbsp;&nbsp;6,&nbsp;&nbsp;7,&nbsp;&nbsp;8]\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[9,&nbsp;10,&nbsp;11,&nbsp;12]\n &nbsp;&nbsp;&nbsp;&nbsp;]\n\n Answer: [1, 2, 3, 4, 8, 12, 11, 10, 9, 5, 6, 7]"
    },
    {
        "server": "computek",
        "name": "contract-895472.cct",
        "type": "Array Jumping Game",
        "attemptsLeft": 1,
        "input": [
            3,
            5,
            8,
            7,
            7,
            3,
            0,
            10,
            0,
            10,
            0,
            10,
            2,
            2,
            3,
            10,
            6,
            5,
            0,
            0
        ],
        "description": "You are given the following array of integers:\n\n 3,5,8,7,7,3,0,10,0,10,0,10,2,2,3,10,6,5,0,0\n\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \n\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\n\n Your answer should be submitted as 1 or 0, representing true and false respectively"
    },
    {
        "server": "avmnite-02h",
        "name": "contract-107923.cct",
        "type": "Algorithmic Stock Trader III",
        "attemptsLeft": 10,
        "input": [
            32,
            26,
            76,
            50,
            172,
            192,
            197,
            167,
            4,
            173,
            70,
            140,
            64,
            59,
            85,
            193,
            199,
            135,
            64,
            168,
            190,
            110,
            47,
            190,
            55,
            32,
            34,
            12,
            2,
            134,
            133,
            8,
            159,
            38,
            16,
            78,
            93,
            62,
            128,
            155,
            4,
            32
        ],
        "description": "You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\n\n 32,26,76,50,172,192,197,167,4,173,70,140,64,59,85,193,199,135,64,168,190,110,47,190,55,32,34,12,2,134,133,8,159,38,16,78,93,62,128,155,4,32\n\n Determine the maximum possible profit you can earn using at most two transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\n\n If no profit can be made, then the answer should be 0"
    },
    {
        "server": "avmnite-02h",
        "name": "contract-2096-AlphaEnterprises.cct",
        "type": "HammingCodes: Integer to Encoded Binary",
        "attemptsLeft": 10,
        "input": 3565991,
        "description": "You are given the following decimal Value: \n 3565991 \n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\n The answer should be given as a string containing only 1s and 0s.\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\n\n Extra rule for encoding:\n There should be no leading zeros in the 'data bit' section"
    },
    {
        "server": "rothman-uni",
        "name": "contract-527282.cct",
        "type": "Algorithmic Stock Trader II",
        "attemptsLeft": 8,
        "input": [
            20,
            26,
            4,
            199,
            113,
            200,
            12,
            2,
            163,
            2,
            36,
            98,
            70,
            37,
            129,
            53,
            35,
            137,
            140,
            11,
            45,
            109,
            54,
            160,
            82,
            123
        ],
        "description": "You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\n\n 20,26,4,199,113,200,12,2,163,2,36,98,70,37,129,53,35,137,140,11,45,109,54,160,82,123\n\n Determine the maximum possible profit you can earn using as many transactions as you'd like. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\n\n If no profit can be made, then the answer should be 0"
    },
    {
        "server": "rothman-uni",
        "name": "contract-806386.cct",
        "type": "HammingCodes: Integer to Encoded Binary",
        "attemptsLeft": 10,
        "input": 6058374495822859,
        "description": "You are given the following decimal Value: \n 6058374495822859 \n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\n The answer should be given as a string containing only 1s and 0s.\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\n\n Extra rule for encoding:\n There should be no leading zeros in the 'data bit' section"
    },
    {
        "server": "zer0",
        "name": "contract-467548-AlphaEnterprises.cct",
        "type": "Compression I: RLE Compression",
        "attemptsLeft": 10,
        "input": "mmm6RCCCCCCCWWwwCCxvdBoaaaaaaaaaaaattJCCCCCCCCCCCCCluuuuuuuuuwwWiLLq",
        "description": "Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\n\n You are given the following input string:\n &nbsp; &nbsp; mmm6RCCCCCCCWWwwCCxvdBoaaaaaaaaaaaattJCCCCCCCCCCCCCluuuuuuuuuwwWiLLq\n Encode it using run-length encoding with the minimum possible output length.\n\n Examples:\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\n"
    },
    {
        "server": "johnson-ortho",
        "name": "contract-362413-BachmanAssociates.cct",
        "type": "Total Ways to Sum II",
        "attemptsLeft": 10,
        "input": [
            121,
            [
                2,
                3,
                4,
                7,
                8,
                9,
                10,
                11
            ]
        ],
        "description": "How many different distinct ways can the number 121 be written as a sum of integers contained in the set:\n\n [2,3,4,7,8,9,10,11]?\n\n You may use each integer in the set zero or more times."
    },
    {
        "server": "johnson-ortho",
        "name": "contract-976610.cct",
        "type": "Algorithmic Stock Trader II",
        "attemptsLeft": 8,
        "input": [
            131,
            143,
            64,
            87,
            52,
            35,
            148,
            92,
            6,
            16,
            147,
            122,
            163,
            38,
            90,
            86,
            84,
            47,
            133,
            50,
            106,
            12,
            14,
            24,
            109,
            166,
            188,
            191,
            10,
            135,
            197,
            128,
            35,
            140,
            148,
            90,
            22,
            26,
            187,
            40,
            194,
            10,
            108,
            92,
            155,
            5
        ],
        "description": "You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\n\n 131,143,64,87,52,35,148,92,6,16,147,122,163,38,90,86,84,47,133,50,106,12,14,24,109,166,188,191,10,135,197,128,35,140,148,90,22,26,187,40,194,10,108,92,155,5\n\n Determine the maximum possible profit you can earn using as many transactions as you'd like. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.\n\n If no profit can be made, then the answer should be 0"
    },
    {
        "server": "syscore",
        "name": "contract-771332-AlphaEnterprises.cct",
        "type": "Array Jumping Game",
        "attemptsLeft": 1,
        "input": [
            7,
            9,
            4,
            2,
            0,
            1,
            0,
            8,
            7,
            7,
            10,
            3,
            2,
            8,
            7,
            0,
            4,
            0,
            10,
            0,
            9,
            5,
            3,
            8
        ],
        "description": "You are given the following array of integers:\n\n 7,9,4,2,0,1,0,8,7,7,10,3,2,8,7,0,4,0,10,0,9,5,3,8\n\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \n\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\n\n Your answer should be submitted as 1 or 0, representing true and false respectively"
    },
    {
        "server": "catalyst",
        "name": "contract-560905.cct",
        "type": "Spiralize Matrix",
        "attemptsLeft": 10,
        "input": [
            [
                1
            ],
            [
                8
            ],
            [
                1
            ]
        ],
        "description": "Given the following array of arrays of numbers representing a 2D matrix, return the elements of the matrix as an array in spiral order:\n\n&nbsp;&nbsp;&nbsp;&nbsp;[\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[ 1]\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[ 8]\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[ 1]\n&nbsp;&nbsp;&nbsp;&nbsp;]\n\nHere is an example of what spiral order should be:\n\n &nbsp;&nbsp;&nbsp;&nbsp;[\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1, 2, 3]\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[4, 5, 6]\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[7, 8, 9]\n &nbsp;&nbsp;&nbsp;&nbsp;]\n\n Answer: [1, 2, 3, 6, 9, 8 ,7, 4, 5]\n\n Note that the matrix will not always be square:\n\n &nbsp;&nbsp;&nbsp;&nbsp;[\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,&nbsp;&nbsp;2,&nbsp;&nbsp;3,&nbsp;&nbsp;4]\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[5,&nbsp;&nbsp;6,&nbsp;&nbsp;7,&nbsp;&nbsp;8]\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[9,&nbsp;10,&nbsp;11,&nbsp;12]\n &nbsp;&nbsp;&nbsp;&nbsp;]\n\n Answer: [1, 2, 3, 4, 8, 12, 11, 10, 9, 5, 6, 7]"
    },
    {
        "server": "rho-construction",
        "name": "contract-437152.cct",
        "type": "HammingCodes: Encoded Binary to Integer",
        "attemptsLeft": 10,
        "input": "10101000100000000011000001100111",
        "description": "You are given the following encoded binary string: \n '10101000100000000011000001100111' \n\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\n\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\n Extra note for automation: return the decimal value as a string"
    },
    {
        "server": "galactic-cyber",
        "name": "contract-602391.cct",
        "type": "Array Jumping Game",
        "attemptsLeft": 1,
        "input": [
            2,
            5,
            3,
            0,
            0,
            4,
            5,
            10,
            0,
            4,
            9,
            0
        ],
        "description": "You are given the following array of integers:\n\n 2,5,3,0,0,4,5,10,0,4,9,0\n\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \n\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\n\n Your answer should be submitted as 1 or 0, representing true and false respectively"
    },
    {
        "server": "unitalife",
        "name": "contract-225024.cct",
        "type": "Generate IP Addresses",
        "attemptsLeft": 10,
        "input": "18323579214",
        "description": "Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\n\n 18323579214\n\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\n\n Examples:\n\n 25525511135 -> [\"255.255.11.135\", \"255.255.111.35\"]\n 1938718066 -> [\"193.87.180.66\"]"
    },
    {
        "server": "unitalife",
        "name": "contract-311811.cct",
        "type": "Unique Paths in a Grid I",
        "attemptsLeft": 10,
        "input": [
            3,
            11
        ],
        "description": "You are in a grid with 3 rows and 11 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\n\n NOTE: The data returned for this contract is an array with the number of rows and columns:\n\n [3, 11]"
    },
    {
        "server": "defcomm",
        "name": "contract-396148-AlphaEnterprises.cct",
        "type": "Unique Paths in a Grid II",
        "attemptsLeft": 10,
        "input": [
            [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            [
                0,
                0,
                0,
                1,
                1,
                1,
                0,
                0
            ]
        ],
        "description": "You are located in the top-left corner of the following grid:\n\n 0,0,0,0,0,0,0,0,\n0,0,0,0,0,0,0,1,\n0,0,0,0,0,0,0,0,\n0,0,0,0,0,0,0,0,\n0,0,0,0,0,0,0,0,\n0,0,0,1,1,1,0,0,\n\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\n\n Determine how many unique paths there are from start to finish.\n\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid."
    },
    {
        "server": "zb-def",
        "name": "contract-46029-AlphaEnterprises.cct",
        "type": "Unique Paths in a Grid II",
        "attemptsLeft": 10,
        "input": [
            [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                0,
                0
            ],
            [
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                0
            ],
            [
                0,
                0,
                0,
                0,
                1,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            [
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                0,
                1,
                0
            ],
            [
                0,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1
            ],
            [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                0,
                0,
                0
            ],
            [
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        ],
        "description": "You are located in the top-left corner of the following grid:\n\n 0,0,0,0,0,0,0,0,1,0,0,\n0,1,1,0,0,0,0,0,0,0,0,\n0,0,0,0,0,0,0,0,0,1,0,\n0,0,0,0,1,0,0,0,0,0,0,\n0,0,0,0,0,0,1,1,0,1,0,\n0,1,0,0,0,0,0,0,0,0,1,\n0,0,0,0,0,0,0,0,0,0,0,\n0,0,0,0,0,0,0,1,0,0,0,\n1,0,0,0,0,0,0,0,0,0,0,\n\n You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\n\n Determine how many unique paths there are from start to finish.\n\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid."
    },
    {
        "server": "applied-energetics",
        "name": "contract-743742.cct",
        "type": "Encryption I: Caesar Cipher",
        "attemptsLeft": 10,
        "input": [
            "MEDIA CLOUD SHIFT DEBUG MOUSE",
            25
        ],
        "description": "Caesar cipher is one of the simplest encryption technique. It is a type of substitution cipher in which each letter in the plaintext  is replaced by a letter some fixed number of positions down the alphabet. For example, with a left shift of 3, D would be replaced by A,  E would become B, and A would become X (because of rotation).\n\n You are given an array with two elements:\n &nbsp;&nbsp;[\"MEDIA CLOUD SHIFT DEBUG MOUSE\", 25]\n The first element is the plaintext, the second element is the left shift value.\n\n Return the ciphertext as uppercase string. Spaces remains the same."
    },
    {
        "server": "titan-labs",
        "name": "contract-688313.cct",
        "type": "Shortest Path in a Grid",
        "attemptsLeft": 10,
        "input": [
            [
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                0,
                0,
                1,
                0,
                0
            ],
            [
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                0,
                0,
                1,
                0,
                0
            ],
            [
                0,
                0,
                0,
                1,
                0,
                1,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            [
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                0,
                0
            ],
            [
                0,
                0,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                0,
                0,
                0
            ],
            [
                0,
                0,
                0,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
            ],
            [
                0,
                0,
                0,
                1,
                0,
                1,
                0,
                1,
                1,
                0,
                1,
                0
            ],
            [
                0,
                1,
                1,
                0,
                1,
                1,
                0,
                0,
                0,
                0,
                0,
                0
            ]
        ],
        "description": "You are located in the top-left corner of the following grid:\n\n &nbsp;&nbsp;[[0,0,0,0,0,0,1,0,0,1,0,0],\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,1,0,0,1,0,0],\n&nbsp;&nbsp;&nbsp;[0,0,0,1,0,1,0,0,0,0,0,0],\n&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,1,1,1,1,0,0],\n&nbsp;&nbsp;&nbsp;[0,0,0,1,0,1,0,1,1,0,0,0],\n&nbsp;&nbsp;&nbsp;[0,0,0,1,0,0,0,0,0,0,0,0],\n&nbsp;&nbsp;&nbsp;[0,0,0,1,0,1,0,1,1,0,1,0],\n&nbsp;&nbsp;&nbsp;[0,1,1,0,1,1,0,0,0,0,0,0]]\n\n You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.\n\n Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path\n\n NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.\n NOTE: The data returned for this contract is an 2D array of numbers representing the grid.\n\n Examples:\n\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]\n \n Answer: 'DRRURRD'\n\n &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],\n &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]\n \n Answer: ''\n\n"
    },
    {
        "server": "stormtech",
        "name": "contract-245188.cct",
        "type": "HammingCodes: Integer to Encoded Binary",
        "attemptsLeft": 10,
        "input": 3314605,
        "description": "You are given the following decimal Value: \n 3314605 \n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\n The answer should be given as a string containing only 1s and 0s.\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\n\n Extra rule for encoding:\n There should be no leading zeros in the 'data bit' section"
    },
    {
        "server": "stormtech",
        "name": "contract-562776-Netburners.cct",
        "type": "Compression I: RLE Compression",
        "attemptsLeft": 10,
        "input": "666M44444444444MM222222222hht11QQoohhhhhhhhhhX5RRTccccccc222222222hhhh01ee8888888888Q",
        "description": "Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\n\n You are given the following input string:\n &nbsp; &nbsp; 666M44444444444MM222222222hht11QQoohhhhhhhhhhX5RRTccccccc222222222hhhh01ee8888888888Q\n Encode it using run-length encoding with the minimum possible output length.\n\n Examples:\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\n"
    },
    {
        "server": "b-and-a",
        "name": "contract-505710-Netburners.cct",
        "type": "HammingCodes: Encoded Binary to Integer",
        "attemptsLeft": 10,
        "input": "10100000100001111111101001000100",
        "description": "You are given the following encoded binary string: \n '10100000100001111111101001000100' \n\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\n\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\n Extra note for automation: return the decimal value as a string"
    },
    {
        "server": "taiyang-digital",
        "name": "contract-29521.cct",
        "type": "Merge Overlapping Intervals",
        "attemptsLeft": 15,
        "input": [
            [
                13,
                23
            ],
            [
                8,
                11
            ],
            [
                15,
                20
            ],
            [
                14,
                18
            ],
            [
                22,
                26
            ],
            [
                21,
                31
            ],
            [
                19,
                22
            ],
            [
                9,
                15
            ],
            [
                12,
                15
            ],
            [
                20,
                24
            ],
            [
                8,
                12
            ],
            [
                24,
                31
            ],
            [
                16,
                26
            ],
            [
                2,
                7
            ],
            [
                15,
                17
            ],
            [
                14,
                23
            ]
        ],
        "description": "Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.\n\n [[13,23],[8,11],[15,20],[14,18],[22,26],[21,31],[19,22],[9,15],[12,15],[20,24],[8,12],[24,31],[16,26],[2,7],[15,17],[14,23]]\n\n Example:\n\n [[1, 3], [8, 10], [2, 6], [10, 16]]\n\n would merge into [[1, 6], [8, 16]].\n\n The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second."
    },
    {
        "server": "vitalife",
        "name": "contract-114369.cct",
        "type": "Algorithmic Stock Trader I",
        "attemptsLeft": 5,
        "input": [
            186,
            160,
            2,
            17,
            91,
            109,
            64,
            52,
            196,
            51,
            41,
            172,
            107,
            8,
            157,
            89,
            25,
            131,
            58,
            97,
            153,
            56,
            156,
            177,
            16,
            127,
            130,
            161
        ],
        "description": "You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:\n\n 186,160,2,17,91,109,64,52,196,51,41,172,107,8,157,89,25,131,58,97,153,56,156,177,16,127,130,161\n\n Determine the maximum possible profit you can earn using at most one transaction (i.e. you can only buy and sell the stock once). If no profit can be made then the answer should be 0. Note that you have to buy the stock before you can sell it"
    },
    {
        "server": "powerhouse-fitness",
        "name": "contract-180457.cct",
        "type": "Generate IP Addresses",
        "attemptsLeft": 10,
        "input": "13323920315",
        "description": "Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:\n\n 13323920315\n\n Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.\n\n Examples:\n\n 25525511135 -> [\"255.255.11.135\", \"255.255.111.35\"]\n 1938718066 -> [\"193.87.180.66\"]"
    },
    {
        "server": "univ-energy",
        "name": "contract-557982-Netburners.cct",
        "type": "Total Ways to Sum",
        "attemptsLeft": 10,
        "input": 41,
        "description": "It is possible write four as a sum in exactly four different ways:\n\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\n\n How many different distinct ways can the number 41 be written as a sum of at least two positive integers?"
    }
]