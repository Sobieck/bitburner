[
    {
        "server": "hong-fang-tea",
        "name": "contract-968783-Chongqing.cct",
        "type": "Total Ways to Sum II",
        "attemptsLeft": 10,
        "input": [
            72,
            [
                2,
                7,
                9,
                10,
                11,
                12,
                13,
                14,
                16,
                17,
                18
            ]
        ],
        "description": "How many different distinct ways can the number 72 be written as a sum of integers contained in the set:\n\n [2,7,9,10,11,12,13,14,16,17,18]?\n\n You may use each integer in the set zero or more times."
    },
    {
        "server": "nectar-net",
        "name": "contract-401139.cct",
        "type": "Compression III: LZ Compression",
        "attemptsLeft": 10,
        "input": "MNFQerwPERzhONkIylMk83cIylMk83caaaauGSlk8QkMi6FmnFdgji6Fm73",
        "description": "Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:\n\n 1. Exactly L characters, which are to be copied directly into the uncompressed data.\n 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.\n\n For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.\n\n You are given the following input string:\n &nbsp; &nbsp; MNFQerwPERzhONkIylMk83cIylMk83caaaauGSlk8QkMi6FmnFdgji6Fm73\n Encode it using Lempel-Ziv encoding with the minimum possible output length.\n\n Examples (some have other possible encodings of minimal length):\n &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47\n &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi\n &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035\n &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844\n &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk\n &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91\n &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031\n &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041"
    },
    {
        "server": "avmnite-02h",
        "name": "contract-307979.cct",
        "type": "Subarray with Maximum Sum",
        "attemptsLeft": 10,
        "input": [
            -6,
            -3,
            -2,
            0,
            -8,
            -6,
            -9,
            -8,
            2,
            2,
            -4,
            -2,
            -5,
            -9,
            -1,
            -1,
            1,
            1,
            9,
            -10,
            -10,
            -4,
            -5,
            -9,
            9,
            2,
            -10,
            -3
        ],
        "description": "Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.\n -6,-3,-2,0,-8,-6,-9,-8,2,2,-4,-2,-5,-9,-1,-1,1,1,9,-10,-10,-4,-5,-9,9,2,-10,-3"
    },
    {
        "server": "defcomm",
        "name": "contract-170537-ECorp.cct",
        "type": "Array Jumping Game II",
        "attemptsLeft": 3,
        "input": [
            0,
            4,
            8,
            0,
            1,
            4
        ],
        "description": "You are given the following array of integers:\n\n 0,4,8,0,1,4\n\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \n\nAssuming you are initially positioned at the start of the array, determine the minimum number of jumps to reach the end of the array.\n\n If it's impossible to reach the end, then the answer should be 0."
    },
    {
        "server": "defcomm",
        "name": "contract-395864.cct",
        "type": "Compression I: RLE Compression",
        "attemptsLeft": 10,
        "input": "A55jrr6vvJJm00000055BBTTT66UDnnneeeeeeGGGGGGGGGimmVGGJJJJJJJJJJJJJhmYYYYYYYYYYll66FFeennk",
        "description": "Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.\n\n You are given the following input string:\n &nbsp; &nbsp; A55jrr6vvJJm00000055BBTTT66UDnnneeeeeeGGGGGGGGGimmVGGJJJJJJJJJJJJJhmYYYYYYYYYYll66FFeennk\n Encode it using run-length encoding with the minimum possible output length.\n\n Examples:\n &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c\n &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A\n &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233\n &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)\n"
    },
    {
        "server": "deltaone",
        "name": "contract-151497-OmniTekIncorporated.cct",
        "type": "HammingCodes: Encoded Binary to Integer",
        "attemptsLeft": 10,
        "input": "11000000000000001010100100001111",
        "description": "You are given the following encoded binary string: \n '11000000000000001010100100001111' \n\n Treat it as an extended Hamming code with 1 'possible' error at a random index.\n Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.\n\n Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'\n Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information\n Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit ðŸ˜‰\n Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).\n Extra note for automation: return the decimal value as a string"
    },
    {
        "server": "icarus",
        "name": "contract-424542-NWO.cct",
        "type": "Total Ways to Sum II",
        "attemptsLeft": 10,
        "input": [
            16,
            [
                1,
                3,
                4,
                5,
                7,
                9,
                10,
                11
            ]
        ],
        "description": "How many different distinct ways can the number 16 be written as a sum of integers contained in the set:\n\n [1,3,4,5,7,9,10,11]?\n\n You may use each integer in the set zero or more times."
    },
    {
        "server": "helios",
        "name": "contract-21990.cct",
        "type": "Total Ways to Sum",
        "attemptsLeft": 10,
        "input": 41,
        "description": "It is possible write four as a sum in exactly four different ways:\n\n &nbsp;&nbsp;&nbsp;&nbsp;3 + 1\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 2\n &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1\n &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1\n\n How many different distinct ways can the number 41 be written as a sum of at least two positive integers?"
    },
    {
        "server": "helios",
        "name": "contract-855488.cct",
        "type": "Array Jumping Game II",
        "attemptsLeft": 3,
        "input": [
            3,
            6,
            2,
            0,
            2,
            1,
            2,
            3,
            3
        ],
        "description": "You are given the following array of integers:\n\n 3,6,2,0,2,1,2,3,3\n\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \n\nAssuming you are initially positioned at the start of the array, determine the minimum number of jumps to reach the end of the array.\n\n If it's impossible to reach the end, then the answer should be 0."
    },
    {
        "server": "megacorp",
        "name": "contract-377673.cct",
        "type": "Array Jumping Game",
        "attemptsLeft": 1,
        "input": [
            8,
            1,
            6,
            3,
            6,
            0,
            0,
            10,
            8,
            0,
            2,
            6,
            1,
            1,
            2,
            4,
            0,
            9
        ],
        "description": "You are given the following array of integers:\n\n 8,1,6,3,6,0,0,10,8,0,2,6,1,1,2,4,0,9\n\n Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. \n\nAssuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.\n\n Your answer should be submitted as 1 or 0, representing true and false respectively"
    },
    {
        "server": "univ-energy",
        "name": "contract-216499.cct",
        "type": "Unique Paths in a Grid I",
        "attemptsLeft": 10,
        "input": [
            5,
            9
        ],
        "description": "You are in a grid with 5 rows and 9 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.\n\n NOTE: The data returned for this contract is an array with the number of rows and columns:\n\n [5, 9]"
    },
    {
        "server": "microdyne",
        "name": "contract-242228-OmniTekIncorporated.cct",
        "type": "HammingCodes: Integer to Encoded Binary",
        "attemptsLeft": 10,
        "input": 33283024047570444,
        "description": "You are given the following decimal Value: \n 33283024047570444 \n Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:\n  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of\n 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.\n The answer should be given as a string containing only 1s and 0s.\n NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.\n NOTE: The bit at index zero is the overall parity bit, this should be set last.\n NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.\n\n Extra rule for encoding:\n There should be no leading zeros in the 'data bit' section"
    }
]